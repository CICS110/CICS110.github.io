[{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Welcome students to our course on introductory programming! Whether you are brand new to programming or have some experience under your belt, we are excited to have you join us on this journey. In this course, you will learn the fundamental concepts and skills needed to become a successful programmer. You'll start by learning how to write simple programs in a programming language, and then gradually build up your knowledge and abilities as you progress through the course. Along the way, you'll also have the opportunity to apply what you've learned by completing interactive exercises and projects. We know that learning to program can be challenging at times, but we are here to support you every step of the way. Our experienced instructors will be available to answer any questions you may have, and your fellow students will also be a valuable resource as you work through the material. We are excited to see what you will accomplish and where your newfound programming skills will take you. Let's get started!","keywords":""},{"title":"Test","type":0,"sectionRef":"#","url":"/about","content":"Test aaaaaaa","keywords":""},{"title":"tt","type":0,"sectionRef":"#","url":"/assignments","content":"tt","keywords":""},{"title":"Welcome!","type":0,"sectionRef":"#","url":"/guides","content":"Welcome! Welcome to the guides section of the CICS 110 website. These guides exist to provide you with a reference for the topics we cover in class. If you have any questions about the guides, please contact an instructor. The guides can be found in the sidebar on the left.","keywords":""},{"title":"Common Errors","type":0,"sectionRef":"#","url":"/guides/common-errors","content":"","keywords":""},{"title":"NameError​","type":1,"pageTitle":"Common Errors","url":"/guides/common-errors#nameerror","content":"NameError occurs when we attempt to reference a variable name that has not been declared. This usually occurs because We're referencing a variable that doesn't exist yetWe're referencing a variable that does exist, but we misspelled a reference somewhere Remember that python runs line by line, top to bottom (once we start writing our own functions this isn't strictly true), so a variable has to be declared above where you first attempt to use it. In rare cases, a variable can get deleted or &quot;garbage collected&quot; before it is called, and this error can occur, but this is extremely rare in Python specifically. This case is more common in almost any other language, like C or Java, where variables declared inside a loop are deleted/garbage collected once the loop finishes. For example for i in range(3): print(i) print(i)  will print 0\\n1\\n2\\n3\\n. In C, the equivalent code for (int i; i &lt; 3; i++) { printf(&quot;%d\\n&quot;, i); } printf(&quot;%d\\n&quot;, i);  will not even compile, because i is deleted, or &quot;garbage collected&quot;, after the loop finished. Keep this in mind in the future if you switch to another language. "},{"title":"IndexError​","type":1,"pageTitle":"Common Errors","url":"/guides/common-errors#indexerror","content":"IndexError means we are trying to access an element of an indexed collection, like a String or list, but that index is outside the range of the collection. For example, if I have the String 'test', e is the 2nd character at index 1. However, if I try to access index 4, that would mean accessing the 5th character of the String, which doesn't exist. Therefore attempting to access index 4 will result in an IndexError: &gt;&gt;&gt; 'test'[4] Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; IndexError: string index out of range  "},{"title":"EOFError​","type":1,"pageTitle":"Common Errors","url":"/guides/common-errors#eoferror","content":"EOF stands for &quot;end of file&quot;. If the Python interpreter unexpectedly reads through the end of a file, it returns an EOFError. This typically happens in one of two ways: The Python interpreter hits the end of your Python source file unexpectedly. This can happen if you write a loop with no content in it (more recent python versions return an IndentationError, but zyBooks will often return EOFError. If you'd like to know why, make a Piazza post asking about it :D)Your Python tries to read more input than it is given. For example, say your python code checks the first 5 lines of a file. If the file has 4 lines total, Python tries to read the 5th line and sees the EOF character. This is unexpected behavior, so it returns an EOFError. "},{"title":"Guide to Exams","type":0,"sectionRef":"#","url":"/guides/exams","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#overview","content":"In-class exams will be held during the lab session. Lab attendance is required to complete the exam. All exams are hosted on Moonami/Moodle, and you will need a laptop to take the exam. Midterm exams are 50 minutes long, but you are allowed to leave once you are finished. It is your responsibility to ensure your device is working when the exam starts, you don't want to spend the first 10 minutes connecting to the internet! "},{"title":"Requirements​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#requirements","content":"To take the exam, you must attend the lab session you are enrolled in. If you cannot make the lab time you have enrolled in, it is your responsibility to reach out to your Instructor at least a week ahead of time to make accommodations. It is your responsibility to Bring your own laptop and uCard.Ensure your laptop is charged when you arrive at the exam. If you laptop does not hold a charge, you are responsible for bringing a charger, but we cannot guarantee you will be able to sit near a functioning outlet. Ensure your laptop is connects to Eduroam, and gets a connection in lab room. If you do not own a laptop, your laptop is not working, or your laptop is out for repairs: Borrow a friends laptop for the lab period.Use the library's laptop borrowing program. There are a limited number of laptops, but we rarely see them run out. Go to the Learning Commons Desk in the lower level of the W.E.B. Du Bois Library to check on their availability. Laptops are 3 day loans for free. There is a $10/day late return fee up to $50.Use another internet connected device. A phone is not advisable, but a tablet should suffice. "},{"title":"Preparing for the Exam​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#preparing-for-the-exam","content":"One week prior to every exam, an announcement will be made detailing Exam Coverage: the zyBook chapters and lectures that the exam questions testExam Structure: the types of questions you can expect, maybe with an estimate of how many of each You will be able to freely navigate between the questions during the exam. The Supplemental Instructor (SI) for the course will usually host an exam review session the week of the exam. They will have not seen the exam, but are prepared to help you study for the exam. "},{"title":"Taking the Exam​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#taking-the-exam","content":"Before you start the exam, we ask that you close all other tabs and windows. This includes, but is not limited to VSCode/other editorszyBooksPiazzaOnline resources Once you have completed the exam, you will be asked to show course staff your uCard. Staff will make sure you have submitted your exam, and check you out. "},{"title":"Academic Honesty​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#academic-honesty","content":"During the exam, the expectation is that you do not leave the exam window. You should not need to tab out during the exam. Use of your laptop or a secondary device during the exam to view textbooklabsonline materialsinstant messages or email are all academic honesty violations, and may lead to you getting a zero on the exam or in the course. Do not do it. It is not worth it. "},{"title":"Kobi's Design Doc","type":0,"sectionRef":"#","url":"/guides/design_doc","content":"","keywords":""},{"title":"Things to ask:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#things-to-ask","content":"How much should we meet? Currently is once a week. I think twice a week would be better since we are continually creating stuff. Since we are making stuff, we often will need to discuss next steps so we stay in sync. We also need to make sure that what we create is good, and I imagine the way we do this is by meeting and sharing what we did. Meeting twice a week would allow us to have more discussion about what we are doing, and would allow us to catch mistakes or miscommunications sooner. What do people's winters look like? I have something from the 9th-11th, anyone else have things they have planned in advance? What are goals for the winter? Add to this document the results Goals for a slide template Black/White was mentioned, anything else? Should we make an Agenda before each meeting? If we want to, put all of this on it "},{"title":"Units:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#units","content":""},{"title":"1. Foundation of programming​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#1-foundation-of-programming","content":"Notes:​ Learn Modules in a Lab? I think it would be a good lab assignment to learn how to use the math or the random library. Goals:​ Introduce the course and instructorThe model of a computerComputational thinkingThe basics of python Content:​ Introduction to the course and instructorModel of a computerComputational thinking (how to read a program)Literals - ints, floats, stringsExpressions (arithmetic only: +, -, *, /, //, %, **, parenthesis) Order of operationsint vs float VariablesMethods on all literals+variables - type, idMethods on specific literal types (str, int, float) "},{"title":"2. Data types​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#2-data-types","content":"Goals:​ Sequence typesother types (dictionaries, sets but not Booleans or None)Mutability and Ordering and what this means on a lower level (memory/model of computer)Basic operations on these types Content:​ Sequence Types: Lists, Tuples, StringsIndexing, len, +, *, slicingMutability in the global frame - related to the model of a computerList and String methodsDictionaries and Sets, and their operations "},{"title":"3. Conditional Control flow​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#3-conditional-control-flow","content":"Notes:​ For all pieces of control flow, there will need to be multiple practice assignments involving going to/from diagrams. This is in addition to practice problems. Goals:​ Introduce boolean logicIntroduce if elif else statementsUnderstanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Content:​ Booleans - True, False, and, or, notComparison operators - ==, !=, &lt;, &gt;, &lt;=, &gt;=Other ways to make booleans - is, is not, in, not inIf statements - if, elif, else (nested if statements)Detecting ranges of values - if 0 &lt;= x &lt;= 10Making Control Flow Diagrams "},{"title":"4. Looping Control Flow​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#4-looping-control-flow","content":"Notes:​ For all pieces of control flow, there will need to be multiple practice assignments involving going to/from diagrams. This is in addition to practice problems. Goals:​ While and for loops (with nesting)Understanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Break and Continue and how they relate to control flow diagramsCommon Mistakes with Loops Infinite loopsForgetting to increment/decrementForgetting to change the condition List and Dictionary Comprehensions Content:​ While loops - Extension of if statements Do not go over else for while loops Break and Continue (in the context of while loops)For loops - for, range, in Do not go over else for loopsGo over break and continue in the context of for loops Comprehensions List ComprehensionsDictionary ComprehensionsTernary Operator for Comprehensions Miscellaneous Zip, Enumerate "},{"title":"5. Files and Modules​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#5-files-and-modules","content":"Goals:​ What is a module and how to import itUnderstand standard modulesIntroduce the idea of files and how they relate to the model of a computerGet students to write and read text from filesWhat are csv files, and how to read and write them using the csv module Content:​ Importing a moduleUsing more complex modules (time, os, sys)What is a fileOpening and Closing a fileReading and Writing to a filecsv module Reading and Writing to a csv fileDictReader and DictWriter "},{"title":"6. Functions​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#6-functions","content":"Goals:​ Understand that a function is a self contained piece of logic (high level)Understand that a function is a block of code that can be called multiple times (low level) and that it can save time while programmingUnderstand that a function can take in parameters and return a valueUnderstand None and how it relates to functionsBasics of recursion (base case and recursive case)Understanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Introduce Making a Module and importing itIntroduce concept of main python file Content:​ High level analogy of a functionDefining a function that receives no parameters and only prints Calling a function Defining a function that returns a value difference between print and returnReturning tuples as a way to return multiple values Unpacking tuples None What is it - a special value that represents nothingHow it relates to functions - functions that do not return anything return NoneWhy it is important - it is important to understand that functions always return somethingHow to check if a function returns None or a value is None Defining a function that receives parameters Positional parametersKeyword parameters (Not sure if needed)Default parametersVariable number of parameters (Not sure if needed) Making a module What is a moduleHow to make a moduleMain python file concept Function documentation Documenting the type of parametersDocumenting the type of return valueDocStrings in generalHow to access the documentation of a function (in vscode for example)How to read function documentation Recursion (basics only) Base caseRecursive caseControl Flow "},{"title":"7. Miscellaneous​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#7-miscellaneous","content":"Notes:​ This unit will be a catch all for anything that is not covered in the previous classesLikely 1 class period each (except classes which will be 2-3), and an associated practice assignment Goals:​ Object Oriented Programming Introduce the concept of a classWhat is a class conceptually (high level)What is a methodWhat is an attribute Event Driven Programming Not sure what this is yet. Need to discuss with Tim. If event driven programming is async...await, see next note. Otherwise I will need to research this.Note: Some languages have a built in concept of events, like js's promises. Python does not have this. But, there are libraries like asyncio, must be pip installed, that can be used for async...await keywords. Introduce the concept of a library What is a libraryPip and how to install a libraryHow to import a libraryHow to use a library Exceptions What is an exceptionHow to handle an exception (try catch)Common exceptions Content:​ Object Oriented Programming High level analogy of a class (object)Defining a classInstantiating a class and __init__ methodDefining and accessing attributesDefining and calling methodsOverriding built in methods (str, mul, etc) Event Driven Programming See notes in goals section Libraries What is a libraryPip and installing a basic library (matplotlib maybe?)Importing a libraryUsing a libraryLooking up documentation for a library Exceptions What is an exceptionHow to handle an exception (try except)Common exceptions  "},{"title":"What I'm Currently not covering​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#what-im-currently-not-covering","content":"(Unfinished, need ZyBooks chapters 7-13)​ String Arithmetic Stuff like string concatenation, string multiplication, etc. I think this would be good for an introductory Lab or assignment to get them used to looking things up Type Casting I think I might want to include this, but I forgot about it initially. It might be good for a lab, but I might just shove it in in lecture 3 or 4 f-strings Another good thing for an introductory lab or assignment. Students didn't really use this (and usually forgot about it) so I think it would be good to have them use it in a lab or assignment to practice it/ hopefully remember it. Compound Operators (zybooks 2.6) I'll cover this in the while loop section, but not when it comes in the zybooks (unit 2)This is stuff like +=, -=, etc. It seems like another thing I could mention in class, but I'll already be overwhelming them with new stuff at that point. I think it would be good for a lab or assignment, or as a trick they learn after they write z = z + 2 a bunch of times. The number representation of a character (zybooks 2.10) This seems really cool, but it would just be another thing I'm throwing at them. The biggest complaint I got last semester was that there were too many things thrown at them, and they forgot a bunch because they never used them. I think this would be good for a lab or throughout a big assignment, but not in class. named tuples (zybooks 3.3) I've never used this. My friends who work with python every day have never used this. I don't think we should include this. Can we just skip it? Binary Numbers (zybooks 3.9) I think this is too much detail for an intro class. This would never be needed in python realistically. We could expose it for a lab assignment or exercise, but if I include it in class students will just forget about it. It also doesn't really fit in with the rest of the unit, and we didn't cover it last semester. Comparison Chaining (zybooks 4.4) Just found out about this while looking at the ZyBooks. It's pretty cool, apparently you can do 5 &lt; x &lt; 10 and it will check if 5 &lt; x and x &lt; 10. I think this would be good for a lab or assignment, but it's just another forgettable detail. For in strings (zybooks 5.5) I think this is a good thing to include in a lab or assignment, but I don't think it's necessary to include in class. It's just another thing to throw at them.  "},{"title":"What I'm covering but definitely needs to be practiced​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#what-im-covering-but-definitely-needs-to-be-practiced","content":"(Unfinished, need ZyBooks chapters 7-13)​ Everything! Well not really, but here are a few things that I think need to be practiced a lot more than I can in class Basic Datatype methods (Methods on Strings, ints, floats, Sets, Lists, Dictionaries, Tuples) I think we should have a lab or assignment where students have to look up and use a bunch of string, int, and float methods. I think this would be good practice for them to get used to looking things up. Also, introducing a grid of them in a class doesn't really help them remember them.There are some basic things that will be included (indexing for example) but there are a bunch of string methods that they will only see in a grid of string methods, and they will forget about them unless they need to use them in practice. Floats vs Ints They will need practice on this. Just teaching them the difference isn't enough. They need to practice it. Lists and Modulo Modulo is useful for indexing lists so you don't index out of bounds. This would be good for an exercise Using the math and random modules I expose them to this in the first week, but then don't touch it for a while. It would be good to use them occasionally in exercises so they don't forget about them. Boolean Arithmetic I cover and, or, not and stuff, but in practice (especially for the problems they see which are introductory) they don't usually need them. We should either have the exercises require complex boolean arithmetic, or have them straight up write code that matches a boolean arithmetic expression or something. While loops All sorts of while loops with different step conditions. For loops Looping through Lists I will expose in class, but dictionaries, sets, tuples, strings, and other things will need to be practiced. Lists should also be heavily, if not the most heavily, practiced. Reinforce How Range works This is important to reinforce Comprehensions This is a really useful feature, please give them a lot of practice with this. They shouldn't just practice list comprehensions, they should practice dictionary and set comprehensions as well. But, probably not generator comprehensions since that's a weird can of worms. Enumerate and Zip I'll cover, but they are pretty useful (especially enumerate) so they should be practiced a lot. Nested Loops Needs practice before they can understand. Designing function signatures Students struggled with identifying what parameters a function should take in. They need practice with this.They should also use docstrings to document their functions so they can list the return type and parameter types.Or at least whatever this is called: (I think this is called a function signature, but the docstring is the documentation) def is_num_and_str(num: int, string: str) -&gt; bool: Expose them to function stubs (the above syntax) so they can write the function signature before they write the function body too. This will help them design the function signature. Print Vs Return Need to practice. Or, more likely, realize when they are printing and need to return  "},{"title":"Class timeline + Overview:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#class-timeline--overview","content":"Budgeting 21 classes (1 class = 75 minutes) underbudgeting so things can be moved around if needed. Note: Units 3 and 4 will need a LOT of practice work so the content can sink in. #\tUnit\tContent1\t1\tIntro + Model of Computer + Computational Thinking 2\t1\tLiterals + Hardcoded Expressions 3\t1\tVariables + Object functions + Literal Methods 4\t2\tLists/Tuples/Strings + Operations + Mutability 5\t2\tDicts/Sets + Operations + Practice 6\t3\tBooleans + if 7\t3\tif..elif..else + Control Flow 8\t3\tPractice Day: Control Flow + Debugger 9\t4\tWhile loops + Break/Continue + Control Flow 10\t4\tFor Loops + Control Flow + Practice 11\t4\tComprehensions + Enumerate/Zip + Practice 12\t5\tImporting modules + Standard Module Practice 13\t5\tWhat is a file + Opening/Closing + Writing/Reading Text 14\t5\tWhat is a csv file + csv module/DictReader + practice 15\t6\tWhat is a function + Why + Functions without parameters + None 16\t6\tFunctions with Parameters + Control Flow + Practice 17\t6\tCustom Modules + Documentation + Recursion 18\t7\tOOP philosophy + Class analogy + Class with constructor + attributes/accessing/dictionary comparison 19\t7\tMethods + Overloading + Practice 20\t7\tWhat is Pip + Installing a library + Using the library + looking up documentation 21\t7\tWhat is an Exception + Exception Vs Error + Types of Exceptions + Try/Except  "},{"title":"Labs and Assignments​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#labs-and-assignments","content":"Note: I do not know what Labs/Assignments should look like. These are just my preconceived notions of what I expect them to be (mainly so I remember to ask in a meeting if these are accurate/require any changes). "},{"title":"Assignments​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#assignments","content":"I imagine there will be weekly assignments. Each assignment will contain: 5 Exercises These will be pretty straightforward (5-15 lines of code each)They will have documentation for each exercise, and may introduce a simple concept or method on a data type. For example, there may be an exercise that introduces the string method: .toLower() which makes all letters lowercase. 2 Challenges These will be more complex (20+ lines of code, or using multiple concepts layered etc.)Will have documentation and likely will introduce a more complex methodRequire a complex control flow These should also feel (more so than the exercises) to be a meaningful task. I imagine some exercises will just be do X, without the context of why they are doing X. The challenges should have context, and should be a meaningful task. "},{"title":"Labs​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#labs","content":"Each week will have a lab unless there is an exam (do we have exams?) What I imagine a lab is: Introduces a new concept: Should be a new concept that is not directly covered in class. I want this because there are a bunch of concepts that I want to cover, but if I were to introduce them briefly in class only students will forget them. It will also make class periods more confusing to cover one-off methods or concepts, but they could totally be learned in the lab. Collaboration: Students should work in teams of 2 (3 if there is an odd number of people). According to people in 121, 4 is too many, so defiantly split to 2 groups of 2.There should be periodic times in the lab where students should check in with a TA or UCA in the lab. This is to: Make sure they are on the right trackMake sure all group members know whats going onEncourage discussion (hearing people talk also encourages discussion)  "},{"title":"Exam(s)​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#exams","content":"This is just my thoughts: We had exams in the fall. However, I'm not sure about the value of exams. The purpose of an exam, from my understanding, is to verify how much each student understands about the topic. Students will have weekly assignments, and will have a lab every week. I think that the assignments and labs will be a better indicator of how much each student understands. Students who don't understand a concept will struggle with that week's exercises, challenges, and Lab. This lack of understanding will therefore be present in the grade. Additionally, most of the exam questions we had in the fall were very pinpointed. There were many questions on specific edge cases. This is what most CS exams end up with since a question needs to be specific to have a multiple choice answer. However, this also means that grades on the exam are very dependent on the student's ability to memorize edge cases. I don't think this is not a good indicator of how much the student understands the topic. On the other hand, having a lab I think is a better environment to evaluate this. In a lab, students write a program. This program is a good indicator of how much the student understands the topic. This is because the program is a direct result of the student's understanding of the topic. If the student doesn't understand the topic, they will struggle to write the program. If they do understand the topic, they will be able to write the program. A worry that could exist with this is that we are testing the group of 2-3 student's knowledge instead of an individual student. However, I think this is a good thing. In the real world, students will be working in groups. This is a good way to prepare them for that. Additionally, if we feel that the groups are inhibiting our ability to determine how much students understand, we can just make the lab sections that would have been exams, into labs without groups.  "},{"title":"The Website​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#the-website","content":"Note: This is just my thoughts on the website (mainly so I don't forget). This just reflects my understanding of what we want on the website. So if something should be here, let me know because I probably forgot. Also, if something should not be here, let me know because there is probably a misunderstanding on my part. Schedule I wanted the office hours on the website so it was easy to view Potentially with a react calendar component I wanted the class schedule with topics for each class period So students could get an understanding of what we were going to cover Slides + In class content I wanted the slides on the website so students could view them at home Embedded PowerPoint slides or google slides Code used in class Doesn't need to be the result of live coding in class (but that would be cool)Could be prepared in advance (an answer key for in-class activities basically)Want to add functionality to run python code in the website. Doesn't look that bad and would be cool. For Me: Lookup live-brython again Assignments: Exercises + Challenges Should have the documentation on the websiteShould store the base code (if there is any) on the website Labs Should have the documentation on the websiteShould store the base code (if there is any) on the website Guides Wanted to address common issues (like how to install python) with guides on the websiteWanted to go over topics (like how to define a function) with guides on the website so it was easy for students to reference People Wanted to have a page with information on the instructors, TAs, and UCA's Picture, name, email, office hours, etc. Course Information Wanted to have a page with information on the course Course description, course goals, Unit overviews, etc. Syllabus Helpful Resources Wanted to have a page with helpful resources outside of the course Information on SI sessions, helpful youtube channels, tutoring from CICS 298A, etc. Announcements Wanted to have a page with announcements Important announcements, reminders, etc. Forms Wanted to have a page with forms Feedback form, Extension form, etc.  "},{"title":"Each Week: (Unfinished)​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#each-week-unfinished","content":" "},{"title":"Class 1:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#class-1","content":"Prior: N/A​ Goal: Introduction, Introduce the Model of a Computer, First Program Demo​ Content: Introduction - Introduce InstructorSyllabusCourse GoalsModel of a Computer Goal: Build up to understanding each line of the first programHas 5 Parts: Instructions, Memory, Input, Output, and Processor Introduce Computational Thinking Goal: Build up to understanding how to read the first programIntroduce how to read a program (top to bottom)Analogy that a program is like a recipe First Program Demo Goals: Identify how each line of the program relates to the model of a computer. Understand how to read a program. Program: Takes in user's name, stores it, and then prints out hello, {name}Students should not understand the code entirely. Specifically, they won't understand the storage of the name in memory. Tell them that we will go over the details more later, and just brush over it saying that it is storing the name in memory, and it can be referenced with the variable (think math relation).  "},{"title":"Class 2:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#class-2","content":"Prior: Students should have downloaded and installed Python​ Goal: Expressions with literals, a program to do hardcoded math​ Note: I want to do expressions before variables. I had many students that struggled to realize that variables stored the result of an evaluated expression. I want to introduce variables after expressions with the goal of having the students understand why they might want to store the outputs of lines of code. Content: Review the first program Goal: Reinforce the idea that a program is a recipe and that each line of code interacts with the model of a computerHave students identify the parts of the model of a computer that each line of code interacts with, and walk through the program line by line again Literals Goal: Introduce the idea of literals to build up to using them in hardcoded expressions Starting from a model of a computer: Introduce the idea of a literal as a value that is not stored in memoryGive examples of literals: 1,2,3 &quot;hello&quot; Don't introduce types yet (overcomplicates things and not needed for goal) Diagram of literals in memory Activity: Printing Literals Goal: Get students used to making a file and coding in it. Have them print out literals Have students make a file (have them each pick their own name)Have them print out a literal for their nameHave them print out a literal for their favorite foodHave them print out a literal for their favorite numberHave them print out a literal for their hobby (what they like to do in their free time)After they have done this, and have it working, have them show their neighbors to foster discussion and as an icebreaker Hardcoded Expressions Goal: Introduce Operators to form hardcoded math expressions Introduce operators: +, -, *, /, ** (don't do modulo or floor division yet so they can draw parallels to math)Introduce parenthesis, and how they can be used to change the order of operationsLive Code: Instructor writes out hardcoded expressions and evaluates them. Things like 1 + 2, 1 + 2 3, 1 + 2 3 / 4, etc. Closing Activity: Evaluating a complex math problem Goal: Teach students that python can be used to evaluate complex math problems Put 2-3 complex math problems on the board with 5 digit numbers and stuff like thatHave students evaluate the problems, tell them they can do it by hand, or with python (they will quickly realize it will be easier to do it with python)Have them compare their answers with a neighbor to make sure they are accurateGo over the problems and live code the solutions  "},{"title":"Class 3:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#class-3","content":"Prior: Students should understand literals and expressions​ Goal: Introduce variables, assignment, input, then have them make write a program that stores and uses input​ Content: Review Hardcoded Math Expressions Goal: Reinforce the idea that python can be used to evaluate complex math problems Have students evaluate new problems, tell them they can do it by hand, or with python (they will quickly realize it will be easier to do it with python)Have them compare their answers with a neighbor to make sure they are accurateGo over the problems and live code the solutions Variables Goal: Introduce the idea of variables as a way to store the result of an expression. Introduce how variables are stored in memory (Model of a Computer)  "},{"title":"Concepts: (Unfinished)​","type":1,"pageTitle":"Kobi's Design Doc","url":"/guides/design_doc#concepts-unfinished","content":"Model of a Computer​ Has 5 Parts: Instructions, Memory, Input, Output, and ProcessorStudents should be able to identify how each line of code interacts with the model of a computer Computational Thinking​ Students should be able to identify how to read a program (top to bottom) "},{"title":"Getting Unstuck","type":0,"sectionRef":"#","url":"/guides/getting-unstuck","content":"","keywords":""},{"title":"How to start​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#how-to-start","content":"Sometimes the hardest part of coding, especially when we're learning a language for the first time, is figuring out where to even start. There are two main steps to writing successful code: Developing an algorithm to solve the problemFiguring out how to code our algorithm "},{"title":"Example​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#example","content":"Let's say I give you three numbers, and ask you which of the three is the smallest. For example, I give you the numbers [3,7,1], and you need to determine somehow that 1 is the smallest. First, we develop an algorithm: Compare the first two numbers, and keep the smaller of the two. Compare the two remaining numbers, and tell me the smaller of the two.  With our [3,7,1] example, we first compare 3 and 7. 3 is smaller, so we throw out 7. Then we compare 3 and 1, and say &quot;1 is smallest.&quot; Now that we've developed an algorithm, we just have to translate our algorithm into Python code. The easiest way to do this is to take the algorithm you've written, and put it in your source file as comments: # 1. Compare the first two numbers, and keep the smaller of the two. # 2. Compare the two remaining numbers, and tell me the smaller of the two.  and then writing our code in between the comments: # 1. Compare the first two numbers, and keep the smaller of the two. smaller = min(number1, number2) # 2. Compare the two remaining numbers, and tell me the smaller of the two. our_min = min(smaller, number3) print(f'{our_min} is smallest.')  "},{"title":"Asking for help​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#asking-for-help","content":"If you are stuck with how to start, Identify which step you are having trouble with. Are you having trouble figuring out how to solve the problem, or are you stuck on how to translate your algorithm into source code. Formulate a specific question about what you need help withMake a Piazza post, or ask for help in Office Hours Step 2 is by far the most helpful for us. If you say &quot;I am stuck on Todo 2&quot;, we have to essentially walk you through this process to figure out how to help you. Questions we'd love to answer are I'm having trouble with developing an algorithm to solve Todo 2, specifically with x.I know how to solve Todo 3, but I'm having trouble converting this step of my algorithm into Python code. "},{"title":"Stuck in the Middle​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#stuck-in-the-middle","content":"If you get stuck in the middle of coding a section, there are often two things that can be causing the block: You aren't sure what the next step in your algorithm is You aren't sure how to convert the next step of your algorithm into code If you're finding yourself stuck because you don't know the next step in your algorithm, take a break from coding and try to write out your entire algorithm. Psuedocode and control-flow diagrams are both very useful in outlining your full algorithm. In either case, if you're still stuck, see the Asking for Help section above. Another reason you can get stuck in the middle of a section is that you have come up with a solution, but are stuck on how to write an efficient or &quot;clean&quot; solution. Our suggestion here is that you either Finish your current implementation, and then go back and tidy up specific sections.Restart entirely. Run through your algorithm top to bottom before you start to code anything, and look for things you can fix.  The first suggestion often works better if your algorithm is solid, but you weren't quite sure the best way to implement one part of the algorithm. The second suggestion is better for cleaning up an inefficient algorithm. tip This is not something that goes away! Even as advanced programmers, we will get halfway through coding a section, and think Well, I know how I can finish this function, but it's going to end up really messy. Do I restart, or will this be manageable to tidy up later? This is a balancing act that you will get better at handling the more complicated problems you tackle. "},{"title":"Compilation Problems​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#compilation-problems","content":"Once we're done coding, there are two main types of errors we can get, Compilation or interpretation errors: the source code we've written isn't valid PythonRuntime errors: our source code is valid, but the code performs an unexpected action while running In VSCode for Python, there is a program called the linter. The linter reads through our code, looking for syntax or style issues. How to fix a problem detected by the linter will obviously depend on the problem, but the linter broadly categorizes problems. VSCode will display issues detected by the linter by drawing a squiggly line under the problematic code segment. The color of the squiggly line will change depending on what type of problem was detected: A red underline signifies an error. The linter will produce an error if thinks there is a bug in your code. A green underline signifies a warning. Warnings mostly appear under functions names we have misspelled, under variables we declare and never use, or under variables we attempt to use before they are declared.A blue underline signifies information. In python, this usually means the code segment will run fine, but is bad practice, or is &quot;old&quot; python. In any case, if you hover over the underlined code, the error, warning, or information message will appear, often times indicating what you need to fix:  info What your linter considers an error, warning, or information will depend on what linter you install. Find more information on linter messages here. The VSCode Python extension uses Pylint by default. tip The underline colors listed above are the default colors. Your theme may change the color of the underlines. If you are red-green or green-red color deficient, I highly recommend changing your warning underline color from green to a different color. I use yellow. For a guide on how to do change your warning colors, see the Change Linter Colors guide. "},{"title":"Unexpected Errors​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#unexpected-errors","content":"Although the linter will detect many errors, there are some errors that the linter will not detect (at least by default). For example, say we have the following code: example.py text = input(&quot;What would you like to type?\\n&quot;) third_character = text[2] print(third_character)  First, we get some input string, and store it in text. Then, we get the character at index 2 of text (the third character), and store it in third_character. Finally, we print third_character out. As written, this code will result in zero messages from the linter. However, this doesn't mean nothing can go wrong. What if I just say Hi? There's only two characters, so happens when we try to access the third character? In Python, we will get the following message back: Traceback (most recent call last): File &quot;/path/to/example.py&quot;, line 2, in &lt;module&gt; third_character = text[2] ~~~~^^^ IndexError: string index out of range  This is an error message. This is essentially Python's way of saying, &quot;Something unexpected just happened, here's the problem we identified and what we were doing when it happened.&quot; More specifically this is what's called a traceback: Python has &quot;traced back&quot; it's steps to figure out: What happened?Where are we? What file are we in, and on what line? Are we in a function call?What steps did we take to get here? Did we make multiple nested function calls? If so, what function calls did we make? The first line of the error message should always read Traceback (most recent call last):  This line identifies an error occurred, and tells us that, if the error lists multiple function calls, the most recent function call is listed last (in other words, the problem happened in the last line listed). Next we have a series of code snippets of the form  File &quot;/path/to/example.py&quot;, line 2, in &lt;module&gt; third_character = text[2] ~~~~^^^  Each of these snippets lists The snippet itself, in this case third_character = text[2]Where the code lives, File &quot;/path/to/example.py&quot;, and on what line, line 2If the snippet is in a function, denoted as in function_name, or not in a function, denoted as in &lt;module&gt;. Code not written in a function is sometimes called &quot;top-level&quot; code. In this instance, the error message also tells us that the error is specifically in the attempt to access text[2], and not in the assignment of text[2] to third_character. In this case, we'd say that &quot;line 2 throws an error&quot;, or &quot;accessing text[2] throws an error.&quot; Finally, the error message will list the name of the specific error that occurred. In this case, we have IndexError: string index out of range  which indicates that we're attempted to access the element of text at an index that doesn't exist. See the Common Errors guide for tips on how to approach various specific errors. "},{"title":"More complicated errors​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#more-complicated-errors","content":"With more complicated code, your error might have multiple successive snippets listed. For example, if we make a function call, and then the error occurs inside the function call, like in: print-name.py def print_name(name): print('My name is ' + my_name) print_name('John')  Python will print out the location of each nested function call made, then the location of the code snippet where the problem happened. In this instance we get the following error message: Traceback (most recent call last): File &quot;/path/to/print-name.py&quot;, line 4, in &lt;module&gt; print_name('John') File &quot;/path/to/print-name.py&quot;, line 2, in print_name print('My name is ' + my_name) ^^^^^^^ NameError: name 'my_name' is not defined  There are two snippets: first the function call print_name('John'), which is listed as in &lt;module&gt; since it's &quot;top-level&quot; code, and then inside the function call we have print('My name is ' + my_name), which is in a call to the print_name function, so it is listed as in print_name. This gives us a sense of what the function call stack looked like at the time of the error, since each successive snippet is a nested function call, with the last line being where the error occurred. "},{"title":"Conditional Errors​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#conditional-errors","content":"It's possible that you sometimes get an error when you run your program, but not always. In our first example, giving an input of 3 characters or more will not cause an error, because there would be a third character to access. However, sometimes our program will return an error, like when we input Hi. If you only get an error sometimes, but not always, you should figure out Is the error always in the same place?Is it always the same error message?Is the code snippet using some sort of user input? Probably the most common error to get sometimes, but not always, is an IndexError, especially if you're accessing an index of user input. Say we're assuming that a user is going to give us a four digit binary number, and we want to check if the one's digit is less than 6. A bad way to check this would be number = input(&quot;What 4-digit number would you like to check?\\n&quot;) digit = int(number[3]) print(digit &lt; 6)  Why is this bad? Well, what happens if the user gives us a three digit number? number[3] will throw an IndexError. If you don't always get the same error, or the error isn't always in the same place, you likely have multiple errors. It's possible that one of them always happens, and the other only happens sometimes, but happens before we get to the error that is always there. "},{"title":"Unexpected Output​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#unexpected-output","content":"Say our code has run without any error, but the code isn't doing what we want it to. For example, your program runs successfully, but prints the wrong thing. This is where we largely get into the realm of debugging. Getting rid of error messages is also debugging, but it can be much easier to guess what might be going wrong from an error message than it is from an incorrect, but error-free output. There are four main ways of debugging: Rereading your source code and looking for bugsPutting print statements in various places to check values of variables or what parts of your code are/aren't being executedUsing the debuggerWriting unit tests "},{"title":"Manual Debugging​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#manual-debugging","content":"Rereading your source code is probably the easiest way to find small errors, so it's highly recommended in the beginning when your code is short. The main downside of this is that, if you've been coding for 2+ hours straight, it's often hard to look for errors in the code you've been staring. If you've ever written a paper and come back the next day to find lots of grammatical or spelling errors, this is the same idea. It can get hard to spot errors in code you've spent a lot of time looking at. tip Take a break before you start debugging. Seriously. If you've been coding for a couple hours straight, implementing your algorithm and getting rid of error messages, the best thing to do is take a quick, 30 minute break and come back to it, especially if you're under a time crunch. "},{"title":"Print Debugging​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#print-debugging","content":"Print debugging, sometimes referred to as &quot;caveman debugging&quot;, is the most brute force approach. It consists of just putting print statements in various parts of your code to check both what parts are/aren't running and values of variables. Print debugging is effective for small projects where you have a good idea of what is going wrong, or finding what region of your code has the problem. However, if you don't quickly find what is wrong, have a multi-file project where many things could be going wrong, or have multiple underlying problems all at one, print debugging can take a lot of time. You might spend hours changing values of print statements, commenting prints out or back in, and running your code over and over again after each change. "},{"title":"The Debugger​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#the-debugger","content":"As the name suggests, the debugger is the most powerful tool for finding bugs in your code. Like how the Python interpreter runs your code line by line, the debugger lets you step through your code's execution line-by-line. As your code runs, the debugger will show you What local variables are declared and their valuesThe state of the function call stackTerminal output as it happens The debugger lets you put break points at specific lines in your code, letting you run the program up to a certain point, and then pausing execution, giving you a snapshot in time of how your program is running. You can also set conditional breakpoints, like &quot;stop at this line only if i is 3&quot;. For this reason, the debugger is essentially a strictly stronger version of print debugging. For a tutorial on how to use the debugger in VSCode, see the debugger guide. "},{"title":"Print Debugging vs the Debugger​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#print-debugging-vs-the-debugger","content":"When it comes to choosing between print debugging vs using the debugger, print debugging is useful if you have a good hunch about what is wrong, and just need verification where things are going wrong. For computer science and informatics students planning on taking more programming languages in the future, we highly suggest you learn to use the debugger now. In less &quot;user-friendly&quot; languages like C, debuggers are objectively more powerful than print debugging for things like picking up segmentation faults. (Aside: these are like Python errors, but instead of immediately giving you the error message and where it happens, C dumps a record of your computer's recorded working memory and says &quot;here's what went wrong!&quot;, which is a lot less fun to read. A debugger will just stop where the segfault happened, and show you what all the variables were, without you having to read through the core dump). We as programmers still use print debugging all the time. But knowing how to use a debugger is an important skill, so we recommend you learn as early as possible, especially while we're working with a &quot;user-friendly&quot; language like Python. "},{"title":"Unit Tests​","type":1,"pageTitle":"Getting Unstuck","url":"/guides/getting-unstuck#unit-tests","content":"Say you're writing a calculator app, and you've implemented the following underlying math functions: def add(a, b): ... def subtract(a, b): ... def multiply(a, b): ... def divide(a, b): ... def exponential(a, b): ...  You press all the buttons on your calculator, and expect it to evaluate subtract(add(3, multiply(4, 5)), divide(exponential(10, 2), 2)) and out the result of (3 + 4 * 5) - (10^2)/2 = -27. However, you're calculator gives you a result of -2. How do we know where the problem is? Is it with your calculator buttons? Do the buttons work, but the calculator has an order of operations problem? Is there a problem with one of our math functions? What we can do is we can write a set of tests for each separate function, where we pass it two inputs, and check the output is what we expect. For example, we could call add(2, 3), and then check that it returns 5. We call these tests unit tests, they're a series of tests that make sure the building blocks of our program work in isolation. The idea is that, if we know each of our functions work in isolation, then the problem is in how we call them, or in our algorithm. In Python, we often use assert for unit testing. An example of a set of unit tests for the above code would be assert add(2, 3) == 5 assert add(9, 0) == 9 assert subtract(5, 2) == 3 assert subtract(2, 9) == -7 assert multiply(5, 2) == 10 assert multiply(3, 0) == 0 assert divide(9, 1) == 9.0 assert divide(10, 2) == 5.0 assert exponential(4, 2) == 16 assert exponential(2, 5) == 32  You want your unit tests to cover all inputs. For example, here we'd want to check that our functions all work how we'd expect with positive numbers, negative numbers, floats, and any special cases like 0 for divide and exponential. Unit tests often work best in tandem with another debugging technique. For example, if all of these pass, we can assume that our math functions work, and that our problem is actually that we're using our functions improperly. So we boot up the debugger, and pin down that the problem is in the order of operations conversion section (the example I gave does (10/2)^2, not (10^2)/2). Unit test are often the bulk of your grade on programming assignments. We check that all of your functions work how we ask them to, and then once we know all your functions are working test that your project works as a whole after that. "},{"title":"Installing Python","type":0,"sectionRef":"#","url":"/guides/installing-python","content":"Installing Python A set of guides that walk through installing Python 📄️ Windows This guide will help you install Python on Windows. If you are using a different operating system, please see the Installing Python for a different guide. 📄️ MacOS This guide will help you install Python on macOS. Python on macOS can get messy. If you run into any issues while running the instructions detailed below, please post to Piazza. 📄️ Linux","keywords":""},{"title":"Installing Python on macOS","type":0,"sectionRef":"#","url":"/guides/installing-python/macos","content":"","keywords":""},{"title":"(Optional) Update macOS​","type":1,"pageTitle":"Installing Python on macOS","url":"/guides/installing-python/macos#optional-update-macos","content":"Prior to macOS 12.3, macOS came with Python 2.7. This version is nearly 13 years old and not suitable for development. Therefore, Apple removed it from macOS in 12.3. If possible, you can update your computer to any version of macOS after 12.2, and the installer will delete Python. This is not necessary, but if your machine is new enough that 12.3+ is supported and you don't have any concerns about it effecting your battery health, it is easier if you update your computer. "},{"title":"Verify you don't already have python3 installed​","type":1,"pageTitle":"Installing Python on macOS","url":"/guides/installing-python/macos#verify-you-dont-already-have-python3-installed","content":"Open Finder &gt; Applications &gt; TerminalRun python3 --version. You should get something along the lines of zsh: command not found: python3. Otherwise, you have python3 installed. If you have python installed from the developer website, you are all set. If you have python3 installed through Homebrew, we recommend you install and use python from the developer website. To tell the difference, run whereis python3 in Terminal. If you get /usr/bin/python3, you're all set. Otherwise, we recommend you follow the below installation directions. "},{"title":"Installing​","type":1,"pageTitle":"Installing Python on macOS","url":"/guides/installing-python/macos#installing","content":"Go to https://www.python.org/downloads/You should see &quot;Download the latest version for macOS&quot;, followed by a button labeled Download Python 3.x. Click the button to start the download. If the website does not automatically detect you are running macOS, select macOS under &quot;Looking for Python with a different OS?&quot;.  Once the download is finished, run the .pkg to run the installer. Run through the installer, and click Install.Open Finder &gt; Applications &gt; Python 3.x.Right-click on Update Shell Profile.command, and click open. This will run a process in Terminal that lets you run python3 from your command line.Restart Terminal, type python3, and press Enter. At this point, you should see something like the following screen:  To exit, type quit() and press Enter. "},{"title":"Installing Python on Linux","type":0,"sectionRef":"#","url":"/guides/installing-python/linux","content":"Installing Python on Linux","keywords":""},{"title":"Website Meta Guides","type":0,"sectionRef":"#","url":"/guides/meta-guides","content":"Website Meta Guides A set of guides that walk through working with this website 📄️ Getting Started This guide will walk you through the process of setting up a local development environment for the website 📄️ Committing Code This is a guide on how to commit code to the repository. 📄️ Making A Guide This is a guide on how to make a guide. This guide will teach you how to make a guide for this website. 📄️ Making an Announcement This guide will show you how to make an announcement in the blog section. 📄️ Python Live Code Blocks Hello World you can run 📄️ Markdown Tutorial This website is made of markdown documents. This guide will walk you through the process of writing markdown documents for the website.","keywords":""},{"title":"Committing Code","type":0,"sectionRef":"#","url":"/guides/meta-guides/adding_code_to_repo","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Committing Code","url":"/guides/meta-guides/adding_code_to_repo#prerequisites","content":"Have a GitHub accountHave Git installed (see here for instructions on how to install Git)Have a local version of the development environment (see here for instructions on how to set it up) Warning Never commit directly to the main or gh-pages branches! This will cause the website to break. "},{"title":"Committing Code​","type":1,"pageTitle":"Committing Code","url":"/guides/meta-guides/adding_code_to_repo#committing-code-1","content":"Make sure your changes are in a separate branch (not main) If you have already made changes, don't worry. You can still commit them to a new branch.To make a new branch (and use it), type git checkout -b &lt;branch_name&gt; in the terminal.To use an existing branch, type git checkout &lt;branch_name&gt; in the terminal. Add your changes to the staging area. To add all changes, type git add . in the terminal.To add specific changes, type git add &lt;file_path&gt; in the terminal. Commit your changes. To commit all changes, type git commit -m &quot;&lt;commit_message&gt;&quot; in the terminal.To commit specific changes, type git commit &lt;file_path&gt; -m &quot;&lt;commit_message&gt;&quot; in the terminal. Push your changes to GitHub. To push all changes, type git push in the terminal.To push specific changes, type git push &lt;file_path&gt; in the terminal. Create a pull request on GitHub. To create a pull request, go to the repository on GitHub and click the Compare &amp; pull request button.Add a title and description for the pull request.Click the Create pull request button. Merging First, a test build is created to make sure the code compiles.Second, someone must approve the pull request (this can be done by anyone).Third, the pull request is merged to main. This will automatically deploy the changes to the website. "},{"title":"Installing Python on Windows","type":0,"sectionRef":"#","url":"/guides/installing-python/windows","content":"","keywords":""},{"title":"Make sure you don't already have Python​","type":1,"pageTitle":"Installing Python on Windows","url":"/guides/installing-python/windows#make-sure-you-dont-already-have-python","content":"Open the start menu and search for &quot;cmd&quot; (or &quot;command prompt&quot;)Type python --version and press enter. If you get a message saying &quot;python is not recognized as an internal or external command&quot;, you do not have Python installed. If you get a message saying &quot;Python 3.6.1&quot; (or any other set of numbers), you already have Python installed. "},{"title":"Installing Python​","type":1,"pageTitle":"Installing Python on Windows","url":"/guides/installing-python/windows#installing-python","content":"Go to the Microsoft store websitehttps://apps.microsoft.com/store/detail/python-311/9NRWMJP3717K?hl=en-us&amp;gl=us Click the &quot;Get in Store App&quot; button (should open the microsoft store app) Click the &quot;Get&quot; button. This will download and install Python. When it is done installing, follow the steps above to verify that you have Python installed successfully. "},{"title":"For if things go wrong​","type":1,"pageTitle":"Installing Python on Windows","url":"/guides/installing-python/windows#for-if-things-go-wrong","content":"Other methods of installing Python on Windows are available, but are not recommended. Contact an instructor if you have trouble installing Python using the method above. Or, try one of the following methods. caution These methods are not ideal, they have more risk of not working. If you have trouble installing Python using the method above, try one of the following methods. Try these at your own risk (though they should still work fine) Download the latest version of Python from the Python website. Make sure to select the &quot;Add Python to PATH&quot; option when installing.Install Python using Chocolatey. This is a package manager for Windows. You can install Chocolatey by following the instructions on their website. Once you have Chocolatey installed, you can install Python by running choco install python in the command prompt.Install Python using Scoop. This is another package manager for Windows. You can install Scoop by following the instructions on their website. Once you have Scoop installed, you can install Python by running scoop install python in the command prompt. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/guides/meta-guides/getting_started","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Getting Started","url":"/guides/meta-guides/getting_started#prerequisites","content":"A computer that you can install software on "},{"title":"Steps to setup the local development environment​","type":1,"pageTitle":"Getting Started","url":"/guides/meta-guides/getting_started#steps-to-setup-the-local-development-environment","content":"Install Node.js: https://nodejs.org/en/download/Install Yarn: Open a terminalRun npm install --global yarn Install Git: https://git-scm.com/downloadsClone the repository: Open a terminal and navigate to the directory you want to clone the repository intoRun git clone https://github.com/CICS110/CICS110.github.io.git Install dependencies: In the same terminal, navigate to the directory you cloned the repository into: cd CICS110.github.ioRun yarn install in the terminal to install the dependencies "},{"title":"Steps to run the local development environment​","type":1,"pageTitle":"Getting Started","url":"/guides/meta-guides/getting_started#steps-to-run-the-local-development-environment","content":"Note: must have the local development environment setup first In the terminal, navigate to the directory you cloned the repository intoRun yarn start in the terminal to start the local development environment This should open a browser window with the website running locally Search Bar Will Not Work Locally In the local development environment, the search bar will not work. You can get it to work by first building it then serving the local production build: yarn build npx http-server ./build  "},{"title":"Python Live Code Blocks","type":0,"sectionRef":"#","url":"/guides/meta-guides/live_python","content":"","keywords":""},{"title":"Hello World you can run​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/meta-guides/live_python#hello-world-you-can-run","content":"To make a runnable code block, add live_py to the code blockThe code block will have a play button in the top right corner, click it to run the codeThe code can be edited and run again on the website No need to change any source code I don't know why the subtitles are in german print('Hello World')  "},{"title":"Hello World Not Runnable​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/meta-guides/live_python#hello-world-not-runnable","content":"For Reference, here is a code block that is not runnable print('Hello World')  "},{"title":"Adding a title​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/meta-guides/live_python#adding-a-title","content":"To add a title to the code block, add title=My_Title to the code blockIf you want a space in the title, use _ or - instead of a spaceIf you want an '_' or '-' in the title, use __ or -- instead of a single one Hello-World,-with-a-title print('Hello World, with a title')  "},{"title":"Hello World \"slim\"​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/meta-guides/live_python#hello-world-slim","content":"The slim version is a little smallerDoesn't display the titlePlay button is inlineTo make a slim code block, add slim to the code block can't_see_me print('Hello World slim')  "},{"title":"You can use a turtle too:​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/meta-guides/live_python#you-can-use-a-turtle-too","content":"Can import turtle and use itCan save the drawings to a file the download button is in the top right of the turtle window turtle_example from turtle import * color('red', 'yellow') begin_fill() while True: forward(200) left(170) p = pos() if abs(p[0]) &lt; 1 and abs(p[1]) &lt; 1: break end_fill() done()  "},{"title":"Importing Default Libraries​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/meta-guides/live_python#importing-default-libraries","content":"Can import and use various libraries that are included by default Link to standard library: https://docs.python.org/3/library/index.html Warning: This has a large output fetching_json from urllib.request import urlopen import json # A Url that returns JSON data (without requiring authentication) url = &quot;https://pokeapi.co/api/v2/pokemon/ditto&quot; with urlopen(url) as response: body = response.read() body_parsed = json.loads(body) print(json.dumps(body_parsed, indent=2))  "},{"title":"Making A Guide","type":0,"sectionRef":"#","url":"/guides/meta-guides/making_a_guide","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#prerequisites","content":"A code editor (VS Code, Atom, etc.)A local version of the development environment (see here for instructions on how to set it up)An understanding of Markdown (see here for a guide on Markdown) "},{"title":"Creating A Guide​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#creating-a-guide","content":"Create a new file in the guides folder. The file name should be the name of the guide, with the .md extension. For example, if you were making a guide on how to make a guide, you would name the file making_a_guide.md.Create a title for the guide. This is done by adding a # at the start of the file. For example, if you were making a guide on how to make a guide, you would add # Making A Guide at the start of the file.Continue to write markdown content for the guide. "},{"title":"Front Matter​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#front-matter","content":"Front matter is a set of metadata that is used to configure the guide. It is written in YAML and is placed at the top of the guide file. It allows you to configure things such as the guide's title, description, and sidebar position. "},{"title":"Example​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#example","content":"--- title: Making A Guide description: This is a guide on how to make a guide. sidebar_position: 1 ---  For the example above: The guide's title will be Making A Guide. This is used for the guide's page title and as the text in the sidebar for this guide. The guide's description will be This is a guide on how to make a guide. This is used for the guide's page description. I've only found it to be used in the search results. The guide's sidebar position will be 1. This is used to determine the order of the guides in the sidebar. The lower the number, the higher up the guide will be in the sidebar. "},{"title":"Guide Front Matter​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#guide-front-matter","content":"The following is a list of front matter that can be used for guides: title: The guide's title.description: The guide's description.sidebar_position: The guide's sidebar position. "},{"title":"Special Features​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#special-features","content":""},{"title":"Live Code Editor​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#live-code-editor","content":"If you want to add a live python code editor, see this guide: Live Code Editor "},{"title":"Linking To Other Guides​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#linking-to-other-guides","content":"You can use relative file paths to link to other guides. For example, if you had the following folder structure: guides website_guides making_a_guide.md other_guides markdown_tutorial.md  You could link to markdown_tutorial.md from making_a_guide.md by using the following syntax: [Markdown Tutorial](../other_guides/markdown_tutorial.md)  "},{"title":"JavaScript​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#javascript","content":"Expressions defined in curly braces will be evaluated as JavaScript. For example, if you had the following text {1 + 1}  It would be rendered as 1 + 1 =  2 NOTE: To trigger this functionality, somewhere in the file needs to be a JSX element. In this case, I added &lt;&gt;&lt;/&gt; to the line so that it would be rendered as a JSX element. The line looks like &lt;&gt;&lt;/&gt;1 + 1 = {1 + 1}  "},{"title":"JSX and HTML Elements​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#jsx-and-html-elements","content":"You can use JSX elements (React) in the guides too. For example, here is a button that says &quot;Click Me&quot;: Click Me! The code for the button is &lt;button onClick={() =&gt; alert('Hello!')}&gt;Click Me!&lt;/button&gt;  "},{"title":"Images​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#images","content":"You can add images to the guides. Put the image you want somewhere in the guides folder. Then, you can reference the image using the following syntax: ![Image Title](image_path)  For example, if you had the following folder structure: guides website_guides making_a_guide.md images image.png  You could add the image to the guide by using the following syntax: ![Image Title](../images/image.png)  "},{"title":"Extra Resources​","type":1,"pageTitle":"Making A Guide","url":"/guides/meta-guides/making_a_guide#extra-resources","content":"Docusaurus Guide Teach you how to use Docusaurus (the framework that this website is built on) to make docs and guides. "},{"title":"Making an Announcement","type":0,"sectionRef":"#","url":"/guides/meta-guides/making_an_announcement","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Making an Announcement","url":"/guides/meta-guides/making_an_announcement#prerequisites","content":"Have a local version of the development environment (see here for instructions on how to set it up)Have an understanding of Markdown (see here for a guide on Markdown) note Almost all of this comes from the Docusaurus documentation. If you want to learn more about how to make announcements, you should check out the documentation. "},{"title":"Creating An Announcement​","type":1,"pageTitle":"Making an Announcement","url":"/guides/meta-guides/making_an_announcement#creating-an-announcement","content":""},{"title":"Making the file​","type":1,"pageTitle":"Making an Announcement","url":"/guides/meta-guides/making_an_announcement#making-the-file","content":"Create a new file in the blog folder. The file should be named YYYY-MM-DD-announcement-title.md, where YYYY is the year, MM is the month, DD is the day, and announcement-title is the title of the announcement. For example, if you were making an announcement on January 1st, 2021, you would name the file 2021-01-01-announcement-title.md. Example Structure: blog 2021-01-01-announcement-title.md  If you think that you may want to include images in your announcement, you should create a folder with the same name as the file, but without the .md extension. For example, if you were making an announcement on January 1st, 2021, you would create a folder named 2021-01-01-announcement-title. Inside this folder, also create a file called index.md. This will be the file we will write our announcement in. Other resources, such as images, can be placed in this folder. This is only necessary if you want to include other files in the announcement. Example Structure (for an announcement with images): blog 2021-01-01-announcement-title index.md image1.png image2.png  "},{"title":"Creating the Front Matter​","type":1,"pageTitle":"Making an Announcement","url":"/guides/meta-guides/making_an_announcement#creating-the-front-matter","content":"Front matter is a set of metadata that is used to configure the announcement. It is written in YAML and is placed at the top of the announcement file. It allows you to configure things such as the announcement's title, description, and sidebar position. Example:​ --- slug: my-url title: Making an Announcement Guide is Out! authors: [Kobi, Tim] tags: [guides, hello, docusaurus] ---  For the example above: Slug​ The slug is the URL extension for the announcement. For example, if the slug is welcome2, the announcement will be located at /blog/welcome2. If the slug is not specified, it will follow the format /blog/yyyy/mm/dd/announcement-title. For example, if the announcement is named 2021-01-01-announcement-title.md, the slug will be /blog/2021/01/01/announcement-title. Title​ The title is the title of the announcement. This will be displayed at the top of the announcement. Authors​ The authors is a list of authors by their unique id (as defined in authors.yml) that wrote the announcement. This will be displayed at the top of the announcement. Authors can be added to authors.yml by following the instructions here. Tags​ The tags is a list of tags that are associated with the announcement. This will be displayed at the top of the announcement. They don't need to be defined in any other file. Clicking a tag will show all announcements with that tag. "},{"title":"Content of the Announcement​","type":1,"pageTitle":"Making an Announcement","url":"/guides/meta-guides/making_an_announcement#content-of-the-announcement","content":"The content of the announcement is written in Markdown. You can learn more about Markdown here. It also shares the same additional features as the docs pages. Finally, there is also support for truncated posts. To make a truncated post, add the following to the content of the announcement: &lt;!--truncate--&gt;  Anything below this will not be shown on the announcement page. Instead, a &quot;Read More&quot; button will be shown, which will take the user to the full announcement. "},{"title":"Adding an Author​","type":1,"pageTitle":"Making an Announcement","url":"/guides/meta-guides/making_an_announcement#adding-an-author","content":"In the blog folder is a file called authors.yml. This file contains a list of authors that have written announcements. To add an author, add a new entry to the list. The entry should be in the following format: author-id: name: Author Name title: Author Title url: https://author-url.com image_url: https://author-image-url.com  For example: kobi: name: Kobi title: Instructor url: https://kobif.github.io/block-game/ image_url: http://images4.fanpop.com/image/user_images/2069000/Unnoticed-2069013_266_394.jpg  Author ID​ The author-id is the unique id of the author. This is used to associate the author with the announcement. This must be unique. This is also what is used in a blog post's authors field. Name​ The name is the name of the author. This is what will be displayed on the announcement. This does not need to be unique. Title​ The title is the title of the author. In our case, this is the role of the author for the course. This will be displayed on the announcement. URL​ The url is a URL that will be linked to the author's name on the announcement. This is optional. Image URL​ The image_url is a URL to an image that will be displayed next to the author's name on the announcement. This is optional. "},{"title":"How to use Piazza","type":0,"sectionRef":"#","url":"/guides/piazza","content":"","keywords":""},{"title":"Using Piazza​","type":1,"pageTitle":"How to use Piazza","url":"/guides/piazza#using-piazza","content":"To ask a question, click the New Post button in the top left corner:  You'll then be presented with the following screen:  99% of the time you'll want to pick Question. Public posts are Entire Class, private posts are Individual Student(s)/Instructor(s). If you pick the latter, typing Instructors posts to the entire staff. You can also post to just your instructor if you need to, put we're prefer you reserve this for personal matters. Then select a folder based on what your question is about, type up your question. Before you select Post My Question/Note, you can chose if you want your question to have your name shown, or be anonymous to classmates. It's up to you, but I know from personal experience it's much easier to ask questions anonymously. "},{"title":"How to ask for Help​","type":1,"pageTitle":"How to use Piazza","url":"/guides/piazza#how-to-ask-for-help","content":"There are three main types of questions Approach-based questions: How do I start Todo 4 in the project? Code-specific questions: Why is my code not working how I want it?Logistical questions Piazza is great for approach-based questions. We highly recommend that you make these posts public. That way other students can see the questions, as well as discuss them or even answer them. If you are shy about asking your classmates for help, you can always post anonymous! Posting publicly is also a huge help to us, since it prevents us from asking the same question over and over again. For more on code-specific questions, see the Posting Code section. For logistical questions, you can either post public or private. It's up to your discretion based on the question you want to ask. "},{"title":"Posting Code​","type":1,"pageTitle":"How to use Piazza","url":"/guides/piazza#posting-code","content":"A classic question that we see every semester is Why is this not working? with an image of someone's source code attached. This is an academic honesty violation, and is also usually hard for us to answer without just giving you the solution. Firstly, do not ever include your source code for an assignment in a public Piazza post.Posting your code to the entire class is code sharing, and is therefore an academic dishonesty violation per the academic honesty policy detailed in the syllabus. We take this very seriously, so please do not do it. Instead, If you have a question about zyBooks or zyLabs, please make a public post directing us to the specific section and question. We can see your submissions, and will respond to your post either with general pointers, or even with what you should look to change. Example: I've been stuck on section 2.15 of the lab. Can you give me some pointers? If you have a question about an assignment, please first submit your current code to Gradescope. Then, ask your question and include a link to your Gradescope submission at the bottom. Example: I am stuck on Todo 4, specifically the part with getting the print formatting right. Any advice? Gradescope link: link to submission Lecture code and code in the homework exercises are fine to be posted. In fact, we encourage you as students to try to respond to these! Just make sure you err on the side of leading the student in the right direction. Do not give them the answer directly (again, academic honesty is important to us). "},{"title":"Markdown Tutorial","type":0,"sectionRef":"#","url":"/guides/meta-guides/markdown_tutorial","content":"","keywords":""},{"title":"Resources​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#resources","content":"Markdown Cheat Sheet: https://www.markdownguide.org/cheat-sheet/Basic Syntax Guide (Way better than this webpage): https://www.markdownguide.org/basic-syntax/ "},{"title":"Prerequisites​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#prerequisites","content":"An environment to write markdown documents. Some online editors to play around with: StackEdit.Dillinger  "},{"title":"Main Ideas of Markdown​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#main-ideas-of-markdown","content":"In markdown, you can write text and add formatting to it. You can also add links, images, and other elements to your text. This does not cover everything that markdown can do, but it should be enough to get you started. "},{"title":"Sections​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#sections","content":"You can create sections by using the # symbol. The more # symbols you use, the smaller the section will be. For example, # will create a large section, ## will create a medium section, and ### will create a small section. For example: # Hello World will create a large section with the text Hello World in it. ## Hello World will create a medium section with the text Hello World in it. ### Hello World will create a small section with the text Hello World in it. "},{"title":"Text Formatting​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#text-formatting","content":"You can add formatting to your text by using the following symbols: * or _ for italics** or __ for bold*** or ___ for bold and italics To use them, surround the text you want to format with the symbols. For example, *italics* will create italics, **bold** will create bold, and ***bold and italics*** will create bold and italics. "},{"title":"Links and Images​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#links-and-images","content":"You can add links and images to your text with the following syntax: [Link Text](Link URL) ![Image Text](Image URL)  To do a link, surround the text you want to be the link with [] and then put the link in (). For example, [Google](https://google.com) will create a link to google with the text Google in it. To do an image, do the same but put an ! in front. For example, ![Google Logo](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png) will create an image of the google logo with the text Google Logo in it. "},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#code-blocks","content":"There are two types of code blocks: inline and multiline. Inline code blocks are used to show code in the middle of a sentence. Multiline code blocks are used to show code on their own line. To do an inline code block, surround the code with `. For example, `print('Hello World')` will create an inline code block with the text print('Hello World') in it. To do a multiline code block, surround the code with ```. For example: ``` print('Hello World') ```  will create a multiline code block with the text print('Hello World') in it. On the line where you start the code block, you can add a language to the code block. For example, ```py will create a python code block. This will add syntax highlighting to the code block. Here is an example of a python code block: print('Hello World')  And the markdown for it: ```py print('Hello World') ```  "},{"title":"Lists​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#lists","content":"You can create lists by using the following symbols: - for unordered lists1. for ordered lists To create an unordered list, put - in front of each item in the list. For example: - Item 1 - Item 2 - Item 3  will create an unordered list with the items Item 1, Item 2, and Item 3. To create an ordered list, put {a number}. in front of each item in the list. For example: 1. Item 1 2. Item 2 3. Item 3  will create an ordered list with the items Item 1, Item 2, and Item 3. "},{"title":"Tables​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#tables","content":"You can create tables by using the following syntax: | Column 1 | Column 2 | Column 3 | | -------- | -------- | -------- | | Row 1 | Row 1 | Row 1 | | Row 2 | Row 2 | Row 2 | | Row 3 | Row 3 | Row 3 |  This will create a table with the columns Column 1, Column 2, and Column 3 and the rows Row 1, Row 2, and Row 3. "},{"title":"Horizontal Rule (Line)​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/meta-guides/markdown_tutorial#horizontal-rule-line","content":"You can create a horizontal rule by using the following syntax: ---  This will create a horizontal rule. "},{"title":"CICS 110 Staff Guide","type":0,"sectionRef":"#","url":"/guides/staff","content":"","keywords":""},{"title":"Communication and Organization​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#communication-and-organization","content":"If you need to be added to the staff chat, email bburns@umass.edu. Every week, Ben will send out a message detailing all assignments due that week and any unfinished grading to #noteboardMeeting notes will be sent in #noteboard as well. We use Trello for course organization. This is mostly used for making sure slides and assignments are ready before we need them, status on graded items (grading, needs uploading, uploaded). We also use Trello for processing extension requests. "},{"title":"Labs​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#labs","content":""},{"title":"Office Hours​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#office-hours","content":"Your office hours should either be in-person or over zoom. On the office hours page, please include your NameDay of week and timeRoom or zoom link "},{"title":"Logging​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#logging","content":"In the staff chat you'll find a channel named #office-hours. At some point in hour or two after you office hour, post a log to this channel that estimates how many students attended your office hour and what people asked about. An example log: 12/4, 11am - 12pm. 4 students showed up to ask about Project 4. Student A and Student B did not know how to approach todos 3 and 6. Student C was having trouble getting the enumerate in the 5th todo to add items to the set correctly. An equally valid log is 12/4, 11am - 12pm. No students attended my office hour. This is 100% fine, and will probably be the case in the first couple weeks. It's better to log that no one showed up than it is to not log, don't feel pressured to say you had students when you didn't. This is for the instructors so they know if people are coming to office hours and what students are confused about. "},{"title":"Canceling Office Hours​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#canceling-office-hours","content":"If you have to cancel your office hour, you should immediately post a note to Piazza saying your office hour is canceled. Then post to the #office-hours channel. If you miss your office hour, you should post about it in #office-hours as well, and make a Piazza post acknowledging that you missed your office hour. It's fine if you miss an office hour, just make sure you're honest and up front about it, because otherwise it might look like you're skipping. "},{"title":"Piazza​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#piazza","content":"Each UCA and TA has a day on which you are expected to monitor Piazza. You aren't expected to be monitoring at all times, you're just supposed to be paying extra attention that one day. For me, this means turning on Push Notifications on the mobile app, which I can definitely recommend, but do what ever works best for you. "},{"title":"Responsibilities​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#responsibilities","content":"You should spend up to an hour answering questions that day. If there aren't any new questions posted on your day, go back through the Unresolved section.  This will show all posts that have no student or instructor responses yet, and any posts with unresolved follow ups. Try to sift through these. Most are usually already answered by another post, outdated (e.g. asking about an assignment whose deadline has now passed), are resolved but marked unresolved, or a logistical question UCAs and TAs don't have an answer to. "},{"title":"Ask for help!​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#ask-for-help","content":"If there is a question that you can't answer, but an Instructor can, @ all instructors or a specific instructor in #general, and include a link to the post. The best example of posts in this category are things like &quot;what's on the next exam?&quot; or &quot;when's project/challenge X being posted?&quot; If questions are coming in faster than the assigned staff can handle, like before a major deadline or exam, don't be afraid to @ all UCAs asking if anyone is free to help out. "},{"title":"Grading​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#grading","content":"Grading is all done via Gradescope. For a guide on how to grade (both at the high level and how to use Gradescope itself), see this guide on the UCA website. "},{"title":"Uploading to Moonami​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#uploading-to-moonami","content":""},{"title":"zyBooks​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#zybooks","content":""},{"title":"Gradescope​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#gradescope","content":""},{"title":"Exams​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#exams","content":"A detailed break down of exam structure can be found in the Guide to Exams. "},{"title":"Before the Exam​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#before-the-exam","content":"A Google sheet needs to be created for check out. There should be subsheet for each section with all student names and emails imported. The sheet should look something like: First Name\tLast Name\tStudent Email\tStaff initialJohn\tDoe\tjdoe@umass.edu J. Random\tHacker\tjrhacker@umass.edu\tBB ...\t...\t...\t... The night before the exam, at least two UCAs should proof read the questions and report any typos or questions they find confusing. A guide of how to do this is here A staff member should get to the lab 15-20 minutes early to straighten out desks so that no two students are sitting too close. If possible, students should not sit in the back row. If it is necessary, pull the desks forward so that staff can freely walk behind the back row. "},{"title":"During the Exam​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#during-the-exam","content":"During the exam, there are three main jobs we have Answering student questionsChecking students out once they finishMonitoring for academic honesty violations At least one staff member should be at the back watching students' screens, monitoring for academic honesty violations. Another staff member should be at the front ready to check out students as they finish. Any other staff are free to walk around asking questions, or stand at the back of the room. "},{"title":"Student check out​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#student-check-out","content":"The staff member in charge of check out should have the check-out sheet open, as well as the exam responses page open. You can find the latter by going to Moodle, then the exam page, then clicking the cog on the right, and selecting Responses. The process for checking out a student is as follows Ask for the student's uCardLook the student up in Responses and verify the student has submittedFind the student in the check out sheet, and put your initials next to their email. Return their uCard and tell them they're free to leave Step 1 is so we know they're who they say they are. Step 2 is to make sure they submitted, otherwise they can leave the exam, reopen their laptop, and keep working. Step 3 is to make sure the student actually attended the lab to take the exam. "},{"title":"Proof Reading and Reporting Typos​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#proof-reading-and-reporting-typos","content":"To proof read the exam, go to the Exam on Moodle, click the cog on the right, and select Edit quiz. On each question you will a field that says (See questions), which you should open (it's way easier if you open it in a new tab). Then click the Edit dropdown, and select Preview (again, easier in a new tab). If you find a typo in a question, or find the wording confusing or ambiguous, @ the instructor who last edited the question, including the question number, the name of the version, and the typo you found/what you found confusing. Unless specified otherwise, only Instructors should be editing exam questions directly. "},{"title":"Syllabus","type":0,"sectionRef":"#","url":"/guides/syllabus","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#general-information","content":"Semester: Spring 2023Start Date: February 6, 2023End Date: May 17, 2023Credits: 4 "},{"title":"Lectures​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#lectures","content":"Section\tTime\tLocation\tInstructor01-LEC(48638)\tMoWe 4:00PM-5:15PM\tLederle Grad Res Ctr rm A301\tCole Reilly A2\tB2\tC2 A3\tB3\tC3\t "},{"title":"Labs​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#labs","content":"Section\tTime\tLocation\tInstructor01-LEC(48638)\tMoWe 4:00PM-5:15PM\tLederle Grad Res Ctr rm A301\tCole Reilly A2\tB2\tC2 A3\tB3\tC3\t "},{"title":"Prerequisites​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#prerequisites","content":"R1 (or a score of 20 or higher on the math placement test Part A), or one of the following courses: MATH 101&amp;102 or MATH 104 or MATH 127 or MATH 128 or MATH 131 or MATH 132. "},{"title":"Instructors​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#instructors","content":"onetwothree "},{"title":"Staff​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#staff","content":"OneTwoThree "},{"title":"Description​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#description","content":"An introduction to computer programming and problem solving using computers. This course teaches you how real-world problems can be solved computationally using programming constructs and data abstractions of a modern programming language. Concepts and techniques covered include variables, expressions, data types, objects, branching, iteration, functions, classes, and methods. We will also cover how to translate problems into a sequence of instructions, investigate the fundamental operation of a computational system and trace program execution and memory, and learn how to test and debug programs. No previous programming experience required. "},{"title":"Statement of Inclusivity​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#statement-of-inclusivity","content":"The staff for this course support the UMass commitment to diversity, and welcome individuals regardless of age, background, citizenship, disability, sex, education, ethnicity, family status, gender, gender identity, geographical origin, language, military experience, political views, race, religion, sexual orientation, socioeconomic status, and work experience. In this course, each voice in the classroom has something of value to contribute. Please take care to respect the different experiences, beliefs and values expressed by students and staff involved in this course. "},{"title":"Course Goals​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#course-goals","content":"The objective of this course is to introduce the fundamentals of computing and programming using a general-purpose programming language from a modern perspective. This includes understanding the operation of a machine from a programming language perspective and what it means to execute a whole program as well as its individual parts, how to solve problems using constructs that a programming language provides such as variables, data types, objects, branching, iteration, functions, and classes, and how to write programs that receive data from various sources, process that data, and produce output in various forms. "},{"title":"Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#learning-outcomes","content":"At the completion of this course you will be able to:Read and write programs to solve non-trivial programs using the Python programming language.Describe fundamental units of computation and program structure.Translate real-world problems into computational solutions.Solve problems using a general-purpose programming language and the tools it provides such as variables, data types, objects, branching, iteration, functions/methods, and classes.Design and implement whole programs and functions to solve computational problems using top-down and bottom-up techniques.Describe application programming interfaces (API) and use APIs available from existing objects and libraries to solve problems.Translate data from and into various formats that are in computer memory, a graphical interface, a file, from a remote API on the web, or other data resources.Use console-based or graphical interfaces to learn about input/output to move data into and out of a program.Use modules and classes to organize data and functions.Explain the notion of a machine and how it relates to the execution of a general-purpose programming language.Explain how programs and their data are represented in a computer and build mental models and use diagrams of program and function execution and data stored in memory.Use basic debugging techniques such as “print debugging” and assert statements to determine the cause of logical programming errors and show the correctness of a program and its implementation.Describe programs using proper documentation techniques to communicate implementation details at various levels of granularity. "},{"title":"Course Format​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#course-format","content":""},{"title":"Lecture​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#lecture","content":"Lecture will begin with a brief review of what was covered in the previous lecture followed by a presentation of new material. This presentation may include slides as well as code demonstrations that you will have access to as part of the course material. This will often be followed by an exercise that will help solidify your understanding of the material. "},{"title":"Labs​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#labs-1","content":"Lab will have an associated assignment that you are required to complete. You are expected to complete these activities during the lab working with others taking the course. Course staff will be available to answer questions and help guide you through the assignment. "},{"title":"How to Succeed​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#how-to-succeed","content":"Your success in this class is important to us. We all learn differently and bring different strengths and needs to the class. If there are aspects of the course that prevent you from learning or make you feel excluded, please let us know as soon as possible. Together we’ll develop strategies to meet both your needs and the requirements of the course. There are also a range of resources on campus, including: Academic CalendarLearning Resource CenterCenter for Counseling and Psychological Health (CCPH)English as a Second Language (ESL) Program "},{"title":"Course Material​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#course-material","content":""},{"title":"Textbook​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#textbook","content":"The following textbook is required: Programming in Python 3, an interactive textbook from zyBooks designed specifically for this course. To activate your zyBook subscription: Go to: https://learn.zybooks.comCreate an Account. Make sure to sign up with your @umass.edu email address.When prompted for the zyBook code, enter: UMASSINFO190SFall2022You can purchase the Zybook online with a credit card. A subscription is $58. You may begin subscribing on Aug 23, 2022 and the cutoff to subscribe is Dec 01, 2022. Subscriptions will last until Dec 26, 2022. Here are some additional textbook recommendations freely available online. You may consider looking at these as supplemental material: Automate the Boring Stuff with Python, Al Sweigert, https://automatetheboringstuff.comA Byte of Python, https://www.gitbook.com/book/swaroopch/byte-of-python/detailsDive into Python, Mark Pilgrim, http://getpython3.com/diveintopython3Learn python the hard way, Zed Shaw, http://learnpythonthehardway.org/bookPython Practice Book, Anad Chitpothu, http://anandology.com/python-practice-book "},{"title":"Laptop Computer​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#laptop-computer","content":"It is highly recommended that you have a laptop computer. We will be writing code both in and out of class, so a portable computer capable of installing software (not a Chromebook) is valuable for this class. Most in-class programming activities will be group-based, so if you do not own a laptop, you can easily work with another student in class. "},{"title":"Software Platforms and Tools​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#software-platforms-and-tools","content":""},{"title":"Moodle​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#moodle","content":"We will use the Moodle Learning Management System (LMS) as the primary hub for course content. You will be able to access readings, lecture material, assignments, and any other important material pertaining to this course. We may use Moodle to submit some assignments. You will be able to access your latest grades and comments for assignments using the Moodle Gradebook. "},{"title":"zyBooks​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#zybooks","content":"The textbook for this course is available from zyBooks. Not only is zyBooks the book for the course, but it also includes visual and interactive content that increases your understanding of the material. It provides participatory content, challenge exercises, and a Python programming environment built right into the book! "},{"title":"Gradescope​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#gradescope","content":"We use Gradescope for automatically grading programming projects. Gradescope allows us to provide fast and accurate feedback on your work. Before the deadline you can submit as many times as you need, so submit early and often to ensure you have something in before the deadline. Become familiar with Gradescope and verify that your submission has been properly uploaded before the deadline. Use OneDrive, DropBox, Google Drive, or some other backup software to ensure that your work is not lost in the event of a computer failure. The Gradescope autograder will provide you with some limited feedback on your submissions: does it compile, does it pass automated tests, what your score is, etc. The autograder does not provide detailed feedback. We will help you get familiar with Gradescope as the course progresses. "},{"title":"VSCode​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#vscode","content":"We use the VSCode Development Environment for developing, debugging, and testing programming projects. This is free software and you will be given installation instructions and training in its use. There are many excellent Python integrated development environments (IDE), editors, and tools that exist, however, we recommend VSCode as it is easy to learn, and we will be using it in class for code demonstrations. You can read more about VSCode here and we encourage you to try out the “Getting Started with Python in VSCode” as preparation for the class. "},{"title":"Python​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#python","content":"We will be using the Python programming language in this course. It is an excellent language to learn about programming and computational thinking. It is also used extensively in the software engineering, data science domain, and many additional areas of computing. You will be required to download and install Python on your own computer. You will be using Python and VSCode to complete many programming tasks as part of your studies in this class. The current Python version used in this course is 3.10.6. "},{"title":"Communication​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#communication","content":""},{"title":"Email​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#email","content":"Email should not be used. Please post privately to Instructors on Piazza. In the unlikely event that you are unable to post to Piazza, please send an email to the instructor teaching your course section. "},{"title":"Piazza​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#piazza","content":"We will be using Piazza for all other communication. This online discussion forum should be your first choice for asking questions. You should check the discussion forum before asking your question to see if the same question has already been posted. We will not answer questions that have already been answered in the discussion forum. Think before you post. We expect you to do a reasonable amount of thinking to try to solve your problems before posting for help. Make sure you are articulate and clear with your post (i.e., think before you post). You should post questions related to assignments early rather than wait until the last minute. Questions that are posted very near an assignment deadline may not be answered. Course staff are expected to answer questions Monday through Friday. Do not expect prompt answers on Saturday, Sunday, and scheduled holidays and breaks. Please post with respect and kindness. Posts that are disrespectful, crude, inappropriate, or mean will not be tolerated and will be reported and result in your immediate removal from the course and a failure for the course. "},{"title":"Attendance​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#attendance","content":"We expect you to attend lectures and labs on a regular basis. If you are absent or miss deadlines for health reasons or other extenuating circumstances, you will be able to view the lectures online as they will all be recorded on echo360. If you do miss class or lab and there is an assignment to complete you must notify us as soon as possible and, if you seek excusal from an assignment or require an extension, to provide written documentation. "},{"title":"Assessment and Grading​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#assessment-and-grading","content":"The final grade for this course is broken down into the following categories and weights: 10% Lab Assignments20% Homework Assignments40% Programming Projects20% In-Class Exams10% Final Exam The numerical cutoff for final course letter grade assignment will be made after all grading is completed. As a rough guide, expect to require at least a 93 to get an A, a 90 to get an A-, an 87 to get a B+, an 83 to get a B, an 80 to get a B-, etc. Individual grade items are not curved, so you should not get stressed about means, standard deviations, etc. related to scores you receive. What matters is your weighted average; we do not give favorable (or unfair) treatment by raising or lowering individual students’ letter grades. There are no opportunities for extra credit in this course; please do not ask. You are responsible for monitoring your grades. Grades will be available through Moodle and you should check them regularly and review any provided feedback. If you encounter any issues with your grades, you will have one week past the first posting of a particular assignment’s grade to Moodle to contact the course staff so that we can investigate. The following grade scale will be used for this course: A = 93-100%A- = 90-92.99%B+ = 87-89.99%B = 83-86.99%B- = 80-82.99%C+ = 77-79.99%C = 73-76.99%C- = 70-72.99%D+ = 67-69.99%D = 60-66.99%F = 0-59.99% Note: some adjustments may be made to the above grade scale to better reflect student performance. "},{"title":"Lab Assignments​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#lab-assignments","content":"Most labs will be accompanied by an assignment that you will complete totally or partially during your assigned lab section. You will complete 1 to 3 programming exercises during the lab. If you are unable to complete the assignment during that time you will be responsible for completing the work on your own time before the assigned due date. You may work collaboratively during the lab section, but submit your work individually. Labs will be assigned at the start of the lab in Moodle and completed and submitted in the zyBook. They will be automatically graded by the zyLab autograding system. During the lab section you will have the opportunity to ask the lab staff questions. The lab staff will provide guidance so that you may complete the lab successfully. Lab assignments are low-stakes exercises that are designed to allow you to practice your understanding of the material covered in the book and during lecture in the presence of the course staff in a collaborative setting. You will need to bring a laptop if you have one or work with another student. If you do not have a laptop, please notify the course staff so we can make arrangements for you to work with another student. "},{"title":"Homework Assignments​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#homework-assignments","content":"There will be a number of homework assignments that you will complete individually by the assigned due date. Each homework assignment will have you complete a programming challenge by analyzing the problem, coding the solution, answering some questions about the problem, and providing a reflection on your experience before you hand in your solution. Homework assignments will be completed using Zylab and/or VSCode and your completed assignment will be submitted to Zylabs or Gradescope. Homework assignments are a low-stakes exercise that are designed for you to practice problem solving with code independently. As you complete a homework assignment you should take note of your abilities with respect to the material. Although getting the correct code is an important part of programming, that is not the only criteria you are evaluated on and it is not necessarily the purpose of a homework assignment. You should use the homework as an instrument to determine how well you are understanding the material. "},{"title":"Programming Projects​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#programming-projects","content":"There will be approximately 4 programming projects. Programming projects are high-stakes programming assignments that will assess you on what you have learned. A programming project is a more in-depth assignment where you will apply the programming concepts you have learned to solving a problem. You will need to demonstrate your understanding of the concepts and the programming skills you have learned from the zyBook, lecture, lab, and homework. Programming projects are completed independently using Python/VSCode and are automatically graded by Gradescope. Gradescope will run several tests on your program to evaluate your solution. You will be allowed to submit a programming project as many times as you would like before the deadline. Programming projects measure your mastery of the learning outcomes. "},{"title":"Exams​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#exams","content":"There will be 3 in-class exams. Your best two scores will count towards your final grade. Exams are high-stakes assignments that will assess your ability to recall, understand, and apply the course material covered in the zyBook, lecture, lab, homework, and programming projects. Each exam focuses on specific lectures and associated material and assignments. Due to the nature of the material, all exams are cumulative. Exams will be taken during a scheduled class session. You will have the entire class period to complete the exam and submit it. Questions consist of multiple choice, true/false, fill in the blank, matching, reading/writing code and other similar forms. To prepare for an exam you should review all the readings, lecture material, code, and exercises/assignments covered by the exam. It is important that you plan ahead and give yourself plenty of time to review the material. Cramming for an exam or pulling an all nighter can lead to anxiety and exhaustion and often result in lower performance. So, be kind to yourself and begin preparations by studying the material often and early. "},{"title":"Final Exam​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#final-exam","content":"The final exam will be given during the final exam period. The final exam will be cumulative and assess your knowledge of the material covered during the entire semester. You will have the entire exam period to complete the exam and submit it. Questions consist of multiple choice, true/false, fill in the blank, matching, reading/writing code and other similar forms. To prepare for the final exam you should review all the readings, lecture material, code, and exercises/assignments covered in the course. It is important that you plan ahead and give yourself plenty of time to review the material. Cramming for an exam or pulling an all nighter can lead to anxiety and exhaustion and often result in lower performance. So, be kind to yourself and begin preparations by studying the material often and early. Make sure you get plenty of rest and eat well before you arrive at the final exam! "},{"title":"Late Submissions​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#late-submissions","content":"It is your responsibility for maintaining your own schedule and being prompt with your submissions. We expect that you become familiar with the course submission software and verify that your submission has been properly uploaded. We will not grant late submissions due to lack of checking on this. We assume: You are an adult and have the ability to check and verify your work has been received properly.You are capable of using OneDrive, DropBox, Google Drive, or some other backup software to ensure that your work is not lost in the event of a computer failure.You have a back-up plan in place in the event that your computer fails or your internet connection is unavailable. Make sure you have a plan B and C if your computer crashes or your internet is unavailable. This is your responsibility. To ensure that you submit assignments on time you should begin them early and not wait until the last minute to submit. For some assignments you may be able to submit multiple times so submit early and often to ensure you have something in before the deadline. "},{"title":"Late Submission Requests​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#late-submission-requests","content":"Requests will be reviewed and responded to in a timely fashion. If you are requesting an extension to a deadline and the request is granted, arrangements will be made for you to complete the work. It is your responsibility to complete that work by the extension deadline. Although you are allowed to make requests for extensions, we are not obligated to grant the extension request. If we find that you are consistently requesting extensions, we will schedule a meeting with you to discuss why you are unable to complete assignments on time and determine the best path forward. Please send late submission requests to Instructors on Piazza. "},{"title":"Incompletes​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#incompletes","content":"Typically, a course is completed after the last class, final exam, and/or final project or assignment. In rare cases, extenuating circumstances may prevent a student from completing a course by that time. As part of the University Regulations, we may issue an Incomplete (INC) for a course, rather than a course grade, if a student submits a request to the instructor(s). The criteria for granting an INC request are determined by the course instructors. The following is an excerpt from Section VI D in the Academic Regulations: “Students who are unable to complete course requirements within the allotted time because of severe medical or personal problems may request a grade of Incomplete from the instructor of the course. Normally, incomplete grades are warranted only if a student is passing the course at the time of the request and if the course requirements can be completed by the end of the following semester. Instructors who turn in a grade of &quot;INC&quot; are required to leave a written record of the following information with the departmental office of the academic department under which the course is offered: (1) the percentage of work completed, (2) the grade earned by the student on the completed work, (3) a description of the work that remains to be completed, (4) a description of the method by which the student is to complete the unfinished work, and (5) the date by which the work is to be completed. In the case of an independent study where the entire grade is determined by one paper or project, the instructor should leave with the department information pertaining to the paper or project, which will complete the course. To avoid subsequent misunderstanding, it is recommended that the student also be provided with a copy of this information.” "},{"title":"Criteria​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#criteria","content":"The incomplete criterion for this course requires that you have: At least 60% of the course must be completed with a passing grade.A valid reason for requesting an INC that relates to a severe medical or personal problem "},{"title":"Requests​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#requests","content":"Towards the end of the semester a notification will be posted about incomplete requests. You will follow the instructions provided to submit an incomplete request. After we review the request, we will make one of the following determinations: We approve the request upon which you will be notified by email and a separate incomplete agreement document will be sent to you to read through and sign no more than 48 hours after receiving the incomplete agreement document. This document will include what remains to be completed for the course and a deadline. After you sign and return this document, we will open extensions for the missing work. After the course has ended, we do not provide any additional help or support regarding the specifics of the course material. You are expected to complete the work using the material and online platforms that were available to you when the course was active. We deny the request and submit a grade based on your performance at the end of the course. "},{"title":"Course Support​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#course-support","content":""},{"title":"Office Hours​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#office-hours","content":"Office hours are times when we provide real-time access to the instructor, TAs, and UCAs. You do not need an appointment to attend office hours, attendance is optional, and all questions you have about the course are welcome. These sessions will be held at different times during the week. Office hours will be posted on the course website. Office hours will be held both in person and on Zoom. "},{"title":"Accommodations​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#accommodations","content":"The University of Massachusetts Amherst is committed to providing an equal educational opportunity for all students. If you have a documented physical, psychological, or learning disability on file with Disability Services (DS), you may be eligible for reasonable academic accommodations to help you succeed in this course. If you have a documented disability that requires an accommodation, please notify your instructor as soon as possible so that we may make appropriate arrangements. For further information, please visit Disability Services (https://www.umass.edu/disability). "},{"title":"Title IX​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#title-ix","content":"If you have been the victim of sexual violence, gender discrimination, or sexual harassment, the university can provide you with a variety of support resources and accommodations. UMass is committed to providing these resources with minimal impact and costs to survivors on a case-by-case basis. Resources are available to survivors with or without them filing a complaint. No upfront costs are charged to any currently enrolled students for University Health Services or the Center for Counseling and Psychological Health, and no fees exist for services in the Dean of Students Office, the Center for Women and Community, Student Legal Services, or by live-in residential staff. "},{"title":"General Education Requirements​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#general-education-requirements","content":""},{"title":"Statement​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#statement","content":"CICS 110 is a 4-credit General Education course that satisfies the R2 (Analytic Reasoning) general education requirements for graduation. The General Education Program at the University of Massachusetts Amherst offers students a unique opportunity to develop critical thinking, communication, and learning skills that will benefit them for a lifetime. For more information about the General Education Program, please visit the GenEd webpage. "},{"title":"General Education Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#general-education-learning-outcomes","content":"The General Education Program has four common objectives that pervade all designations. INFO 190S satisfies the following General Education objectives: Content: Students will know fundamental questions, ideas, and methods of analysis in computing. In particular, students will learn how to problem solve using a modern programming language, apply programming and problem solving to real world problems. Critical Thinking: Students will apply and demonstrate creative, analytical, quantitative, &amp; critical thinking through inquiry, problem solving, &amp; synthesis. Students will use critical thinking skills to solve problems from a computational perspective. As part of the problem-solving process students will use logical reasoning to create algorithms and data structures to develop programs that put their solutions into action. Furthermore, students will investigate aspects of performance and comparisons of equivalent algorithms to draw conclusions on efficiency. Lastly, students will explore and ask questions about real world problems and apply various forms of data analysis to answer these questions. Communication: Students will develop their writing skills through various assignments that require an articulation of their solution. They will also practice their oral communication by demonstrating their work (i.e., explaining an algorithm or technique) through a recorded video that will be part of assignment submissions. Connections: Students will connect the material in this course to real world problems such as using programming techniques to predict population size in the future and how that relates to pollution as well as many other issues that exist today. The goal of this course is to intentionally provide a connection between the concepts that are covered and how it impacts the world. This course is not only about learning how to program, it is about how to code to answer questions and to push forward and investigate how to construct solutions to solve problems. "},{"title":"R2 Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#r2-learning-outcomes","content":"This course will satisfy the R2 learning outcomes. In particular, it will advance student’s formal reasoning skills beyond the basic competency level by having them solve programming challenges on a weekly basis using a programming language. This will also increase a student’s sophistication as a consumer of numerical information as they must have a fundamental understanding of how a computer represents information (numerical or otherwise) in a discrete environment. Clearly, computer literacy is established in this context and naturally the limits of formal methods and the abuse of numerical arguments will be covered as part of developing programs and solving problems in general. "},{"title":"Schedule​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#schedule","content":"The following is a schedule of topics and assignments for this course. This schedule may change as the course progresses based on uncontrolled circumstances, student progress and understanding, or any other reason the instructor determines is a valid reason to make a change. "},{"title":"Week 1 (9/6 - 9/9) Introduction to Programming​","type":1,"pageTitle":"Syllabus","url":"/guides/syllabus#week-1-96---99-introduction-to-programming","content":"Meetings Lecture 1 Introduction to Computers and ProgramsLab 1 Introduction Activities Attend class and participate in the Friday labSignup with Piazza and GradescopeRegister with zyBook: 190S Introduction to ProgrammingRead zyBook Chapter 1: Introduction to ProgrammingInstall and Setup Visual Student Code (VScode)Sign Academic Honesty PledgeComplete Homework 1 and Lab 1 "},{"title":"Schedule","type":0,"sectionRef":"#","url":"/guides/syllabus/schedule","content":"Schedule","keywords":""},{"title":"Setting up VSCode","type":0,"sectionRef":"#","url":"/guides/vscode","content":"Setting up VSCode These guides serve to get your VSCode environment setup","keywords":""},{"title":"Python Debugger","type":0,"sectionRef":"#","url":"/guides/vscode/debugger","content":"Python Debugger This guide is a work-in-progress on how to best use the VSCode debugger. If you have installed the Python VSCode extension, then you already have the debugger installed. For a guide on how to use the debugger, see this tutorial on the Microsoft website.","keywords":""},{"title":"Installing VSCode Extensions","type":0,"sectionRef":"#","url":"/guides/vscode/extensions","content":"Installing VSCode Extensions","keywords":""},{"title":"Timeline","type":0,"sectionRef":"#","url":"/guides/syllabus/timeline","content":"","keywords":""},{"title":"🧱 Lecture 1 Introduction (Tu 2/7)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-1-introduction-tu-27","content":"introduction to the course, administrative details, submission policy, collaboration, tokens, Gradescope, Moodle, website, an example of a Python program using a GUI. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading","content":"MoodleWebsiteSyllabus "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics","content":"Course administration Moodle (where deadlines and submission instructions are)Website (where information is - guides, assignments, etc.)Communication (Piazza, Trello - email)Grades (how we compute grades)Collaboration policy (collaborate, submit as groups, annotate with names)Gradescope (how to submit - link to guide)Tokens and how they workSubmission policy Submit to Gradescope or MoodleAccommodation students fit into submission (1 day, no penalty) Extensions (email to Trello - be explicit about what is acceptable) What is programming (computer/software organization overview)An example Python program "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread","content":"None at this time. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes","content":"None at this time. "},{"title":"🧱 Lecture 2 Programming and Python (Th 2/9)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-2-programming-and-python-th-29","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-1","content":"Chapter 1: Introduction to Programming "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-1","content":"Programming with PythonDevelopment environment and setup (this is a demonstration) VSCodeBasic I/OPython shellWriting a programRunning a programWhat is an error and what does it look like Demonstrate the use of the Python shellDemonstrate a basic console program with I/O (input, print)Demonstrate a program that uses a GUI using tkinter. The purpose of this is to excite students that they will be able to write a similar program. "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-1","content":"None at this time. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-1","content":"Only use print, nothing fancyOnly use input, nothing fancyDemonstrate a basic GUI using tkinter. Something students will be able to create by the end of this class. "},{"title":"🧪 Lab 1 (Fr 2/10)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-1-fr-210","content":"Python setup and writing a program from scratch to solve a problem.Explain what an editor like VSCode is and why it is useful for the programmer.Explain how to create a folder, create a Python file, start coding. "},{"title":"🧱 Lecture 3 Arithmetic Expressions and Evaluation (Tu 2/14)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-3-arithmetic-expressions-and-evaluation-tu-214","content":"arithmetic expressions and various operators. Spend some time on modulo - students often are confused about this. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-2","content":"Chapter 2: Variables and Expressions "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-2","content":"Variables and assignmentsIdentifiersObjectsNumeric typesArithmetic expressions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-2","content":"None at this time. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-2","content":"None at this time. "},{"title":"🧱 Lecture 4: Variables and Assignment (Th 2/16)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-4-variables-and-assignment-th-216","content":"cover variables, assignments, identifiers. Introduce control flow diagrams and memory traces. Introduce assert to prove a variable contains a value. This will require the == operator. This is ok. Explain what equivalence means here. Two values are equivalent, two variables referencing the same value are equivalent. Variables do not hold values, they refer to places in memory that hold values. Introduce a module (Math) explain how it is used. Introduce tkinter and show how we can get input using a GUI. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-3","content":"Chapter 2: Variables and Expressions "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-3","content":"Python expressionsDivision and moduloModule basicsMath module`Representing textGUI "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-3","content":"assert is introduced here, this will be a common thread. Use it to prove everything that is introduced. assert a == 4.Control flow diagrams are introduced, this will continue forwardMemory trace diagrams are introduced, this will continue forwardBasic GUI modals are introduced using tkinter.simpledialog. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-3","content":"Transition students form basic I/O to GUI. Explain the difference and remind them that both are very important to know about in future classes. They must be able to run a Python program from the command line as well as from within VSCode.Introduce the conditional main construct: if __name__ == '__main__:'. It will be important to know about this now so we can execute programs easily. The associated reading is in 2.8 Module basics. Show the very basic difference between running a Python file as a script or using import to treat it like a module.  "},{"title":"🧪 Lab 2 (Fr 2/17)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-2-fr-217","content":"How to use assert with basic variables and their valuesHow to use VSCode effectivelyHow to use the VSCode debugger with basic variables and their values Step, step over, step in, etc.Watching variables and their valuesDo not talk about the stack (to early for that, wait until functions) Broken programs and invalid variable names - exercise: fix theseLearn how to find and read Python documentationComplete an exercise using assert and the debugger "},{"title":"🧱 Lecture 5: Data Types (Tu 2/21)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-5-data-types-tu-221","content":"covers the string and list data types. Demonstration programs that use them, show control flow and memory diagrams, use GUI modals for I/O along with console examples. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-4","content":"Chapter 3: Types "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-4","content":"String basicsList basicsTuple basicsSet basics "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-4","content":"Use memory diagram to show the different representations of data types.Use control flow diagrams to explain any code that is writtenUse assert to prove the code that is written.Use GUI modals from tkinter for I/O.Use console I/O to show an alternative to GUI.Show how to use the VSCode debugger. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-4","content":"It is important to emphasize to students the control flow diagram and memory trace diagrams to gain understanding on how programs flow and what data structures look like in memory. This is an important developmental part of creating a mental model of computation. This should not be underestimated. You must demonstrate control flow and memory diagrams at this stage. It will provide the necessary scaffolding for the next topic.Use the debugger to trace through the code. Connect it with the control flow and memory diagram. Show them the basics of understanding the code through the debugger. Connect the changes in program state to what is displayed in the debugger. "},{"title":"🧱 Lecture 6: Representation (Th 2/23)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-6-representation-th-223","content":"Show the representation of types, how to convert from one to another (string to int/float), binary numbers, and the formatting of strings. Again, use control flow diagrams and memory diagrams to demonstrate how execution works and how the data is organized in memory. Use GUI modals for I/O along with console examples. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-5","content":"Chapter 3: Types "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-5","content":"Dictionary basicsType conversionsBinary numbersString formatting "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-5","content":"Use memory diagram to show the different representations of data types.Use control flow diagrams to explain any code that is writtenUse assert to prove the code that is written.Use GUI modals from tkinter for I/O.Use console I/O to show an alternative to GUI.Show how to use the VSCode debugger. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-5","content":"It is important to emphasize to students the control flow diagram and memory trace diagrams to gain understanding on how programs flow and what data structures look like in memory. This is an important developmental part of creating a mental model of computation. This should not be underestimated. You must demonstrate control flow and memory diagrams at this stage. It will provide the necessary scaffolding for the next topic.Use the debugger to trace through the code. Connect it with the control flow and memory diagram. Show them the basics of understanding the code through the debugger. Connect the changes in program state to what is displayed in the debugger. "},{"title":"🧪 Lab 3 (Fr 2/24)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-3-fr-224","content":"How to use assert effectivelyHow to use VSCode effectivelyHow to use the VSCode debuggerComplete an exercise using assert and the debugger "},{"title":"🧱 Lecture 7: Exam 1 (Tu 2/28)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-7-exam-1-tu-228","content":""},{"title":"📚 Topic Covered​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-topic-covered","content":"This is the first exam for the course. It will cover the following: Chapter 1: Introduction to ProgrammingChapter 2: Variables and ExpressionsChapter 3: TypesTopics presented in Lectures 1-6Material covered in Labs 1-3 "},{"title":"📝 Exam Structure​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-exam-structure","content":"You will have 75 minutes to complete Exam 1The exam will consist of the following question types: Multiple choiceMatchingTrue/FalseWriting code (precise Python syntax is not required, but you will need to be close enough for it to be considered a solution) The exam will have approximately 30-40 questions.The exam is closed book, closed notes, and closed computer.You must complete the exam individually "},{"title":"🧱 Lecture 8: Branching Basics with Equality (Th 3/2)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-8-branching-basics-with-equality-th-32","content":"Making decisions in an algorithm. Control flow diagrams demonstrating branching and what it looks like. Use simple I/O (input/print) to write a program along with a control flow diagram. Discuss equality and what it means. How are objects equal? How are they not equal? Demonstrate all of this with code, control flow diagrams, and memory traces. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-6","content":"Chapter 4: Branching "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-6","content":"Basics of if/else branchesWhat are &quot;equal&quot; valuesDetecting equal values with branchesDetecting ranges with branches "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-6","content":"Control flow diagrams! This topic should start with control flow diagrams! Before any code is written, a control flow diagram should be introduced and displayed for students. Students must understand the concept of decision and how it changes execution.Equality is an important concept. What does it mean for one thing to be equal to another? There must be a discussion of equality - is a string &quot;1&quot; equal to the integer 1? Why or why not? This must be hammered into their heads.The assert statement must be used as part of the presentation to demonstrate that we are proving that variables contain the values we expect. Examples should include branching that is predictable and values that should be held in variables at the end of program.pre/post conditions "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-6","content":"It is imperative that students become very familiar with control flow diagrams at this state. They will be required to use them to answer questions in tests.It is critical that students understand completely memory tracing and how it works so they can understand how a program changes state. They will need to know this to complete exams.Students must be using assert for everything they writeStudents must be comfortable with the debugger at this stage. Debugging conditional statements is a critical skill. "},{"title":"🧪 Lab 4 (Fr 3/1)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-4-fr-31","content":"What do you do when your code doesn't work?Demonstrate debugging a program with a broken conditional Use print statementsUse the VSCode debugger What do you do when you are stuck? Use the &quot;Getting Unstuck Guide&quot; guide to show students what to do when they are not sure what is wrong.Complete a debugging exercise. "},{"title":"🧱 Lecture 9: Conditional Branching with Inequality (Tu 3/7)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-9-conditional-branching-with-inequality-tu-37","content":"Making decisions in an algorithm. Control flow diagrams demonstrating branching with inequality. How does this relate to ranges and gaps in decisions. Demonstrate this with a program in Python, a control flow diagram, and a memory trace. Discuss various predicates such as equality, inequality, membership and identity with in. Demonstrate a program detecting multiple features along with a control flow diagram, memory trace, and the Python code that goes along with it. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-7","content":"Chapter 4: Branching "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-7","content":"Detecting ranges using logical operatorsDetecting ranges with gapsDetecting multiple features with branchesComparing data types with common errorsMembership and identity operatorsOrder of evaluationCode blocks and indentationConditional expressions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-7","content":"Control flow diagrams! This topic should start with control flow diagrams! Before any code is written, a control flow diagram should be introduced and displayed for students. Students must understand the concept of decision and how it changes execution.Equality is an important concept. What does it mean for one thing to be equal to another? There must be a discussion of equality - is a string &quot;1&quot; equal to the integer 1? Why or why not? This must be hammered into their heads.Logical operators must be demonstrated through the use of control flow diagrams. What does it mean for one object to be less than another? How does this impact the flow of control in a program? Diagrams are critical here!The assert statement must be used as part of the presentation to demonstrate that we are proving that variables contain the values we expect. Examples should include branching that is predictable and values that should be held in variables at the end of program.pre/post conditions "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-7","content":"It is imperative that students become very familiar with control flow diagrams at this state. They will be required to use them to answer questions in tests.It is critical that students understand completely memory tracing and how it works so they can understand how a program changes state. They will need to know this to complete exams.Students must be using assert for everything they writeStudents must be comfortable with the debugger at this stage. Debugging conditional statements is a critical skill. "},{"title":"🧱 Lecture 10: Looping Basics (Th 3/9)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-10-looping-basics-th-39","content":"Present this material using a control flow diagram for a loop (before any code is written). Explain how the basic looping mechanism works and how it is executed by a machine. Introduce a while loop using Python and show how it works using a control flow diagram and memory trace. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-8","content":"Chapter 5: Loops "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-8","content":"Loops (general)While loopsCountingFor loops "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-8","content":"Control flow diagrams! This topic should start with control flow diagrams! Before any code is written, a control flow diagram should be introduced and displayed for students. Students must understand the concept of looping and how it changes execution.The assert statement must be used as part of the presentation to demonstrate that we are proving that variables contain the values we expect. Examples should include looping that is predictable and values that should be held in variables at the end of program.Present pre/post conditions of the loop and the concept of a loop invariant. Show students how to use assert to prove properties of a loop before and after each iteration of a loop.Introduce the notion of architectural design of programs. Although these are simple programs at the moment, introducing an element of design and thinking about a program as a physical artifact is important so students become aware of decisions they make in their design. Think before you code! "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-8","content":"Again, control flow diagrams and memory tracing! Super important for students to understand completely. They need a mental model for program execution. Design, draw, and explain before coding. Students should not code until they understand the design. This should be emphasized.Continue to emphasize assert with everything that is presented. We must ensure that students know how to &quot;prove&quot; that their code works.Debugging is crucial - use the VSCode debugger liberally with examples and demonstrations. Make sure to use print to show students how to see how their program is changing state.Reiterate what to do when a student is stuck and point them to the &quot;Getting Unstuck Guide&quot;. "},{"title":"🧪 Lab 5 (Fr 3/10)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-5-fr-310","content":"What do you do when your loop is broken?How to debug a loop with prints.How to debug a loop with the VSCode debugger.When you are stuck, what do you do? Review the &quot;Getting Unstuck Guide&quot;Complete a debugging exercise "},{"title":"🏝️ Spring Recess (Tu 3/14)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#️-spring-recess-tu-314","content":"Spend time reading/reviewing Chapter 5 "},{"title":"🏝️ Spring Recess (Th 3/16)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#️-spring-recess-th-316","content":"Spend time reading/reviewing Chapter 5 "},{"title":"🧱 Lecture XX: Looping and Branching (Tu 3/21)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-xx-looping-and-branching-tu-321","content":"control flow diagramsloops with branchesback and forth with control flow and code&quot;SQL&quot; statement. "},{"title":"🧱 Lecture 11: Looping Details (Tu 3/21)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-11-looping-details-tu-321","content":"Introduce the for loop and the range() function as an alternative to the while loop. Explain how they are different and when each should be used. Discuss incremental development of a program and the importance of program design before implementation using control flow diagrams and architectural drawings. These diagrams will be simple at this stage, but it will start students off on the right foot by thinking before coding. This is something that should be emphasized through out the rest of the course. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-9","content":"Chapter 5: Loops "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-9","content":"Review while and for loops again (briefly)The range() functionWhile vs for loopsNested loopsDeveloping programs incrementallyBreak and continueLoop else (special to Python - perhaps cover this in lab?)The enumerate() function "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-9","content":"Control flow diagrams! This topic should start with control flow diagrams! Before any code is written, a control flow diagram should be introduced and displayed for students. Students must understand the concept of looping and how it changes execution.The assert statement must be used as part of the presentation to demonstrate that we are proving that variables contain the values we expect. Examples should include looping that is predictable and values that should be held in variables at the end of program.Present pre/post conditions of the loop and the concept of a loop invariant. Show students how to use assert to prove properties of a loop before and after each iteration of a loop.Introduce the notion of architectural design of programs. Although these are simple programs at the moment, introducing an element of design and thinking about a program as a physical artifact is important so students become aware of decisions they make in their design. Think before you code! "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-9","content":"Again, control flow diagrams and memory tracing! Super important for students to understand completely. They need a mental model for program execution. Design, draw, and explain before coding. Students should not code until they understand the design. This should be emphasized.Continue to emphasize assert with everything that is presented. We must ensure that students know how to &quot;prove&quot; that their code works.Debugging is crucial - use the VSCode debugger liberally with examples and demonstrations. Make sure to use print to show students how to see how their program is changing state.Reiterate what to do when a student is stuck and point them to the &quot;Getting Unstuck Guide&quot;. "},{"title":"🧱 Lecture 12: Nested Data Types (Th 3/23)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-12-nested-data-types-th-323","content":"This lecture focuses on nested data types. Lists of lists, dictionaries of dictionaries, dictionaries of lists, lists of dictionaries, etc. Memory diagrams are a must here. Students must have a visual of what this looks like in memory. Examples of why nested data types are important. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-10","content":"Chapter 8: More on Strings, Lists, and Dictionaries "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-10","content":"Advanced branching and loop examplesNested data types (arrays in arrays, dictionaries of dictionaries of arrays)Debugging branching and loopsCounting how many steps a loops takes (intuitive efficiency) with branchesWhen to use which kind of loop and/or branchWhen to use break and continue "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-10","content":"Control flow diagrams and state tracing is a must here. Students will need to fully understand how to look at Python code and translate it into a control diagram and trace it. Likewise, they will need to be able to translate a control flow diagram into Python code.Focusing on assert and loop invariants is a must. Every loop should have a comment indicating the invariant(s) and an assert testing the invariant. We want students to understand what an invariant is so they are prepared for future theoretical courses.Pre/post conditions for loops.Students must have an intuitive sense of how many steps a loop takes to complete. This week should focus on the steps of a nested loop and develop some simple formulas to quantify the number of steps taken to complete a loop given some input. Do not discuss Big-O here, but develop an intuitive notion. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-10","content":"We want students to be confident in their ability to use loops and conditionals. To do that we need to make sure that they have ownership of the material. This requires lots of exercises. They should complete many exercises involving loops and branching.There are many methods associated with built-in data types. They should be presented in the context of examples rather than just a list of what exists (boring). Solid examples that exemplify the associated data type methods is important to provide context and clarity for the why and not just the how. "},{"title":"🧪 Lab 6 (Fr 3/24)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-6-fr-324","content":"An in-depth look at the various methods available to the different data types.String methodsList methodsDictionary methodsExamples of how they are usedRead documentation on data typesUse VSCode debugger to debug broken codeComplete an exercise using a selection of data type methods "},{"title":"🧱 Lecture 13: Nested Iteration (Tu 3/28)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-13-nested-iteration-tu-328","content":"Advanced examples of iterating over nested data types. Use control flow diagrams and memory tracing to help students see the what is going on. Discuss the number of steps it takes to complete a loop intuitively. Demonstrate an application that uses nested iteration using a GUI. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-11","content":"Chapter 8: More on Strings, Lists, and Dictionaries "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-11","content":"Loops for processing input (loop until some condition user inputs) branches nested in loops (command line / input processing) Loops for processing data (loop until end of data) branches evaluating that data Nested loops for processing nested objects (an array of strings).Command line argumentsList comprehensions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-11","content":"Control flow diagrams and state tracing is a must here. Students will need to fully understand how to look at Python code and translate it into a control diagram and trace it. Likewise, they will need to be able to translate a control flow diagram into Python code.Focusing on assert and loop invariants is a must. Every loop should have a comment indicating the invariant(s) and an assert testing the invariant. We want students to understand what an invariant is so they are prepared for future theoretical courses.Pre/post conditions for loops.Students must have an intuitive sense of how many steps a loop takes to complete. This week should focus on the steps of a nested loop and develop some simple formulas to quantify the number of steps taken to complete a loop given some input. Do not discuss Big-O here, but develop an intuitive notion. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-11","content":"We want students to be confident in their ability to use loops and conditionals. To do that we need to make sure that they have ownership of the material. This requires lots of exercises. They should complete many exercises involving loops and branching.There are many methods associated with built-in data types. They should be presented in the context of examples rather than just a list of what exists (boring). Solid examples that exemplify the associated data type methods is important to provide context and clarity for the why and not just the how. "},{"title":"🧱 Lecture 14: Exam 2 (Th 3/30)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-14-exam-2-th-330","content":""},{"title":"📚 Topic Covered​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-topic-covered-1","content":"This is the second exam for the course. It will cover the following: Chapter 4: BranchingChapter 5: LoopsChapter 8: More on Strings, Lists, and DictionariesTopics presented in Lectures 7-13Material covered in Labs 4-6 "},{"title":"📝 Exam Structure​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-exam-structure-1","content":"You will have 75 minutes to complete Exam 2The exam will consist of the following question types: Multiple choiceMatchingTrue/FalseWriting code (precise Python syntax is not required, but you will need to be close enough for it to be considered a solution) The exam will have approximately 30-40 questions.The exam is closed book, closed notes, and closed computer.You must complete the exam individually "},{"title":"🧪 Lab 7 (Fr 3/31)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-7-fr-331","content":"An in-depth look at the various methods available to the different data types.String methodsList methodsDictionary methodsExamples of how they are usedRead documentation on data typesUse VSCode debugger to debug broken codeComplete an exercise using a selection of data type methods "},{"title":"🧱 Lecture 15 Functions (Tu 4/4) (expand this to two additional classes)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-15-functions-tu-44-expand-this-to-two-additional-classes","content":"Introduce the basics of functions. Focus on top-down design and how to decompose a problem into smaller parts. Define functions for the smaller parts. How input/output to functions work. What does all of this look like in a control flow diagram? "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-12","content":"Chapter 6: Functionsdoctest (testing Python functions) "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-12","content":"User-defined functionsTop-down design / bottom-up designDynamic typingReasons for defining functionsMathematical functions and function stubsFunctions with branches and loopsFunction argumentsTesting functions using doctest "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-12","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a functionMemory tracing with functions (separate memory for now, a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracingTesting functions using assert and doctest "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-12","content":"At this point in the class we want students to have a firm grasp of programming using the basic primary constructs of the language: branching, loops, and functions. We also want them to know how to evaluate a problem and solve it using a programming language. We want them to be able to break that problem down into smaller parts and write functions. We also want them to be capable of using the built-in types and functions to solve those problems.Students should know how to proceed when they are stuck. They should have the tools from the previous 6 weeks that will help them debug a program and determine where the problem is. We should probably have a rule that they can't ask a question unless they can narrow the scope of the issue to 5 lines of code. "},{"title":"🧱 Lecture 16 Functions and Files (Th 4/6)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-16-functions-and-files-th-46","content":"Keyword arguments, multiple return values, documenting functions. Combine this with reading/writing files. Introduce CSV files and why they are important and how are they used. Relate this to data science and the built-in library for processing CSV files. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-13","content":"Chapter 10: Filesdoctest "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-13","content":"Keyword arguments and default parameter valuesCommon errorsArbitrary argument listsMultiple return valuesDocumenting functionsInteracting with file systemsReading filesWriting filesBinary dataCommand-line argumentsThe with statementComma separated value files (CSV) "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-13","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a functionMemory tracing with functions (separate memory for now, a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracingLookup documentation for Python's file functions and objectsUse doctest to test functions "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-13","content":"At this point in the class we want students to have a firm grasp of programming using the basic primary constructs of the language: branching, loops, and functions. We also want them to know how to evaluate a problem and solve it using a programming language. We want them to be able to break that problem down into smaller parts and write functions. We also want them to be capable of using the built-in types and functions to solve those problems.Students should know how to proceed when they are stuck. They should have the tools from the previous 6 weeks that will help them debug a program and determine where the problem is. We should probably have a rule that they can't ask a question unless they can narrow the scope of the issue to 5 lines of code. "},{"title":"🧪 Lab 8 (Fr 4/7)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-8-fr-47","content":"How do you debug a function? Demonstrate how to debug a function using print statements as well as the VSCode debugger. Show students how to see the values of parameters and local variables and how to set break points in a function and how to step through and into a program with functions.An in-depth look at the CSV module. Explore how CSV file are read and written to. Look at how to process them. Look at how to read a CSV file into a dictionary and process the information in that format.Complete an exercise using the CSV module where students need to write several functions extracting information from the CSV data after it has been read in. After manipulation, the data is written to a different CSV file. Students should draw control flow diagrams and state diagrams for their functions. "},{"title":"🧱 Lecture 17 Variable Scope and Function Objects (Tu 4/11)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-17-variable-scope-and-function-objects-tu-411","content":"Discuss variable scope and what that means. How does variable scope change in the context of functions? What is a namespace and why is that an important aspect of software engineering? "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-14","content":"Chapter 7: Function Scope, Function Objects, and Modules "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-14","content":"Scope of variables and functionsNamespaces and scope resolutionFunctions are objects "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-14","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a function and emphasize scopeMemory tracing with functions (separate memory for now, a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracing "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-14","content":"Present additional tkinter dialogsDiscuss parameter validation (does the function get what you expect)Discuss error checking in a function to build robust functionsPresent &quot;defensive programming&quot;Demonstrate how to use assert to test function return values "},{"title":"🧱 Lecture 18 Modules and Event Loops (Th 4/13)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-18-modules-and-event-loops-th-413","content":"What is a module and why are they important? How do you use a module? How do you write a module? What is an interface? How do you design an interface and implement it with a module? How does this differ from the standard library? What is an event loop and how does it relate to a GUI? Write a GUI that uses an event loop. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-15","content":"Chapter 7: Function Scope, Function Objects, and Modulestkinter events and mainloop() "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-15","content":"Finding modulesImporting specific names form modulesExecuting modules as scriptsReloading modulesPackagesStandard libraryEvent loops "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-15","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a function and emphasize scopeMemory tracing with functions (separate memory for now, a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracing "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-15","content":"Present additional tkinter dialogsDemonstrate the creation of a module with module scoped variables and functions that can be importedDiscuss parameter validation (does the function get what you expect)Discuss error checking in a function to build robust functionsPresent &quot;defensive programming&quot;Demonstrate how to use assert to test function return valuesDemonstrate how to use assert to test a module "},{"title":"🧪 Lab 9 (Fr 4/14)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-9-fr-414","content":"Design an interface and implement that interface with a module.Write a module conforming to the interface that uses an event loop and GUI.How do you debug that module and GUI?Where can you use print statements? How do you use the debugger? "},{"title":"🏝️ Patriot's Day Holiday (Tu 4/18)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#️-patriots-day-holiday-tu-418","content":""},{"title":"🧱 Lecture 19: Recursion Basics (Th 4/20)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-19-recursion-basics-th-420","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-16","content":"Chapter 9: Recursion "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-16","content":"Recursive functionsCreating a recursive functionRecursive math functions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-16","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a function and emphasize scopeMemory tracing with functions (a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracing "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-16","content":"Demonstrate a memory trace of a recursive function. Highlight each invocation of a recursive call creates a different call frame on the stack with its own local variables. "},{"title":"🧪 Lab 10 (Fr 2/21)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-10-fr-221","content":""},{"title":"🧱 Lecture 20: Recursion in Depth (Tu 4/25)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-20-recursion-in-depth-tu-425","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-17","content":"Chapter 9: RecursionThe json moduleThe http module "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-17","content":"Recursive exploration of all possibilitiesRecursively processing a listRecursively processing a dictionary of dictionariesIterative map, filter, and reduceRecursive map, filter, and reduceComparison of map, filter, and reduce with list comprehensions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-17","content":"Using assert to test function parameter valuesUsing doctest to test functionsDrawing control flow diagrams for a function and emphasize scopeMemory tracing with functions (a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracing "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-17","content":"Read in a deeply structured JSON file and recurse over itRead in a deeply structured JSON document from web and recurse over it "},{"title":"🧱 Lecture 21: Exam 3 (Th 4/27)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-21-exam-3-th-427","content":"This is the third exam for the course. It will cover the following: Chapter 7: Function Scope, Function Objects, and ModulesChapter 6: FunctionsChapter 9: RecursionChapter 10: FilesTopics presented in Lectures 14-20Material covered in Labs 7-10 "},{"title":"📝 Exam Structure​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-exam-structure-2","content":"You will have 75 minutes to complete Exam 3The exam will consist of the following question types: Multiple choiceMatchingTrue/FalseWriting code (precise Python syntax is not required, but you will need to be close enough for it to be considered a solution) The exam will have approximately 30-40 questions.The exam is closed book, closed notes, and closed computer.You must complete the exam individually "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-18","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-18","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-18","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-18","content":""},{"title":"🧪 Lab 11 (Fr 4/16)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-11-fr-416","content":""},{"title":"🧱 Lecture 22 Classes (Tu 5/2)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-22-classes-tu-52","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-19","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-19","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-19","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-19","content":""},{"title":"🧱 Lecture 24 Classes (Th 5/4)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-24-classes-th-54","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-20","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-20","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-20","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-20","content":""},{"title":"🧪 Lab 12 (Fr 5/3)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-12-fr-53","content":""},{"title":"🧱 Lecture 24 Classes (Tu 5/9)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-24-classes-tu-59","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-21","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-21","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-21","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-21","content":""},{"title":"🧱 Lecture 25: Exam 4 (Cumulative) (Th 5/11)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-25-exam-4-cumulative-th-511","content":"This is the fourth exam for the course. It will cover the following: Chapter 1: Introduction to Programming Chapter 2: Variables and Expressions Chapter 3: Types Chapter 4: Branching Chapter 5: Loops Chapter 6: Functions Chapter 7: Function Scope, Function Objects, and Modules Chapter 8: More on Strings, Lists, and Dictionaries Chapter 9: Recursion Chapter 10: Files Topics presented in Lectures 1-24 Material covered in Labs 1-12 Chapter ?: ??? Chapter ?: ??? Topics presented in Lectures 14-20 Material covered in Labs 7-10 "},{"title":"📝 Exam Structure​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-exam-structure-3","content":"You will have 75 minutes to complete Exam 4The exam will consist of the following question types: Multiple choiceMatchingTrue/FalseWriting code (precise Python syntax is not required, but you will need to be close enough for it to be considered a solution) The exam will have approximately 30-40 questions.The exam is closed book, closed notes, and closed computer.You must complete the exam individually "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-22","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-22","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-22","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-22","content":""},{"title":"🧪 Lab 13 (Fr 5/10)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-13-fr-510","content":""},{"title":"🧱 Lecture 26 Conclusion (Tu 5/16)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-26-conclusion-tu-516","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-23","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-23","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-23","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-23","content":""},{"title":"Important Dates​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#important-dates","content":"First day of classes Monday February 6Last day to add or drop any class with no record – Matriculated Undergraduate and Non-degree students Monday February 13Holiday - Presidents’ Day Monday February 20Last day to add or drop any class with no record – Matriculated Graduate students Tuesday February 21Monday class schedule will be followed Wednesday February 22Spring recess begins Sunday March 12Classes resume Monday March 20Last day to Drop with &quot;DR&quot; - Graduate Monday April 10Last day to Drop with ‘W’ and select 'P/F' - Undergraduate, Stockbridge, UWW Monday April 10Patriot’s Day holiday begins Saturday April 15Classes Resume Wednesday April 19Registration begins for Fall 2023 Wednesday April 19Last day of classes Wednesday May 17Reading Day Thursday May 18Final examinations begin Friday May 19Second Reading Day Saturday May 20Last day of final examinations, semester ends Thursday May 25Commencement Weekend begins Friday May 26Commencement Weekend ends Sunday May 28Final grades due by Midnight Thursday June 1 "},{"title":"Installing VSCode","type":0,"sectionRef":"#","url":"/guides/vscode/installation","content":"Installing VSCode","keywords":""},{"title":"Test","type":0,"sectionRef":"#","url":"/labs","content":"Test aaaaaaa","keywords":""},{"title":"Changing Linter Colors","type":0,"sectionRef":"#","url":"/guides/vscode/linter-colors","content":"Changing Linter Colors Open the VSCode Command Pallet: press Ctrl+Shift+P on Windows, or ⌘+Shift+P on MacOS.Enter Preferences: Open User Settings (JSON)Scroll to the end of the file, and make a new line before the last }Insert the following snippet on the newline: &quot;workbench.colorCustomizations&quot;: { &quot;editorWarning.foreground&quot;: &quot;#ffff00&quot;, // changes warning squiggle color &quot;editorError.foreground&quot;: &quot;#ff0000&quot;, // changes error squiggle color &quot;editorInfo.foreground&quot;: &quot;#3794ff&quot; // changes information squiggle color } Update the colors you would like to change info The # followed by 6 characters is the &quot;hex code&quot; of a particular color. If you want to change the underline to a particular color, search that color's hex code, and replace the appropriate hex code. For example, to change the warning's color, I googled &quot;yellow hex code&quot;, and put it in the warning line after the colon but before the comment. Delete the lines of any colors you do not wish to change For example, I just want change my warning color to yellow, and don't want to change the info and error line colors. Therefore, the last 7 lines of my settings.json looks like settings.json &quot;git.confirmSync&quot;: false, &quot;diffEditor.ignoreTrimWhitespace&quot;: false, &quot;workbench.colorCustomizations&quot;: { &quot;editorWarning.foreground&quot;: &quot;#ffff00&quot;, } } ","keywords":""},{"title":"Lecture 3: Arithmetic Expressions and Evaluation","type":0,"sectionRef":"#","url":"/lectures/arith-expr-and-eval","content":"Lecture 3: Arithmetic Expressions and Evaluation aaaaaaa","keywords":""},{"title":"Lecture 8: Branching Basics with Equality","type":0,"sectionRef":"#","url":"/lectures/branching-with-equality","content":"Lecture 8: Branching Basics with Equality aaaaaaa","keywords":""},{"title":"Lecture 26: Classes and Exceptions","type":0,"sectionRef":"#","url":"/lectures/classes-and-exceptions","content":"Lecture 26: Classes and Exceptions aaaaaaa","keywords":""},{"title":"index","type":0,"sectionRef":"#","url":"/lectures","content":"","keywords":""},{"title":"Important Dates​","type":1,"pageTitle":"index","url":"/lectures#important-dates","content":"First day of classes Monday February 6Last day to add or drop any class with no record – Matriculated Undergraduate and Non-degree students Monday February 13Holiday - Presidents’ Day Monday February 20Last day to add or drop any class with no record – Matriculated Graduate students Tuesday February 21Monday class schedule will be followed Wednesday February 22Spring recess begins Sunday March 12Classes resume Monday March 20Last day to Drop with &quot;DR&quot; - Graduate Monday April 10Last day to Drop with ‘W’ and select 'P/F' - Undergraduate, Stockbridge, UWW Monday April 10Patriot’s Day holiday begins Saturday April 15Classes Resume Wednesday April 19Registration begins for Fall 2023 Wednesday April 19Last day of classes Wednesday May 17Reading Day Thursday May 18Final examinations begin Friday May 19Second Reading Day Saturday May 20Last day of final examinations, semester ends Thursday May 25Commencement Weekend begins Friday May 26Commencement Weekend ends Sunday May 28Final grades due by Midnight Thursday June 1 "},{"title":"Lecture 25: Classes Basics","type":0,"sectionRef":"#","url":"/lectures/classes-basics","content":"Lecture 25: Classes Basics aaaaaaa","keywords":""},{"title":"Lecture 5: Data Types","type":0,"sectionRef":"#","url":"/lectures/data-types","content":"Lecture 5: Data Types aaaaaaa","keywords":""},{"title":"Lecture 9: Conditional Branching with Inequality","type":0,"sectionRef":"#","url":"/lectures/conditional-branching","content":"Lecture 9: Conditional Branching with Inequality aaaaaaa","keywords":""},{"title":"Lecture 15: Exam 2","type":0,"sectionRef":"#","url":"/lectures/exam-2","content":"Lecture 15: Exam 2 aaaaaaa","keywords":""},{"title":"Lecture 7: Exam 1","type":0,"sectionRef":"#","url":"/lectures/exam-1","content":"Lecture 7: Exam 1 aaaaaaa","keywords":""},{"title":"Lecture 24: Exam 3","type":0,"sectionRef":"#","url":"/lectures/exam-3","content":"Lecture 24: Exam 3 aaaaaaa","keywords":""},{"title":"Lecture 18: Function Design","type":0,"sectionRef":"#","url":"/lectures/function-design","content":"Lecture 18: Function Design aaaaaaa","keywords":""},{"title":"Lecture 16: Function Basics","type":0,"sectionRef":"#","url":"/lectures/function-basics","content":"Lecture 16: Function Basics aaaaaaa","keywords":""},{"title":"Lecture 19: Functions and Files","type":0,"sectionRef":"#","url":"/lectures/functions-and-files","content":"Lecture 19: Functions and Files aaaaaaa","keywords":""},{"title":"Lecture 17: Function Parameters","type":0,"sectionRef":"#","url":"/lectures/function-parameters","content":"Lecture 17: Function Parameters aaaaaaa","keywords":""},{"title":"Lecture 1: Introduction","type":0,"sectionRef":"#","url":"/lectures/introduction","content":"Lecture 1: Introduction aaaaaaa","keywords":""},{"title":"Lecture 11: Looping and Branching","type":0,"sectionRef":"#","url":"/lectures/looping-and-branching","content":"Lecture 11: Looping and Branching aaaaaaa","keywords":""},{"title":"Lecture 10: Looping Basics","type":0,"sectionRef":"#","url":"/lectures/looping-basics","content":"Lecture 10: Looping Basics aaaaaaa","keywords":""},{"title":"Lecture 12: Looping Details","type":0,"sectionRef":"#","url":"/lectures/looping-details","content":"Lecture 12: Looping Details aaaaaaa","keywords":""},{"title":"Lecture 21: Modules and Event Loops","type":0,"sectionRef":"#","url":"/lectures/modules-and-event-loops","content":"Lecture 21: Modules and Event Loops aaaaaaa","keywords":""},{"title":"Lecture 14: Nested Iteration","type":0,"sectionRef":"#","url":"/lectures/nested-iteration","content":"Lecture 14: Nested Iteration aaaaaaa","keywords":""},{"title":"Lecture 13: Nested Data Types","type":0,"sectionRef":"#","url":"/lectures/nested-data-types","content":"Lecture 13: Nested Data Types aaaaaaa","keywords":""},{"title":"Lecture 2: Programming and Python","type":0,"sectionRef":"#","url":"/lectures/programming-and-python","content":"Lecture 2: Programming and Python aaaaaaa","keywords":""},{"title":"Lecture 22: Recursion Basics","type":0,"sectionRef":"#","url":"/lectures/recursion-basics","content":"Lecture 22: Recursion Basics aaaaaaa","keywords":""},{"title":"Lecture 23: Recursion in Depth","type":0,"sectionRef":"#","url":"/lectures/recursion-in-depth","content":"Lecture 23: Recursion in Depth aaaaaaa","keywords":""},{"title":"Lecture 6: Representation","type":0,"sectionRef":"#","url":"/lectures/representation","content":"Lecture 6: Representation aaaaaaa","keywords":""},{"title":"Lecture 20: Variable Scope and Function Arguments","type":0,"sectionRef":"#","url":"/lectures/scope-and-func-objects","content":"Lecture 20: Variable Scope and Function Arguments aaaaaaa","keywords":""},{"title":"Lecture 4: Variables and Assignment","type":0,"sectionRef":"#","url":"/lectures/variables-and-assignment","content":"Lecture 4: Variables and Assignment aaaaaaa","keywords":""}]