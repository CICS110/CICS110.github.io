"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3379],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(h,i(i({ref:t},m),{},{components:n})):a.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79225:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={title:"Section 04 (Jared Yeager)"},i="Events and GUIs",l={unversionedId:"GUIs/Jared/index",id:"GUIs/Jared/index",title:"Section 04 (Jared Yeager)",description:"I've never really made a GUI (Graphic User Interface),",source:"@site/main/lectures/23_GUIs/Jared/index.md",sourceDirName:"23_GUIs/Jared",slug:"/GUIs/Jared/",permalink:"/main/lectures/GUIs/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 23 GUIs",permalink:"/main/lectures/GUIs/"}},s={},p=[{value:"Events",id:"events",level:2},{value:"GUIs",id:"guis",level:2},{value:"tkinter module",id:"tkinter-module",level:3},{value:"Labels",id:"labels",level:3},{value:"Buttons",id:"buttons",level:3}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"events-and-guis"},"Events and GUIs"),(0,o.kt)("p",null,"I've never really made a GUI (Graphic User Interface),\nmuch less worked with Python's tkinter module.\nSo while the first half of these notes will be pontifications about the\nabstract notion of events, the second half is going to be more of a travel log\nfollowing my attempt to learn the basics of tkinter."),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("p",null,"Consider the following snippet of code.\nRun it, interact with it a bit, and feel how it responds/reacts to you."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'while True:\n  inp = input(">>> ")\n  if inp == "quit":\n    break\n  print(f"Text: {inp}\\n")\n')),(0,o.kt)("p",null,'When we, not as programmers, but as casual users, interact with programs;\nthere is this abstract view of that interaction as "us doing something,\nand the program reacting/responding".'),(0,o.kt)("p",null,"For example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In that above program: we enter some text, and then it is repeated back to us."),(0,o.kt)("li",{parentName:"ul"},"In video games: we press buttons on a controller, the character moves."),(0,o.kt)("li",{parentName:"ul"},"My writing this in a text-editor: I press a butting on my keyboard,\na letter appears in my text editor."),(0,o.kt)("li",{parentName:"ul"},"We swipe a mouse or a finger across a track pad, a cursor moves.")),(0,o.kt)("p",null,"There are so many cases where a computer/program waits for us to do something,\nwe do something, and the computer/program responds/reacts."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'We talk about the "doing something" as an ',(0,o.kt)("em",{parentName:"li"},"event")),(0,o.kt)("li",{parentName:"ul"},"We talk about the reacting as ",(0,o.kt)("em",{parentName:"li"},"handling")," the event,"),(0,o.kt)("li",{parentName:"ul"},"And we talk about the process of doing this over-and-over as an ",(0,o.kt)("em",{parentName:"li"},"event loop"),".")),(0,o.kt)("p",null,'And this outlook of "we do a thing, the computer/program reacts" is\nthe view we want to have in mind when trying to think about ',(0,o.kt)("em",{parentName:"p"},"graphic user interfaces"),"\n(GUIs)."),(0,o.kt)("h2",{id:"guis"},"GUIs"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"graphic user interface")," (GUI) is a more aesthetically pleasing (graphic)\npresentation of the program for the user to interact with (an interface)."),(0,o.kt)("p",null,"After all, when we use programs in our everyday life, we don't do it through a terminal,\nwe have some sort of GUI presented to us.\nGUIs are essential for a more user-friendly presentation of the program,\nbut they are something of a dragon for us to wrestle with and to get to a pleasing state."),(0,o.kt)("p",null,"We'll look at a sometimes-built-in Python module for making primitive GUIs,\ntkinter, to get the of what making a GUI can look like.\nWe'll give our GUI some simple functionality,\nbearing in mind the notion that ultimately we want\nthe user to be able to do something/",(0,o.kt)("em",{parentName:"p"},"trigger")," an event (e.g., click a button in the GUI),\nand the program to react to/handle that event (e.g., increase a counter)."),(0,o.kt)("h3",{id:"tkinter-module"},"tkinter module"),(0,o.kt)("p",null,"We'll be working with Python's tkinter module.\nSo let's start where we always should, with the smallest possible working example."),(0,o.kt)("p",null,"GUIs have a notion of ",(0,o.kt)("em",{parentName:"p"},"windows"),",\na displayed region presenting information and functionality for the program.\nThe ",(0,o.kt)("em",{parentName:"p"},"front-end")," we like to say (as opposed to the ",(0,o.kt)("em",{parentName:"p"},"back-end")," or guts of the program/app)."),(0,o.kt)("p",null,"So the most minimal GUI would be an empty window. Code for that will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from tkinter import Tk\n\nwindow = Tk()\n\nwindow.mainloop()\n")),(0,o.kt)("p",null,"This code imports the ",(0,o.kt)("inlineCode",{parentName:"p"},"Tk")," class, which is then used to make a window.\nIt then calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"mainloop()")," method, which displays/pops-up the window."),(0,o.kt)("p",null,"There is a lot that can be done to customise the window\n(far more than I know, see official documentation or deeper guides).\nBut for our purposes, we'll just give it a title and set the size."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'from tkinter import Tk\n\nwindow = Tk()\nwindow.title("My App")\nwindow.geometry("640x480")\n\nwindow.mainloop()\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"title()"),' method sets the title, note the "My App" name on the title bar.'),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},'geometry("640x480")')," method call sets the size of the window (excluding the title bar).\nIt seems to take in a string of the form ",(0,o.kt)("inlineCode",{parentName:"p"},'"WIDTH_IN_PIXELSxHEGHT_IN_PIXELS"'),".\n",(0,o.kt)("em",{parentName:"p"},"Pixels"),' are a sort of "smallest element of an image".'),(0,o.kt)("h3",{id:"labels"},"Labels"),(0,o.kt)("p",null,"Next step, let's display some information.\nFor the sake of making small working examples, let's go for a \"Hello, World!\" in GUI land."),(0,o.kt)("p",null,"In tkinter world, labels seem to be the text-based entity. So we can make and place a label:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'from tkinter import Tk, Label\n\nwindow = Tk()\nwindow.title("My App")\nwindow.geometry("640x480")\n\nlabel = Label(text="Hello World!", font=("Helvetica", 64, "bold"))\nlabel.place(x=320, y=100, anchor="center")\n\nwindow.mainloop()\n')),(0,o.kt)("p",null,"The label constructor can take many things, but we use:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"text"),", the text we want displayed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"font"),", information about the font of the text being displayed")),(0,o.kt)("p",null,"That defines the label, but we still need to place it in our window.\nThis is done with the ",(0,o.kt)("inlineCode",{parentName:"p"},"place()")," method."),(0,o.kt)("p",null,"The coordinate system needs some explanation.\nIn the world of graphics,\nit is common to see the upper-left corner be considered ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mn",{parentName:"mrow"},"0"),(0,o.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,o.kt)("mn",{parentName:"mrow"},"0"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(0,0)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord"},"0"),(0,o.kt)("span",{parentName:"span",className:"mpunct"},","),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"0"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))," (the origin).\nThis intuition comes from what it would look like if you printed a 2D ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),"-by-",(0,o.kt)("inlineCode",{parentName:"p"},"m")," list:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lst[0][0]")," would be in upper-left"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lst[0][m-1]")," would be in upper-right"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lst[n-1][0]")," would be in lower-left"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lst[n-1][m-1]")," would be in lower-right")),(0,o.kt)("p",null,"So placing at ",(0,o.kt)("inlineCode",{parentName:"p"},"x=320, y=100")," is placing at 320 pixels from the left,\nand 100 pixels down from the top.\nAnd this is where the anchor (in this case the centre) of the label is placed\n(the default anchor is upper-left corner of a rectangle around the text)."),(0,o.kt)("h3",{id:"buttons"},"Buttons"),(0,o.kt)("p",null,"Finally, we can start trying to make this application something the user can interact with.\nWe'll start by adding a button, the basics of which parallel adding the label."),(0,o.kt)("p",null,"The eventual goal of the button will be to increase a counter.\nSo we'll create something to track that counter (I'll explain why a dictionary later),\nand change the label accordingly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'from tkinter import Tk, Label, Button\n\nwindow = Tk()\nwindow.title("My App")\nwindow.geometry("640x480")\n\nstate = {"count": 0}\n\nlabel = Label(text=f"Count: {state[\'count\']}", font=("Helvetica", 64, "bold"))\nlabel.place(x=320, y=100, anchor="center")\n\nbutton =  Button(text="Increase Count", font=("Helvetica", 32))\nbutton.place(x=320, y=300, anchor="center")\n\nwindow.mainloop()\n')),(0,o.kt)("p",null,"Now, The button exists and is clickable, but it doesn't actually do anything.\nConsidering the event-based worldview, clicking the button is an event,\nand what we need to do is set an event handler for that event."),(0,o.kt)("p",null,"We do this by defining a function that is to be run when the button is clicked and\nthen specifying that function as the event handler in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Button()")," constructor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'from tkinter import Tk, Label, Button\n\nwindow = Tk()\nwindow.title("My App")\nwindow.geometry("640x480")\n\nstate = {"count": 0}\n\nlabel = Label(text=f"Count: {state[\'count\']}", font=("Helvetica", 64, "bold"))\nlabel.place(x=320, y=100, anchor="center")\n\ndef increase_count():\n  state[\'count\'] += 1\n  label["text"] = f"Count: {state[\'count\']}"\n\nbutton =  Button(text="Increase Count", font=("Helvetica", 32), command=increase_count)\nbutton.place(x=320, y=300, anchor="center")\n\nwindow.mainloop()\n')),(0,o.kt)("p",null,"The reason that a ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," dictionary was used was so that fields of it (e.g., count)\ncould be edited in the ",(0,o.kt)("inlineCode",{parentName:"p"},"increase_count()")," function without risk of shadowing the variable."),(0,o.kt)("p",null,"But there it is, a sort of minimal GUI application, that can handle events from a user\nand can display information to that user."))}c.isMDXComponent=!0}}]);