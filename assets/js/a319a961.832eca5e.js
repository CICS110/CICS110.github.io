"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7073],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var o=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return t?o.createElement(h,r(r({ref:n},u),{},{components:t})):o.createElement(h,r({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<a;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},92618:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=t(87462),i=(t(67294),t(3905));const a={title:"Section 04 (Jared Yeager)"},r="Looping",l={unversionedId:"while-loops/Jared/index",id:"while-loops/Jared/index",title:"Section 04 (Jared Yeager)",description:"Repeating Actions",source:"@site/main/lectures/09-while-loops/Jared/index.md",sourceDirName:"09-while-loops/Jared",slug:"/while-loops/Jared/",permalink:"/main/lectures/while-loops/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 09 While Loops",permalink:"/main/lectures/while-loops/"}},s={},p=[{value:"Repeating Actions",id:"repeating-actions",level:2},{value:"Control Flow Diagrams",id:"control-flow-diagrams",level:2},{value:"While",id:"while",level:2},{value:"Break",id:"break",level:2},{value:"Shifting the Loop",id:"shifting-the-loop",level:3},{value:"Breaking Out of the Loop",id:"breaking-out-of-the-loop",level:3},{value:"Nesting",id:"nesting",level:3},{value:"Continue",id:"continue",level:2},{value:"Nesting",id:"nesting-1",level:3}],u={toc:p};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"looping"},"Looping"),(0,i.kt)("h2",{id:"repeating-actions"},"Repeating Actions"),(0,i.kt)("p",null,"There are times where we would like to repeat an action,\nor variations of an action, multiple times."),(0,i.kt)("p",null,'Imagine, for instance, counting down until a rocket blasts off:\n"10 ... 9 ... ... 1 ... Blast Off!".\nThere is a sort of mental counter, starting at 10,\nthat we repeatedly say out loud and then decrease, until it is 0,\nat which point we say "Blast off!".'),(0,i.kt)("p",null,"We could certainly represent this in code for fixed ",(0,i.kt)("inlineCode",{parentName:"p"},"10"),' with brute force,\nbut if we wanted the countdown to start from some arbitrary number, we\'d be out of luck.\nWe lack the ability to do any sort of "conditional repetition".'),(0,i.kt)("p",null,"So lets fix that, and in the process,\nacquire that last bit of core programming machinery we are missing."),(0,i.kt)("h2",{id:"control-flow-diagrams"},"Control Flow Diagrams"),(0,i.kt)("p",null,"But first, what does that repetition look like in terms of our control flow diagrams?"),(0,i.kt)("p",null,"The countdown example can be represented as below:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3einit[Set mental\\ncount to 10]\n  init--\x3ecnt{Is mental\\ncount 0?}\n  cnt--\x3e|True|done["Say &quot;Blast Off!&quot;"]\n  cnt--\x3e|False|say[Say mental\\ncount value]\n  say--\x3edec[Decrease mental\\ncount by 1]\n  dec--\x3ecnt'}),(0,i.kt)("p",null,"That's right, we totally can have arrows that point to previous steps.\nAnd when that happens, we get a ",(0,i.kt)("em",{parentName:"p"},"loop"),"."),(0,i.kt)("p",null,'We can even read that loop as saying\n"',(0,i.kt)("em",{parentName:"p"},"while"),' count is not 0, say (print) count value and decrease count".'),(0,i.kt)("h2",{id:"while"},"While"),(0,i.kt)("p",null,"Which brings us to the ",(0,i.kt)("em",{parentName:"p"},"while loop"),"."),(0,i.kt)("p",null,"The most basic while loop statement is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"while condition:\n  code\n\nmore_code\n")),(0,i.kt)("p",null,"We have the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"while"),", some boolean ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," (variable/expression), a ",(0,i.kt)("inlineCode",{parentName:"p"},":"),",\nand some ",(0,i.kt)("strong",{parentName:"p"},"indented")," block of ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," (can be multiple lines).\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," is not part of the while loop, just some context around it."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),",\nthen the flow of execution will enter the while block and ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," will be executed;\nthen the ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," will be checked again, and if it again is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"code")," will be executed again. This will repeat until ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),",\neither the first time it is checked or sometime after ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," was executed,\nthen the flow of execution will skip over the while block and ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," will be executed."),(0,i.kt)("p",null,"As an example, here is code for the countdown scenario:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=While",live_py:!0,title:"While"},'count = 10\nwhile count != 0:\n  print(f"{count}...")\n  count -= 1 # equivalent to count = count - 1\nprint("Blastoff!")\n')),(0,i.kt)("p",null,"Compare this to the control flow diagram from earlier:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3einit[Set mental\\ncount to 10]\n  init--\x3ecnt{Is mental\\ncount 0?}\n  cnt--\x3e|True|done["Say &quot;Blast Off!&quot;"]\n  cnt--\x3e|False|say[Say mental\\ncount value]\n  say--\x3edec[Decrease mental\\ncount by 1]\n  dec--\x3ecnt'}),(0,i.kt)("p",null,"The logical flow based on the decision and the flow of the looping is the same."),(0,i.kt)("h2",{id:"break"},"Break"),(0,i.kt)("p",null,"There is still a snag.\nYou can see a fairly clear correspondence between while loops and control flow diagrams\nwhen the loop starts on the diamond:\nthe diamond becomes the condition for the while loop,\nand the commands on the loop become the code block."),(0,i.kt)("p",null,"But what if the loop doesn't start on the condition?\nConsider reading in a bunch of numbers until you see the word ",(0,i.kt)("inlineCode",{parentName:"p"},'"done"'),",\nand then adding all the previous numbers together.\nA control flow diagram for that might look like:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3einit[Make empty list]\n  init--\x3ein["Get input\\n(a string)"]\n  in--\x3edone{"Is input\\n&quot;done&quot;?"}\n  done--\x3e|True|sum[Sum list]\n  sum--\x3eprint[Print sum]\n  done--\x3e|False|conv[Convert input\\nto an int]\n  conv--\x3eadd[Add number\\nto list]\n  add--\x3ein'}),(0,i.kt)("p",null,"For while loops, the ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," which determines the looping needs to be the first thing.\nSo this can not be directly translated."),(0,i.kt)("h3",{id:"shifting-the-loop"},"Shifting the Loop"),(0,i.kt)("p",null,"We can tackle this with our existing machinery.\nFirst consider the looping part in isolation:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  in["Get input\\n(string)"]--\x3edone{"Is input\\n&quot;done&quot;?"}\n  done--\x3e|False|conv[Convert input\\nto number]\n  conv--\x3eadd[Add number\\nto list]\n  add--\x3ein'}),(0,i.kt)("p",null,"As just a pure loop,\nwe can see that control-flow wise this is equivalent to the same loop with the starting point shifted:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  done{"Is input\\n&quot;done&quot;?"}--\x3e|False|conv[Convert input\\nto number]\n  conv--\x3eadd[Add number\\nto list]\n  add--\x3ein["Get input\\n(string)"]\n  in--\x3edone'}),(0,i.kt)("p",null,'But putting that back into the original context is a little trickier.\nThe key difference in context is that there is an original "Get input".\nBut after that, the core loop is the same.'),(0,i.kt)("p",null,'We can consider that initial "Get input" as a one-off,\nand have our core loop start with the diamond. That gets us the following:'),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3einit[Make empty list]\n  init--\x3ein["Get input\\n(a string)"]\n  in--\x3edone{"Is input\\n&quot;done&quot;?"}\n  done--\x3e|True|sum[Sum list]\n  sum--\x3eprint[Print sum]\n  done--\x3e|False|conv[Convert input\\nto an int]\n  conv--\x3eadd[Add number\\nto list]\n  add--\x3ein2["Get input\\n(string)"]\n  in2--\x3edone'}),(0,i.kt)("p",null,"And that control flow diagram can be fairly directly translated into code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=While_Offset",live_py:!0,title:"While_Offset"},'nums = []\ninp = input("Please enter a number or \'done\'")\nwhile inp.lower() != "done":\n  num = int(inp)\n  nums.append(num)\n  inp = input("Please enter a number or \'done\'")\ntotal = sum(nums)\nprint(f"Sum of {nums}: {total}")\n')),(0,i.kt)("h3",{id:"breaking-out-of-the-loop"},"Breaking Out of the Loop"),(0,i.kt)("p",null,"(You can probably imagine what I'm about to say.)\nBut that's kind of gross, and we have machinery for this!\nAlright, it's not super gross.\nBut, writing the same line of code for the same task in multiple separate locations\nis kind of a \"code smell\". It is a sign that we can probably do better."),(0,i.kt)("p",null,"So let's go back to the original diagram:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3einit[Make empty list]\n  init--\x3ein["Get input\\n(a string)"]\n  in--\x3edone{"Is input\\n&quot;done&quot;?"}\n  done--\x3e|True|sum[Sum list]\n  sum--\x3eprint[Print sum]\n  done--\x3e|False|conv[Convert input\\nto an int]\n  conv--\x3eadd[Add number\\nto list]\n  add--\x3ein'}),(0,i.kt)("p",null,"It turns out that there is a special command, ",(0,i.kt)("inlineCode",{parentName:"p"},"break"),",\nthat breaks us out of whatever loop we are in. So if we see ",(0,i.kt)("inlineCode",{parentName:"p"},'"done"'),", we can just break."),(0,i.kt)("p",null,'But what is the loop condition? What\'s interesting is that the "is done" check that\ncontrols the loop would actually now be in an if statement inside the loop.'),(0,i.kt)("p",null,'And if we are considering the loop to start at "Get input",\nthen we never have a condition there that could end to loop.\nIn other word, from the while loop\'s perspective, we ',(0,i.kt)("strong",{parentName:"p"},"always loop")," (maybe trigging a break inside)."),(0,i.kt)("p",null,"And so we get this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Break",live_py:!0,title:"Break"},'nums = []\nwhile True: # make an "infinite" loop\n  inp = input("Please enter a number or \'done\'")\n  if inp.lower() == "done":\n    break\n  num = int(inp)\n  nums.append(num)\ntotal = sum(nums)\nprint(f"Sum of {nums}: {total}")\n')),(0,i.kt)("h3",{id:"nesting"},"Nesting"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note: ",(0,i.kt)("inlineCode",{parentName:"strong"},"break")," only breaks you out of the most immediate loop that you are in.")),(0,i.kt)("p",null,"If we use ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," in a loop within a loop, we only break out of the inner loop.\nConsider the example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Break_Nested",live_py:!0,title:"Break_Nested"},'x = 0\nwhile x <= 3:\n  y = 0\n  while y <= 5:\n    print(f"(x, y, x + y) = ({x}, {y}, {x + y})")\n    if x + y >= 3:\n      print("Breaking!")\n      break\n    y += 1 # y = y + 1\n  x += 1 # x = x + 1\n')),(0,i.kt)("p",null,"If you run this you will see that break triggers multiple times,\nindicating that it isn't breaking control flow out of both loops, just the inner one."),(0,i.kt)("p",null,"If it helps, a control flow diagram for this code could be:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3exi[x = 0]\n  xi--\x3exc{x <= 3?}\n  xc--\x3e|False|e[End]\n  xc--\x3e|True|yi[y = 0]\n  yi--\x3eyc{y <= 5?}\n  yc--\x3e|False|xpp[x += 1]\n  xpp--\x3exc\n  yc--\x3e|True|p[Print\\ninfo]\n  p--\x3expyc{x + y >= 3}\n  xpyc--\x3e|True|pb["Print\\n&quot;Breaking!&quot;"]\n  xpyc--\x3e|False|ypp[y += 1]\n  ypp--\x3eyc\n  pb--\x3e|BREAK|xpp'}),(0,i.kt)("h2",{id:"continue"},"Continue"),(0,i.kt)("p",null,"There is one more special command for loops, ",(0,i.kt)("inlineCode",{parentName:"p"},"continue"),".\n",(0,i.kt)("inlineCode",{parentName:"p"},"continue")," has you skip the rest of the commands in the loop\nand immediately begin the next iteration."),(0,i.kt)("p",null,"This can be useful if a run of the loop is borked and you need to start over,\nsuch as if an illegal input is encountered."),(0,i.kt)("p",null,"So let's add exactly that to the summation example,\nmaking it so that if the the input would not become a number,\nwe scold the user and go right back to asking for a number."),(0,i.kt)("p",null,"Here's the new control flow diagram:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3einit[Make empty list]\n  init--\x3ein["Get input\\n(a string)"]\n  in--\x3edone{"Is input\\n&quot;done&quot;?"}\n  done--\x3e|True|sum[Sum list]\n  sum--\x3eprint[Print sum]\n  done--\x3e|False|check{Is input\\nconvertable?}\n  check--\x3e|True|conv[Convert input\\nto int]\n  conv--\x3eadd[Add number\\nto list]\n  add--\x3ein\n  check--\x3e|False|err[Print error\\nmessage]\n  err--\x3ein'}),(0,i.kt)("p",null,"And here's the updated code that implements that control flow diagram using ",(0,i.kt)("inlineCode",{parentName:"p"},"continue"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Continue",live_py:!0,title:"Continue"},'# Eh, probably good enough.\n#   not empty and (all numbers or (negative sign and all number thereafter))\ndef is_convertable_to_int(s):\n  return s != "" and (s.isnumeric() or (s[0] == "-" and s[1:].isnumeric()))\n\nnums = []\nwhile True: # make a loop without a termination condition\n  inp = input("Please enter a number or \'done\'")\n  if inp.lower() == "done":\n    break\n  if not is_convertable_to_int(inp):\n    print(f"\'{inp}\' is not a number.")\n    continue\n  num = int(inp)\n  nums.append(num)\ntotal = sum(nums)\nprint(f"Sum of {nums}: {total}")\n')),(0,i.kt)("p",null,"We could have equivalently used an if-else,\nchecking for the affirmative instead of the negative even,\nas a reminder that there are almost always multiple ways to do things:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  if is_convertable_to_int(inp):\n    num = int(inp)\n    nums.append(num)\n  else:\n    print(f\"'{inp}' is not a number.\")\n")),(0,i.kt)("h3",{id:"nesting-1"},"Nesting"),(0,i.kt)("p",null,"And yes, for nested loops, ",(0,i.kt)("inlineCode",{parentName:"p"},"continue")," (like ",(0,i.kt)("inlineCode",{parentName:"p"},"break"),")\nonly starts the next iteration of the inner-most loop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Continue_Nested",live_py:!0,title:"Continue_Nested"},'x = 0\nwhile x < 3:\n  x += 1 # x ranges from 1 to 3\n  y = 0\n  while y < 3:\n    y += 1 # y ranges from 1 to 3\n    if x == y:\n      print("Skipping!")\n      continue\n    print(f"(x, y) = ({x}, {y})")\n')),(0,i.kt)("p",null,"If you run this you will see that continue does not reset ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),",\nso it is only moving to the next iteration of the inner loop."),(0,i.kt)("p",null,"If it helps, a control flow diagram for this code could be:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3exi[x = 0]\n  xi--\x3exc{x < 3?}\n  xc--\x3e|False|e[End]\n  xc--\x3e|True|xpp[x += 1]\n  xpp--\x3eyi[y = 0]\n  yi--\x3eyc{y < 3?}\n  yc--\x3e|False|xc\n  yc--\x3e|True|ypp[y += 1]\n  ypp--\x3exeyc{x == y?}\n  xeyc--\x3e|True|pc["Print\\n&quot;Skipping!&quot;"]\n  pc--\x3e|CONTINUE|yc\n  xeyc---\x3e|False|p[Print\\ninfo]\n  p--\x3eyc'}))}d.isMDXComponent=!0}}]);