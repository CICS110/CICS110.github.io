"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5402],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(t),u=i,d=c["".concat(l,".").concat(u)]||c[u]||h[u]||r;return t?a.createElement(d,s(s({ref:n},m),{},{components:t})):a.createElement(d,s({ref:n},m))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},81442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={title:"Section 04 (Jared Yeager)"},s="Ternary Operator and Comprehensions",o={unversionedId:"looping-patterns/Jared/index",id:"looping-patterns/Jared/index",title:"Section 04 (Jared Yeager)",description:"This lecture is pure syntax sugar. Not a thing here will be necessary.",source:"@site/main/lectures/12-looping-patterns/Jared/index.md",sourceDirName:"12-looping-patterns/Jared",slug:"/looping-patterns/Jared/",permalink:"/main/lectures/looping-patterns/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 12 Looping Patterns",permalink:"/main/lectures/looping-patterns/"}},l={},p=[{value:"Syntax Sugar",id:"syntax-sugar",level:3},{value:"Ternary Operators",id:"ternary-operators",level:2},{value:"Setting: Conditional Assignment",id:"setting-conditional-assignment",level:3},{value:"Syntax Sugar: Ternary Operator",id:"syntax-sugar-ternary-operator",level:3},{value:"Mapping and Comprehensions",id:"mapping-and-comprehensions",level:2},{value:"Setting: Mapping",id:"setting-mapping",level:3},{value:"Syntax Sugar: Comprehensions",id:"syntax-sugar-comprehensions",level:3},{value:"Filtering and Comprehensions",id:"filtering-and-comprehensions",level:2},{value:"Setting: Filtering",id:"setting-filtering",level:3},{value:"Syntax Sugar: More Comprehensions",id:"syntax-sugar-more-comprehensions",level:3},{value:"More Comprehension Types",id:"more-comprehension-types",level:2},{value:"Nesting",id:"nesting",level:2},{value:"Ternary Operators",id:"ternary-operators-1",level:3},{value:"Comprehensions",id:"comprehensions",level:3},{value:"Apotheosis",id:"apotheosis",level:2}],m={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ternary-operator-and-comprehensions"},"Ternary Operator and Comprehensions"),(0,i.kt)("p",null,"This lecture is ",(0,i.kt)("strong",{parentName:"p"},"pure syntax sugar"),". Not a thing here will be necessary.\nNot a thing here will be tested on a programming assignment\n(I'm not crawling your abstract syntax trees to figure out ",(0,i.kt)("strong",{parentName:"p"},"how")," you solved something).\nComprehensions don't even exist outside of python.\nAnd yet, these things can be an incredibly useful a powerful tools in the arsenal\nonce the fundamentals are cemented."),(0,i.kt)("h3",{id:"syntax-sugar"},"Syntax Sugar"),(0,i.kt)("p",null,"What is ",(0,i.kt)("em",{parentName:"p"},"syntax sugar"),"?"),(0,i.kt)("p",null,"Syntax sugar is my crippling addiction.\nIt is syntax that allows you to express certain common tasks in a denser/more concise form."),(0,i.kt)("p",null,'Sufficient mastery of syntax sugar can allow one to convert some tasks from a multi-line\nnested looping/branching statement, to a one-line eldritch monstrosity.\nDoing this gives me a kind of rush that I can\'t describe and continually crave.\nIt has made me what some would call a "degenerate", a "monster", or a "psychopath".\nBut I don\'t care. There is beauty in the horror and horror in the beauty.\nAnd I am beholden to the madness that emanates therefrom.'),(0,i.kt)("h2",{id:"ternary-operators"},"Ternary Operators"),(0,i.kt)("h3",{id:"setting-conditional-assignment"},"Setting: Conditional Assignment"),(0,i.kt)("p",null,"There are cases where you want to set a value based on a condition.\nA famous mathematical example can be found in the\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Collatz_conjecture"},"Collatz conjecture"),",\nwhere you a making a sequence of numbers.\nFor a given ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"n")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"))))),", if it is odd, then the next number is ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"3"),(0,i.kt)("mi",{parentName:"mrow"},"n"),(0,i.kt)("mo",{parentName:"mrow"},"+"),(0,i.kt)("mn",{parentName:"mrow"},"1")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3n+1")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"3"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"1"))))),",\nif it is even, then the next number is ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"n"),(0,i.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,i.kt)("mn",{parentName:"mrow"},"2")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n/2")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,i.kt)("span",{parentName:"span",className:"mord"},"/2"))))),"."),(0,i.kt)("p",null,'A simpler example is the "indicator function",\nwhich takes in an element ',(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"x")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"x")))))," and a set ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"A")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"))))),", and returns 1 if ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"x")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"x")))))," is in ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"A")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"A")))))," and 0 if not."),(0,i.kt)("p",null,"Just isolating the check and variable setting (not making this into a python function),\nwe could accomplish the indicator checking like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Indicator",live_py:!0,title:"Indicator"},'x = 0 # you can change this value around\nA = {1,2,3,4,5}\n\nif x in A:\n  indicator_x_A = 1\nelse:\n  indicator_x_A = 0\n\nprint(f"indicator function of x and A: {indicator_x_A}")\n')),(0,i.kt)("h3",{id:"syntax-sugar-ternary-operator"},"Syntax Sugar: Ternary Operator"),(0,i.kt)("p",null,'This "if ',(0,i.kt)("inlineCode",{parentName:"p"},"condition"),' is true then this value, else this other value"\nstructure shows up quite readily.'),(0,i.kt)("p",null,"The syntax sugar for this is: ",(0,i.kt)("inlineCode",{parentName:"p"},"value_t if condition else value_f"),".\nWe call this the ",(0,i.kt)("em",{parentName:"p"},"ternary operator"),",\nI guess because there are 3 operands (",(0,i.kt)("inlineCode",{parentName:"p"},"value_t"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"condition"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"value_f"),")."),(0,i.kt)("p",null,"The way to read this is that if ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluate to true, it evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"value_t"),",\nif ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluate to false, it evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"value_f"),"."),(0,i.kt)("p",null,"Behold the earlier example using this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Indicator_Ternary",live_py:!0,title:"Indicator_Ternary"},'x = 0\ny = 3\nA = {1,2,3,4,5}\n\nindicator_x_A = 1 if x in A else 0\nindicator_y_A = 1 if y in A else 0\n\nprint(f"indicator function of x and A: {indicator_x_A}")\nprint(f"indicator function of y and A: {indicator_y_A}")\n')),(0,i.kt)("h2",{id:"mapping-and-comprehensions"},"Mapping and Comprehensions"),(0,i.kt)("h3",{id:"setting-mapping"},"Setting: Mapping"),(0,i.kt)("p",null,"Often we find ourselves wanting to performs some operation, function,\nor transformation on every element in a collection.\nWe call this ",(0,i.kt)("em",{parentName:"p"},"mapping")," a operation/function/transformation over something,\nand it is a very frequent thing to do."),(0,i.kt)("p",null,'For example, say I wanted a list of the first 10 square numbers.\nThis could be done by taking a list of the numbers 1 to 10, and squaring all of them.\nThat "squaring all of them" is a on operation (squaring) being performed on all\nelements in the collection.'),(0,i.kt)("p",null,"Code for that could look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Squares",live_py:!0,title:"Squares"},"squares = []\nfor i in range(1, 11):\n  squares.append(i ** 2)\nprint(squares)\n")),(0,i.kt)("h3",{id:"syntax-sugar-comprehensions"},"Syntax Sugar: Comprehensions"),(0,i.kt)("p",null,"We can get that list ",(0,i.kt)("inlineCode",{parentName:"p"},"squares")," in 3 fairly straightforward lines,\n",(0,i.kt)("strong",{parentName:"p"},"but we can do better"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Comprehensions")," are a way to define/create a collection based on iterating over\nsome other collection."),(0,i.kt)("p",null,"The syntax sugar for list comprehensions is: ",(0,i.kt)("inlineCode",{parentName:"p"},"[expression for var_name in collection]"),".\nEvery element in ",(0,i.kt)("inlineCode",{parentName:"p"},"collection")," is iterated over and assigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"var_name")," in turn\n(the for ",(0,i.kt)("inlineCode",{parentName:"p"},"for var_name in collection")," is exactly like a for loop).\n",(0,i.kt)("inlineCode",{parentName:"p"},"expression")," may make use of the variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"var_name"),", and is evaluated for each\nelement in ",(0,i.kt)("inlineCode",{parentName:"p"},"collection"),". And the results are bundled together in a list."),(0,i.kt)("p",null,"Behold the earlier example using this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=List_Comprehension",live_py:!0,title:"List_Comprehension"},"squares = [i ** 2 for i in range (1, 11)]\nprint(squares)\n")),(0,i.kt)("p",null,"Note the congruences with the earlier less-sugary version."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"[]")," are necessary to note we are making a list."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"for i in range(1, 11)")," is exactly the same."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},".append(i ** 2)")," becomes the ",(0,i.kt)("inlineCode",{parentName:"li"},"i ** 2")," at the front in the comprehension.")),(0,i.kt)("h2",{id:"filtering-and-comprehensions"},"Filtering and Comprehensions"),(0,i.kt)("h3",{id:"setting-filtering"},"Setting: Filtering"),(0,i.kt)("p",null,"Often we find ourselves wanting to select only the elements of a collection\nthat satisfy some property.\nWe call this ",(0,i.kt)("em",{parentName:"p"},"filtering")," something based on some property/criteria,\nand it is also a very frequent thing to do."),(0,i.kt)("p",null,"For example, say I have a list of numbers and wanted only the even numbers in that list.\nI could use a conditional to add only the elements I want to my list of evens, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Evens",live_py:!0,title:"Evens"},'nums = list(range(10,55,3))\nprint(f"nums : {nums}")\nevens = []\nfor i in nums:\n  if i % 2 == 0:\n    evens.append(i)\nprint(f"evens: {evens}")\n')),(0,i.kt)("h3",{id:"syntax-sugar-more-comprehensions"},"Syntax Sugar: More Comprehensions"),(0,i.kt)("p",null,"We can get that list ",(0,i.kt)("inlineCode",{parentName:"p"},"evens")," in 4 fairly straightforward lines,\nbut again, ",(0,i.kt)("strong",{parentName:"p"},"we can do better"),"."),(0,i.kt)("p",null,"Comprehensions also have built in filtering.\nThis gives us more general list comprehensions of the from:\n",(0,i.kt)("inlineCode",{parentName:"p"},"[expression for var_name in collection if condition]"),"."),(0,i.kt)("p",null,"This is just like before, except now ",(0,i.kt)("inlineCode",{parentName:"p"},"expression")," is only considered\nfor elements where ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is true (",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," may make use of ",(0,i.kt)("inlineCode",{parentName:"p"},"var_name"),")."),(0,i.kt)("p",null,"Behold the earlier example using this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Evens_Comprehension",live_py:!0,title:"Evens_Comprehension"},'nums = list(range(10,55,3))\nprint(f"nums : {nums}")\nevens = [i for i in nums if i % 2 == 0]\nprint(f"evens: {evens}")\n')),(0,i.kt)("p",null,"Note the congruences with the earlier less-sugary version."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"[]")," for the list."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"for i in nums")," is exactly the same."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"if i % 2 == 0")," is exactly the same."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},".append(i)")," becomes the ",(0,i.kt)("inlineCode",{parentName:"li"},"i")," at the front in the comprehension.")),(0,i.kt)("p",null,"And another example, where the ",(0,i.kt)("inlineCode",{parentName:"p"},"expression")," part is non-trivial.\nWe could get all halves of even numbers in a list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Divide_Evens",live_py:!0,title:"Divide_Evens"},'nums = list(range(10,55,3))\nprint(f"nums       : {nums}")\n\n# Iterative Approach\nhalves_iter = []\nfor i in nums:\n  if i % 2 == 0:\n    halves_iter.append(i // 2)\nprint(f"halves_iter: {halves_iter}")\n\n# Comprehension\nhalves_comp = [i//2 for i in nums if i % 2 == 0]\nprint(f"halves_comp: {halves_comp}")\n')),(0,i.kt)("p",null,"Again, notice how the looping+branching portion is just flattened,\nwith the expression for the new element being brought to the front of the comprehension."),(0,i.kt)("p",null,"And one more, maybe for a given number, we want to get all\nAll factors of that number (all numbers that divided it). The long form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Factors",live_py:!0,title:"Factors"},"num = 60 # play with this value\n\n# Iterative Approach\nfactors_iter = []\nfor i in range(1,num):\n  if num % i == 0:\n    factors_iter.append(i)\nprint(factors_iter)\n\n# Comprehension\nfactors_comp = [i for i in range(1,num) if num % i == 0]\nprint(factors_comp)\n")),(0,i.kt)("hr",null),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Material from here on was not part of the lecture,\nbut I'm not done with the madness yet.\nI must corrupt more, I must twist more.\n",(0,i.kt)("strong",{parentName:"p"},"I must write unintelligible code!!!"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"more-comprehension-types"},"More Comprehension Types"),(0,i.kt)("p",null,"For showing of the comprehension syntax,\nit is sufficient to only talk about list comprehensions.\nBut there are other structure this exists for."),(0,i.kt)("p",null,"There are also set comprehensions, which are much the same except for ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," on the outside."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Set_Comprehension",live_py:!0,title:"Set_Comprehension"},"squares = {i ** 2 for i in range (1, 11)}\nprint(squares)\n")),(0,i.kt)("p",null,"There are also dictionary comprehensions,\nwhich are much the same except for ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," on the outside and the ",(0,i.kt)("inlineCode",{parentName:"p"},"expression"),"\nneeds be of the form ",(0,i.kt)("inlineCode",{parentName:"p"},"key:value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Dictionary_Comprehension",live_py:!0,title:"Dictionary_Comprehension"},"squares = {i:i ** 2 for i in range (1, 11)}\nprint(squares)\n")),(0,i.kt)("p",null,"There is not exactly tuple comprehension, but you can do something that feels like it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Tuple_Comprehension",live_py:!0,title:"Tuple_Comprehension"},"squares = tuple(i ** 2 for i in range (1, 11))\nprint(squares)\n")),(0,i.kt)("p",null,"in practice, you are generally going to do list comprehension and not\nbootleg tuple comprehension."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Extra: What About Just Parentheses?")),(0,i.kt)("p",null,"You might be wondering why wrapping the ",(0,i.kt)("inlineCode",{parentName:"p"},"i ** 2 for i in range (1, 11)"),"\nin parentheses isn't tuple comprehension."),(0,i.kt)("p",null,"The answer is basically that that syntax is already used for something called\n",(0,i.kt)("em",{parentName:"p"},"generators"),", why I am not going to get into."),(0,i.kt)("p",null,"And in fact, I think that bootleg tuple comprehension from earlier is technically\njust casting a generator to a tuple."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Generator_Comprehension",live_py:!0,title:"Generator_Comprehension"},"squares = (i ** 2 for i in range (1, 11))\nprint(squares)\nsquares = tuple(squares)\nprint(squares)\n"))),(0,i.kt)("h2",{id:"nesting"},"Nesting"),(0,i.kt)("h3",{id:"ternary-operators-1"},"Ternary Operators"),(0,i.kt)("p",null,"sign: -1,0,1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"if num > 0:\n  sign = 1\nelif num < 0:\n  sign = -1\nelse:\n  sign = 0\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"if num > 0:\n  sign = 1\nelse:\n  if num < 0:\n    sign = -1\n  else:\n    sign = 0\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"if num > 0:\n  sign = 1\nelse:\n  sign = -1 if num < 0 else 0\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sign = 1 if num > 0 else -1 if num < 0 else 0\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Sign",live_py:!0,title:"Sign"},'def sign(num):\n  return 1 if num > 0 else -1 if num < 0 else 0\n\nprint(f"sign(12) : {sign(12):>2d}")\nprint(f"sign(4)  : {sign(4):>2d}")\nprint(f"sign(0)  : {sign(0):>2d}")\nprint(f"sign(-2) : {sign(-2):>2d}")\nprint(f"sign(-7) : {sign(-7):>2d}")\n')),(0,i.kt)("h3",{id:"comprehensions"},"Comprehensions"),(0,i.kt)("p",null,"This idea that the comprehension is just the flattened-out for-if structure with\nthe final expression brought to the front generalises to arbitrary for loop nesting."),(0,i.kt)("p",null,"Consider two ways of flattening a list of lists\n(making a list out of all the inner-list elements)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Flatten",live_py:!0,title:"Flatten"},"ll = [[1,2,3], [4,5], [6,7,8,9]]\n\n# Iterative Approach\nflat_iter = []\nfor l in ll:\n  for i in l:\n    flat_iter.append(i)\nprint(flat_iter)\n\n# Comprehension\nflat_comp = [i for l in ll for i in l]\nprint(flat_comp)\n")),(0,i.kt)("p",null,"All lattice points in a circle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Circle",live_py:!0,title:"Circle"},"r = 2\n\n# Iterative Approach\npoints_iter = []\nfor x in range(-r, r+1):\n  for y in range(-r, r+1):\n    if x ** 2 + y ** 2 <= r ** 2:\n      points_iter.append((x,y))\nprint(points_iter)\n\n# Comprehension\npoints_comp = [(x,y) for x in range(-r, r+1) for y in range(-r, r+1) if x ** 2 + y ** 2 <= r ** 2]\nprint(points_comp)\n")),(0,i.kt)("h2",{id:"apotheosis"},"Apotheosis"),(0,i.kt)("p",null,"dict num to set of factors\nall co-primes less than a number\na/an adj noun"))}c.isMDXComponent=!0}}]);