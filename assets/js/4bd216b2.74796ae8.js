"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8794],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,f=m["".concat(s,".").concat(u)]||m[u]||h[u]||r;return t?a.createElement(f,l(l({ref:n},d),{},{components:t})):a.createElement(f,l({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},80422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={title:"Section 04 (Jared Yeager)"},l="Inheritance and Dunder Methods",o={unversionedId:"Inheritance_Overloading/Jared/index",id:"Inheritance_Overloading/Jared/index",title:"Section 04 (Jared Yeager)",description:"There are a a few lingering topics about classes to cover.",source:"@site/main/lectures/19_Inheritance_Overloading/Jared/index.md",sourceDirName:"19_Inheritance_Overloading/Jared",slug:"/Inheritance_Overloading/Jared/",permalink:"/main/lectures/Inheritance_Overloading/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 19 Inheritance and Overloading",permalink:"/main/lectures/Inheritance_Overloading/"}},s={},p=[{value:"Inheritance",id:"inheritance",level:2},{value:"Sub-Classing",id:"sub-classing",level:3},{value:"Overriding Methods",id:"overriding-methods",level:3},{value:"<code>super()</code>",id:"super",level:3},{value:"Example: Board Games",id:"example-board-games",level:3},{value:"Dunder Methods",id:"dunder-methods",level:2},{value:"String Conversion",id:"string-conversion",level:3},{value:"Operators",id:"operators",level:3},{value:"More Reading",id:"more-reading",level:3}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inheritance-and-dunder-methods"},"Inheritance and Dunder Methods"),(0,i.kt)("p",null,"There are a a few lingering topics about classes to cover."),(0,i.kt)("p",null,"First, the notion of inheritance:\nwhere we can have class that is an expansion/sub-class of another class."),(0,i.kt)("p",null,"Second, some more fancy double-underscore (or ",(0,i.kt)("em",{parentName:"p"},"dunder"),") methods,\nwhich allow us to define string conversion and to specify operator behaviour."),(0,i.kt)("h2",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,"Earlier, we made a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," class for demonstration purposes.\nNow imagine that we have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat")," class, and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Snake")," class."),(0,i.kt)("p",null,"All of these are different in some ways, and do slightly different things.\nFor our demo-ing purposes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A dog will ",(0,i.kt)("inlineCode",{parentName:"li"},"bark()")),(0,i.kt)("li",{parentName:"ul"},"A cat will ",(0,i.kt)("inlineCode",{parentName:"li"},"meow()")),(0,i.kt)("li",{parentName:"ul"},"A snake will ",(0,i.kt)("inlineCode",{parentName:"li"},"hiss()"))),(0,i.kt)("p",null,"But there are also some similarities.\nFor our demo-ing purposes, we will consider all of these as pets, moreover:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"They will all have names"),(0,i.kt)("li",{parentName:"ul"},"They will all be able to ",(0,i.kt)("inlineCode",{parentName:"li"},"sleep()"))),(0,i.kt)("p",null,"And so the idea is that we can have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet")," class, that does this shared stuff:\ninitialising with a name, and ",(0,i.kt)("inlineCode",{parentName:"p"},"sleep()"),"ing.\nAnd we can then have ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Snake")," classes that ",(0,i.kt)("em",{parentName:"p"},"extend")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),".\nWe would also say these are ",(0,i.kt)("em",{parentName:"p"},"sub-classes")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),", or that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet")," is the ",(0,i.kt)("em",{parentName:"p"},"super-class"),"\nor ",(0,i.kt)("em",{parentName:"p"},"parent class")," of these three."),(0,i.kt)("mermaid",{value:"flowchart TD\n  pet[Pet]--\x3edog[Dog]\n  pet--\x3ecat[Cat]\n  pet--\x3esnake[Snake]"}),(0,i.kt)("p",null,"These three classes will ",(0,i.kt)("em",{parentName:"p"},"inherit")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),"'s fields and methods,\nand can establish their own on top of that.\nAnd later, we will have them possibly ",(0,i.kt)("em",{parentName:"p"},"override")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),"'s methods."),(0,i.kt)("p",null,"Another example of a potential inheritance relationship,\nthat you may encounter in the homework:"),(0,i.kt)("mermaid",{value:"flowchart TD\n  shape[Shape]--\x3etri[Triangle]\n  tri--\x3eiso[Isosceles Triangle]\n  iso--\x3eequi[Equilateral Triangle]\n  shape--\x3equad[Quadrilateral]\n  quad--\x3etrap[Trapezoid]\n  trap--\x3erect[Rectangle]\n  rect--\x3esqr[Square]"}),(0,i.kt)("h3",{id:"sub-classing"},"Sub-Classing"),(0,i.kt)("p",null,"Alrighty, so how do we do this in code?\nWell, we say that ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," is a sub-class of ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),"\nby declaring it with ",(0,i.kt)("inlineCode",{parentName:"p"},"class Dog(Pet):"),", instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"class Dog:"),"."),(0,i.kt)("p",null,"That's it, check it out:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Inherit_Subclass",live_py:!0,title:"Inherit_Subclass"},'class Pet:\n  def __init__(self, name):\n    self.name = name\n\n  def sleep(self):\n    print(f"Zzzzz ({self.name} is sleeping)")\n\nclass Dog(Pet):\n  def bark(self):\n    print("Woof!")\n\ninu = Dog("Inu")\nprint(f"Is Inu a Pet? {isinstance(inu, Pet)}")\nprint(f"Is Inu a Dog? {isinstance(inu, Dog)}")\n\nprint()\n\nprint(f"{inu.name}:")\ninu.bark()\ninu.sleep()\n')),(0,i.kt)("p",null,"There is a class ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet")," with an initialised name and ",(0,i.kt)("inlineCode",{parentName:"p"},"sleep()")," method;\nand a sub-class thereof named ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),", with a ",(0,i.kt)("inlineCode",{parentName:"p"},"bark()")," method.\nDog inherits from ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),", including the initialiser method, so is initialised with a name.\nAn instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," is also technically an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),",\nand so can ",(0,i.kt)("inlineCode",{parentName:"p"},"sleep()")," (as ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),"s can) and ",(0,i.kt)("inlineCode",{parentName:"p"},"bark()")," (as ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"s can)."),(0,i.kt)("p",null,"Another example, but with two subclasses of ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Inherit_Subclasses",live_py:!0,title:"Inherit_Subclasses"},'class Pet:\n  def __init__(self, name):\n    self.name = name\n\n  def sleep(self):\n    print(f"Zzzzz ({self.name} is sleeping)")\n\nclass Cat(Pet):\n  def meow(self):\n    print("Meow!")\n\nclass Snake(Pet):\n  def hiss(self):\n    print("Hiss!")\n\nneko = Cat("Neko")\nhebi = Snake("Hebi")\n\nprint(f"{neko.name}:")\nneko.meow()\nneko.sleep()\n\nprint()\n\nprint(f"{hebi.name}:")\nhebi.hiss()\nhebi.sleep()\n')),(0,i.kt)("h3",{id:"overriding-methods"},"Overriding Methods"),(0,i.kt)("p",null,"Sometimes, we do want a sub-class to behave differently from it's parent.\nMaybe we want it to expand on the functionality of the parent, or maybe we want to\noverride it all together."),(0,i.kt)("p",null,"Let's say we go a bit nuts in out ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet")," example, and get a pet ",(0,i.kt)("inlineCode",{parentName:"p"},"Jellyfish"),'.\nNow, jellyfish are not exactly know for "sleeping", per se\n(it sort of becomes a semantic quibble about what one means by "sleep").'),(0,i.kt)("p",null,"So let's have the ",(0,i.kt)("inlineCode",{parentName:"p"},"Jellyfish"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"sleep()")," method be different.\nHow do we do this? By defining it like normal!\nThe methods we inherit from the parent class are defaults,\nbut we can override them by specifying something else."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Override",live_py:!0,title:"Override"},'class Pet:\n  def __init__(self, name):\n    self.name = name\n\n  def sleep(self):\n    print(f"Zzzzz ({self.name} is sleeping)")\n\nclass Jellyfish(Pet):\n  def sleep(self):\n    print(f"{self.name} is just floating")\n\numi = Jellyfish("Umi")\numi.sleep()\n')),(0,i.kt)("p",null,"And so notice how when we have an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Jellyfish")," ",(0,i.kt)("inlineCode",{parentName:"p"},"sleep()"),",\nit is ",(0,i.kt)("inlineCode",{parentName:"p"},"Jellyfish"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"sleep()"),", not ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"sleep()"),"."),(0,i.kt)("h3",{id:"super"},(0,i.kt)("inlineCode",{parentName:"h3"},"super()")),(0,i.kt)("p",null,'(This is going to be a little in the realms of "just trust me" on the syntax.)'),(0,i.kt)("p",null,"What if, within a sub-class,\nwe want to expand upon and even use a parent's version of a method.\nFor instance, say we want to change our dog initialiser to take in a ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," ",(0,i.kt)("strong",{parentName:"p"},"and"),"\na ",(0,i.kt)("inlineCode",{parentName:"p"},"breed"),".\nWe don't want to re-do the work that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet")," initialiser does to set the name,\nin fact, we want to do exactly that and ",(0,i.kt)("strong",{parentName:"p"},"then")," set the ",(0,i.kt)("inlineCode",{parentName:"p"},"breed"),"."),(0,i.kt)("p",null,"There is a way to make use of ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet's")," ",(0,i.kt)("inlineCode",{parentName:"p"},"__init__()")," within ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"__init__()"),",\nbut it's a little weird. There is this function called ",(0,i.kt)("inlineCode",{parentName:"p"},"super()"),".\nAn argument-less call to ",(0,i.kt)("inlineCode",{parentName:"p"},"super()")," will secretly grab ",(0,i.kt)("inlineCode",{parentName:"p"},"self"),",\nand effectively returns ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," as an instance of the super-class."),(0,i.kt)("p",null,"So let's see some code, and unpack what it does."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Super_Pet",live_py:!0,title:"Super_Pet"},'class Pet:\n  def __init__(self, name):\n    self.name = name\n\n  def sleep(self):\n    print(f"Zzzzz ({self.name} is sleeping)")\n\nclass Dog(Pet):\n  def __init__(self, name, breed):\n    # We use super() to consider self as a Pet here\n    super().__init__(name)\n    self.breed = breed\n\n  def print_info(self):\n    print(f"{self.name} is a {self.breed}.")\n\nspot = Dog("Spot", "Golden Retriever")\ninu = Dog("Inu", "Shiba Inu")\nspot.print_info()\ninu.print_info()\n')),(0,i.kt)("p",null,"So, let's look at the call from the line ",(0,i.kt)("inlineCode",{parentName:"p"},'spot = Dog("Spot", "Golden Retriever")'),".\nThis runs ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"__init__()")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"spot"),"-to-be,\n",(0,i.kt)("inlineCode",{parentName:"p"},"name")," as ",(0,i.kt)("inlineCode",{parentName:"p"},'"Spot"'),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"breed")," as ",(0,i.kt)("inlineCode",{parentName:"p"},'"Golden Retriever"'),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"super()")," will return ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," (",(0,i.kt)("inlineCode",{parentName:"p"},"spot"),"-to-be), but as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),".\nSo ",(0,i.kt)("inlineCode",{parentName:"p"},"super().__init__(name)")," will call ",(0,i.kt)("inlineCode",{parentName:"p"},"Pet"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"__init__()")," with\n",(0,i.kt)("inlineCode",{parentName:"p"},"self")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"spot"),"-to-be-as-a-",(0,i.kt)("inlineCode",{parentName:"p"},"Pet")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," as ",(0,i.kt)("inlineCode",{parentName:"p"},'"Spot"'),", which\nsets the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," field."),(0,i.kt)("p",null,"We then return from that call and set the ",(0,i.kt)("inlineCode",{parentName:"p"},"breed")," field,\nfinishing the initialisation."),(0,i.kt)("p",null,"I highly recommend stepping through this example on\n",(0,i.kt)("a",{parentName:"p",href:"https://pythontutor.com"},"pythontutor")," to help visualise what is happening."),(0,i.kt)("p",null,"Below is another example of the overriding in a way that invokes\nthe super-version of the method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Super_Shape",live_py:!0,title:"Super_Shape"},'class Trapezoid:\n  def __init__(self, top, bottom, sides):\n    self.top = top\n    self.bottom = bottom\n    self.sides = sides\n\n  def perimeter(self):\n    return self.top + self.bottom + 2*self.sides\n\nclass Rectangle(Trapezoid):\n  def __init__(self, width, height):\n    super().__init__(width, width, height)\n\ntrap = Trapezoid(2, 3, 1)\nprint(f"Trapezoid perimeter: {trap.perimeter()}")\n\nrect = Rectangle(2, 1)\nprint(f"Rectangle perimeter: {rect.perimeter()}")\n')),(0,i.kt)("h3",{id:"example-board-games"},"Example: Board Games"),(0,i.kt)("p",null,"When demonstrating new concepts for the first time we tend to use smaller examples,\nbut they may be not be reflective of something you might actually find yourself doing."),(0,i.kt)("p",null,"This example is hopefully more plausible.\nThe idea is that we want to make a bunch of different games\nthat are played on/with some sort of 2D grid/board."),(0,i.kt)("p",null,"So we have a parent class ",(0,i.kt)("inlineCode",{parentName:"p"},"GridGame")," to capture some shared behaviour:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Having a board field"),(0,i.kt)("li",{parentName:"ul"},"Initialising a board of a specified size"),(0,i.kt)("li",{parentName:"ul"},"Updating the board"),(0,i.kt)("li",{parentName:"ul"},"Printing the board")),(0,i.kt)("p",null,"We then extend it to make a ",(0,i.kt)("inlineCode",{parentName:"p"},"TicTacToeGame"),"\n(which just needs to invoke the super-constructor to make it a 3 by 3 board)."),(0,i.kt)("p",null,"We then extend it to make a ",(0,i.kt)("inlineCode",{parentName:"p"},"Connect4Game"),", which overloads the\nconstructor and the ",(0,i.kt)("inlineCode",{parentName:"p"},"update_board()"),' method,\nso that updating only needs to take in a column ("gravity" determines the row).'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Board_Games",live_py:!0,title:"Board_Games"},'class GridGame:\n  def __init__(self, height, width):\n    self.board = [[" " for col in range(width)] for row in range(height)]\n    self.width = width\n    self.height = height\n\n  def update_board(self, row, col, player):\n    self.board[row][col] = player\n\n  # Just trust me (I\'m making it dense to not eat up too much space)\n  def print_board(self):\n    sep = "---".join(list((self.width+1)*"+"))\n    rows = ["| "+" | ".join(row)+" |" for row in self.board]\n    for i in range(2*self.height+1):\n      print(rows[(i-1)//2] if i % 2 == 1 else sep)\n\nclass TicTacToeGame(GridGame):\n  def __init__(self):\n    super().__init__(3, 3)\n\nclass Connect4Game(GridGame):\n  def __init__(self):\n    super().__init__(6, 7)\n\n  def update_board(self, col ,player):\n    for row in range(self.height-1,-1,-1):\n      if self.board[row][col] == " ":\n        super().update_board(row, col, player)\n        return\n\nprint("Generic 3 row, 2 column game:")\ngame = GridGame(3, 2)\ngame.update_board(1, 1, "A")\ngame.print_board()\n\nprint()\nprint("Tic-Tac-Toe game:")\nttt = TicTacToeGame()\nttt.update_board(1, 1, "X")\nttt.print_board()\n\nprint()\nprint("Connect 4 game:")\ncon4 = Connect4Game()\ncon4.update_board(3, "X")\ncon4.update_board(3, "O")\ncon4.update_board(4, "X")\ncon4.print_board()\n')),(0,i.kt)("h2",{id:"dunder-methods"},"Dunder Methods"),(0,i.kt)("p",null,"There are a lot of special method names with their own significance and effects,\nlike ",(0,i.kt)("inlineCode",{parentName:"p"},"__init__()"),'. Most of these names start and end with "double underscores"\nand have thus earned the moniker "dunder" methods.'),(0,i.kt)("p",null,"We will look at the dunder method that governs string conversion,\nand the dunder methods that govern operators (like ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),")."),(0,i.kt)("h3",{id:"string-conversion"},"String Conversion"),(0,i.kt)("p",null,"By default, converting a class to a string (and thus printing)\nproduces a string of the form ",(0,i.kt)("inlineCode",{parentName:"p"},'"<CLASS_NAME object at MEMORY_ADDRESS>"'),"."),(0,i.kt)("p",null,"Here is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Pair")," class, and how it prints by default\n(the web-python seems to forgo the memory address part, but you can see the idea):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Pair_Default",live_py:!0,title:"Pair_Default"},'class Pair:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\npoint = Pair(2, 5)\nprint(f"string conv  : {str(point)}")\nprint(f"direct print : {point}")\n')),(0,i.kt)("p",null,"This is not especially informative to us."),(0,i.kt)("p",null,"We can override this default behaviour by implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"__str__()")," method.\nThis method only takes in ",(0,i.kt)("inlineCode",{parentName:"p"},"self"),", and returns the desired string representation."),(0,i.kt)("p",null,"Here is how we might make a ",(0,i.kt)("inlineCode",{parentName:"p"},"Pair")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," print as ",(0,i.kt)("inlineCode",{parentName:"p"},"(x, y)"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Pair_Pretty",live_py:!0,title:"Pair_Pretty"},'class Pair:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\n  def __str__(self):\n    return f"({self.x}, {self.y})"\n\npoint = Pair(2, 5)\nprint(f"string conv  : {str(point)}")\nprint(f"direct print : {point}")\n')),(0,i.kt)("h3",{id:"operators"},"Operators"),(0,i.kt)("p",null,"Finally, consider how ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," on numbers returns a new number based on addition,\nyet ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),' on strings returns a new string based on concatenation.\nWe refer to the this "doing different things based on different types of inputs"\nas ',(0,i.kt)("em",{parentName:"p"},"overloading"),"."),(0,i.kt)("p",null,"And we can overload ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," to do something on any of our classes by implementing the\n",(0,i.kt)("inlineCode",{parentName:"p"},"__add__()")," method.\nThis method takes two arguments, ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," and some ",(0,i.kt)("inlineCode",{parentName:"p"},"other"),".\nImportantly, ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," represents the operand on the ",(0,i.kt)("strong",{parentName:"p"},"left")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"other")," represents the operand on the ",(0,i.kt)("strong",{parentName:"p"},"right"),"\n(this will matter for subtraction later).\nThe return must be a ",(0,i.kt)("strong",{parentName:"p"},"new")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Pair"),', representing the sum "',(0,i.kt)("inlineCode",{parentName:"p"},"self + other"),'"\n(akin to how ',(0,i.kt)("inlineCode",{parentName:"p"},'"Hello" + "World"')," would return a new string ",(0,i.kt)("inlineCode",{parentName:"p"},'"HelloWorld"'),")."),(0,i.kt)("p",null,"So here is how we could overload ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"Pair"),"s to do point-wise addition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Pair_Add",live_py:!0,title:"Pair_Add"},'class Pair:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\n  def __add__(self, other):\n    return Pair(self.x + other.x, self.y + other.y)\n\n  def __str__(self):\n    return f"({self.x}, {self.y})"\n\na = Pair(2, 5)\nb = Pair(-1, 3)\nprint(f"  a : {a}")\nprint(f"  b : {b}")\nprint(f"a+b : {a+b}")\n')),(0,i.kt)("p",null,"There are plenty of dunder methods for operators, here are just a few:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"__neg__(self)"),", for negation, i.e., ",(0,i.kt)("inlineCode",{parentName:"li"},"-a")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"__add__(self, other)"),", for addition, i.e., ",(0,i.kt)("inlineCode",{parentName:"li"},"a + b")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"__sub__(self, other)"),", for subtraction, i.e., ",(0,i.kt)("inlineCode",{parentName:"li"},"a - b")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"__mul__(self, other)"),", for multiplication, i.e., ",(0,i.kt)("inlineCode",{parentName:"li"},"a * b")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"__truediv__(self, other)"),", for division, i.e., ",(0,i.kt)("inlineCode",{parentName:"li"},"a / b"))),(0,i.kt)("p",null,"And here is code for all of those implemented as point-wise operations on ",(0,i.kt)("inlineCode",{parentName:"p"},"Pair"),"s:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Pair_Ops",live_py:!0,title:"Pair_Ops"},'class Pair:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\n  def __neg__(self):\n    return Pair(-self.x, -self.y)\n\n  def __add__(self, other):\n    return Pair(self.x + other.x, self.y + other.y)\n\n  def __sub__(self, other):\n    return Pair(self.x - other.x, self.y - other.y)\n\n  def __mul__(self, other):\n    return Pair(self.x * other.x, self.y * other.y)\n\n  def __truediv__(self, other):\n    return Pair(self.x / other.x, self.y / other.y)\n\n  def __str__(self):\n    return f"({self.x}, {self.y})"\n\na = Pair(2, 5)\nb = Pair(-1, 3)\nprint("*** Base ***")\nprint(f"  a : {a}")\nprint(f"  b : {b}")\nprint("*** Neg ***")\nprint(f" -a : {-a}")\nprint(f" -b : {-b}")\nprint("*** Add ***")\nprint(f"a+b : {a+b}")\nprint(f"b+a : {b+a}")\nprint("*** Sub ***")\nprint(f"a-b : {a-b}")\nprint(f"b-a : {b-a}")\nprint("*** Mul ***")\nprint(f"a*b : {a*b}")\nprint(f"b*a : {b*a}")\nprint("*** Div ***")\nprint(f"a/b : {a/b}")\nprint(f"b/a : {b/a}")\n')),(0,i.kt)("h3",{id:"more-reading"},"More Reading"),(0,i.kt)("p",null,"When I was bringing myself up to speed on these dunder methods,\nI found the following references useful (some for learning, some for referencing):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://realpython.com/operator-function-overloading/"},"A tutorial on dunder methods")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.python.org/3/reference/datamodel.html#special-method-names"},"General python documentation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types"},"List of numeric dunder methods in python documentation"))))}m.isMDXComponent=!0}}]);