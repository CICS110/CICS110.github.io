"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7622],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(t),c=i,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return t?a.createElement(h,o(o({ref:n},u),{},{components:t})):a.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},89808:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={title:"Section 04 (Jared Yeager)"},o="Looping (For)",l={unversionedId:"for-loops/Jared/index",id:"for-loops/Jared/index",title:"Section 04 (Jared Yeager)",description:"I suspect this is mostly going to be an example dump.",source:"@site/main/lectures/10-for-loops/Jared/index.md",sourceDirName:"10-for-loops/Jared",slug:"/for-loops/Jared/",permalink:"/main/lectures/for-loops/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 10 For Loops",permalink:"/main/lectures/for-loops/"},next:{title:"Lec 11 Sets and Dictionaries",permalink:"/main/lectures/sets-dicts/"}},s={},p=[{value:"Iterating over Something",id:"iterating-over-something",level:2},{value:"For Loops",id:"for-loops",level:2},{value:"On Lists",id:"on-lists",level:3},{value:"On Tuples",id:"on-tuples",level:3},{value:"On Strings",id:"on-strings",level:3},{value:"Ranges",id:"ranges",level:2},{value:"Nesting",id:"nesting",level:2},{value:"Breaking and Continuing",id:"breaking-and-continuing",level:3},{value:"Unpacking/Destructuring",id:"unpackingdestructuring",level:2},{value:"Zipping",id:"zipping",level:2},{value:"Enumerating",id:"enumerating",level:2}],u={toc:p};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"looping-for"},"Looping (For)"),(0,i.kt)("p",null,"I suspect this is mostly going to be an example dump."),(0,i.kt)("p",null,"Any sort of looping you want to do can be accomplished with a while loop.\nBut, as is often the case in the programming world,\nwe have special machinery for some sub-cases.\n",(0,i.kt)("em",{parentName:"p"},"for loop"),"s are not different in kind from while loops,\nthey are just more convenient for some cases."),(0,i.kt)("h2",{id:"iterating-over-something"},"Iterating over Something"),(0,i.kt)("p",null,'So what is the case we want to address with for loops?\nThe "problem we want to solve"?'),(0,i.kt)("p",null,'The while loop is most natural when your mental framing of a problem is\n"I want to do X while/as long as Y" or "I want to do X until Y".\nThe for loop is for "I want to do X for each/every Z":'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"For every/each element in this list"'),(0,i.kt)("li",{parentName:"ul"},'"For every/each element in this tuple"'),(0,i.kt)("li",{parentName:"ul"},'"For every/each letter in this string"'),(0,i.kt)("li",{parentName:"ul"},'"For every/each number in this range" (this also captures "do something W times")')),(0,i.kt)("p",null,'The countdown ("10 ... 9 ... ... 1 ... Blastoff!") example from last time is an example of this,\nit has us printing ("doing X") every number from 10 to 1 ("the range 10 to 1").'),(0,i.kt)("h2",{id:"for-loops"},"For Loops"),(0,i.kt)("p",null,"Let's see some explicit syntax. For loops are of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"for variable_name in iterable:\n  code # that may use variable_name\n")),(0,i.kt)("p",null,"We have the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"for"),", a variable name (",(0,i.kt)("inlineCode",{parentName:"p"},"variable_name"),") of our choice,\nthe keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"in"),", something that can be iterated over (",(0,i.kt)("inlineCode",{parentName:"p"},"iterable"),"), a ",(0,i.kt)("inlineCode",{parentName:"p"},":"),",\nand some ",(0,i.kt)("strong",{parentName:"p"},"indented")," block of ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," (can be multiple lines)\nthat may use ",(0,i.kt)("inlineCode",{parentName:"p"},"variable_name")," in it."),(0,i.kt)("p",null,"For every element in ",(0,i.kt)("inlineCode",{parentName:"p"},"iterable"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"variable_name")," is set to that element,\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," is run.\nA way to think about that, is that you are running ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," for every possible\nassignment of ",(0,i.kt)("inlineCode",{parentName:"p"},"variable_name")," such that\n",(0,i.kt)("a",{parentName:"p",href:"../lists-tuples-strings/Jared#checking-containment"},(0,i.kt)("inlineCode",{parentName:"a"},"variable_name in iterable"))," is true."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"iterable"),"'s elements have some sort of canonical ordering,\n",(0,i.kt)("inlineCode",{parentName:"p"},"variable_name")," will be assigned and ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," run based on that ordering\n(so lists go in the order you probably expect, for instance).\nThis'll be clearer with some examples."),(0,i.kt)("p",null,"As for what can be iterated over/what is an ",(0,i.kt)("em",{parentName:"p"},"iterable"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"That we already know:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"lists"),(0,i.kt)("li",{parentName:"ul"},"tuples"),(0,i.kt)("li",{parentName:"ul"},"strings"))),(0,i.kt)("li",{parentName:"ul"},"That we will see in this lecture:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ranges"))),(0,i.kt)("li",{parentName:"ul"},"That we will see soon:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"dictionaries"),(0,i.kt)("li",{parentName:"ul"},"sets"))),(0,i.kt)("li",{parentName:"ul"},"That we'll later:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"maps"),(0,i.kt)("li",{parentName:"ul"},"filters"))),(0,i.kt)("li",{parentName:"ul"},"That I don't know when/if we'll see:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"zips"),(0,i.kt)("li",{parentName:"ul"},"enumerations"))),(0,i.kt)("li",{parentName:"ul"},"That we probably won't see:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"generators")))),(0,i.kt)("p",null,"Quite a lot! Hence, examples to come."),(0,i.kt)("h3",{id:"on-lists"},"On Lists"),(0,i.kt)("p",null,"Here's an example that prints a bunch of elements in a list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Print_List",live_py:!0,title:"Print_List"},'# a list of not all strings that we want to print\nones = [True, 1, 1.0, "One"]\nfor elem in ones:\n  print(elem)\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"elem")," hold the values ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"1.0"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},'"one"'),", in that order."),(0,i.kt)("h3",{id:"on-tuples"},"On Tuples"),(0,i.kt)("p",null,"Here's an example that prints whether the days of the week are weekdays or weekends."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Get_Type",live_py:!0,title:"Get_Type"},'for day in ("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"):\n  if day == "Saturday" or day == "Sunday":\n    print(f"{day}: Weekend!")\n  else:\n    print(f"{day}: Weekday")\n')),(0,i.kt)("h3",{id:"on-strings"},"On Strings"),(0,i.kt)("p",null,"Here is an example that inverts capitalisation in a string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Reverse_Capitalisation",live_py:!0,title:"Reverse_Capitalisation"},'text = input("Please enter some text: ")\n\ntext_reverse_case = ""\nfor letter in text:\n  if letter.isupper():\n    letter_reverse_case = letter.lower()\n  elif letter.islower():\n    letter_reverse_case = letter.upper()\n  else: # for punctuation and the like\n    letter_reverse_case = letter\n  text_reverse_case += letter_reverse_case\n\nprint(text_reverse_case)\n')),(0,i.kt)("h2",{id:"ranges"},"Ranges"),(0,i.kt)("p",null,"Say you want to iterate a specific number of times, maybe even doing something\nbased on the iteration number, then ranges are probably what you want to use as the iterator."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"range()")," function takes 1 to 3 arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"range(stop)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"range(start, stop)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"range(start, stop, step)"))),(0,i.kt)("p",null,"This works a lot like slicing in that the range starts at and includes ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," (default 0),\nstops at and does not include ",(0,i.kt)("inlineCode",{parentName:"p"},"stop"),", and has a step size of ",(0,i.kt)("inlineCode",{parentName:"p"},"step"),"."),(0,i.kt)("p",null,"It is important to note that ranges are their own thing, of type ",(0,i.kt)("inlineCode",{parentName:"p"},"range"),".\nSo if you wanted to print one to see what values it has,\nyou would need to convert it into a list or something first."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Range_Type",live_py:!0,title:"Range_Type"},'# Displaying the range as a range\nnums_range = range(10)\nprint(f"nums_range     : {nums_range}")\nprint(f"nums_range type: {type(nums_range)}")\n\n# Displaying the range as a list\nnums_list = list(nums_range)\nprint(f"nums_list      : {nums_list}")\nprint(f"nums_list type : {type(nums_list)}")\n')),(0,i.kt)("p",null,"With that noted, examples of making ranges of each type\n(and converting them to lists to print):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Range_Arguments",live_py:!0,title:"Range_Arguments"},"print(list(range(10)))       # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(list(range(5, 15)))    # [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nprint(list(range(5, 55, 5))) # [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n")),(0,i.kt)("p",null,"However, ranges are iterable,\nso we don't need to convert them to a list if we want to use them in a for loop.\nHere's how we could have used a ",(0,i.kt)("inlineCode",{parentName:"p"},"range()")," to do the blastoff example from before."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Blastoff",live_py:!0,title:"Blastoff"},'for i in range(10,0,-1):\n  print(f"{i}...")\nprint("Blastoff!")\n')),(0,i.kt)("h2",{id:"nesting"},"Nesting"),(0,i.kt)("p",null,"We can have loops inside loops, we refer to this an ",(0,i.kt)("em",{parentName:"p"},"nesting"),".\nWe need an additional level of indentation for every level of nesting.\n(We've already seen this with branching and while-looping,\nperhaps I was supposed to hide that until now, whoops.)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Nesting",live_py:!0,title:"Nesting"},'for x in range(3):\n  print(f"Start of x loop (x = {x})")\n  for y in range(3):\n    print(f"  Start of y loop (y = {y})")\n    print(f"    (x, y, x+y): ({x}, {y}, {x+y})")\n    print(f"  End of y loop (y = {y})")\n  print(f"End of x loop (x = {x})")\n')),(0,i.kt)("p",null,"Stepping through this code in a debugger\ncould be helpful if it's unclear why the print order is what it is."),(0,i.kt)("h3",{id:"breaking-and-continuing"},"Breaking and Continuing"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"continue")," work with for loops in the same way as with while loops\n(note that continue moves on to the ",(0,i.kt)("strong",{parentName:"p"},"next")," value in the iterable).\nBoth interact with nested loops in the same way as well:\nthey affect the inner-most loop that they are in."),(0,i.kt)("p",null,"Here's an example of triple loop over ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," that skips when the sum of the three\nis odd and ends the middle loop when the sum of ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," is 3 or more.\nYou can uncomment the ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"continue")," prints to see more information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Break_and_Continue",live_py:!0,title:"Break_and_Continue"},'for x in range(3):\n  for y in range(3):\n    if (x + y) >= 3:\n      print(f"Breaking!   (x, y)   : ({x}, {y})")\n      break\n    for z in range(3):\n      if (x + y + z) % 2 == 0:\n        # print(f"Continuing! (x, y, z): ({x}, {y}, {z})")\n        continue\n      print(f"(x, y, z; x+y, x+y+x): ({x}, {y}, {z}; {x+y}, {x+y+z})")\n')),(0,i.kt)("p",null,"This is something that would be much easier to follow if stepping through in a debugger.\nThe hope would be that from a given state in the code (given line and ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," values)\nyou can correctly anticipate what the program will do next."),(0,i.kt)("hr",null),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Material from here on was not part of the lecture,\nbut is stuff I think is quite useful to know about.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"unpackingdestructuring"},"Unpacking/Destructuring"),(0,i.kt)("p",null,"I had ",(0,i.kt)("a",{parentName:"p",href:"../lists-tuples-strings/Jared#unpackingdestructuring"},"basic unpacking/destructuring"),"\nas extra stuff in an earlier set of notes."),(0,i.kt)("p",null,"You can do that in the ",(0,i.kt)("inlineCode",{parentName:"p"},"for"),"-",(0,i.kt)("inlineCode",{parentName:"p"},"in")," line of a for loop,\nin a case where you had something like a list of tuples."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Unpacking",live_py:!0,title:"Unpacking"},"points = [(3,1), (4,1), (5,9), (2,6), (5,3)]\nxs = []\nys = []\n\nfor x, y in points:\n  xs += [x] # xs = xs + [x], i.e. append\n  ys += [y] # ys = ys + [y], i.e. append\n\nprint(xs)\nprint(ys)\n")),(0,i.kt)("h2",{id:"zipping"},"Zipping"),(0,i.kt)("p",null,"There is a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"zip()")," that takes in any number of iterables and returns\nsomething of type ",(0,i.kt)("inlineCode",{parentName:"p"},"zip"),".\nThis ",(0,i.kt)("inlineCode",{parentName:"p"},"zip")," object can be cast to a list/tuple or iterated over directly with a for loop."),(0,i.kt)("p",null,"The first element in a ",(0,i.kt)("inlineCode",{parentName:"p"},"zip")," object is a tuple containing the first elements of all\narguments to the ",(0,i.kt)("inlineCode",{parentName:"p"},"zip()")," function. The second a tuple of all the second arguments.\nAnd so on."),(0,i.kt)("p",null,"So for example, I can do the inverse of the previous example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Packing",live_py:!0,title:"Packing"},"xs = [3, 1, 2, 3, 9]\nys = [1, 5, 6, 5, 7]\nzs = [4, 9, 5, 8, 9]\n\n# List conversion of zip\nprint(list(zip(xs, ys, zs)))\n\n# Logically equivalent loop-over-zip approach\npoints = []\nfor xyz in zip(xs, ys, zs):\n  points += [xyz]\nprint(points)\n")),(0,i.kt)("p",null,"Naturally, if you actually wanted the zip to be a list, you'd do the ",(0,i.kt)("inlineCode",{parentName:"p"},"list(zip(...))"),"\napproach, the loop is there to show it works."),(0,i.kt)("p",null,"As for an example where the loop over a zip is more natural,\nthere was a point in an auto-grader for a guess a number game\nwhere I wanted a bunch of minima, maxima, and random guesses in those ranges\nnicely bundled together to run tests on."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Guess_a_Number",live_py:!0,title:"Guess_a_Number"},'import random\nrounds = 10 # how many rounds I want to do this for\n\n# get rounds (10) random minima and maxima\nmins = random.choices(range(0,10), k=rounds)\nmaxs = random.choices(range(10,100), k=rounds)\n\n# get a bunch of guesses in the respective min to max range\nguesses = []\nfor min_num, max_num in zip(mins, maxs):\n  guess = random.choice(range(min_num, max_num+1)) # min to max (inclusive)\n  guesses += [guess]\n\n# print full lists\nprint("mins    :",mins)\nprint("guesses :",guesses)\nprint("maxs    :",maxs)\nprint()\n\n# print respetive values\nfor min_num, guess, max_num in zip(mins, guesses, maxs):\n  # Here I could do some work with paired up guesses and their ranges\n  print(f"{min_num} <= {guess} <= {max_num}")\n')),(0,i.kt)("h2",{id:"enumerating"},"Enumerating"),(0,i.kt)("p",null,"Sometimes you do actually want the index and the element, maybe for pretty printing.\nCertainly by iterating over indices you can get both (for you can get elements from indices)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Indices",live_py:!0,title:"Indices"},'points = [(3, 1, 4), (1, 5, 9), (2, 6, 5), (3, 5, 8), (9, 7, 9)]\n\nfor i in range(len(points)):\n  x, y, z = points[i] # normal destructuring\n  print(f"Point {i+1}: x = {x}, y = {y}, z = {z}")\n')),(0,i.kt)("p",null,"But having to do that ",(0,i.kt)("inlineCode",{parentName:"p"},"points[i]")," thing is such a bother (it's really not that bad),\nand so there is fancy machinery to save us from this one line."),(0,i.kt)("p",null,"We have ",(0,i.kt)("inlineCode",{parentName:"p"},"enumerate()"),", which takes any iterable and generates something of type ",(0,i.kt)("inlineCode",{parentName:"p"},"enumerate"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"enumerate")," can either be iterated over in a loop (or used anywhere else a iterator can be)\nor turned into a list or such."),(0,i.kt)("p",null,"The first element in an ",(0,i.kt)("inlineCode",{parentName:"p"},"enumerate")," object is a tuple containing ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," (the first index) and\nthe first element of the argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"enumerate()")," function.\nThe second a tuple of ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," and the second element of the argument.\nAnd so on."),(0,i.kt)("p",null,"Behold the power of that, and nested destructuring:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Enumerate",live_py:!0,title:"Enumerate"},'points = [(3, 1, 4), (1, 5, 9), (2, 6, 5), (3, 5, 8), (9, 7, 9)]\n\nfor (i, (x, y, z)) in enumerate(points):\n  print(f"Point {i+1}: x = {x}, y = {y}, z = {z}")\n')))}m.isMDXComponent=!0}}]);