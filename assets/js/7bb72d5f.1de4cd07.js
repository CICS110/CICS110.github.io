"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1956],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=p(t),u=i,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=u;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[c]="string"==typeof e?e:i,o[1]=r;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},54423:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const l={title:"Section 04 (Jared Yeager)"},o="Branching",r={unversionedId:"branching/Jared/index",id:"branching/Jared/index",title:"Section 04 (Jared Yeager)",description:"Assignment Updates",source:"@site/main/lectures/07-branching/Jared/index.md",sourceDirName:"07-branching/Jared",slug:"/branching/Jared/",permalink:"/main/lectures/branching/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 07 Branching",permalink:"/main/lectures/branching/"},next:{title:"Lec 08 Debugging",permalink:"/main/lectures/debugging/"}},s={},p=[{value:"Assignment Updates",id:"assignment-updates",level:2},{value:"Making Choices",id:"making-choices",level:2},{value:"Control Flow Diagrams",id:"control-flow-diagrams",level:2},{value:"<code>if</code>",id:"if",level:2},{value:"<code>else</code>",id:"else",level:2},{value:"<code>elif</code>",id:"elif",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"branching"},"Branching"),(0,i.kt)("h2",{id:"assignment-updates"},"Assignment Updates"),(0,i.kt)("p",null,"Stuff due this week:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"(Presumably) Participation 4 ",(0,i.kt)("strong",{parentName:"li"},"Due Thursday 3/9")),(0,i.kt)("li",{parentName:"ul"},"(Presumably) Quiz 5: ",(0,i.kt)("strong",{parentName:"li"},"Due Thursday 3/9")),(0,i.kt)("li",{parentName:"ul"},"HW 3: ",(0,i.kt)("strong",{parentName:"li"},"Due Friday 3/10")),(0,i.kt)("li",{parentName:"ul"},"Lab 5: ",(0,i.kt)("strong",{parentName:"li"},"Due Friday 3/10"))),(0,i.kt)("p",null,"Stuff due next week:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Nothing! Enjoy the break!")),(0,i.kt)("p",null,"Finally, HW4 will ",(0,i.kt)("strong",{parentName:"p"},"not")," be due the week of 3/20 to 3/24.\nWe want to treat the break (3/11 to 3/19) as null time."),(0,i.kt)("h2",{id:"making-choices"},"Making Choices"),(0,i.kt)("p",null,"We as humans have plenty of cases where what we do depends on something.\nFor instance, if it is raining, I will grab my umbrella."),(0,i.kt)("p",null,'With boolean expressions we could represent the "it is raining" part of that.\nThe "I will grab my umbrella" part could be represented a bunch of ways in code\n(such as adding ',(0,i.kt)("inlineCode",{parentName:"p"},'"umbrella"')," to some list).\nBut the the ",(0,i.kt)("strong",{parentName:"p"},'"if"')," part, having the code be dependent on the boolean,\nthat we can't do."),(0,i.kt)("p",null,"Time to change that."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Extra: Bootleg Branching")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"This will actively do damage to your psyche.")),(0,i.kt)("p",null,"Technically, we could bootleg branching by abusing short-circuiting."),(0,i.kt)("p",null,"If this code makes an iota of sense to you ..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Bootleg_If",live_py:!0,title:"Bootleg_If"},'equipment = ["coat", "hat"]\n\nweather = input("What is the weather today: ").lower()\n\nis_rain = weather == "rain"\nis_rain and equipment.append("umbrella")\n\nprint(f"Heading out with: {equipment}")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Bootleg_If_Else",live_py:!0,title:"Bootleg_If_Else"},'name = input("Please enter your name: ")\nis_jared = name.lower() == "jared"\n\nis_jared and print("Jared, you are sociopathic monster...")\nnot is_jared and print(f"Hello, {name}")\n'))),(0,i.kt)("h2",{id:"control-flow-diagrams"},"Control Flow Diagrams"),(0,i.kt)("p",null,"But before we get to new code syntax,\nlets talk about a new tool for organising our thoughts on branching:\n",(0,i.kt)("em",{parentName:"p"},"control flow diagrams"),"."),(0,i.kt)("p",null,"As the name somewhat implies,\nthese are diagrams that show the flow of control/execution of code\n(or of actions more broadly)."),(0,i.kt)("p",null,"In a more strict form:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"They are composed of rectangle, diamonds, and arrows"),(0,i.kt)("li",{parentName:"ul"},"Rectangles represent actions (instructions in code)"),(0,i.kt)("li",{parentName:"ul"},"Diamonds represent choices/decisions (boolean conditions in code)"),(0,i.kt)("li",{parentName:"ul"},'There is a "Start" rectangle'),(0,i.kt)("li",{parentName:"ul"},'Each rectangle points to a "next" rectangle or diamond'),(0,i.kt)("li",{parentName:"ul"},'Diamonds have a "True" and "False" path coming out of them')),(0,i.kt)("p",null,"For instance,\nA control for diagram for grabbing an umbrella before heading out if it is raining\nmight look like:"),(0,i.kt)("mermaid",{value:"flowchart LR\n  start[Start]--\x3emwf{Is it rainy?}\n  mwf--\x3e|True|umb[Grab Umbrella]\n  umb--\x3eleave[Head out]\n  mwf--\x3e|False|leave"}),(0,i.kt)("p",null,"You can do totally different things in the True and False paths/branches.\nFor example, here's what my decision making for when I eat on campus vs in\nmy apartment looks like:"),(0,i.kt)("mermaid",{value:"flowchart LR\n  start[Start]--\x3emwf{Is it MoWeFr?}\n  mwf--\x3e|True|home[Eat at Home]\n  mwf--\x3e|False|camp[Eat on Campus]"}),(0,i.kt)("p",null,"Sometimes decisions aren't really True vs False in the way we think about them.\nFor instance, what I wear when I go out depends on temperature ranges.\nBut these cases can still usually be reduced to a combination of True vs False checks:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3et20{"20+ \u2103"}\n  t20--\x3e|True|c20[T-shirt and Sandles]\n  t20--\x3e|False|t10{"10+ \u2103"}\n  t10--\x3e|True|c10[Flannel and Sandles]\n  t10--\x3e|False|t0{"0+ \u2103"}\n  t0--\x3e|True|c0[Flannel and Shoes]\n  t0--\x3e|False|cm10[Coat and Shoes]'}),(0,i.kt)("p",null,"Notice how the ranges are effectively 20+, 10-20, 0-10, 0-,\nbut each range is broken off into a case.\nMoreover, by doing the cases in order, I can simplify how the cases are written\n(e.g., I only need to check 10+ for the 10-20 range,\nbecause that check only occurs in the <20 case)."),(0,i.kt)("h2",{id:"if"},(0,i.kt)("inlineCode",{parentName:"h2"},"if")),(0,i.kt)("p",null,"Let's turn this into code."),(0,i.kt)("p",null,"The most basic if statement is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"if condition:\n  code\n\nmore_code\n")),(0,i.kt)("p",null,"We have the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),", some boolean ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," (variable/expression), a ",(0,i.kt)("inlineCode",{parentName:"p"},":"),",\nand some ",(0,i.kt)("strong",{parentName:"p"},"indented")," ",(0,i.kt)("em",{parentName:"p"},"block")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," (can be multiple lines).\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," is not part of the if statement, just some context around it."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),",\nthen the flow of execution will enter the if block and ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," will be executed,\nthen the flow of execution will exit the if block and ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," will be executed."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),",\nthen the flow of execution will skip over the if-block and ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," will be executed."),(0,i.kt)("p",null,'As an example, here is code for the "if it is raining, I will grab my umbrella" scenario:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=If",live_py:!0,title:"If"},'weather = input("What is the weather today: ")\n\nequipment = ["coat", "hat"]\n\nif weather == "rain": # if it is raining\n  equipment.append("umbrella") # I will grab an umbrella\n\nprint(f"Heading out with: {equipment}")\n')),(0,i.kt)("p",null,"Compare this to the control flow diagram from earlier:"),(0,i.kt)("mermaid",{value:"flowchart LR\n  start[Start]--\x3emwf{Is it rainy?}\n  mwf--\x3e|True|umb[Grab Umbrella]\n  umb--\x3eleave[Head out]\n  mwf--\x3e|False|leave"}),(0,i.kt)("p",null,"The logical flow based on the decision is the same."),(0,i.kt)("h2",{id:"else"},(0,i.kt)("inlineCode",{parentName:"h2"},"else")),(0,i.kt)("p",null,"Frequently, not only does ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," being true mean we want to do something specific,\nbut we also want to do something else specific when it is false."),(0,i.kt)("p",null,'For example, my "where to eat" scenario. If it is Monday, Wednesday, or Friday,\nI choose to eat in my apartment. Otherwise, I choose to eat on campus.\nI\'m doing distinct things in each case.'),(0,i.kt)("p",null,'This could be done by doing an explicit\n"if true do this" and "if false do this" type of thing:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=If_If_Not",live_py:!0,title:"If_If_Not"},'day = input("What day is it: ").lower()\n\nif day == "monday" or day == "wednesday" or day == "friday":\n  print("Eating at Home")\nif not (day == "monday" or day == "wednesday" or day == "friday"):\n  print("Eating on Campus")\n')),(0,i.kt)("p",null,"But that's gross and we have machinery for this. Introducing ",(0,i.kt)("inlineCode",{parentName:"p"},"else"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"if condition:\n  if_block_code\nelse:\n  else_block_code\n\nmore_code\n")),(0,i.kt)("p",null,"After the ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," block we have the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"else"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},":"),",\nand some ",(0,i.kt)("strong",{parentName:"p"},"indented")," ",(0,i.kt)("em",{parentName:"p"},"block")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," (can be multiple lines)."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),",\nthen the flow of execution will enter the if block and ",(0,i.kt)("inlineCode",{parentName:"p"},"if_block_code")," will be executed,\nthen the flow of execution will exit the if block (ignoring the else block)\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," will be executed."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),",\nthen the flow of execution will enter the else block (ignoring the if block)\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"else_block_code")," will be executed,\nthen the flow of execution will exit the else block and ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," will be executed."),(0,i.kt)("p",null,'Returning to the "where I eat" example:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=If_Else",live_py:!0,title:"If_Else"},'day = input("What day is it: ").lower()\n\nif day == "monday" or day == "wednesday" or day == "friday":\n  print("Eating at Home")\nelse:\n  print("Eating on Campus")\n')),(0,i.kt)("p",null,"As before, the logical flow is the same as in the diagram:"),(0,i.kt)("mermaid",{value:"flowchart LR\n  start[Start]--\x3emwf{Is it MoWeFr}\n  mwf--\x3e|True|home[Eat at Home]\n  mwf--\x3e|False|camp[Eat on Campus]"}),(0,i.kt)("h2",{id:"elif"},(0,i.kt)("inlineCode",{parentName:"h2"},"elif")),(0,i.kt)("p",null,'What about that "what I wear" scenario:'),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3et20{"20+ \u2103"}\n  t20--\x3e|True|c20[T-shirt and Sandles]\n  t20--\x3e|False|t10{"10+ \u2103"}\n  t10--\x3e|True|c10[Flannel and Sandles]\n  t10--\x3e|False|t0{"0+ \u2103"}\n  t0--\x3e|True|c0[Flannel and Shoes]\n  t0--\x3e|False|cm10[Coat and Shoes]'}),(0,i.kt)("p",null,"Well, it can be pretty directly translated into if-else statements by nesting them\n(notice how nesting requires an additional level of indentation for each if-else statement):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=If_Else_If_Else",live_py:!0,title:"If_Else_If_Else"},'temp = int(input("What is the temperature (in \u2103): "))\n\nif temp >= 20:\n  print("Wearing t-shirt and sandles")\nelse:\n  if temp >= 10:\n    print("Wearing flannel shirt and sandles")\n  else:\n    if temp >= 0:\n      print("Wearing flannel shirt and shoes")\n    else:\n      print("Wearing coat and shoes")\n')),(0,i.kt)("p",null,"This nested if-else-if-else-if-else think is pretty gross.\nAnd wouldn't you know it, we have machinery for this.\nIntroducing ",(0,i.kt)("inlineCode",{parentName:"p"},"elif"),' (a portmanteau of "else" and "if"):'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"if condition1:\n  if_block_code\nelif condition2:\n  elif_block_code\n\nmore_code\n")),(0,i.kt)("p",null,"After the ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," block we have the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"elif"),", another condition, a ",(0,i.kt)("inlineCode",{parentName:"p"},":"),",\nand some ",(0,i.kt)("strong",{parentName:"p"},"indented")," ",(0,i.kt)("em",{parentName:"p"},"block")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," (can be multiple lines)."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition1")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),",\nthen the flow of execution will enter the if block and ",(0,i.kt)("inlineCode",{parentName:"p"},"if_block_code")," will be executed,\nthen the flow of execution will exit the if block (ignoring all remaining elif and else blocks)\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," will be executed."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"condition1")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),",\nthen the flow of execution will skip over the if block and check ",(0,i.kt)("inlineCode",{parentName:"p"},"condition2"),".\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"condition2")," is/evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),",\nthen the flow of execution will enter the elif block and ",(0,i.kt)("inlineCode",{parentName:"p"},"elif_block_code")," will be executed,\nthen the flow of execution will exit the elif block (ignoring all remaining elif and else blocks)\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"more_code")," will be executed."),(0,i.kt)("p",null,"You can chain as many ",(0,i.kt)("inlineCode",{parentName:"p"},"elif"),"s together as you like, and can end them in an ",(0,i.kt)("inlineCode",{parentName:"p"},"else"),'.\nThis lets us do the "what to wear" scenario more cleanly:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=If_Elif_Else",live_py:!0,title:"If_Elif_Else"},'temp = int(input("What is the temperature (in \u2103): "))\n\nif temp >= 20:\n  print("Wearing t-shirt and sandles")\nelif temp >= 10:\n  print("Wearing flannel shirt and sandles")\nelif temp >= 0:\n  print("Wearing flannel shirt and shoes")\nelse:\n  print("Wearing coat and shoes")\n')),(0,i.kt)("p",null,"While the logical flow does match the earlier control flow diagram,\nthe intuition is more akin to:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3et{"Temperature is?"}\n  t--\x3e|"20+ \u2103"|c20[T-shirt and Sandles]\n  t--\x3e|"10-20 \u2103"|c10[Flannel and Sandles]\n  t--\x3e|"0-10 \u2103"|c0[Flannel and Shoes]\n  t--\x3e|"0- \u2103"|cm10[Coat and Shoes]'}),(0,i.kt)("p",null,"Finally, I want to emphasise the exclusive nature of the ",(0,i.kt)("inlineCode",{parentName:"p"},"elif"),"s.\nIf you have if-elif-...-else, only one block can possibly trigger.\nAnd this lets you write later conditions under the assumption that prior conditions are false.\n(Again, I only need to check ",(0,i.kt)("inlineCode",{parentName:"p"},">= 10"),", because that check only occurred when ",(0,i.kt)("inlineCode",{parentName:"p"},">=20")," was ",(0,i.kt)("strong",{parentName:"p"},"false"),",\ngiving me ",(0,i.kt)("inlineCode",{parentName:"p"},">= 10")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"< 20"),".)"),(0,i.kt)("p",null,"If you were to have a bunch of pure ifs in a row, multiple if statements could trigger.\nFor instance, try this with a number of 20, you'll get three prints:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=If_If_Else",live_py:!0,title:"If_If_Else"},'temp = int(input("What is the temperature (in \u2103): "))\n\nif temp >= 20:\n  print("Wearing t-shirt and sandles")\nif temp >= 10:\n  print("Wearing flannel shirt and sandles")\nif temp >= 0:\n  print("Wearing flannel shirt and shoes")\nelse:\n  print("Wearing coat and shoes")\n')),(0,i.kt)("p",null,"And in fact, this is the equivalent control flow diagram:"),(0,i.kt)("mermaid",{value:'flowchart LR\n  start[Start]--\x3et20{"20+ \u2103"}\n  t20--\x3e|True|c20[T-shirt and Sandles]\n  c20--\x3et10{"10+ \u2103"}\n  t20--\x3e|False|t10\n  t10--\x3e|True|c10[Flannel and Sandles]\n  c10--\x3et0{"0+ \u2103"}\n  t10--\x3e|False|t0\n  t0--\x3e|True|c0[Flannel and Shoes]\n  t0--\x3e|False|cm10[Coat and Shoes]'}),(0,i.kt)("p",null,"Notice the path that hits multiple choice-of-attire rectangles."))}c.isMDXComponent=!0}}]);