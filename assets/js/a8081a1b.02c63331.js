"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7832],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=m(n),N=r,c=d["".concat(o,".").concat(N)]||d[N]||k[N]||i;return n?a.createElement(c,l(l({ref:t},s),{},{components:n})):a.createElement(c,l({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=N;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[d]="string"==typeof e?e:r,l[1]=p;for(var m=2;m<i;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},13688:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var a=n(87462),r=(n(67294),n(3905));const i={title:"Section 04 (Jared Yeager)"},l="Booleans and Assert",p={unversionedId:"booleans-and-assert/Jared/index",id:"booleans-and-assert/Jared/index",title:"Section 04 (Jared Yeager)",description:"Booleans",source:"@site/main/lectures/05-booleans-and-assert/Jared/index.md",sourceDirName:"05-booleans-and-assert/Jared",slug:"/booleans-and-assert/Jared/",permalink:"/main/lectures/booleans-and-assert/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 05 Booleans & Assert",permalink:"/main/lectures/booleans-and-assert/"},next:{title:"Lec 06 Lists, Tuples, Sets",permalink:"/main/lectures/lists-tuples-strings/"}},o={},m=[{value:"Booleans",id:"booleans",level:2},{value:"Comparisons",id:"comparisons",level:3},{value:"Float Representation Error",id:"float-representation-error",level:3},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Precedence",id:"precedence",level:3},{value:"Misc",id:"misc",level:3},{value:"Assert",id:"assert",level:2},{value:"Conversions and Truthy/Falsy Values",id:"conversions-and-truthyfalsy-values",level:2},{value:"Misc: More Built-In Functions",id:"misc-more-built-in-functions",level:2}],s={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"booleans-and-assert"},"Booleans and Assert"),(0,r.kt)("h2",{id:"booleans"},"Booleans"),(0,r.kt)("p",null,"So far we've learned about types for numbers (whole and decimal),\ntext, and even nothingness itself."),(0,r.kt)("p",null,"Now comes our final fundamental type: ",(0,r.kt)("em",{parentName:"p"},"booleans")," (",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),"s), the type for truth."),(0,r.kt)("p",null,"There are only two possible values for ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),"s: ",(0,r.kt)("inlineCode",{parentName:"p"},"True")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,r.kt)("h3",{id:"comparisons"},"Comparisons"),(0,r.kt)("p",null,"So what can give us these booleans values?\nFirst and foremost, comparison between numbers. Some operators:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x == y"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," equals ",(0,r.kt)("inlineCode",{parentName:"li"},"y"),", otherwise ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x != y"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," does not equal ",(0,r.kt)("inlineCode",{parentName:"li"},"y"),", otherwise ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x < y"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is strictly less than ",(0,r.kt)("inlineCode",{parentName:"li"},"y"),", otherwise ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x > y"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is strictly greater than ",(0,r.kt)("inlineCode",{parentName:"li"},"y"),", otherwise ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x <= y"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is less than or equal to ",(0,r.kt)("inlineCode",{parentName:"li"},"y"),", otherwise ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x >= y"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is greater than or equal to ",(0,r.kt)("inlineCode",{parentName:"li"},"y"),", otherwise ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Number_Comparisons",live_py:!0,title:"Number_Comparisons"},"print(3 == 5)  # False\nprint(3 != 5)  # True\nprint(3.5 > 5) # False\nprint(5 <= 5)  # True\n")),(0,r.kt)("p",null,'Funnily enough, you can use all these operators on strings too.\nThe less than vs greater than become lexicographical ordering,\nwith earlier strings being "less"\n(all capital letters are less than/before all lower case letters).'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=String_Comparisons",live_py:!0,title:"String_Comparisons"},'print("Foo" == "Foo")  # True\nprint("Foo" != "foo")  # True\nprint("Foo" < "foo")   # True\nprint("Fool" <= "Foo") # False\n')),(0,r.kt)("h3",{id:"float-representation-error"},"Float Representation Error"),(0,r.kt)("p",null,"There is a dangerous pitfall lurking in checking if ",(0,r.kt)("inlineCode",{parentName:"p"},"floats")," are equal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Float_NE",live_py:!0,title:"Float_NE"},"print(.1 + .2 == .3) # False\n")),(0,r.kt)("p",null,"Why is ",(0,r.kt)("inlineCode",{parentName:"p"},".1 + .2")," not ",(0,r.kt)("inlineCode",{parentName:"p"},".3"),".\nForcing them to be be more thoroughly displayed we see something interesting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Float_Representation",live_py:!0,title:"Float_Representation"},'print(f"{.1    : .17f}") # 0.10000000000000001\nprint(f"{.2    : .17f}") # 0.20000000000000001\nprint(f"{.1+.2 : .17f}") # 0.30000000000000004\nprint(f"{.3    : .17f}") # 0.29999999999999999\n')),(0,r.kt)("p",null,"The same way that we can not represent 1/3 perfectly in decimal form,\nthere are plenty of values the computer can not represent perfectly,\nand so slight arithmetic errors can appear."),(0,r.kt)("p",null,"If we want to see if two floats are equal,\nwe can check the absolute value of the difference against a tolerance or use ",(0,r.kt)("inlineCode",{parentName:"p"},"math.isclose()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Float_Tolerance",live_py:!0,title:"Float_Tolerance"},"import math\nprint(.1 + .2 == .3)             # False\nprint(abs(.1 + .2 - .3) < .001)  # True\nprint(math.isclose(.1 + .2, .3)) # True\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Below code is throwing an error on the website,\nbut not if run in isolation in a file.\nStill working on that.")),(0,r.kt)("p",null,"Yet even within these, beware.\n",(0,r.kt)("inlineCode",{parentName:"p"},"math.isclose()")," defaults to using a tolerance based on the two arguments,\nso there will be an issue if one of the two values is ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0"),".\nThere is a way to specify an absolute tolerance to get around this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=IsClose_Tolerance",live_py:!0,title:"IsClose_Tolerance"},"import math\nprint(math.isclose(.1 + .2 - .3, 0))                # False\nprint(math.isclose(.1 + .2 - .3, 0, abs_tol=0.001)) # True\n")),(0,r.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,r.kt)("p",null,"There are new operators that work on booleans:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x and y"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," are both ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),", otherwise returns ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x or y"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if either ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," (this includes if both are ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),"),\notherwise returns ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"not x"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"False")," and returns ",(0,r.kt)("inlineCode",{parentName:"li"},"False")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Logic",live_py:!0,title:"Logic"},"print(5 < 6 and 6 < 7)  # True\nprint(5 >= 6 or 6 >= 7) # False\nprint(not 1 == 5)       # True\n")),(0,r.kt)("h3",{id:"precedence"},"Precedence"),(0,r.kt)("p",null,"As there is an order of operations for math, so there is for logic."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Parentheses always win"),(0,r.kt)("li",{parentName:"ul"},"Evaluation of math is done first (",(0,r.kt)("inlineCode",{parentName:"li"},"**"),",then ",(0,r.kt)("inlineCode",{parentName:"li"},"*"),",",(0,r.kt)("inlineCode",{parentName:"li"},"/"),",",(0,r.kt)("inlineCode",{parentName:"li"},"//"),",",(0,r.kt)("inlineCode",{parentName:"li"},"%"),", then ",(0,r.kt)("inlineCode",{parentName:"li"},"+"),",",(0,r.kt)("inlineCode",{parentName:"li"},"-"),")"),(0,r.kt)("li",{parentName:"ul"},"Then comparisons ",(0,r.kt)("inlineCode",{parentName:"li"},"=="),", ",(0,r.kt)("inlineCode",{parentName:"li"},"!="),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<="),", ",(0,r.kt)("inlineCode",{parentName:"li"},">="),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"li"},">")),(0,r.kt)("li",{parentName:"ul"},"Then ",(0,r.kt)("inlineCode",{parentName:"li"},"not"),", which is almost like the negative sign in math"),(0,r.kt)("li",{parentName:"ul"},"Then ",(0,r.kt)("inlineCode",{parentName:"li"},"and"),", which is almost like multiplication in math\n(if ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," was ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"False")," was ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),")"),(0,r.kt)("li",{parentName:"ul"},"Then ",(0,r.kt)("inlineCode",{parentName:"li"},"or"),", which is almost like addition in math\n(if ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," was ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," or more and ",(0,r.kt)("inlineCode",{parentName:"li"},"False")," was ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),")")),(0,r.kt)("p",null,"So for instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Precedence",live_py:!0,title:"Precedence"},"# 3 ** 3 == 1 and 6 - 7 < 0 or not 1 % 2 == 0\n# 27     == 1 and -1    < 0 or not 1     == 0\n# False       and True      or not False\n# False       and True      or True\n# False                     or True\n# True\nprint(3 ** 3 == 1 and 6 - 7 < 0 or not 1 % 2 == 0) # True\n")),(0,r.kt)("p",null,"That said, using parentheses for some visual clarity is advised."),(0,r.kt)("h3",{id:"misc"},"Misc"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Extra: DeMorgan's Laws")),(0,r.kt)("p",null,"A fancy name for a set of logical rules.\nDeMorgen's Laws tell us that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"not (x and y)")," is equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"not x or not y")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"not (x or y)")," is equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"not x and not y"))),(0,r.kt)("p",null,'You can fairly easily convince yourself this is true via some truth tables.\nThe idea of a "proof by truth table" is that you just organise a\nproof by cases into a nice table form. Here I have one row for each\npossible value combination of ',(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),", with intermediate results also shown.\nStarting with ",(0,r.kt)("inlineCode",{parentName:"p"},"not")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"and"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"not x")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"not y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x and y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"not (x and y)")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"not x or not y")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"not")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"or")," is much the same:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"not x")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"not y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x or y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"not (x or y)")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"not x and not y")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Extra: Distributive Laws")),(0,r.kt)("p",null,"Analogously to the distributive law in math (",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mi",{parentName:"mrow"},"z"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mi",{parentName:"mrow"},"z")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x * (y + z) = x * y + x * z")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4653em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.04398em"}},"z"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4653em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7778em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4653em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.04398em"}},"z"))))),"),\nthere are distributive laws in logic:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x and (y or z)")," is equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"(x and y) or (x and z)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x or (y and z)")," is equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"(x or y) and (x or z)"))),(0,r.kt)("p",null,"These also can be shown by proof tables.\n(If we had looping yet I could just give you code with a triple for-loop, but alas.)\nFirst is the table for distributing ",(0,r.kt)("inlineCode",{parentName:"p"},"and")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"or"),". Since ",(0,r.kt)("inlineCode",{parentName:"p"},"and")," is multiplication-y\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"or")," is addition-y, this also matches the math distribution rule's intuition nicely."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"z")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x and y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x and z")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"y or z")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x and (y or z)")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"(x and y) or (x and z)")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))))),(0,r.kt)("p",null,"The more surprising result\n(or at least the one less in sync with the mathematical intuition)\nis that ",(0,r.kt)("inlineCode",{parentName:"p"},"or")," also distributes nicely over ",(0,r.kt)("inlineCode",{parentName:"p"},"and"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"z")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x or y")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x or z")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"y and z")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"x or (y and z)")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"th"},"(x or y) and (x or z)")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"True"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Very Extra: Hello Belphegor, My Old Friend")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"We have not gotten to this material yet. Give it maybe 7 lectures.\nConsider this more of a glimpse of the kind of power you will come to have.")),(0,r.kt)("p",null,"One of the great motivating spirits of programming is cutting down on time\nfor tedious or repetitive tasks. Not only are such tasks horribly dull,\nbut the numbness of the repetition can lull us into making silly mistakes.\nFor example, I sure didn't want to fill out two 8 by 8 truth tables\nand do all the markdown (the language the backend of this website uses)\nformatting for them; and it would have been easy to have some\ncopy and paste that I forgot to edit, or to mess up a boolean computation.\nSo, I wrote code the generate the markdown for the tables for me."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Generate_And_Or_Distibution_Table",live_py:!0,title:"Generate_And_Or_Distibution_Table"},'cols = ["x", "y", "z", "x and y", "x and z", "y or z", "x and (y or z)", "(x and y) or (x and z)"]\nprint("| `" + "` | `".join(cols) + "` |")\nprint("|" + len(cols) * " :---: |")\nfor x in [False, True]:\n  for y in [False, True]:\n    for z in [False, True]:\n      row = [x, y, z, x and y, x and z, y or z, x and (y or z), (x and y) or (x and z)]\n      print("| `" + "` | `".join(map(str,row)) + "` |")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Generate_Or_And_Distibution_Table",live_py:!0,title:"Generate_Or_And_Distibution_Table"},'cols = ["x", "y", "z", "x or y", "x or z", "y and z", "x or (y and z)", "(x or y) and (x or z)"]\nprint("| `" + "` | `".join(cols) + "` |")\nprint("|" + len(cols) * " :---: |")\nfor x in [False, True]:\n  for y in [False, True]:\n    for z in [False, True]:\n      row = [x, y, z, x or y, x or z, y and z, x or (y and z), (x or y) and (x or z)]\n      print("| `" + "` | `".join(map(str,row)) + "` |")\n')))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Extra: Short Circuiting")),(0,r.kt)("p",null,"In the nascent days of computers and programming,\ntime and space (memory) were precious things\n(so I hear, I was born in '96).\nThis informs functionality of languages in the present.\nAs a motivating scenario, say we wanted to evaluate ",(0,r.kt)("inlineCode",{parentName:"p"},"LHS and RHS"),",\nwhere both sides are arbitrary expressions,\nwhich could be quite long or contain function calls.\nWe start be evaluating the left hand side (LHS).\nSay that evaluates to ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),". At this point we have\n",(0,r.kt)("inlineCode",{parentName:"p"},"False and RHS"),". The right hand side doesn't matter, the whole thing\nwill be ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),". So we can just ",(0,r.kt)("em",{parentName:"p"},"short circuit"),", call the whole thing ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),",\nand save some time."),(0,r.kt)("p",null,"This is what Python does. ",(0,r.kt)("inlineCode",{parentName:"p"},"False and WHATEVER")," short circuits to ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"True or WHATEVER")," short circuits to ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),".\nThis can be seen by effectively sticking some print statements in the operands."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Shortcircuit_And",live_py:!0,title:"Shortcircuit_And"},'def ptrue(opnum):\n  print(f"Operand {opnum}: True")\n  return True\n\ndef pfalse(opnum):\n  print(f"Operand {opnum}: False")\n  return False\n\nprint(ptrue(1) and ptrue(2))  # True, True  -> True\nprint(ptrue(1) and pfalse(2)) # True, False -> False\nprint(pfalse(1) and ptrue(2)) # False       -> False\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Shortcircuit_Or",live_py:!0,title:"Shortcircuit_Or"},'def ptrue(opnum):\n  print(f"Operand {opnum}: True")\n  return True\n\ndef pfalse(opnum):\n  print(f"Operand {opnum}: False")\n  return False\n\nprint(pfalse(1) or pfalse(2)) # False, False -> False\nprint(pfalse(1) or ptrue(2))  # False, True  -> True\nprint(ptrue(1) or pfalse(2))  # True         -> True\n')),(0,r.kt)("p",null,"Most of the time, this is just a convenience that you don't think about.\nBut there are some cases where you can explicitly leverage this.\nI tend to do this for multi-part checks where one part depends on another.\nFor example, say I want to check if something is a natural number, i.e.,\na positive ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),". I would first check that it is an ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," at all\nbefore checking the positivity,\nsince checking positivity for a non-",(0,r.kt)("inlineCode",{parentName:"p"},"int")," could cause an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Nat_Check",live_py:!0,title:"Nat_Check"},'def is_nat(n):\n  # We can use == for type comparison\n  return type(n) == int and n >= 0\n\nprint(is_nat(5))   # True\nprint(is_nat(-5))  # False\nprint(is_nat(5.0)) # False\nprint(is_nat("5")) # False\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Nat_Check_Error",live_py:!0,title:"Nat_Check_Error"},'def is_nat(n):\n  # We can use == for type comparison\n  return n >= 0 and type(n) == int\n\nprint(is_nat(5))   # True\nprint(is_nat(-5))  # False\nprint(is_nat(5.0)) # False\nprint(is_nat("5")) # ERROR\n'))),(0,r.kt)("h2",{id:"assert"},"Assert"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"assert")," is a special command that takes a boolean (or something that evaluatse to a boolean)\nand an error message in string form; it checks the condition, and throws an error if\nthe condition is not met."),(0,r.kt)("p",null,"This can be used as a sort of gate/checkpoint to prevent illegal states (such as illegal input),\nthe idea being that an explicit error is easier to notice and address than\nsomething wrong/unexpected but not illegal going on in a more invisible manner."),(0,r.kt)("p",null,"Below is an example of exponentiation where we may want the result to always be an int."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Interger_Exp",live_py:!0,title:"Interger_Exp"},'def int_exp(x:int, y:int):\n  # We can use == for type comparison, don\'t want floats if we want an int result\n  assert type(x) == int, "Illegal type for x"\n  assert type(y) == int, "Illegal type for y"\n  return x ** y\n\nz = int_exp(3, -1)\n# something triggering this assert would tell us improvements can be made\nassert type(z) == int, "int_exp() produced illegal return"\nprint(z)\n')),(0,r.kt)("p",null,"That last error message could clue us in to a missed case.\nThat can then be fixed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Interger_Exp_Fixed",live_py:!0,title:"Interger_Exp_Fixed"},'def int_exp(x:int, y:int):\n  # We can use == for type comparison\n  assert type(x) == int, "Illegal type for x"\n  assert type(y) == int, "Illegal type for y"\n  assert y >= 0, f"Illegal value for y (y is {y})"\n  return x ** y\n\n# z = int_exp(3.0, 5) # AssertionError: Illegal type for x\n# z = int_exp(3, .5)  # AssertionError: Illegal type for y\n# z = int_exp(3, -1)  # AssertionError: Illegal value for y (y is -1)\n\nz = int_exp(3, 5)\n# If int_exp was mis-implemented, we might trigger the assert below.\nassert type(z) == int, "int_exp() produced illegal return"\nprint(z)\n')),(0,r.kt)("h2",{id:"conversions-and-truthyfalsy-values"},"Conversions and Truthy/Falsy Values"),(0,r.kt)("p",null,"Let's talk about how booleans interact with type conversion.\nConverting ",(0,r.kt)("strong",{parentName:"p"},"from")," booleans we can demonstrate exhaustively:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=From_Bool",live_py:!0,title:"From_Bool"},'print(int(True))    # 1\nprint(int(False))   # 0\nprint(float(True))  # 1.0\nprint(float(False)) # 0.0\nprint(str(True))    # "True" \nprint(str(False))   # "False" \n')),(0,r.kt)("p",null,'Converting to booleans is a more interesting story.\nEvery value is either "Truthy" (converts to ',(0,r.kt)("inlineCode",{parentName:"p"},"True"),') or "Falsy" (coverts to ',(0,r.kt)("inlineCode",{parentName:"p"},"False"),').\nThe general rule is, for a given type, the "empty"-or-"zero"-like values are falsy,\nand everything else is truthy.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=To_Bool",live_py:!0,title:"To_Bool"},'import math\nprint(bool(0))         # False\nprint(bool(0.0))       # False\nprint(bool(-0.0))      # False\nprint(bool(math.nan))  # False, interestingly enough\nprint(bool(""))        # False\nprint(bool(None))      # False\nprint()\nprint(bool(1))         # True\nprint(bool(-57))       # True\nprint(bool(1.0))       # True\nprint(bool(-math.inf)) # True\nprint(bool("foo"))     # True\nprint(bool("False"))   # True, which might surprise you\n')),(0,r.kt)("h2",{id:"misc-more-built-in-functions"},"Misc: More Built-In Functions"),(0,r.kt)("p",null,"Python is a fairly well developed language. So for a lot of really basic properties\nof numbers and strings, there is some sort of built-in or library function to\ncompute/check said property."),(0,r.kt)("p",null,'It is impossible to memorise all the functions that exist, but there is also no need to.\nIn practice, if you wanted to know something like the length of the string you\nwould search the internet for "python string length function".\nAnd you would presumably find the ',(0,r.kt)("inlineCode",{parentName:"p"},"len()")," function and some examples online."),(0,r.kt)("p",null,'Some example "signatures" of such functions:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"len(s)"),": gets the length of a string."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"min(n1, n2, n3, ...)"),": gets the minimum number in a list."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max(n1, n2, n3, ...)"),": gets the maximum number in a list."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"round(number, ndigits=None)"),": rounds a number to ",(0,r.kt)("inlineCode",{parentName:"li"},"ndigits")," digits,\nthe default is to round to the nearest whole number."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"abs(x)"),": gets the absolute value of a number.")))}d.isMDXComponent=!0}}]);