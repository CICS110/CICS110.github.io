"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1488],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),h=i,f=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},3726:(e,n,t)=>{t.d(n,{O:()=>o});var r=t(7294),i=t(2263);const o=e=>{let{lec_src:n}=e;const{siteConfig:t}=(0,i.Z)(),{url:o}=t,a=`https://view.officeapps.live.com/op/embed.aspx?src=${o+n}`;return r.createElement("div",{style:{marginBottom:"4rem"}},r.createElement("iframe",{src:a,width:"100%",height:"600px",frameborder:"0"}),r.createElement("a",{href:n,target:"_blank",rel:"noopener noreferrer"},"Download Powerpoint"))}},2753:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(7462),i=(t(7294),t(3905)),o=t(3726);const a={},l="Lec 01 Course Introduction",s={unversionedId:"lectures/introduction/index",id:"lectures/introduction/index",title:"Lec 01 Course Introduction",description:"Exploring Code Activity",source:"@site/main/lectures/01-introduction/index.md",sourceDirName:"lectures/01-introduction",slug:"/lectures/introduction/",permalink:"/main/lectures/introduction/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lectures",permalink:"/main/lectures/"},next:{title:"Section 01, 06 (Cole Reilly)",permalink:"/main/lectures/introduction/Cole/"}},c={},p=[{value:"Exploring Code Activity",id:"exploring-code-activity",level:2},{value:"Guess the Number",id:"guess-the-number",level:3},{value:"Spirograph",id:"spirograph",level:3},{value:"Cafe Wall Illusion",id:"cafe-wall-illusion",level:3},{value:"Koch Snowflake",id:"koch-snowflake",level:3}],d={toc:p};function u(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lec-01-course-introduction"},"Lec 01 Course Introduction"),(0,i.kt)(o.O,{lec_src:t(4534).Z,mdxType:"PowerPoint"}),(0,i.kt)("h2",{id:"exploring-code-activity"},"Exploring Code Activity"),(0,i.kt)("h3",{id:"guess-the-number"},"Guess the Number"),(0,i.kt)("p",null,"Try to guess the hidden number. The number changes every minute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Guess_the_number",live_py:!0,title:"Guess_the_number"},'from datetime import datetime\n\nnow = datetime.now()\ncur_time = now.strftime("%I:%M %p")\nnum = ((now.hour * 60 + now.minute)*17 + 27) % 100\n\nprint("Try to guess the number between 0 and 100")\nprint("The number changes every minute")\nprint(f"This is the number for: {cur_time}")\nguess = int(input("Enter a number: "))\n\nif guess == num:\n    print("You guessed it!")\nelif guess > num:\n    print("Too high")\nelse:\n    print("Too low")\n')),(0,i.kt)("h3",{id:"spirograph"},"Spirograph"),(0,i.kt)("p",null,"This piece of code generates a Spirograph. a spirograph is a drawing that is formed by placing a pen in a gear, and then\nrolling that gear around inside a larger gear. The pen traces out a curve that is the shape of the gear teeth."),(0,i.kt)("img",{src:"https://upload.wikimedia.org/wikipedia/commons/c/c1/Spiograph_Animation.gif",style:{width:200}}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Spirograph",live_py:!0,title:"Spirograph"},'from turtle import *\nfrom math import pi, sin, cos, lcm\n\nR = 100 # Radius of the outer (larger) gear\nr = 60 # Radius of the inner (smaller) gear\nd = 100\nsteps = 100 # Number of steps to take (increase for more detail)\nd_theta = (1 / steps) * 2 * pi * lcm(R, r) / R\ntheta = 0\n\nhideturtle()\ncolor("blue")\n\npenup()\ngoto(R - r + d, 0)\npendown()\n\nfor i in range(steps):\n    theta += d_theta\n    x = (R - r) * cos(theta) + d * cos(theta * (R - r) / r)\n    y = (R - r) * sin(theta) - d * sin(theta * (R - r) / r)\n    goto(x, y)\n')),(0,i.kt)("h3",{id:"cafe-wall-illusion"},"Cafe Wall Illusion"),(0,i.kt)("p",null,"The Cafe Wall illusion has lines that look like they are slanted, but they are actually straight. Take a look!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Cafe_Wall_Illusion",live_py:!0,title:"Cafe_Wall_Illusion"},'from turtle import *\nfrom math import sin\n\ndef move(x,y):\n    penup()\n    goto(x,y)\n    setheading(0)\n    pendown()\n\ndef fill_rect(width, height, color):\n    fillcolor(color)\n    for fun in [begin_fill, end_fill]:\n        fun()\n        for dist in 2 * [width,height]:\n            forward(dist)\n            left(90)\n\ndef fill_row(x, y, width, height, offset, rects):\n    move(x,y)\n    forward(width - offset)\n    fill_rect(width, height, "black")\n    for _ in range(rects-1):\n        forward(2 * width)\n        fill_rect(width, height, "black")\n    forward(width + offset)\n\nhideturtle()\nspeed(11)\ncolor("grey")\npensize(1)\n\nxmin = -250\nxmax = 250\nymin = -250\nymax = 250\n\nrows = 25\ncols = 10\n\nmove(xmin,ymin)\nfill_rect(xmax-xmin,ymax-ymin,"white")\nfor i in range(rows):\n    dx = (xmax-xmin) / (2*cols)\n    dy = (ymax-ymin) / rows\n    y0 = ymin + i * dy\n    offset = dx / 2 + (dx / 5) * sin((10 / cols) * i)\n    fill_row(xmin, y0, dx, dy, offset, cols)\ndone()\n')),(0,i.kt)("h3",{id:"koch-snowflake"},"Koch Snowflake"),(0,i.kt)("p",null,"The Koch Snowflake is a fractal that is formed by starting with an equilateral triangle, and then repeatedly\nreplacing the middle of each side with a smaller equilateral triangle. Try playing with the length and depth!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Koch_Snowflake",live_py:!0,title:"Koch_Snowflake"},"from turtle import *\nfrom math import sin\n\ndef koch_forward(distance, depth):\n    if depth == 0:\n        forward(distance)\n    else:\n        koch_forward(distance/3, depth-1)\n        right(60)\n        koch_forward(distance/3, depth-1)\n        left(120)\n        koch_forward(distance/3, depth-1)\n        right(60)\n        koch_forward(distance/3, depth-1)\n\n# Play with these!\nlength = 250 # Length of a side\ndepth = 4 # Level of recursion\n\nhideturtle()\nspeed(8)\ncolor('blue', 'white')\n\npenup()\ngoto(- length / 2, - 3**(1/2) * length / 6)\npendown()\n\nbegin_fill()\nfor _ in range(3):\n    koch_forward(length, depth)\n    left(120)\nend_fill()\ndone()\n")))}u.isMDXComponent=!0},4534:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/files/Lecture_1-d60f225e7a334b5d799a2be53c525212.pptx"}}]);