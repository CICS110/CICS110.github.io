"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2688],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},h="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(n),p=a,c=h["".concat(u,".").concat(p)]||h[p]||g[p]||o;return n?r.createElement(c,i(i({ref:t},d),{},{components:n})):r.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[h]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},58448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"Section 04 (Jared Yeager)"},i="Debugging",s={unversionedId:"debugging/Jared/index",id:"debugging/Jared/index",title:"Section 04 (Jared Yeager)",description:"Assignment Updates",source:"@site/main/lectures/08-debugging/Jared/index.md",sourceDirName:"08-debugging/Jared",slug:"/debugging/Jared/",permalink:"/main/lectures/debugging/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 08 Debugging",permalink:"/main/lectures/debugging/"}},u={},l=[{value:"Assignment Updates",id:"assignment-updates",level:2},{value:"Other Resources",id:"other-resources",level:2},{value:"Fixing Bugs",id:"fixing-bugs",level:2},{value:"Getting a Reproducible Issue",id:"getting-a-reproducible-issue",level:3},{value:"Hunting for Divergence",id:"hunting-for-divergence",level:3},{value:"Understanding the Issue",id:"understanding-the-issue",level:3},{value:"Testing if There are Bugs",id:"testing-if-there-are-bugs",level:2},{value:"Programming to Avoid Bugs",id:"programming-to-avoid-bugs",level:2}],d={toc:l};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"debugging"},"Debugging"),(0,a.kt)("h2",{id:"assignment-updates"},"Assignment Updates"),(0,a.kt)("p",null,"Stuff due this week:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Participation 4 ",(0,a.kt)("strong",{parentName:"li"},"Due Thursday 3/9")),(0,a.kt)("li",{parentName:"ul"},"Quiz 5: ",(0,a.kt)("strong",{parentName:"li"},"Due Thursday 3/9")),(0,a.kt)("li",{parentName:"ul"},"HW 3: ",(0,a.kt)("strong",{parentName:"li"},"Due Friday 3/10")),(0,a.kt)("li",{parentName:"ul"},"Lab 5: ",(0,a.kt)("strong",{parentName:"li"},"Due Friday 3/10"))),(0,a.kt)("p",null,"Stuff due next week:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Nothing! Enjoy the break!")),(0,a.kt)("p",null,"Finally, HW4 will ",(0,a.kt)("strong",{parentName:"p"},"not")," be due the week of 3/20 to 3/24.\nWe want to treat the break (3/11 to 3/19) as null time."),(0,a.kt)("h2",{id:"other-resources"},"Other Resources"),(0,a.kt)("p",null,"I feel that a fairly strong visual component is necessary\nfor conversations about \"how to use the debugger\".\nI don't think I can do that in a reasonable span of time in this format,\nand I don't think I can do it better than has already been done:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../../guides/getting-unstuck"},"Getting Unstuck guide")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"."},"The Slides")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/docs/editor/debugging"},"VSCode Debugging Guide"))),(0,a.kt)("p",null,"I'll mostly use these notes to pontificate about how I think about debugging."),(0,a.kt)("h2",{id:"fixing-bugs"},"Fixing Bugs"),(0,a.kt)("p",null,"Inevitably, you will encounter cases where you run your code\nand it either does the wrong thing or explodes.\nThat is to say, ",(0,a.kt)("em",{parentName:"p"},"Bugs")," or ",(0,a.kt)("em",{parentName:"p"},"errors")," occur."),(0,a.kt)("p",null,"Fixing those is what programming is really about.\nIt's also where some of the best learning happens."),(0,a.kt)("h3",{id:"getting-a-reproducible-issue"},"Getting a Reproducible Issue"),(0,a.kt)("p",null,"The first step, is to be able to produce the bug/error at will.\nOnce you can produce it whenever you run the code, you can start hunting it down."),(0,a.kt)("p",null,"With what we currently have and the language we are using,\nthings are generally ",(0,a.kt)("em",{parentName:"p"},"deterministic"),";\nmeaning that the same starting point and inputs lead to the same outcomes.\nSo this step is likely pretty easy."),(0,a.kt)("p",null,"If you are using some sort of randomness, such as the ",(0,a.kt)("inlineCode",{parentName:"p"},"random")," module,\nyou may have some cases where the bug occurs and some where it doesn't.\nTake the code below as an example. Run it multiple times. By my estimates there\nis 27.1% chance of an error occurring on each run."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Random",live_py:!0,title:"Random"},"import random\n\ndef rand_frac():\n  num = random.randint(-10,10)\n  den = random.randint(0,10)\n  return num/den\n\nn1 = rand_frac()\nn2 = rand_frac()\nn3 = rand_frac()\n\navg = (n1 + n2 + n3) / 3\nprint(avg)\n")),(0,a.kt)("p",null,"We want to able to get that error to occur for certain.\nTrue randomness is quite rare in the CS world, and so we frequently use what are\ntechnically ",(0,a.kt)("em",{parentName:"p"},"pseudo-random number generators"),'.\nThe "random" numbers chosen depend on an initial ',(0,a.kt)("em",{parentName:"p"},"seed"),".\nWe can ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/random.html#random.seed"},"deliberately seed"),"\nthe random number generator with a fixed seed to remove the randomness.\nWe then can experiment with the seed until we can get the error to appear."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Seed",live_py:!0,title:"Seed"},"import random\n\nrandom.seed(2) # impose order over chaos\n\ndef rand_frac():\n  num = random.randint(-10,10)\n  den = random.randint(0,10)\n  return num/den\n\nn1 = rand_frac()\nn2 = rand_frac()\nn3 = rand_frac()\n\navg = (n1 + n2 + n3) / 3\nprint(avg)\n")),(0,a.kt)("p",null,"Didn't take me long. Now the error always appears, which makes it a lot easier to hunt down."),(0,a.kt)("h3",{id:"hunting-for-divergence"},"Hunting for Divergence"),(0,a.kt)("p",null,"The next step is find where the error occurs in our code,\nwhere the program first deviates from what we expect."),(0,a.kt)("p",null,"For errors, python generally gives us a specific line in the error message\n(line 8 in the earlier example, for instance).\nAlthough the root cause of the error may be further back\n(that division by 0 happened because of ",(0,a.kt)("inlineCode",{parentName:"p"},"den")," being assigned to ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," earlier)."),(0,a.kt)("p",null,"For non-fatal bugs in the logic or in some calculations, it's more of a hunt.\nThis is frequently where the debugger comes in, allowing you to step through your code\nand see where your expectations of what will happen first depart from what the program is doing."),(0,a.kt)("p",null,"I'm a bit more of a plebeian myself,\nin that I generally use print statement a lot to just print the values of variables.\nIf I was really at a loss, I'd probably start by having print statements at the\nbeginning and end of my functions to show me the arguments values and returns of each function call."),(0,a.kt)("p",null,"I would then narrow the search and start checking the internal values of functions where\nthe output of a function isn't what I might expect based on the inputs to that function."),(0,a.kt)("h3",{id:"understanding-the-issue"},"Understanding the Issue"),(0,a.kt)("p",null,"Once we've found where we deviated from the path,\nit's just a matter of making sense of the root issue and fixing it."),(0,a.kt)("p",null,"It's hard to give general advice on this.\nUsually if you've really nailed down where the issue is\n(to the point of knowing where within a line of code the issue is),\nwhat the issue is becomes fairly apparent."),(0,a.kt)("p",null,"But especially when it isn't obvious,\nfiguring out why something behaves differently than you expect can be a powerful learning moment.\nAt least I find that's where I cement some of my understandings of things."),(0,a.kt)("h2",{id:"testing-if-there-are-bugs"},"Testing if There are Bugs"),(0,a.kt)("p",null,"In practice, we often wait until something explodes before beginning the bug hunt.\nThis is an intrinsically very reactive mode of operation."),(0,a.kt)("p",null,'If we are anticipating writing a non-trivial amount of code (making a bug harder to hunt),\nor if the code does something important\n(where we don\'t want a bug to turn up in something we think is "done"),\nthen we probably want to be more proactive about hunting bugs.'),(0,a.kt)("p",null,"What does that look like? Testing!"),(0,a.kt)("p",null,"Testing our code comes in a lot of forms. On the formal end there are\n",(0,a.kt)("em",{parentName:"p"},"unit tests")," and ",(0,a.kt)("em",{parentName:"p"},"unit testing frameworks"),". In fact, our auto-graders\nuse python's own ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/unittest.html"},"unit testing framework"),"."),(0,a.kt)("p",null,"But on the other end are much more casual tests.\nBasically just running your code and observing the results/output\non enough different inputs to test it under every condition.\nFor example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"With numbers, you might often want to test the positive, zero, and negative case."),(0,a.kt)("li",{parentName:"ul"},"For anything involving indexing, you might want to hit the first, last, and middle cases."),(0,a.kt)("li",{parentName:"ul"},"For lists: empty, one-element, multi-element lists might be good.")),(0,a.kt)("p",null,"You are trying to find a case where your code doesn't work.\nOnly when you have failed in you best attempts to break your own code\nshould you be satisfied.\nThis pitting yourself against yourself helps refine your code, and yourself."),(0,a.kt)("h2",{id:"programming-to-avoid-bugs"},"Programming to Avoid Bugs"),(0,a.kt)("p",null,"While it is impossible to avoid bugs,\nwe can aim to produce fewer and catch our mistakes earlier."),(0,a.kt)("p",null,"I think the easiest way to do this is to write code in very small chunks and test as you go.\nThe moment you write some code who's effect could be seen by printing something out,\nyou can run it and print those those things out.\nYou'll often catch minor issues early and not need to go on a big hunt for them later."),(0,a.kt)("p",null,'It also helps to have your code broken up into functions.\nThis allows you to not have to juggle so much in your head at once.\nOnce a function has been made and tested, you can sort of "trust" that it works,\nand treat is just a black box when you use it in other code.\nFewer things to mentally juggle at once means more mental resources on the\nbit of code you are currently working on, which hopefully leads to fewer bugs.'))}h.isMDXComponent=!0}}]);