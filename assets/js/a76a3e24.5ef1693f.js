"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5284],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=l,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||a;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},57135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(87462),l=(n(67294),n(3905));const a={title:"Section 04 (Jared Yeager)"},i="CSV Files",o={unversionedId:"CSV_Files/Jared/index",id:"CSV_Files/Jared/index",title:"Section 04 (Jared Yeager)",description:"This will mostly be an example of a specific kind of file you might work with,",source:"@site/main/lectures/16_CSV_Files/Jared/index.md",sourceDirName:"16_CSV_Files/Jared",slug:"/CSV_Files/Jared/",permalink:"/main/lectures/CSV_Files/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 16 CSV Files",permalink:"/main/lectures/CSV_Files/"}},s={},p=[{value:"What are CSV Files",id:"what-are-csv-files",level:2},{value:"Normal I/O",id:"normal-io",level:2},{value:"CSV Module",id:"csv-module",level:2}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"csv-files"},"CSV Files"),(0,l.kt)("p",null,"This will mostly be an example of a specific kind of file you might work with,\nand some built-in machinery specifically for that type of file."),(0,l.kt)("p",null,"That type of file in question: CSVs."),(0,l.kt)("h2",{id:"what-are-csv-files"},"What are CSV Files"),(0,l.kt)("p",null,'CSV (short for "',(0,l.kt)("em",{parentName:"p"},"comma-separated value(s)"),'") files are\neffectively the file type for tables and spreadsheets.'),(0,l.kt)("p",null,"So, consider this table of the periodic table of elements below:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Element"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Symbol"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Atomic Mass"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Hydrogen"),(0,l.kt)("td",{parentName:"tr",align:"center"},"H"),(0,l.kt)("td",{parentName:"tr",align:"center"},"1.00784")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Helium"),(0,l.kt)("td",{parentName:"tr",align:"center"},"He"),(0,l.kt)("td",{parentName:"tr",align:"center"},"4.0026")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Lithium"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Li"),(0,l.kt)("td",{parentName:"tr",align:"center"},"6.941")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Beryllium"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Be"),(0,l.kt)("td",{parentName:"tr",align:"center"},"9.0121")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Boron"),(0,l.kt)("td",{parentName:"tr",align:"center"},"B"),(0,l.kt)("td",{parentName:"tr",align:"center"},"10.811")))),(0,l.kt)("p",null,"Look how beautifully it is rendered on this website."),(0,l.kt)("p",null,"A CSV is basically the pure data/content of that table,\nif is much less aesthetically pleasing, but it contains all the\nsame information:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"Element,Symbol,Atomic Mass\nHydrogen,H,1.00784\nHelium,He,4.0026\nLithium,Li,6.941\nBeryllium,Be,9.0121\nBoron,B,10.811\n")),(0,l.kt)("p",null,"Observe the parallels between the table and the CSV.\nHonestly, the CSV just looks like the table but without the formatting\n(and with the commas)."),(0,l.kt)("p",null,"The format has a couple characteristics:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The header row of the table (if it exists) is the first row of the CSV."),(0,l.kt)("li",{parentName:"ul"},"Every non-header row in the table, becomes a line in the CSV, called a ",(0,l.kt)("em",{parentName:"li"},"record"),"."),(0,l.kt)("li",{parentName:"ul"},"Every column in the table represents a ",(0,l.kt)("em",{parentName:"li"},"field"),",\nthe values in columns for a given row are separated by commas in the CSV.")),(0,l.kt)("p",null,"A CSV may not have a header row,\nand what each column represents may just need to be known to the programmer or user.\nFor instance, I could have a file named ",(0,l.kt)("inlineCode",{parentName:"p"},"elements.csv")," that just has:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"Hydrogen,H,1.00784\nHelium,He,4.0026\nLithium,Li,6.941\nBeryllium,Be,9.0121\nBoron,B,10.811\n")),(0,l.kt)("p",null,"Why cut of the header? Because it is annoying one-off row to deal with.\nWhy keep the header? Because it contains useful information about what the file\nmeans/represents.\nThere are arguments both ways."),(0,l.kt)("p",null,"I'll use ",(0,l.kt)("inlineCode",{parentName:"p"},"elements.csv")," without the header for the simplicity of the example code."),(0,l.kt)("h2",{id:"normal-io"},"Normal I/O"),(0,l.kt)("p",null,"We can work with a CSV with all the file I/O machinery we already have\nand some string manipulation technology."),(0,l.kt)("p",null,"As a motivating example, let's start with the following CSV, named ",(0,l.kt)("inlineCode",{parentName:"p"},"elements.csv"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"Hydrogen,H,1.00784\nHelium,He,4.0026\nLithium,Li,6.941\nBeryllium,Be,9.0121\nBoron,B,10.811\n")),(0,l.kt)("p",null,'Our goal will be go from this "element name, periodic symbol, atomic mass"\nlayout to a layout of "atomic number, periodic symbol, element name, atomic mass".\nThe will be done by swapping the element name and periodic symbol for each row,\nand sticking the atomic number at the front.'),(0,l.kt)("p",null,"As a first step, let's open the file, read the contents, and split it into lines.\nNothing new here over last lecture. I'll be using the ",(0,l.kt)("inlineCode",{parentName:"p"},".read().splitlines()"),"\napproach:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n\npprint.pprint(elem_rows)\n')),(0,l.kt)("p",null,"The above code will produce the output below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"['Hydrogen,H,1.00784',\n 'Helium,He,4.0026',\n 'Lithium,Li,6.941',\n 'Beryllium,Be,9.0121',\n 'Boron,B,10.811']\n")),(0,l.kt)("p",null,"Now, we have a list containing each row of the CSV as a string filled with commas.\nWe can break up these row-strings with the ",(0,l.kt)("inlineCode",{parentName:"p"},".split()")," string method.\nWhich takes in a ",(0,l.kt)("em",{parentName:"p"},"delimiter")," to split on/at."),(0,l.kt)("p",null,"For instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Split",live_py:!0,title:"Split"},"row_1 = 'Hydrogen,H,1.00784'\nrow_1_split = row_1.split(\",\")\nprint(row_1)       # \"Hydrogen,H,1.00784\" \nprint(row_1_split) # ['Hydrogen', 'H', '1.00784']\n")),(0,l.kt)("p",null,"Now, we need to do that ",(0,l.kt)("strong",{parentName:"p"},"for every row in the list"),".\nAnd when you need to perform some transformation on every element in a list,\ncomprehension are a good way to go."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"The above code will produce the output below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[['Hydrogen', 'H', '1.00784'],\n ['Helium', 'He', '4.0026'],\n ['Lithium', 'Li', '6.941'],\n ['Beryllium', 'Be', '9.0121'],\n ['Boron', 'B', '10.811']]\n")),(0,l.kt)("p",null,"So now we have a list of lists, the big outer list being the rows,\nthe inner lists being the values within a row.\nThis is basically our table in 2D-list form.\nNow we can start manipulating it."),(0,l.kt)("p",null,"I'll run a for loop over each row,\nreference that row with a helper variable (",(0,l.kt)("inlineCode",{parentName:"p"},"row"),"),\nuse slices to swap the first two values/fields/columns,\nand then insert the atomic number at the start."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]     # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1]    # Swap Symbol and Name entry of row\n  row.insert(0, str(i+1)) # Add number (as string) to start of row\n\npprint.pprint(elem_table)\n')),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Extra: How I'd actually do it")),(0,l.kt)("p",null,"Let's not kid ourselves, my code is not that coherent.\nWe are transforming each row again, you bet I'd use a comprehension."),(0,l.kt)("p",null,"Oh, I need what index in the list something is?\nThat's what we have ",(0,l.kt)("inlineCode",{parentName:"p"},"enumerate()")," for."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_file.read().splitlines()]\n\nelem_table = [[str(i+1)] + r[1::-1] + [r[-1]] for i,r in enumerate(elem_table)]\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"Actually ... The honest truth is I'd do something even worse...")),(0,l.kt)("p",null,"The above code will produce the output below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[['1', 'H', 'Hydrogen', '1.00784'],\n ['2', 'He', 'Helium', '4.0026'],\n ['3', 'Li', 'Lithium', '6.941'],\n ['4', 'Be', 'Beryllium', '9.0121'],\n ['5', 'B', 'Boron', '10.811']]\n")),(0,l.kt)("p",null,"Note that I made the atomic numbers strings,\nbecause now we are going to need to pack everything back up into a string\nand write to a new CSV."),(0,l.kt)("p",null,"We've used ",(0,l.kt)("inlineCode",{parentName:"p"},'"".join()')," before, to just directly stick strings together.\nNow, for each row, we want to stick the elements of the row together,\nbut with commas between them.\n",(0,l.kt)("inlineCode",{parentName:"p"},'",".join()')," does that. And since that is a per-row transformation,\na comprehension it is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]     # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1]    # Swap Symbol and Name entry of row\n  row.insert(0, str(i+1)) # Add number (as string) to start of row\n\nnew_elem_rows = [",".join(row) for row in elem_table]\n\npprint.pprint(new_elem_rows)\n')),(0,l.kt)("p",null,"The above code will produce the output below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"['1,H,Hydrogen,1.00784',\n '2,He,Helium,4.0026',\n '3,Li,Lithium,6.941',\n '4,Be,Beryllium,9.0121',\n '5,B,Boron,10.811']\n")),(0,l.kt)("p",null,"Almost there, we just need to join these row-strings together with newlines\nand write that out to a new CSV."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'with open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]     # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1]    # Swap Symbol and Name entry of row\n  row.insert(0, str(i+1)) # Add number (as string) to start of row\n\nnew_elem_rows = [",".join(row) for row in elem_table]\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  new_elem_file.write("\\n".join(new_elem_rows))\n')),(0,l.kt)("p",null,"And that will do it. After running that code,\nthe contents of the file ",(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv")," will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n")),(0,l.kt)("p",null,"Another approach would be to have newlines on the end of each row,\nand that would give the last line in the CSV a trailing newline,\nwhich I believe is more appropriate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'with open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]     # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1]    # Swap Symbol and Name entry of row\n  row.insert(0, str(i+1)) # Add number (as string) to start of row\n\n# Newlines added to each row when we join them back together\nnew_elem_rows = [",".join(row)+"\\n" for row in elem_table]\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  # Final write is then a pure join\n  new_elem_file.write("".join(new_elem_rows))\n')),(0,l.kt)("p",null,"After running that code, the contents of the file ",(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv")," will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n\n")),(0,l.kt)("p",null,"The same as before, but with a trailing newline."),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Very Extra: How I'd actually do it")),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"Risk of inflicting psychic damage.")),(0,l.kt)("p",null,"Ok, the truth? The truth is I'd probably do this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'with open("elements.csv", "r") as rfd:\n  with open("updated_elements.csv", "w") as wfd:\n    wfd.write("".join([",".join([str(i+1)]+(r:=l.split(","))[1::-1]+[r[-1]])+"\\n" for i,l in enumerate(rfd.read().splitlines())]))\n')),(0,l.kt)("p",null,"The walrus operator (",(0,l.kt)("inlineCode",{parentName:"p"},":="),") allow you to assign to variables mid-evaluation."),(0,l.kt)("p",null,"Do not grow up to write code like me.")),(0,l.kt)("h2",{id:"csv-module"},"CSV Module"),(0,l.kt)("p",null,"CSVs introduce the need to do that initial split on commas or\nthe later join on commas (depending on if we need to read from or write to a CSV)."),(0,l.kt)("p",null,"This stuff is kind of annoying.\nAs an alternative,\nthere is some machinery that handles it for us in the built-in ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," module."),(0,l.kt)("p",null,"For reading, ",(0,l.kt)("inlineCode",{parentName:"p"},"csv.reader(FILE_OBJECT)")," returns a CSV Reader,\nwhich is an iterable and thus can be converted directly to a list.\nEach element of this CSV Reader will be a row already split up on the commas:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\nimport pprint\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.reader(elem_file)\n  elem_table = list(reader)\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"The above code will produce the output below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[['Hydrogen', 'H', '1.00784'],\n ['Helium', 'He', '4.0026'],\n ['Lithium', 'Li', '6.941'],\n ['Beryllium', 'Be', '9.0121'],\n ['Boron', 'B', '10.811']]\n")),(0,l.kt)("p",null,"Look how much it does for us. Nice."),(0,l.kt)("p",null,"Now for writing. ",(0,l.kt)("inlineCode",{parentName:"p"},"csv.writer(FILE_OBJECT)")," return a CSV Writer.\nFor our purposes, I think the useful method here is the\n",(0,l.kt)("inlineCode",{parentName:"p"},".writerows()")," method. Which takes an iterable of iterables (I think),\nsuch as our 2D list (aka table), and writes it to the file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.reader(elem_file)\n  elem_table = list(reader)\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]  # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1] # Swap Symbol and Name entry of row\n  row.insert(0, i+1)   # Add number to start of row\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  writer = csv.writer(new_elem_file)\n  writer.writerows(elem_table)\n')),(0,l.kt)("p",null,"The above code will produce the output below.\nNotice how we don't need to convert that atomic number to a string.\nThe CSV Writer does that for us. Good stuff."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n\n")),(0,l.kt)("p",null,"Also notice that it actually properly stuck a trailing newline on the last line."))}u.isMDXComponent=!0}}]);