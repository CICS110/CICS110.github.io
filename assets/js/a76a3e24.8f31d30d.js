"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5284],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(n),c=l,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var m=2;m<a;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},57135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>m,toc:()=>u});var r=n(87462),l=(n(67294),n(3905)),a=n(74866),i=n(85162);const o={title:"Section 04 (Jared Yeager)"},s="CSV Files",m={unversionedId:"CSV_Files/Jared/index",id:"CSV_Files/Jared/index",title:"Section 04 (Jared Yeager)",description:"This will mostly be an example of a specific kind of file you might work with,",source:"@site/main/lectures/16_CSV_Files/Jared/index.md",sourceDirName:"16_CSV_Files/Jared",slug:"/CSV_Files/Jared/",permalink:"/main/lectures/CSV_Files/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 16 CSV Files",permalink:"/main/lectures/CSV_Files/"},next:{title:"Lec 17 Recursion",permalink:"/main/lectures/Recursion/"}},p={},u=[{value:"What are CSV Files",id:"what-are-csv-files",level:2},{value:"Direct CSV Handling (Lists of Lists)",id:"direct-csv-handling-lists-of-lists",level:2},{value:"Normal I/O",id:"normal-io",level:3},{value:"CSV Module: Reader and Writer",id:"csv-module-reader-and-writer",level:3},{value:"Handling CSVs as Lists of Dictionaries",id:"handling-csvs-as-lists-of-dictionaries",level:2},{value:"Normal I/O",id:"normal-io-1",level:3},{value:"CSV Module: DictReader and DictWriter",id:"csv-module-dictreader-and-dictwriter",level:3},{value:"CSV Module with Header Row",id:"csv-module-with-header-row",level:3}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"csv-files"},"CSV Files"),(0,l.kt)("p",null,"This will mostly be an example of a specific kind of file you might work with,\nand some built-in machinery specifically for that type of file.\nThat type of file in question: CSVs."),(0,l.kt)("h2",{id:"what-are-csv-files"},"What are CSV Files"),(0,l.kt)("p",null,'CSV (short for "',(0,l.kt)("em",{parentName:"p"},"comma-separated values"),'") files are\neffectively the file type for tables and spreadsheets.\nConsider this table of elements (in the "periodic table of elements" sense):'),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Element"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Symbol"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Atomic Mass"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Hydrogen"),(0,l.kt)("td",{parentName:"tr",align:"center"},"H"),(0,l.kt)("td",{parentName:"tr",align:"center"},"1.00784")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Helium"),(0,l.kt)("td",{parentName:"tr",align:"center"},"He"),(0,l.kt)("td",{parentName:"tr",align:"center"},"4.0026")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Lithium"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Li"),(0,l.kt)("td",{parentName:"tr",align:"center"},"6.941")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Beryllium"),(0,l.kt)("td",{parentName:"tr",align:"center"},"Be"),(0,l.kt)("td",{parentName:"tr",align:"center"},"9.0121")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Boron"),(0,l.kt)("td",{parentName:"tr",align:"center"},"B"),(0,l.kt)("td",{parentName:"tr",align:"center"},"10.811")))),(0,l.kt)("p",null,"Look how beautifully it is rendered on this website.\nA CSV is basically the pure data/content of that table,\nit is much less aesthetically pleasing, but it contains all the\nsame information:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"Element,Symbol,Atomic Mass\nHydrogen,H,1.00784\nHelium,He,4.0026\nLithium,Li,6.941\nBeryllium,Be,9.0121\nBoron,B,10.811\n")),(0,l.kt)("p",null,"Observe the parallels between the table and the CSV.\nHonestly, the CSV just looks like the table but without the formatting\n(and with the commas).\nThe format has a couple characteristics:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The header row of the table (if it exists) is the first row of the CSV."),(0,l.kt)("li",{parentName:"ul"},"Every non-header row in the table, becomes a line in the CSV, called a ",(0,l.kt)("em",{parentName:"li"},"record"),"."),(0,l.kt)("li",{parentName:"ul"},"Every column in the table represents a ",(0,l.kt)("em",{parentName:"li"},"field"),",\nthe values in columns for a given row are separated by commas in the CSV.")),(0,l.kt)("p",null,"A CSV may not have a header row,\nso what each column represents may just need to be known to the programmer or user.\nFor instance, I could have a file named ",(0,l.kt)("inlineCode",{parentName:"p"},"elements.csv")," that just has:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"Hydrogen,H,1.00784\nHelium,He,4.0026\nLithium,Li,6.941\nBeryllium,Be,9.0121\nBoron,B,10.811\n")),(0,l.kt)("p",null,"Why cut of the header? Because it is annoying one-off row to deal with.\nWhy keep the header? Because it contains useful information about what the file\nmeans/represents.\nThere are arguments both ways, life is full of trade-offs."),(0,l.kt)("h2",{id:"direct-csv-handling-lists-of-lists"},"Direct CSV Handling (Lists of Lists)"),(0,l.kt)("p",null,"We'll look at unpacking, manipulating, and re-packaging a CSV\nboth with only the machinery we already have (basic I/O and string methods)\nand with machinery provided by the ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," module.\nFor both of these, we will be starting with the file ",(0,l.kt)("inlineCode",{parentName:"p"},"elements.csv"),"\nwith the following contents (no header row for simplicity):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"Hydrogen,H,1.00784\nHelium,He,4.0026\nLithium,Li,6.941\nBeryllium,Be,9.0121\nBoron,B,10.811\n")),(0,l.kt)("p",null,'Our goal will be go from this "element name, periodic symbol, atomic mass"\nlayout to a layout of "atomic number, periodic symbol, element name, atomic mass".\nThis will be done by swapping the element name and periodic symbol for each row,\nand sticking the atomic number at the front.\nThe updated table will be written to ',(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv"),"."),(0,l.kt)("h3",{id:"normal-io"},"Normal I/O"),(0,l.kt)("p",null,"So here is an approach with all the stuff we already have,\nbroken up across these tabs to reduce the horizontal space consumed."),(0,l.kt)(a.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"read",label:"Read",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"As a first step, let's open the file, read the contents, and split it into lines.\nNothing new here over last lecture. I'll be using the ",(0,l.kt)("inlineCode",{parentName:"p"},".read().splitlines()"),"\napproach:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n\npprint.pprint(elem_rows)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"['Hydrogen,H,1.00784',\n 'Helium,He,4.0026',\n 'Lithium,Li,6.941',\n 'Beryllium,Be,9.0121',\n 'Boron,B,10.811']\n")),(0,l.kt)("p",null,"Notice how I pretty-print the file contents to make sure the ",(0,l.kt)("inlineCode",{parentName:"p"},"open()")," call is working.\nYes, this is done for you the reader to see something for the steps as I go,\nbut this is also how I actually code. Run early, run often, build up incrementally.")),(0,l.kt)(i.Z,{value:"split",label:"Split",mdxType:"TabItem"},(0,l.kt)("p",null,"Now, we have a list containing each row of the CSV as a string filled with commas.\nWe can break up these row-strings with the ",(0,l.kt)("inlineCode",{parentName:"p"},".split()")," string method.\nWhich takes in a ",(0,l.kt)("em",{parentName:"p"},"delimiter")," to split on/at."),(0,l.kt)("p",null,"For instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Split",live_py:!0,title:"Split"},"row_1 = 'Hydrogen,H,1.00784'\nrow_1_split = row_1.split(\",\")\nprint(row_1)       # \"Hydrogen,H,1.00784\" \nprint(row_1_split) # ['Hydrogen', 'H', '1.00784']\n")),(0,l.kt)("p",null,"Now, we need to do that ",(0,l.kt)("strong",{parentName:"p"},"for every row in the list"),".\nAnd when you need to perform some transformation on every element in a list,\ncomprehension are a good way to go."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[['Hydrogen', 'H', '1.00784'],\n ['Helium', 'He', '4.0026'],\n ['Lithium', 'Li', '6.941'],\n ['Beryllium', 'Be', '9.0121'],\n ['Boron', 'B', '10.811']]\n")),(0,l.kt)("p",null,"Again, a single new line of code is written,\nand then run with a print statement to make sure it works.")),(0,l.kt)(i.Z,{value:"modification",label:"Modify",mdxType:"TabItem"},(0,l.kt)("p",null,"So now we have a list of lists, the big outer list being the rows,\nthe inner lists being the values within a row.\nThis is basically our table in 2D-list form.\nNow we can start manipulating it."),(0,l.kt)("p",null,"I'll run a for loop over each row,\nreference that row with a helper variable (",(0,l.kt)("inlineCode",{parentName:"p"},"row"),"),\nuse slices to swap the first two values/fields/columns,\nand then insert the atomic number at the start."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]     # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1]    # Swap Symbol and Name entry of row\n  row.insert(0, str(i+1)) # Add atomic number (as string) to start of row\n\npprint.pprint(elem_table)\n')),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Extra: How I'd actually do it")),(0,l.kt)("p",null,"Let's not kid ourselves, my code is not that coherent.\nWe are transforming each row again, you bet I'd use a comprehension.\nOh, and I need what index in the list something is?\nThat's what we have ",(0,l.kt)("inlineCode",{parentName:"p"},"enumerate()")," for."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_file.read().splitlines()]\n\nelem_table = [[str(i+1)] + r[1::-1] + [r[-1]] for i,r in enumerate(elem_table)]\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"Actually ... The honest truth is I'd do something even worse...")),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[['1', 'H', 'Hydrogen', '1.00784'],\n ['2', 'He', 'Helium', '4.0026'],\n ['3', 'Li', 'Lithium', '6.941'],\n ['4', 'Be', 'Beryllium', '9.0121'],\n ['5', 'B', 'Boron', '10.811']]\n")),(0,l.kt)("p",null,"Note that I made the atomic numbers strings,\nbecause now we are going to need to pack everything back up into a string\nand write it to a new CSV.")),(0,l.kt)(i.Z,{value:"join_cols",label:"Join Per Row",mdxType:"TabItem"},(0,l.kt)("p",null,"We've used ",(0,l.kt)("inlineCode",{parentName:"p"},'"".join()')," before, to just directly stick strings together.\nNow, for each row, we want to stick the elements of the row together,\nbut with commas between them.\n",(0,l.kt)("inlineCode",{parentName:"p"},'",".join()')," does that. And since that is a per-row transformation,\na comprehension it is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]     # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1]    # Swap Symbol and Name entry of row\n  row.insert(0, str(i+1)) # Add number (as string) to start of row\n\nnew_elem_rows = [",".join(row) for row in elem_table]\n\npprint.pprint(new_elem_rows)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"['1,H,Hydrogen,1.00784',\n '2,He,Helium,4.0026',\n '3,Li,Lithium,6.941',\n '4,Be,Beryllium,9.0121',\n '5,B,Boron,10.811']\n"))),(0,l.kt)(i.Z,{value:"join_rows",label:"Join Rows and Write",mdxType:"TabItem"},(0,l.kt)("p",null,"Almost there, we just need to join these row-strings together with newlines\nand write that out to a new CSV."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'with open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]     # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1]    # Swap Symbol and Name entry of row\n  row.insert(0, str(i+1)) # Add number (as string) to start of row\n\nnew_elem_rows = [",".join(row) for row in elem_table]\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  new_elem_file.write("\\n".join(new_elem_rows))\n')),(0,l.kt)("p",null,"And that will do it. After running that code,\nthe contents of the file ",(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv")," will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n"))),(0,l.kt)(i.Z,{value:"newline",label:"Last Newline",mdxType:"TabItem"},(0,l.kt)("p",null,"Another approach would be to have newlines on the end of each row,\nand that would give the last line in the CSV a trailing newline,\nwhich I believe is more appropriate."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'with open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]     # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1]    # Swap Symbol and Name entry of row\n  row.insert(0, str(i+1)) # Add number (as string) to start of row\n\n# Newlines added to each row when we join them back together\nnew_elem_rows = [",".join(row)+"\\n" for row in elem_table]\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  # Final write is then a pure join\n  new_elem_file.write("".join(new_elem_rows))\n')),(0,l.kt)("p",null,"After running that code, the contents of the file ",(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv")," will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n\n")),(0,l.kt)("p",null,"The same as before, but with a trailing newline."),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Very Extra: How I'd actually do it")),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"Risk of inflicting psychic damage.")),(0,l.kt)("p",null,"Ok, the truth? The truth is I'd probably do this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'with open("elements.csv", "r") as rfd:\n  with open("updated_elements.csv", "w") as wfd:\n    wfd.write("".join([",".join([str(i+1)]+(r:=l.split(","))[1::-1]+[r[-1]])+"\\n" for i,l in enumerate(rfd.read().splitlines())]))\n')),(0,l.kt)("p",null,"The walrus operator (",(0,l.kt)("inlineCode",{parentName:"p"},":="),") allow you to assign to variables mid-evaluation."),(0,l.kt)("p",null,"Do not grow up to write code like me.")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"csv-module-reader-and-writer"},"CSV Module: Reader and Writer"),(0,l.kt)("p",null,"CSVs introduce the need to do that initial split on commas or\nthe later join on commas (depending on if we need to read from or write to a CSV).\nThis stuff is kind of annoying.\nAs an alternative,\nthere is some machinery that handles it for us in the built-in ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," module."),(0,l.kt)(a.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"read",label:"Read",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"For reading, the ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," module provides us with Readers.\nThese are created with ",(0,l.kt)("inlineCode",{parentName:"p"},"csv.reader(FILE_OBJECT)"),",\nwhere ",(0,l.kt)("inlineCode",{parentName:"p"},"FILE_OBJECT")," is an opened file.\n",(0,l.kt)("strong",{parentName:"p"},"Not a file name, but the opened file object."),"\nThis function returns an iterable of the desired broken-up rows (each row as a list),\nwhich can in turn be cast to a list of these row-lists."),(0,l.kt)("p",null,"Behold how we get the entire 2D-list construction with just this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\nimport pprint\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.reader(elem_file)\n  elem_table = list(reader)\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[['Hydrogen', 'H', '1.00784'],\n ['Helium', 'He', '4.0026'],\n ['Lithium', 'Li', '6.941'],\n ['Beryllium', 'Be', '9.0121'],\n ['Boron', 'B', '10.811']]\n"))),(0,l.kt)(i.Z,{value:"modify",label:"Modify",mdxType:"TabItem"},(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," module helps with the loading/reading and saving/writing for the CSV.\nAll that internal work, however, is going to be the same.\nSo the modification of the list of lists is the same."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\nimport pprint\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.reader(elem_file)\n  elem_table = list(reader)\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]  # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1] # Swap Symbol and Name entry of row\n  row.insert(0, i+1)   # Add number to start of row\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[[1, 'H', 'Hydrogen', '1.00784'],\n [2, 'He', 'Helium', '4.0026'],\n [3, 'Li', 'Lithium', '6.941'],\n [4, 'Be', 'Beryllium', '9.0121'],\n [5, 'B', 'Boron', '10.811']]\n"))),(0,l.kt)(i.Z,{value:"write",label:"Write",mdxType:"TabItem"},(0,l.kt)("p",null,"For writing, the ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," module provides us with Writers.\nThese are created with ",(0,l.kt)("inlineCode",{parentName:"p"},"csv.writer(FILE_OBJECT)"),",\nwhere ",(0,l.kt)("inlineCode",{parentName:"p"},"FILE_OBJECT")," is an opened file.\n",(0,l.kt)("strong",{parentName:"p"},"Not a file name, but the opened file object.")),(0,l.kt)("p",null,"The Writer has a few methods for writing.\nFor our purposes, I think the useful method here is the\n",(0,l.kt)("inlineCode",{parentName:"p"},".writerows()")," method (there is also a ",(0,l.kt)("inlineCode",{parentName:"p"},".writerow()")," method).\n",(0,l.kt)("inlineCode",{parentName:"p"},".writerows()")," takes an iterable of iterables like our 2D-list\n(",(0,l.kt)("inlineCode",{parentName:"p"},".writerow()")," just takes a row-iterable), and writes it to the file:"),(0,l.kt)("p",null,"Behold how the entire 2D-list structure is written to the file with just this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.reader(elem_file)\n  elem_table = list(reader)\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]  # updates to row will affect elem_table (mutability)\n  row[:2] = row[1::-1] # Swap Symbol and Name entry of row\n  row.insert(0, i+1)   # Add number to start of row\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  writer = csv.writer(new_elem_file)\n  writer.writerows(elem_table)\n')),(0,l.kt)("p",null,"After running that code, the contents of the file ",(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv")," will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n\n")),(0,l.kt)("p",null,"Notice how we don't need to convert that atomic number to a string.\nThe CSV Writer does that for us."),(0,l.kt)("p",null,"Also notice that it actually properly stuck a trailing newline on the last line."))),(0,l.kt)("hr",null),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Material from here on was not part of the lecture,\nbut is stuff I think is related and worth mentioning.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"handling-csvs-as-lists-of-dictionaries"},"Handling CSVs as Lists of Dictionaries"),(0,l.kt)("p",null,"Each row/entry/record in the CSV has columns that represent fields.\nThe location/order of the fields is often more incidental or aesthetic\n(it doesn't change the informational content)."),(0,l.kt)("p",null,"In order words, a dictionary (where the field names are the keys)\nis actually often a more appropriate way to represent a given record.\nAnd a list thereof a better way to represent the informational content of the CSV."),(0,l.kt)("h3",{id:"normal-io-1"},"Normal I/O"),(0,l.kt)("p",null,"As before, everything can be done with basic I/O, string manipulation,\nand some comprehensions."),(0,l.kt)(a.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"read",label:"Read",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"The actual reading in of the CSV isn't different at first,\nin that we still do need to break the input into rows and values\n(in order to store values in the dictionaries)."),(0,l.kt)("p",null,"For each row (which has been broken up into values),\nwe need to repackage those values into a dictionary.\nAn operation over every row is ... a comprehension!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n  elem_dicts = [{"Element":row[0], "Symbol":row[1], "Atomic Mass":row[2]} for row in elem_table]\n\npprint.pprint(elem_dicts)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[{'Atomic Mass': '1.00784', 'Element': 'Hydrogen', 'Symbol': 'H'},\n {'Atomic Mass': '4.0026', 'Element': 'Helium', 'Symbol': 'He'},\n {'Atomic Mass': '6.941', 'Element': 'Lithium', 'Symbol': 'Li'},\n {'Atomic Mass': '9.0121', 'Element': 'Beryllium', 'Symbol': 'Be'},\n {'Atomic Mass': '10.811', 'Element': 'Boron', 'Symbol': 'B'}]\n"))),(0,l.kt)(i.Z,{value:"modify",label:"Modify",mdxType:"TabItem"},(0,l.kt)("p",null,"Modifying the row-dictionaries doesn't require any sort of swapping,\nas dictionaries are intrinsically unordered.\nWe only need to set every row's ",(0,l.kt)("inlineCode",{parentName:"p"},'"Atomic Number"')," key."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n  elem_dicts = [{"Element":row[0], "Symbol":row[1], "Atomic Mass":row[2]} for row in elem_table]\n\nfor i in range(len(elem_dicts)):\n  row = elem_dicts[i]        # updates to row will affect elem_table (mutability)\n  row["Atomic Number"] = i+1 # Add number to row at the appropriate field\n\npprint.pprint(elem_dicts)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[{'Atomic Mass': '1.00784',\n  'Atomic Number': 1,\n  'Element': 'Hydrogen',\n  'Symbol': 'H'},\n {'Atomic Mass': '4.0026',\n  'Atomic Number': 2,\n  'Element': 'Helium',\n  'Symbol': 'He'},\n {'Atomic Mass': '6.941',\n  'Atomic Number': 3,\n  'Element': 'Lithium',\n  'Symbol': 'Li'},\n {'Atomic Mass': '9.0121',\n  'Atomic Number': 4,\n  'Element': 'Beryllium',\n  'Symbol': 'Be'},\n {'Atomic Mass': '10.811',\n  'Atomic Number': 5,\n  'Element': 'Boron',\n  'Symbol': 'B'}]\n"))),(0,l.kt)(i.Z,{value:"join",label:"Join",mdxType:"TabItem"},(0,l.kt)("p",null,'The "swapping" from the non-dictionary example manifests as\na specific order of fields when we convert the rows back to strings in this\ndictionary-centric approach. (I\'m doing the newlines here as well.)'),(0,l.kt)("p",null,"Again, joining/turning the dictionaries into row-strings is per-row operation,\nso a comprehension is a natural fit.\nIn order to get the desired order, I'm using an f-String\n(which also allows me to not need to explicitly convert the atomic number to a string)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import pprint\n\nwith open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n  elem_dicts = [{"Element":row[0], "Symbol":row[1], "Atomic Mass":row[2]} for row in elem_table]\n\nfor i in range(len(elem_dicts)):\n  row = elem_dicts[i]        # updates to row will affect elem_table (mutability)\n  row["Atomic Number"] = i+1 # Add number to row at the appropriate field\n\nnew_elem_rows = [f"{row[\'Atomic Number\']},{row[\'Symbol\']},{row[\'Element\']},{row[\'Atomic Mass\']}\\n" for row in elem_dicts]\n\npprint.pprint(new_elem_rows)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"['1,H,Hydrogen,1.00784\\n',\n '2,He,Helium,4.0026\\n',\n '3,Li,Lithium,6.941\\n',\n '4,Be,Beryllium,9.0121\\n',\n '5,B,Boron,10.811\\n']\n"))),(0,l.kt)(i.Z,{value:"write",label:"Write",mdxType:"TabItem"},(0,l.kt)("p",null,"At this point, writing that back is just as before in the non-dictionary example."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'with open("elements.csv", "r") as elem_file:\n  elem_rows = elem_file.read().splitlines()\n  elem_table = [row.split(",") for row in elem_rows]\n  elem_dicts = [{"Element":row[0], "Symbol":row[1], "Atomic Mass":row[2]} for row in elem_table]\n\nfor i in range(len(elem_dicts)):\n  row = elem_dicts[i]        # updates to row will affect elem_table (mutability)\n  row["Atomic Number"] = i+1 # Add number to row at the appropriate field\n\nnew_elem_rows = [f"{row[\'Atomic Number\']},{row[\'Symbol\']},{row[\'Element\']},{row[\'Atomic Mass\']}\\n" for row in elem_dicts]\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  new_elem_file.write("".join(new_elem_rows))\n')),(0,l.kt)("p",null,"After running that code, the contents of the file ",(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv")," will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n\n")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"csv-module-dictreader-and-dictwriter"},"CSV Module: DictReader and DictWriter"),(0,l.kt)("p",null,"This dictionary packing and unpacking is annoying.\nAs an alternative,\nthere is some machinery that handles it for us in the built-in ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," module."),(0,l.kt)(a.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"read",label:"Read",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"Instead of a Reader, we now have a DictReader.\nThis is created with ",(0,l.kt)("inlineCode",{parentName:"p"},"csv.DictReader(FILE_OBJECT, FIELDNAME_LIST)"),",\nwhere ",(0,l.kt)("inlineCode",{parentName:"p"},"FILE_OBJECT")," is as in ",(0,l.kt)("inlineCode",{parentName:"p"},"scv.reader()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"FIELDNAME_LIST"),"\nis a list of the field names, in the order they are read.\n(We'll later see that we don't need ",(0,l.kt)("inlineCode",{parentName:"p"},"FIELDNAME_LIST")," if the CSV has a header row.)\nThis function returns an iterable of the desired row-dictionaries,\nwhich can in turn be cast to a list."),(0,l.kt)("p",null,"Behold how we get the entire dictionary construction with just this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\nimport pprint\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.DictReader(elem_file, ["Element","Symbol","Atomic Mass"])\n  elem_table = list(reader)\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[{'Atomic Mass': '1.00784', 'Element': 'Hydrogen', 'Symbol': 'H'},\n {'Atomic Mass': '4.0026', 'Element': 'Helium', 'Symbol': 'He'},\n {'Atomic Mass': '6.941', 'Element': 'Lithium', 'Symbol': 'Li'},\n {'Atomic Mass': '9.0121', 'Element': 'Beryllium', 'Symbol': 'Be'},\n {'Atomic Mass': '10.811', 'Element': 'Boron', 'Symbol': 'B'}]\n"))),(0,l.kt)(i.Z,{value:"modify",label:"Modify",mdxType:"TabItem"},(0,l.kt)("p",null,"Modification is exactly the same. As before,\nthe fancy machinery buys us convenience on the loading/reading and saving/writing,\nnot the manipulation in between."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\nimport pprint\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.DictReader(elem_file, ["Element","Symbol","Atomic Mass"])\n  elem_table = list(reader)\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]        # updates to row will affect elem_table (mutability)\n  row["Atomic Number"] = i+1 # Add number to row at the appropriate field\n\npprint.pprint(elem_table)\n')),(0,l.kt)("p",null,"The above code will produce the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[{'Atomic Mass': '1.00784',\n  'Atomic Number': 1,\n  'Element': 'Hydrogen',\n  'Symbol': 'H'},\n {'Atomic Mass': '4.0026',\n  'Atomic Number': 2,\n  'Element': 'Helium',\n  'Symbol': 'He'},\n {'Atomic Mass': '6.941',\n  'Atomic Number': 3,\n  'Element': 'Lithium',\n  'Symbol': 'Li'},\n {'Atomic Mass': '9.0121',\n  'Atomic Number': 4,\n  'Element': 'Beryllium',\n  'Symbol': 'Be'},\n {'Atomic Mass': '10.811',\n  'Atomic Number': 5,\n  'Element': 'Boron',\n  'Symbol': 'B'}]\n"))),(0,l.kt)(i.Z,{value:"write",label:"Write",mdxType:"TabItem"},(0,l.kt)("p",null,"Instead of a Writer, we now have a DictWriter.\nThis is created with ",(0,l.kt)("inlineCode",{parentName:"p"},"csv.DictWriter(FILE_OBJECT, FIELDNAME_LIST)"),",\nwhere ",(0,l.kt)("inlineCode",{parentName:"p"},"FILE_OBJECT")," is as in ",(0,l.kt)("inlineCode",{parentName:"p"},"scv.writer()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"FIELDNAME_LIST"),"\nis a list of the field names, in the order we want them written."),(0,l.kt)("p",null,"Behold how the entire dictionary structure is written in an order of our choice\nwith just this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.DictReader(elem_file, ["Element","Symbol","Atomic Mass"])\n  elem_table = list(reader)\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]        # updates to row will affect elem_table (mutability)\n  row["Atomic Number"] = i+1 # Add number to row at the appropriate field\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  writer = csv.DictWriter(new_elem_file, ["Atomic Number","Symbol","Element","Atomic Mass"])\n  writer.writerows(elem_table)\n')),(0,l.kt)("p",null,"After running that code, the contents of the file ",(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv")," will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n\n")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"csv-module-with-header-row"},"CSV Module with Header Row"),(0,l.kt)("p",null,"There is one more thing to show off about DictReader and DictWriter."),(0,l.kt)("p",null,"Consider a CSV with a header row. So imagine ",(0,l.kt)("inlineCode",{parentName:"p"},"elements.csv")," was:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Element,Symbol,Atomic Mass\nHydrogen,H,1.00784\nHelium,He,4.0026\nLithium,Li,6.941\nBeryllium,Be,9.0121\nBoron,B,10.811\n")),(0,l.kt)("p",null,"If we don't specify the field names for DictReader, it will use the first row in the CSV."),(0,l.kt)("p",null,"For the DictWriter, it always needs the field names given.\nBut we get a ",(0,l.kt)("inlineCode",{parentName:"p"},".writeheader()")," method that writes\nthat list of field names as the header of the csv."),(0,l.kt)("p",null,"So if the CSV we were reading had a header row,\nand we wanted to write a header row in the transformed CSV,\nwe could do this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import csv\n\nwith open("elements.csv", "r") as elem_file:\n  reader = csv.DictReader(elem_file)\n  elem_table = list(reader)\n\nfor i in range(len(elem_table)):\n  row = elem_table[i]        # updates to row will affect elem_table (mutability)\n  row["Atomic Number"] = i+1 # Add number to row at the appropriate field\n\nwith open("updated_elements.csv", "w") as new_elem_file:\n  writer = csv.DictWriter(new_elem_file, ["Atomic Number","Symbol","Element","Atomic Mass"])\n  writer.writeheader()\n  writer.writerows(elem_table)\n')),(0,l.kt)("p",null,"After running that code, the contents of the file ",(0,l.kt)("inlineCode",{parentName:"p"},"updated_elements.csv")," would be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Atomic Number,Symbol,Element,Atomic Mass\n1,H,Hydrogen,1.00784\n2,He,Helium,4.0026\n3,Li,Lithium,6.941\n4,Be,Beryllium,9.0121\n5,B,Boron,10.811\n\n")))}c.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(67294),l=n(86010);const a="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,l.default)(a,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>_});var r=n(87462),l=n(67294),a=n(86010),i=n(12466),o=n(16550),s=n(91980),m=n(67392),p=n(50012);function u(e){return function(e){return l.Children.map(e,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:l}}=e;return{value:t,label:n,attributes:r,default:l}}))}function d(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,m.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(a),(0,l.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function w(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=d(e),[i,o]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[s,m]=h({queryString:n,groupId:r}),[u,w]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,p.Nk)(n);return[r,(0,l.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),f=(()=>{const e=s??u;return c({value:e,tabValues:a})?e:null})();(0,l.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,l.useCallback)((e=>{if(!c({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),m(e),w(e)}),[m,w,a]),tabValues:a}}var f=n(72389);const b="tabList__CuJ",k="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:m}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),r=m[n].value;r!==o&&(u(t),s(r))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.default)("tabs",{"tabs--block":n},t)},m.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:c,onClick:d},i,{className:(0,a.default)("tabs__item",k,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:r}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===r));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=w(e);return l.createElement("div",{className:(0,a.default)("tabs-container",b)},l.createElement(y,(0,r.Z)({},e,t)),l.createElement(g,(0,r.Z)({},e,t)))}function _(e){const t=(0,f.Z)();return l.createElement(v,(0,r.Z)({key:String(t)},e))}}}]);