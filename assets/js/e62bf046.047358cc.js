"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1848],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=l,y=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return t?r.createElement(y,i(i({ref:n},u),{},{components:t})):r.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19257:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=t(87462),l=(t(67294),t(3905));const a={title:"Section 04 (Jared Yeager)"},i="Exception Handling",o={unversionedId:"errors_modules_docs/Jared/index",id:"errors_modules_docs/Jared/index",title:"Section 04 (Jared Yeager)",description:'The part of this lecture that is on modules I will to "making modules" lecture notes.',source:"@site/main/lectures/13_errors_modules_docs/Jared/index.md",sourceDirName:"13_errors_modules_docs/Jared",slug:"/errors_modules_docs/Jared/",permalink:"/main/lectures/errors_modules_docs/Jared/",draft:!1,tags:[],version:"current",frontMatter:{title:"Section 04 (Jared Yeager)"},sidebar:"tutorialSidebar",previous:{title:"Lec 13 Errors and Modules",permalink:"/main/lectures/errors_modules_docs/"},next:{title:"Lec 14 Making Modules",permalink:"/main/lectures/make_modules_mutation/"}},s={},p=[{value:"Error Types",id:"error-types",level:2},{value:"Syntactic Errors",id:"syntactic-errors",level:3},{value:"Runtime Errors",id:"runtime-errors",level:3},{value:"Logical Errors",id:"logical-errors",level:3},{value:"Exception Handling",id:"exception-handling-1",level:2},{value:"<code>try</code> and <code>except</code>",id:"try-and-except",level:3},{value:"<code>else</code>",id:"else",level:3},{value:"<code>finally</code>",id:"finally",level:3},{value:"<code>raise</code>",id:"raise",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"exception-handling"},"Exception Handling"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},'The part of this lecture that is on modules I will to "making modules" lecture notes.')),(0,l.kt)("p",null,"Sometimes things go wrong in the code,\nsometimes even due to things somewhat beyond our control."),(0,l.kt)("p",null,"For example, say we ask for a number from a user and try to convert it to a float.\nIf they enter something illegal, and we directly try to convert that to a float,\nthere will be an error."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'user_str = input("Please enter a number:")\nuser_num = float(user_str) # Error on illegal inputs.\n')),(0,l.kt)("p",null,"At the moment,\nwe can try to guard against illegal arguments by using conditions to see if they are kosher."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'user_str = input("Please enter a number:")\nwhile is_illegal(user_str): # What EXACTLY is the is_illegal check?\n  print("Illegal input was entered.")\n  user_str = input("Please enter a number:")\nuser_num = float(user_str)\n')),(0,l.kt)("p",null,"But sometimes it is really hard or impossible to tell if an argument will be illegal\nbefore actually using it.\nIn the above example, what exactly ",(0,l.kt)("inlineCode",{parentName:"p"},"is_illegal")," should be is hard to specify.\nI would be hard-pressed to give the exact boolean specification\nfor what strings can and can not be converted into floats safely."),(0,l.kt)("p",null,"In these cases, we would like the ability to try something, and if it goes wrong,\nabort/try again/recover/something.\nThat will be ability gained from the machinery of today's lecture."),(0,l.kt)("h2",{id:"error-types"},"Error Types"),(0,l.kt)("p",null,"First, lets explore a brief taxonomy of the the types of errors we can encounter."),(0,l.kt)("h3",{id:"syntactic-errors"},"Syntactic Errors"),(0,l.kt)("p",null,"In non-compiled languages like python the line between these and the next blur a little, but:\nThese are errors stemming from illegal syntax."),(0,l.kt)("p",null,"For example, if you put semicolons instead of commas between elements of a list:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=List_Syntax_Error",live_py:!0,title:"List_Syntax_Error"},"nums = [1; 2; 3; 4; 5] # ERROR\nprint(nums)\n")),(0,l.kt)("p",null,"Or if you mistyped a keyword:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Typo_Syntax_Error",live_py:!0,title:"Typo_Syntax_Error"},'import random\nnum = random.randint(0,1)\nif num % 2 == 0:\n  print(f"{num} is even")\nesle: # ERROR\n  print(f"{num} is odd")\n')),(0,l.kt)("p",null,"VSCode should yell at you about this stuff (via red squiggly underlines) before you even run the code.\nSo by the point where you are running your code, you should have cleaned these up."),(0,l.kt)("h3",{id:"runtime-errors"},"Runtime Errors"),(0,l.kt)("p",null,"These are fatal errors that occur when the code is run and something illegal happens."),(0,l.kt)("p",null,"The motivating example from earlier was about converting an illegal input:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Input_Runtime_Error",live_py:!0,title:"Input_Runtime_Error"},'user_str = "abc" # pretend a user typed "abc" when prompted\nuser_num = float(user_str) # ERROR\n')),(0,l.kt)("p",null,"Division by 0 is a classic math example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Division_Runtime_Error",live_py:!0,title:"Division_Runtime_Error"},"nums = []\navg = sum(nums)/len(nums) # ERROR\n")),(0,l.kt)("p",null,"These are the types of errors we are really interested in and able to address with\nthe promised new machinery."),(0,l.kt)("h3",{id:"logical-errors"},"Logical Errors"),(0,l.kt)("p",null,'These are what I would probably more colloquially call "bugs".\nThese are when the code does what you are telling it to do (as code does),\nbut not what you meant.'),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Parity_Logic_Error",live_py:!0,title:"Parity_Logic_Error"},'import random\nnum = random.randint(0,1)\nif num % 2 == 1: # This 1 should be a 0\n  print(f"{num} is even")\nelse:\n  print(f"{num} is odd")\n')),(0,l.kt)("p",null,"The code is totally legal, but just does the wrong thing."),(0,l.kt)("p",null,"These are most stealthy of all issues, and are what we design tests for."),(0,l.kt)("h2",{id:"exception-handling-1"},"Exception Handling"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Exception handling")," is the ability to ",(0,l.kt)("em",{parentName:"p"},"try")," to execute some code,\n",(0,l.kt)("em",{parentName:"p"},"catch")," any ",(0,l.kt)("em",{parentName:"p"},"exceptions")," that arise (errors are all exceptions),\nand ",(0,l.kt)("em",{parentName:"p"},"handle")," them in some way."),(0,l.kt)("h3",{id:"try-and-except"},(0,l.kt)("inlineCode",{parentName:"h3"},"try")," and ",(0,l.kt)("inlineCode",{parentName:"h3"},"except")),(0,l.kt)("p",null,"The basic syntax for this is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"try:\n  try_block_code\nexcept:\n  except_block_code\n")),(0,l.kt)("p",null,"By now this keyword-colon style is probably familiar. Here are the components:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The keyword ",(0,l.kt)("inlineCode",{parentName:"li"},"try")," (with ",(0,l.kt)("inlineCode",{parentName:"li"},":"),")."),(0,l.kt)("li",{parentName:"ul"},'The "try block", ',(0,l.kt)("inlineCode",{parentName:"li"},"try_block_code"),".\nThis code is executed like normal until an exception occurs.\nIf an exception occurs, no further code in this block will be executed."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"except")," keyword (with ",(0,l.kt)("inlineCode",{parentName:"li"},":"),")."),(0,l.kt)("li",{parentName:"ul"},'The "except block", ',(0,l.kt)("inlineCode",{parentName:"li"},"except_block_code"),".\nThis code runs if, and only if, an exception occurs in the try-block.")),(0,l.kt)("p",null,"So we can put that input-to-float conversion inside a try block in case something\nbad happens during the conversion.\nAnd then we can have an error message print in the except block.\nAnd so that ",(0,l.kt)("inlineCode",{parentName:"p"},"user_num")," is not undefined,\nwe can have ",(0,l.kt)("inlineCode",{parentName:"p"},"user_num")," set to 0 in the except block."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Convert_Try_Except",live_py:!0,title:"Convert_Try_Except"},'try:\n  user_str = input("Please enter a number:")\n  user_num = float(user_str)\n  print("Thank you for the legal input")\nexcept:\n  print("Illegal input recieved")\n  user_num = 0\nprint(f"user_num set to {user_num}")\n')),(0,l.kt)("p",null,"Try running the above code with both legal and illegal inputs.\nWe could also use this in order to create a loop that repeatedly\ntries to convert input and resets if the input causes an error."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Get_Input_Try_Except",live_py:!0,title:"Get_Input_Try_Except"},'while True:\n  try:\n    user_str = input("Please enter a number:")\n    user_num = float(user_str)\n  except:\n    print("Illegal input recieved")\n    continue\n  break\nprint(f"user_num set to {user_num}")\n')),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Extra: `except Exception` ")),(0,l.kt)("p",null,"We can specify a specific type of exception for ",(0,l.kt)("inlineCode",{parentName:"p"},"except")," to handle."),(0,l.kt)("p",null,"The syntax is simply to use ",(0,l.kt)("inlineCode",{parentName:"p"},"except exception_type:")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"except:"),",\nwhere ",(0,l.kt)("inlineCode",{parentName:"p"},"exception_type")," is some exception type.\nThere are ",(0,l.kt)("a",{parentName:"p",href:"https://www.w3schools.com/python/python_ref_exceptions.asp"},"lists of exception types online"),".\nWe can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception")," as a generic catch-most type\n(It catches all errors, the stuff it doesn't catch, you probably don't want to catch)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Convert_Try_Except_Specific",live_py:!0,title:"Convert_Try_Except_Specific"},'try:\n  user_str = input("Please enter a non-zero number: ")\n  user_num = float(user_str)\n  inv_num = 1 / user_num\n  print("Thank you for the legal input")\nexcept ValueError:\n  print("Illegally formatted input recieved")\n  inv_num = 0\nprint(f"inv_num set to {inv_num}")\n')),(0,l.kt)("p",null,"In this above code, only ",(0,l.kt)("inlineCode",{parentName:"p"},"ValueError"),"s are handled.\nSo an illegal input to ",(0,l.kt)("inlineCode",{parentName:"p"},"float()"),", like ",(0,l.kt)("inlineCode",{parentName:"p"},'"foo"'),", would be handled;\nbut a legal input that causes a different error,\nlike ",(0,l.kt)("inlineCode",{parentName:"p"},'"0"'),", causing a ",(0,l.kt)("inlineCode",{parentName:"p"},"ZeroDivisionError"),", would not."),(0,l.kt)("p",null,"We can specify multiple specific errors via a tuple (or at least a tuple-looking thing)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Convert_Try_Except_Multiple_Specific",live_py:!0,title:"Convert_Try_Except_Multiple_Specific"},'try:\n  user_str = input("Please enter a non-zero number: ")\n  user_num = float(user_str)\n  inv_num = 1 / user_num\n  print("Thank you for the legal input")\nexcept (ValueError, ZeroDivisionError):\n  print("Illegally input recieved")\n  inv_num = 0\nprint(f"inv_num set to {inv_num}")\n')),(0,l.kt)("p",null,"Why does this ability to specify what exception(s) to handle help us?\nBecause we can have multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"except")," clauses.\nThis allows us to handle different types of errors differently."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Convert_Try_Except_Cases",live_py:!0,title:"Convert_Try_Except_Cases"},'try:\n  user_str = input("Please enter a non-zero number: ")\n  user_num = float(user_str)\n  inv_num = 1 / user_num\n  print("Thank you for the legal input")\nexcept ValueError:\n  print("Illegally formatted input recieved")\n  inv_num = 0\nexcept ZeroDivisionError:\n  print("Zero recieved as input")\n  inv_num = 0\nexcept: # will catch any remaining Exceptions\n  # E.g., EOFError could be trigger via control-D (on unix-based systems) when asked for input\n  print("Unknown error encountered")\n  inv_num = 0\nprint(f"inv_num set to {inv_num}")\n'))),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Extra: `except Exception as var_name` ")),(0,l.kt)("p",null,"We can store the exception as a variable in order to\nmore readily extract some information from it\n(Exceptions are objects too, so can be stored in variables)."),(0,l.kt)("p",null,"The syntax is simply to use ",(0,l.kt)("inlineCode",{parentName:"p"},"except exception_type as var_name:"),",\nwhere ",(0,l.kt)("inlineCode",{parentName:"p"},"exception_type")," is again some exception type and ",(0,l.kt)("inlineCode",{parentName:"p"},"var_name")," is a choice of variable name.\nAgain, a ",(0,l.kt)("a",{parentName:"p",href:"https://www.w3schools.com/python/python_ref_exceptions.asp"},"list of exception types"),"."),(0,l.kt)("p",null,"An example of using this to get some information out of the exception:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Convert_Try_Except_As",live_py:!0,title:"Convert_Try_Except_As"},'try:\n  user_str = input("Please enter a non-zero number: ")\n  user_num = float(user_str)\n  inv_num = 1 / user_num\n  print("Thank you for the legal input")\nexcept Exception as err: # will catch any remaining Exceptions\n  print("Exception occured!")\n  print(f"Exception type: {type(err)}")\n  print(f"Exception args: {err.args}")\n  print(f"Exception print:\\n{err}")\n  inv_num = 0\nprint(f"inv_num set to {inv_num}")\n'))),(0,l.kt)("h3",{id:"else"},(0,l.kt)("inlineCode",{parentName:"h3"},"else")),(0,l.kt)("p",null,"There are a couple of additional types of blocks that can be added to this structure.\nThe first is an else block, that is run if no exception occurs."),(0,l.kt)("p",null,"The basic syntax for this is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"try:\n  try_block_code\nexcept:\n  except_block_code\nelse:\n  else_block_code\n")),(0,l.kt)("p",null,"The new components:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The keyword ",(0,l.kt)("inlineCode",{parentName:"li"},"else")," (with ",(0,l.kt)("inlineCode",{parentName:"li"},":"),")."),(0,l.kt)("li",{parentName:"ul"},"The else-block, ",(0,l.kt)("inlineCode",{parentName:"li"},"else_block_code"),".\nThis code runs if, and only if, an try-block is completed without an exception occurring.")),(0,l.kt)("p",null,"The input example from before could be refactored to look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Get_Input_Else",live_py:!0,title:"Get_Input_Else"},'while True:\n  try:\n    user_str = input("Please enter a number:")\n    user_num = float(user_str)\n  except:\n    print("Illegal input recieved")\n  else:\n    break\nprint(f"user_num set to {user_num}")\n')),(0,l.kt)("p",null,"That said, I'm pretty sure that try-except-else could just be accomplished with a\ntry-except like so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"try:\n  try_block_code\n  else_block_code # only run on non-error in try block either way\nexcept:\n  except_block_code\n")),(0,l.kt)("h3",{id:"finally"},(0,l.kt)("inlineCode",{parentName:"h3"},"finally")),(0,l.kt)("p",null,"Finally, there is a finally block. This block always runs and is the last to run."),(0,l.kt)("p",null,"The basic syntax for this is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"try:\n  try_block_code\nexcept:\n  except_block_code\n# else and else block here if desired\nfinally:\n  finally_block_code\n")),(0,l.kt)("p",null,"The new components:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The keyword ",(0,l.kt)("inlineCode",{parentName:"li"},"finally")," (with ",(0,l.kt)("inlineCode",{parentName:"li"},":"),")."),(0,l.kt)("li",{parentName:"ul"},"The finally-block, ",(0,l.kt)("inlineCode",{parentName:"li"},"finally_block_code"),".\nThis code always runs, and it runs after the try-block, except-block (if relevant),\nand else-block (if relevant) have been run.")),(0,l.kt)("p",null,"The earlier example about converting the input or defaulting to 0\ncould be refactored to look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Convert_Finally",live_py:!0,title:"Convert_Finally"},'try:\n  user_str = input("Please enter a number:")\n  user_num = float(user_str)\n  print("Thank you for the legal input")\nexcept:\n  print("Illegal input recieved")\n  user_num = 0\nfinally:\n  print(f"user_num set to {user_num}")\n')),(0,l.kt)("p",null,"That said, I'm pretty sure that most ",(0,l.kt)("strong",{parentName:"p"},"normal")," uses of try-except-finally\ncould just be accomplished with a try-except like so (may I'm missing something):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"try:\n  try_block_code\n  # else_block_code if it exists\nexcept:\n  except_block_code\nfinally_block_code # will be run after all try-except code\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Extra: `finally` control flow ")),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"This could do damage to your psyche and possibly sow more confusion than understanding.")),(0,l.kt)("p",null,"When I said the finally block always runs, I mean it ",(0,l.kt)("strong",{parentName:"p"},"always"),' runs.\nThis has terrifying implications.\nAnd when I said "',(0,l.kt)("strong",{parentName:"p"},"normal"),'" uses could be done with a try-except,\nI meant cases not deliberately abusing that fact.'),(0,l.kt)("p",null,"Below are two examples if ",(0,l.kt)("inlineCode",{parentName:"p"},"finally")," winning over the control flow of ",(0,l.kt)("inlineCode",{parentName:"p"},"break"),"\nand ",(0,l.kt)("inlineCode",{parentName:"p"},"continue"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Finally_Break",live_py:!0,title:"Finally_Break"},'while True:\n  try:\n    cursed_number = 0 / 0\n  except:\n    print("Illegal Math")\n    break\n  finally:\n    print("Oh, hey there.")\n    print("I see that you\'re breaking out of this infinite loop.")\n    print("I hope you don\'t mind me sneaking in here and doing my thing first.")\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Finally_Continue",live_py:!0,title:"Finally_Continue"},'while True:\n  try:\n    user_str = input("Please enter a number:")\n    user_num = float(user_str)\n  except:\n    print(f"Illegal input recieved: {user_str}")\n    continue\n  finally:\n    print("Oh, hey there.")\n    print("I\'m just doing my thing, regardless of your continuing.")\n  break\nprint(f"user_num: {user_num}")\n')),(0,l.kt)("p",null,"But the most terrifying part of all is that if ",(0,l.kt)("inlineCode",{parentName:"p"},"finally"),"\ndoes a different control flow command, it wins.\nAnd yes, ",(0,l.kt)("inlineCode",{parentName:"p"},"except")," blocks are technically optional."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Finally_Override_Break",live_py:!0,title:"Finally_Override_Break"},'count = 0\nwhile count < 10:\n  try:\n    break\n  finally:\n    print("Not this time")\n    count += 1\n    continue\nprint(f"count: {count}")\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Finally_Override_Continue",live_py:!0,title:"Finally_Override_Continue"},'count = 0\nwhile count < 10:\n  try:\n    count += 1\n    continue\n  finally:\n    print("Breathe in. Focus. Let\'s bring an end to this")\n    break\nprint(f"count: {count}")\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"finally")," can supersede and override ",(0,l.kt)("inlineCode",{parentName:"p"},"return")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Finally_Return",live_py:!0,title:"Finally_Return"},'def get_num():\n  try:\n    return 0\n  finally:\n    print("How about I return 1?")\n    return 1\nprint(f"num: {get_num()}")\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Finally_Void_Return",live_py:!0,title:"Finally_Void_Return"},'def no_escape():\n  count = 0\n  while count < 10:\n    try:\n      return -1\n    finally:\n      print("You live under the illusion of control. Abandon the fight. It is written.")\n      count += 1\n      continue\n  return count\n\nprint(f"num: {no_escape()}")\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"finally")," can supersede ",(0,l.kt)("inlineCode",{parentName:"p"},"exit()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'# exit() doesn\'t quite behave in the web-python, so try it locally.\ntry:\n  exit()\nfinally:\n  print("Excuse me, let me just do something real quickly ...")\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Finally_Void_Exit",live_py:!0,title:"Finally_Void_Exit"},'def no_escape():\n  count = 0\n  while count < 10:\n    try:\n      exit()\n    finally:\n      print("You\'re too impulsive. This is my time, my space. Your escape will fail")\n      count += 1\n      continue\n  print(f"count: {count}")\n\nno_escape()\n')),(0,l.kt)("p",null,'Only the "terminate this program right now, no cleanup, no nothing, just DIE!"\nversion of exit wins over ',(0,l.kt)("inlineCode",{parentName:"p"},"finally"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'# os._exit() doesn\'t quite behave in the web-python, so try it locally.\nimport os\ntry:\n  os._exit(0)\nfinally:\n  print("Wait, how did you ... ?")\n'))),(0,l.kt)("hr",null),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Material from here on was not part of the lecture,\nbut is stuff I think is related and worth mentioning.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"raise"},(0,l.kt)("inlineCode",{parentName:"h2"},"raise")),(0,l.kt)("p",null,"You can always trigger an error/exception at will.\nThis is called ",(0,l.kt)("em",{parentName:"p"},"raising")," or ",(0,l.kt)("em",{parentName:"p"},"throwing")," an exception\n(we similarly may talk about try-except as ",(0,l.kt)("em",{parentName:"p"},"catching")," exceptions)."),(0,l.kt)("p",null,"This is done with the ",(0,l.kt)("inlineCode",{parentName:"p"},"raise")," keyword."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Raise",live_py:!0,title:"Raise"},'user_str = input("Please enter word: ")\nif not user_str.isalpha():\n  raise Exception(f"Illegal input from user: \'{user_str}\'")\nprint(f"Recieved: {user_str}")\n')),(0,l.kt)("p",null,'Try the above on purely letters (e.g., "Foo") and something else (e.g., "314").\nNotice that we get to set error message.'),(0,l.kt)("p",null,"Specific types of errors can be raised, for example, the above could have been:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Raise_Value_Error",live_py:!0,title:"Raise_Value_Error"},'user_str = input("Please enter word: ")\nif not user_str.isalpha():\n  raise ValueError(f"Illegal input from user: \'{user_str}\'")\nprint(f"Recieved: {user_str}")\n')),(0,l.kt)("p",null,"Now illegal inputs result in a ",(0,l.kt)("inlineCode",{parentName:"p"},"ValueError"),", not a generic ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception"),".\nIt is good practice to choose an appropriate error type to use.\nA list of common built-in errors can be found\n",(0,l.kt)("a",{parentName:"p",href:"https://www.w3schools.com/python/python_ref_exceptions.asp"},"here"),"."))}c.isMDXComponent=!0}}]);