[{"title":"Snow Day and HW2 extended","type":0,"sectionRef":"#","url":"/blog/2-28-snow-day","content":"As campus is closed today (2/28), classes are canceled today for Section 02 (Eduardo)Section 04 (Jared)Section 05 (Allison) In observance of class being canceled, the deadline for Homework 02 has been pushed back to this Friday, March 3rd. Homework 03 will be due the following Friday, March 10th. Late days will still be available for both assignments until further notice.","keywords":""},{"title":"Token Balance Update","type":0,"sectionRef":"#","url":"/blog/3-06-tokens","content":"All students should have received an email containing their current token balance. Included in the email is a report of what assignments tokens were applied to or earned on, if any. The email was sent to each students' umass.edu email as reported in Moonami. If you did not receive an email, please follow up on Piazza note @290.","keywords":""},{"title":"Office Hours and Tokens","type":0,"sectionRef":"#","url":"/blog/oh-fixes-tokens","content":"Hey y'all, two quick things Most in-person office hours are in &quot;LGRC&quot; T223 or T225. These rooms are not in LGRC, they are actually in LGRT. If you take the elevator to the second floor of the Lederle Tower, take a right, and enter the last room on the left.The form for applying tokens to late assignments is now posted under the &quot;Administration&quot; category in Moodle/Moonami. See the token policy in the syllabus.","keywords":""},{"title":"Homework 1 is Live","type":0,"sectionRef":"#","url":"/blog/hw-1-live","content":"Alrighty! Homework 1 is live. I'm going to sleep.","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Welcome students to our course on introductory programming! Whether you are brand new to programming or have some experience under your belt, we are excited to have you join us on this journey. In this course, you will learn the fundamental concepts and skills needed to become a successful programmer. You'll start by learning how to write simple programs in a programming language, and then gradually build up your knowledge and abilities as you progress through the course. Along the way, you'll also have the opportunity to apply what you've learned by completing interactive exercises and projects. We know that learning to program can be challenging at times, but we are here to support you every step of the way. Our experienced instructors will be available to answer any questions you may have, and your fellow students will also be a valuable resource as you work through the material. We are excited to see what you will accomplish and where your newfound programming skills will take you. Let's get started!","keywords":""},{"title":"Assignments","type":0,"sectionRef":"#","url":"/main/assignments","content":"","keywords":""},{"title":"Deadlines​","type":1,"pageTitle":"Assignments","url":"/main/assignments#deadlines","content":"Each assignment below provides you a suggested time to begin the assignment (B) and the deadline for the assignment (D). All assignments are due by 11:59 PM on the day/date specified. If you decide to spend tokens for late days, you must fill out the late day submission form (coming soon). You may use tokens only for the assignments specified below. "},{"title":"Participation​","type":1,"pageTitle":"Assignments","url":"/main/assignments#participation","content":"The participation assignments can be found in the book used for this course. The book is titled CICS 110 - Foundations of Programming and can be found on the zyBooks website after you purchase it (see Moodle for information on how to purchase the book). The zyBook will automatically record your scores as you complete each of the exercises. 🔥 You do not earn and cannot use tokens for this assignment type. 🔥 Participation 1 (B: Mo 2/6, D: Th 2/16)Participation 2 (B: Th 2/16, D: Th 2/23)Participation 3 (B: Th 2/23, D: Th 3/2)Participation 4 (B: Th 3/2, D: Th 3/9)Participation 5 (B: Th 3/9, D: Th 3/23)Participation 6 (B: Th 3/23, D: Th 3/30)Participation 7 (B: Th 3/30, D: Th 4/6)Participation 8 (B: Th 4/6, D: Th 4/13) "},{"title":"Quizzes​","type":1,"pageTitle":"Assignments","url":"/main/assignments#quizzes","content":"This course assigns weekly quizzes. They can be found on Moodle and are to be completed by the assigned due date. Your score for your latest attempt will be recorded in Moodle. 🔥 You do not earn and cannot use tokens for this assignment type. 🔥 Quiz 1 Orientation (B: Mo 2/6, D: Th 2/9)Quiz 2 Week 1 (B: Th 2/9, D: Th 2/16)Quiz 3 Week 2 (B: Th 2/16, D: Th 2/23)Quiz 4 Week 3 (B: Th 2/23, D: Th 3/2)Quiz 5 Week 4 (B: Th 3/2, D: Th 3/9)Quiz 6 Week 5 (B: Th 3/9, D: Th 3/23)Quiz 7 Loops (B: Th 3/23, D: Th 3/30)Quiz 8 Dicts, Sets, Comprehensions (B: Th 3/30, D: Th 4/6)Quiz 9 Try, Except, Modules (B: Th 4/6, D: 4/13) "},{"title":"Homework​","type":1,"pageTitle":"Assignments","url":"/main/assignments#homework","content":"✨ 🪙 You can earn and use tokens for this assignment type. 🪙 ✨ Homework 01 Variables and Expressions (B: We 2/15, D: 2/22)Homework 02 Functions and Booleans (B: Th 2/23, D: We 3/1 Fr 3/3 )Homework 03 Sequence Types (B: Fr 3/3, D: Fr 3/10)Homework 04 Branching (B: Mo 3/20, D: We 3/29)Homework 05 Looping (B: We 3/29, D: We 4/12) "},{"title":"Labs​","type":1,"pageTitle":"Assignments","url":"/main/assignments#labs","content":"Lab assignments are started during the lab sections. You have until 11:59 PM on the day the lab is suggested to be started. You must submit labs to Gradescope. 🔥 🪙 You can use, but not earn, tokens for this assignment type. 🪙 🔥 Lab 01 Getting Started (B: Fr 2/10, D: Fr 2/10)Lab 02 String Formatting (B: Fr 2/17, D: Fr 2/17)Lab 03 Booleans and Assert (B: Fr 2/24, D: Fr 2/24)Lab 04 List Slicing (B: Fr 3/3, D: Fr 3/3)Lab 05 Conditionals (B: Fr 3/10, D: Fr 3/10)Lab 06 Loops (B: Fr 3/24, D: Fr 3/24)Lab 07 Sets and Dictionaries (B: Fr 3/31, D: Fr 3/31)Lab 08 Modules and Exceptions (B: Fr 4/7, D: Fr 4/7) "},{"title":"Capstone Project​","type":1,"pageTitle":"Assignments","url":"/main/assignments#capstone-project","content":"🔥 You do not earn and cannot use tokens for this assignment type. 🔥 Project Instructions "},{"title":"Capstone Project","type":0,"sectionRef":"#","url":"/main/assignments/capstone","content":"","keywords":""},{"title":"About​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#about","content":"During the semester, you utilized programming fundamentals to solve various real-world problems. Now, it is your chance to select a real-world problem that you find interesting and solve it by applying everything you have learned throughout the semester. To complete this capstone project, you will work in groups of 2-3 students. While you are free to choose any project you desire, your implementation must satisfy the following 16 requirements. "},{"title":"Requirements:​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#requirements","content":"Implemented in Python.Include variables of various data types (e.g., integers, floats, sequence data types, etc.). You must use at least one of the following sequence data types: list, tuple, or set.Include a dictionary and retrieve a value by key from the dictionary.Include expressions that involve operators, variables, and constants (e.g., x &gt;= 10).Use at least 2 of the following: logical and, logical or, or logical not.Include casting between data types (e.g., int(user_response), where user_response is a string).Create and use a module (i.e., rather than having one giant python file, your code should be organized into modules such that there is a main file that imports modules).Code should be able to handle reasonable invalid inputs (e.g., inputting text instead of numbers, files in the wrong format, etc.) You may wish to use a try/except to do this.Include at least 5 functions that you have created and called elsewhere in the code.Include branching logic. You must use at least one if-elif-else statement.Use assert statements to test your branching logic.Include looping. You must use at least one for loop AND at least one while loop. The while loop must include a break statement and/or a continue statement inside the loop.Include a comprehension for at least one of the following: mapping or filtering.Include logic for working with a file You must read from and/or write to a file. The file could be a text file or a csv file.Create and use a class with at least two methods (we will discuss classes in lecture soon). "},{"title":"Assignment​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#assignment","content":"There are 6 steps to this project. Below is a timeline for all parts. All deadlines are hard deadlines, meaning tokens cannot be used and no late submissions will be accepted. "},{"title":"Submission Timeline​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#submission-timeline","content":"Project Proposal &amp; Plan: April 28th (11:59pm) via GradescopeImplementation: May 15th (11:59pm) via MoodlePoster Presentation: submissions are due May 15th (11:59pm) via Moodle; presentations are during the last class (May 16th if you’re in a Tu/Th section or May 17th if you’re in a Mo/We section)Reflection: May 19th (11:59pm) via MoodlePeer Grading: May 19th (11:59pm) via Moodle "},{"title":"Step 1. Select a Real-World Problem​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#step-1-select-a-real-world-problem","content":"By no means do we expect you to solve life’s biggest challenges. You don’t have to find a cure for cancer or dominate the AI chatbot race. The key here is to select a problem that is interesting to you and IS MANAGEABLE TO SOLVE BEFORE THE CAPSTONE DUE DATE. You must also be able to solve your problem using ALL of the required concepts/skills listed above. We highly encourage you to discuss your project idea with your instructor and/or lab TA. You must propose your project idea by April 28th (11:59pm) via Gradescope. Here are some example project ideas: Calendar application for scheduling meetings (similar to YouCanBook.me)Gradebook system for tracking deadlines, student grades, token usage, etc.Item finder on a coordinate system (along the lines of the Battleship game) "},{"title":"Step 2. Make a Plan​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#step-2-make-a-plan","content":"Before you start programming, you should plan out your solution. You don’t have to create a sophisticated plan, and your plan doesn’t have to be flawless (you should expect to face some hurdles during implementation). Rather, you should list the main steps you will need to take to solve the problem. For example, each homework question that you solved this semester was broken down into several parts (a, b, …). Each part was one step to solving the main problem. In doing this, we turned a large problem (like “implement Wordle”) into several smaller and more manageable problems (like “get guess” and “complete one turn”). You should think about what steps you will need to take and what functions you will need to create to complete those steps. When you propose your project idea on Gradescope on April 28th (11:59pm), you will be asked to include your plan. Below is an example project plan for Wordle. Note how we tried to flag the main functions, loops, branchings, try/excepts, etc. You don’t have to have every item in the requirements list flagged in your project plan, however, you should aim to have most items in there (see Grading Scale below). You must have all requirements in your final implementation. In your plan, you must also include at least one decision tree diagram that reflects a core branching component of your project. Project Plan Example​ Group Members (and section #): Allison Poh (section 5) Tim Richards (section 5) Project Title: Wordle Clone Project Idea: We want to recreate Wordle to allow players to play multiple games in one day. Project Plan: We expect our implementation to have 6 functions: 1. A function for generating a solution that randomly selects a 5-letter word. We will create a list of 5-letter words by searching on the Web. We will use python’s built-in module random to randomly select one of these words from the list. 2. A function for getting user input that asks the user to enter a 5-letter guess. We will use the input function and a try/except to make sure their input is valid. If the input is invalid, the user will need to enter another guess, so we will also use a loop here. 3. A function for printing a guess back to the user. Printing involves turning all letters to capitalization and adding a space between each letter for better readability. 4. A function for comparing a guess to the solution. The function should compare the two words letter-by-letter. This will require a loop. Branching will be used in the loop to determine what symbol to print based on if the letters are correct or incorrect (green = correct, red = incorrect). 5. A function that calls all of the above functions, imitating one turn of the game. 6. A function that calls the one turn function up to 6 times (because there are 6 attempts allowed). The function will additionally check if the game should be over (i.e., if a player won). Decision Tree Diagram: &lt;you are required to have at least one decision tree diagram in this write-up&gt; Group Member Roles: Allison will work on functions for generating a solution, getting user input, and printing a guess back to the user Tim will work on a function for comparing a guess to a solution We will then work together to create a function for one turn, and a function for calling one turn up to 6 times  Use the following template for your project plan: Project Proposal and Plan Template. You need to replace all of the red text. Before submitting, be sure to change the font color back to black. Project Plan Grading Scale​ 1: Below Standards: Project Plan is incomplete and mentions very few requirements2: Approaching Standards: Project Plan mentions at least 25% of the requirements3: Meeting Standards: Project Plan mentions at least 50% of the requirements and includes at least one decision tree diagram4: Exceeding Standards: Project Plan mentions at least 80% of the requirements and includes at least one decision tree diagram "},{"title":"Step 3. Implement a Solution Using Python​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#step-3-implement-a-solution-using-python","content":"Start early and collaborate often. If you get stuck, first ask your group members for help. You can visit any course staff’s office hours for additional help, but do note that we do not have the solution to every problem in the world. We can help you conceptually, but we won’t be able to answer “Why doesn’t this work?” without any context. Implementation is due May 15th (11:59pm) via Moodle. Pair programming can be challenging to manage, but there are several tools that can help your group work effectively. The simplest version control tool that we can offer you is Gradescope. As many of you know, Gradescope saves your submission history, allowing you to jump back to past submissions (i.e., versions) of your code. If you tag your group members for each submission, then all group members should be able to see the full version history. You can use Capstone Project Sandbox in Gradescope for this purpose. A more conventional approach to version control is using Github. This is definitely a more advanced and sophisticated version control technique than Gradescope, but it's worth checking out if you want to learn a widely used tool. Github can be integrated with VSCode (see Working with GitHub in VSCode). You are not required to use either of these techniques. "},{"title":"Step 4. Present​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#step-4-present","content":"You will present your project during the last class (May 16th if you’re in a Tu/Th section or May 17th if you’re in a Mo/We section). The presentation is MANDATORY; only those with an extenuating circumstance (documentation required) may be excused. Your group will create one poster that shows off the most important details about your project. A poster can be created in PowerPoint or Google Slides, but IT IS NOT A SLIDE SHOW. Rather, a poster is a visual aid that explains your project using text, screenshots, diagrams, etc., in one condensed slide. In academic conferences, posters are printed on large paper and displayed on boards or walls for researchers to present. Although we aren’t going to print the posters, you are still required to create the poster as if we were to print them (that is, no more than one slide). See this example poster for the Wordle problem: Wordle Poster Presentation. You may use this poster as a template if you wish. During the last class, you are expected to have your poster and project code ready on your laptop (remember to charge your laptop if you’re in a classroom with few outlets). Groups will walk around the room and listen to other groups present their projects. In this way, you will not be standing in front of the entire class and presenting. Rather, you will be presenting multiple times to different groups in a less formal and more conversational manner. We expect the listeners to ask questions and engage with the presenters. All groups will both present and listen to other groups throughout the poster presentation session. "},{"title":"Step 5. Peer Grade​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#step-5-peer-grade","content":"You will INDIVIDUALLY grade 3 randomly assigned peer projects. The grading rubric can be found at the end of this page. During the poster presentations, you will be given a handout to record your thoughts about peer projects. You will not know which groups you are grading beforehand so be sure to listen and record notes for all groups. You will then need to transcribe your thoughts into Moodle for 3 randomly assigned groups (note: you will be able to see the code files for the groups your grading on Moodle). The Moodle submission should be completed immediately after the poster presentations (while things are fresh in your mind) but we’ll accept submissions until May 19th (11:59pm). "},{"title":"Step 6: Reflect​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#step-6-reflect","content":"The reflection is INDIVIDUAL. It is required but will be graded based on completion and thoroughness. Do not tell us what you think we want to hear. Rather, give your honest reflection on your project. The reflection questionnaire will become available on Moodle after the poster presentations and will be due by May 19th (11:59pm). "},{"title":"Grading Scale​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#grading-scale","content":"Each person will individually grade 3 peer projects during the poster presentations. The grading rubric will be added here by April 21st. "},{"title":"Rubric​","type":1,"pageTitle":"Capstone Project","url":"/main/assignments/capstone#rubric","content":"Link to rubric: https://docs.google.com/spreadsheets/d/1z44zCLcjgp0E-VKFZhzvcoTeZxXnruXcD5PCrsLR9is/edit#gid=0 "},{"title":"Branching","type":0,"sectionRef":"#","url":"/main/assignments/branching","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#about","content":"The aim of this homework assignment is to practice branching. The focus is on getting comfortable working with if, else and elif statements. Even though we implement functions in Python in this class, the skills developed in this assignment will be relevant for any modern programming language. At its core, branching allows us to evaluate an expression and execute instructions depending on the outcome of the evaluation. Branching is one of the most important constructs in programming. Programs generally run sequentially, starting from the first instruction and then moving to the next instruction. Branching is used to allow some decision-making and controlling this flow in more complex ways. Once again, be aware that you will be required to use the knowledge and skills you have acquired so far to succeed in this assignment. This includes defining functions, evaluating boolean expressions, evaluating arithmetic expressions, taking user input among others, working with f-strings and working with sequence types including lists and strings. You may want to review them before you proceed. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#learning-objectives","content":"Practice branching (if, else, elif).Implement some simple applications using skills acquired so far. "},{"title":"Estimated Size​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#estimated-size","content":"This assignment requires you to implement 444 Python files. Each file will have a few functions to implement.Each function can be reasonably implemented in at most 10−1510 - 1510−15 lines of code, though you would find yourself attempting most in &lt;10&lt; 10&lt;10 lines of code.Many functions have simple computations, similar to the previous assignments.Some functions require you to use other functions implemented by you in the same file.Some functions may require you to create new variables, lists, strings, etc. "},{"title":"Note​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#note","content":"You do not need to use any assert statements in this assignment.You do not need to do any type checking, sanity checking or input validity checking in this assignment. "},{"title":"0. Setup​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#0-setup","content":"Make a folder on your computer and open it in VSCode. You must create four files in this folder. Make sure that you do not rename any of these files. triangle.pywordle.pychipotle.pygrade.py Remember that for every file you need to have comments indicating the authors at the, for example: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  The # Author/# Authors, # Email/# Emails, and # Spire ID/# Spire IDs are the only really necessary formatting details. Some copying and pasting here will save you some time and sanity. Note that these details are necessary for the auto-grader to recognize your solution. "},{"title":"1. Implement triangle.py​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#1-implement-trianglepy","content":"In this problem, you will create functions that check the validity and type of triangles based on their side lengths and angle sizes. No worries if you don't remember the properties of triangles; we'll teach you what you need to know below. "},{"title":"1a. Implement legal_triangle_angles (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#1a-implement-legal_triangle_angles-1-point","content":"A triangle has exactly three angles, and the sum of those angles is exactly 180 degrees. Your task is to implement a function that determines if a triangle is legal based on its three angles. The function should have the following signature: def legal_triangle_angles(angle_A, angle_B, angle_C)  This function should return &quot;triangle&quot; if the angles create a valid triangle, and &quot;not a triangle&quot; otherwise. You may assume that each angle is an integer greater than 0. Example: legal_triangle_angles(90, 55, 35) # This should return &quot;triangle&quot; legal_triangle_angles(90, 10, 20) # This should return &quot;not a triangle&quot;  "},{"title":"1b. Implement legal_triangle_sides (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#1b-implement-legal_triangle_sides-1-point","content":"A triangle has exactly three sides and no side can be larger than the sum of the other two sides. For example, let's call the sides of a triangle a, b, and c. A triangle is legal if: a &lt; b + cb &lt; a + cc &lt; a + b Your task is to implement a function with the following signature: def legal_triangle_sides(side_a, side_b, side_c)  This function should return &quot;triangle&quot; if the sides create a valid triangle, and &quot;not a triangle&quot; otherwise. You may assume that each side is an integer greater than 0. Example: legal_triangle_sides(3, 4, 5) # This should return &quot;triangle&quot; legal_triangle_sides(10, 4, 5) # This should return &quot;not a triangle&quot;  "},{"title":"1c. Implement triangle_angle_type (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#1c-implement-triangle_angle_type-1-point","content":"A triangle can be right, obtuse, or acute based on its angles. A right triangle has an angle of 90 degrees. An obtuse triangle has an angle that's greater than 90 degrees. An acute triangle only has angles less than 90 degrees. Your task is to implement a function with the following signature: def triangle_angle_type(angle_A, angle_B, angle_C)  This function should return the type of triangle based on its angles. Specifically, it should return one of &quot;obtuse&quot;, &quot;right&quot; or &quot;acute&quot;. You may assume that each angle is an integer greater than 0 and that the triangle is legal (i.e. all angles sum to 180 degrees). Example: triangle_angle_type(20, 90, 70) # This should return &quot;right&quot; triangle_angle_type(110, 35, 35) # This should return &quot;obtuse&quot; triangle_angle_type(65, 55, 60) # This should return &quot;acute&quot;  Hint: A triangle is either right, obtuse, or acute. This is because of the property explained in legal_triangle_angles: the sum of all angles is exactly 180 degrees. The largest angle alone can tell you whether the triangle is right, obtuse, or acute. "},{"title":"1d. Implement triangle_side_type (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#1d-implement-triangle_side_type-1-point","content":"A triangle can be equilateral, isosceles, or scalene based on its sides. An equilateral triangle has exactly three sides of equal size. An isosceles triangle has exactly two sides of equal size. A scalene triangle has all different side sizes. Your task is to implement a function with the following signature: def triangle_side_type(side_a, side_b, side_c)  This function should return the type of triangle based on its sides. You may assume that each side is an integer greater than 0 and that the triangle is legal (i.e. no side is larger than the sum of the other two sides). Example: triangle_side_type(2, 9, 7) # This should return &quot;scalene&quot; triangle_side_type(3, 3, 6) # This should return &quot;isosceles&quot; triangle_side_type(10, 10, 10) # This should return &quot;equilateral&quot;  "},{"title":"2. Implement wordle.py​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#2-implement-wordlepy","content":"Anyone else addicted to Wordle? We are! And so is Google (try Googling Wordle and watch the Google logo change). If you've never played Wordle before, here's the rundown: Wordle is a game of guessing words. You get 6 chances to guess a 5-letter word. If a letter is highlighted green, then that letter is in the word and in the correct spot. If a letter is highlighted yellow, then that letter is in the word but in the wrong spot. If a letter is highlighted grey, then that letter is not in the word in any spot. For this task, you will create functions for building the Wordle game. "},{"title":"2a. Implement get_guess (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#2a-implement-get_guess-1-point","content":"The player will guess the correct word up to 6 times. Thus, we need a function that we can call each time we need the player to input a new guess. Your task is to implement a function with the following signature: def get_guess()  The function should ask the player to input a guess. The inputted guess should then be converted to uppercase letters (hint: use .upper()) and returned. You may assume the player will input a word with at least 5 letters. However, in the case that the player was mistaken and inputted a word with more than 5 letters, you should &quot;safeguard&quot; the program such that the function only returns the first 5 characters (hint: think slicing). Example: If the player inputs &quot;horse&quot;, &quot;HORSE&quot; should be returned. If the player inputs &quot;horse &quot; (note the space at the end), &quot;HORSE&quot; should be returned. "},{"title":"2b. Implement print_word (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#2b-implement-print_word-1-point","content":"The game should print back to the player the word in which they inputted. You may assume that get_guess has already converted the word to uppercase and made sure it is 5 letters in length. The print_word function should simply print (note that's print and not return) the word with spaces between each letter. Example: print_word(&quot;HORSE&quot;) # This should print &quot;H O R S E&quot; print_word(&quot;TACOS&quot;) # This should print &quot;T A C O S&quot;  Implement the function with the following signature: def print_word(word)  "},{"title":"2c. Implement exact_match_compare (2 points)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#2c-implement-exact_match_compare-2-points","content":"Now it's time to compare the guess to the correct word, letter-by-letter. Although Wordle flags letters that are in the word but not in the right spot, we will simplify the game for this assignment. We are only concerned about exact matches. That is, if a letter is in the word and in the correct spot (green), or if a letter is not in a word at all (grey). However, instead of using the color grey, we're going to use the color red to flag no match. Your task is to implement a function with the following signature: def exact_match_compare(soln, guess)  It's best to start with an example before explaining. Below is an example of a player-terminal interaction. Enter a guess: horse H O R S E 🔴🟢🔴🔴🔴  get_guess asked the player to enter a guess and print_word printed their guess in a more easily readable manner. exact_match_compare then compares the guess to the solution. The solution in this case is COULD (but obviously the player does not know this or else they would've guessed the word could). Comparing letter-by-letter, if two letters match, then the match is represented by a green circle. Otherwise, a red circle represents no match. In the above example, C does not equal H so a red circle represents no match. O equals O so a green circle represents a match. U does not equal R so a red circle represents no match. And so on. The function should return (not print) a string of red and green circles. The circles are nothing fancy - you can simply copy-and-paste them from the example above into your code. Remember to put the circles in quotes as they are strings. Testing: Use the following code to test the three functions you've created thus far. The output should be identical to the one shown above. Be sure to remove these lines before submitting as they may &quot;break&quot; the auto-grader. solution = &quot;COULD&quot; guess = get_guess() print_word(guess) print(exact_match_compare(solution, guess))  "},{"title":"2d. Implement one_turn (2 points)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#2d-implement-one_turn-2-points","content":"In 2c, we gave you a snippet of code to test your functions thus far. A better idea would be to create a function that we can use to call these methods for us. Let's do that. Your task is to implement a function with the following signature: def one_turn(soln)  Parameter soln is the solution. In addition to the function calls in the test snippet from exact_match_compare, you must also check if the player won the game. The player wins if their guess is equal to the solution. If the player wins, print &quot;Congratulations&quot; and call exit(), which will ensure that the program is done executing. Testing: Test your function by calling one_turn(&quot;COULD&quot;). The output should be identical to the example in 2c. "},{"title":"2e. Implement make_solution (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#2e-implement-make_solution-1-point","content":"So far, we've only tested our functions on one solution: COULD. We will now make a function that will randomly select a common 5 letter word as a solution. Your task is to implement a function with the following signature: def make_solution()  The functions should randomly select a 5 letter word as the solution. To start off, you can use the following list of common five letter words: # https://www.unscramblerer.com/common-five-letter-words/ options = [&quot;Which&quot;, &quot;Their&quot;, &quot;There&quot;, &quot;Would&quot;, &quot;Other&quot;, &quot;These&quot;, &quot;About&quot;, &quot;First&quot;, &quot;Could&quot;, &quot;After&quot;]  The function should randomly select a word from this list and return it in uppercase letters. Hint: Python has a random module that you can use. Import random at the top of your program after your heading comments. Then, you can use the choice method from random to randomly select an element from the list. Testing: Test your function by playing the game! Use the code below for testing: soln = make_solution() one_turn(soln) one_turn(soln) one_turn(soln) one_turn(soln) one_turn(soln) one_turn(soln) print(f&quot;Word was \\&quot;{soln}\\&quot;, better luck next time.&quot;)  "},{"title":"3. Implement chipotle.py​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3-implement-chipotlepy","content":"We all love Chipotle, don't we? Have you ever ordered your favorite bowl or burrito from Chipotle? Have you wondered what the code behind the seemingly sophisticated-looking food ordering apps and websites is? Ask no more! In this problem, you will implement a simple chipotle order processing script that will generate invoices for specified orders. Note that this is probably the first time many of you will implement an 'application' in the sense that your code will solve a real-world problem. You will need to apply the skills acquired so far to implement this script. It may seem intimidating at a first glance, but you will definitely enjoy the process and hopefully embrace the power and utility of programming! Let's first understand the setup of this problem. Think about how you would go about placing an order at Chipotle. We want customers to place an order by building their bowl/burrito. Then, we must calculate the price of the customer's order based on the ingredients they have selected. Customers may have discount codes, so we want to provide discounts based on the code the customer specifies in their order. We assume that the orders are for delivery, so we would want to provide the customers an estimate of when their order would be ready for pick up based on their location. Finally, we want to generate an invoice that includes all these details. To make your job a little easier, we do not require you to build the orders. Instead, we will provide you a description of what an order looks like. We represent an order using a Python list. Each element of the list represents a specific component in the order, as described below: Element\tDescription1\tCustomer Name 2\tCustomer Location 3\tDiscount Code 4\tChoice of Protein 5\tChoice of Rice 6\tChoice of Beans 7\tChoice of Burrito 8 &amp; beyond\tChoices of Toppings All the elements are Strings except 7: Choice of Burrito which is a boolean.Note that '' is a valid list element and means that the customer did not request that element and so they should not be charged for that particular element.Choice of Burrito is True if the order is a burrito and False if the order is a bowl.Additionally, 3: Discount code is always uppercase and may be '' when the customer does not specify a discount code. We provide you two sample orders to test your code. order1 = ['manan', 'holyoke', 'FLAT3', 'chicken', 'white', 'pinto', False, 'queso blanco', 'cheese', 'fajita veggies', 'sour cream'] order2 = ['allison', 'greenfield', 'MAGIC', 'carnitas', 'brown', 'black', True, 'cheese', 'fajita veggies', 'sour cream', 'guacamole', 'tomato salsa']  The examples provided below in the parts of this problem will reference these sample orders. Further, these sample orders DO NOT cover all possible test cases and hence, you must test your functions with your self-developed examples to make sure your code works as desired. "},{"title":"3a. Calculate price of the Protein (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3a-calculate-price-of-the-protein-1-point","content":"In this problem, you must determine the price of the protein in the order. The price list is described below: Protein\tPricechicken\t$2.5 steak\t$3.5 barbacoa\t$3.5 carnitas\t$3.0 veggies\t$2.5 no protein\t$0 Your task is to implement a function with the following signature: def get_protein(order)  The function takes an argument order which is a list as described in the problem statement. It should return the price of the protein in order. Example: get_protein(order1) # This should return 2.5 get_protein(order2) # This should return 3  "},{"title":"3b. Calculate price of the Rice (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3b-calculate-price-of-the-rice-1-point","content":"In this problem, you must determine the price of the rice in the order. The price list is described below: Rice\tPricewhite\t$2.5 brown\t$3.5 no rice\t$0 Your task is to implement a function with the following signature: def get_rice(order)  The function takes an argument order which is a list as described in the problem statement. It should return the price of the rice in order. Example: get_rice(order1) # This should return 2.5 get_rice(order2) # This should return 3.5  "},{"title":"3c. Calculate price of the Beans (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3c-calculate-price-of-the-beans-1-point","content":"In this problem, you must determine the price of the beans in the order. The price list is described below: Beans\tPriceblack\t$2.5 pinto\t$2.5 no beans\t$0 Your task is to implement a function with the following signature: def get_beans(order)  The function takes an argument order which is a list as described in the problem statement. It should return the price of the beans in order. Example: get_beans(order1) # This should return 2.5 get_beans(order2) # This should return 2.5  "},{"title":"3d. Check if the order is a Burrito/Bowl (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3d-check-if-the-order-is-a-burritobowl-1-point","content":"In this problem, you must determine if the customer wants a burrito or a bowl and charge them appropriately. Burrito\tPriceYes\t$2.0 No\t$0 Your task is to implement a function with the following signature: def is_burrito(order)  The function takes an argument order which is a list as described in the problem statement. It should return the price charged for the burrito in order. Example: is_burrito(order1) # This should return 0 is_burrito(order2) # This should return 2  "},{"title":"3e. Calculate price of the Toppings (2 points)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3e-calculate-price-of-the-toppings-2-points","content":"In this problem, you must determine the price of the toppings in the order. Note that there may be any number of toppings in an order. The price list is described below: Topping\tPriceguacamole\t$2.75 tomato salsa\t$2.5 chili corn salsa\t$1.75 tomatillo green chili salsa\t$2 tomatillo red chili salsa\t$2 sour cream\t$2.5 fajita veggies\t$2.5 cheese\t$2 queso blanco\t$2.75 no toppings\t$0 However, there are some things to note: If the protein in order is veggies, then guacamole (if requested) is free!If the protein in order is veggies, then fajita veggies (if requested) is free!You can be assured that a specific topping won't be repeated in order i.e. you will not have the same topping more than once in order. Your task is to implement a function with the following signature: def get_toppings(order)  The function takes an argument order which is a list as described in the problem statement. It should return the total price of all the toppings in order. Example: get_toppings(order1) # This should return 9.75 get_toppings(order2) # This should return 12.25  Hint: Consider using in to check if an element exists in a list. Look at the example below for reference. print(1 in [1, 2, 3]) #prints True print('manan' in ['jared', 'kobi', 'allison']) #prints False  "},{"title":"3f. Calculate Discount (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3f-calculate-discount-1-point","content":"In this problem, you must determine the discounted price if applicable. The codes list is described below: Code\tDiscountMAGIC\t5% off on total SUNDAYFUNDAY\t10% off on total FLAT3\t$3 off on total Your task is to implement a function with the following signature: def apply_discount(order, total)  The function takes as arguments order which is a list as described in the problem statement and total which is the sum of the prices of all elements in the burrito/bowl (we usually call this subtotal). It should return the total price after the discount has been applied. Example: apply_discount(order1, 17.25) # This should return 14.25 apply_discount(order2, 23.25) # This should return 22.0875  "},{"title":"3g. Calculate Approximate Time (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3g-calculate-approximate-time-1-point","content":"In this problem, you must determine the approximate time for order pick-up. Since this branch of Chipotle is located in Hadley, we have the following approximates: Location\tTime (min)amherst\t15 north amherst\t15 south amherst\t15 hadley\t15 northampton\t30 south hadley\t30 belchertown\t30 sunderland\t30 holyoke\t45 greenfield\t45 deerfield\t45 springfield\t45 Your task is to implement a function with the following signature: def approximate_time(order)  The function takes an argument order which is a list as described in the problem statement. It should return the approximate pick-up time for the order. Example: approximate_time(order1) # This should return 45 approximate_time(order2) # This should return 45  "},{"title":"3h. Generate Invoice (2 points)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3h-generate-invoice-2-points","content":"In this problem, you must generate an invoice based on the customer's order. Your task is to implement a function with the following signature: def generate_invoice(order)  The function takes an argument order which is a list as described in the problem statement. It should print the order invoice (not return!) with the following specifications: Welcome to Chipotle Mexican Grill Hadley, CUSTOMER_NAME. Your invoice is displayed below: Protein: PROTEIN - $PROTEIN_PRICE Rice: RICE rice - $RICE_PRICE Beans: BEANS beans - $BEANS_PRICE Burrito: YES/NO - $BURRITO_PRICE Toppings: TOPPING_1, TOPPING_2, TOPPING_3, .... TOPPING_N - $TOPPINGS_PRICE Subtotal: $SUM_OF_ALL_ELEMENTS Discount Code: CODE_NAME Total: $PRICE_AFTER_DISCOUNT You Save: $MONEY_SAVED Your order will be ready for pickup in APPROX_TIME minutes.&quot; Enjoy your meal and have a good day!  The words in CAPITALS must be substituted using order and functions created in 3a.−3g.3a. - 3g.3a.−3g. Hint: Consider using f-strings here. Hint: SUM_OF_ALL_ELEMENTS = PROTEIN_PRICE + RICE_PRICE + BEANS_PRICE + BURRITO_PRICE + TOPPINGS_PRICE Hint: MONEY_SAVED = SUM_OF_ALL_ELEMENTS - PRICE_AFTER_DISCOUNT. Hint: As suggested in assignment 3, you can use &quot;, &quot;.join() to convert a list into a comma separated string. Please adhere to the formatting guidelines. The auto-grader will fail if the formatting is not identical to the specified guidelines. To better understand this scheme, check out the following examples and trace on a paper what value is being substituted for each of the words in CAPITAL. Example: generate_invoice(order1)  Welcome to Chipotle Mexican Grill Hadley, manan. Your invoice is displayed below: Protein: chicken - $2.5 Rice: white rice - $2.5 Beans: pinto beans - $2.5 Burrito: No - $0 Toppings: queso blanco, cheese, fajita veggies, sour cream - $9.75 Subtotal: $17.25 Discount Code: FLAT3 Total: $14.25 You Save: $3.0 Your order will be ready for pickup in 45 minutes. Enjoy your meal and have a good day!  generate_invoice(order2)  Welcome to Chipotle Mexican Grill Hadley, allison. Your invoice is displayed below: Protein: carnitas - $3 Rice: brown rice - $3.5 Beans: black beans - $2.5 Burrito: Yes - $2 Toppings: cheese, fajita veggies, sour cream, guacamole, tomato salsa - $12.25 Subtotal: $23.25 Discount Code: MAGIC Total: $22.0875 You Save: $1.1625000000000014 Your order will be ready for pickup in 45 minutes. Enjoy your meal and have a good day!  "},{"title":"4. Implement grade.py​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4-implement-gradepy","content":"Have you ever noticed the gradebook section on Moodle? How do you think the grades are determined for a class as big as CICS110? Think about how tedious this task can potentially be if we were to do it manually. In this problem, you will implement a simple grade determination script that will calculate the final grade of a student, given their scores in different components of the class and instructor determined curve weights. Fun Fact: With some clever modifications, you can actually use this script to write another (perhaps simpler) script that can help you calculate your grade in this class! Let's first understand the setup of this problem. Imagine a hypothetical iteration of CICS110. We specify the following requirements, with their overall contribution to the total grade. Component\tTotal Number\tContributionQuizzes\t10\t10% Midterm\t1\t15% Final\t1\t15% Weekly HW\t10\t20% Project\t3\t20% Labs\t10\t10% Participation\t10\t10% This should be interpreted as below: There are 10 quizzes worth 10% of your final grade.There is a project with 3 milestones worth 20% of your grade.And so on. Here are some assumptions to simplify the problem: All Quizzes are equally weighted and no quiz is dropped.All HWs are equally weighted and no HW is dropped.All Project milestones are equally weighted and no milestone is dropped.All Labs are equally weighted and no lab is dropped.All Participation activities are equally weighted and no activity is dropped. In addition, this iteration of CICS110 also follows the 4-point scale like we do! Grade\tDescription1\tBelow Standards 2\tApproaching Standards 3\tMeeting Standards 4\tExceeding Standards To simplify this problem, we do not require you to build the gradebook. Instead, we provide you the scores. You simply need to calculate the weighted cumulative score and the final grade. We represent a student using a Python list. Each element of the list represents a specific component, as described below: Element\tDescription1\tStudent Name 2\tStudent ID 3\tAll Quiz Scores 4\tMidterm Score 5\tFinal Score 6\tAll HW Scores 7\tAll Project Scores 8\tAll Lab Scores 9\tAll Participation Scores Here is how to interpret this: Student Name is a string.Student ID is an int.All Quiz Scores is a list of size 101010 containing ints each representing the score obtained in an individual quiz out of 100100100 points.Midterm Score is an int representing the score obtained in the midterm exam out of 100100100 points.Final Score is an int representing the score obtained in the final exam out of 100100100 points.All HW Scores is a list of size 101010 containing ints each representing the score obtained in an individual HW out of 100100100 points.All Project Scores is a list of size 333 containing ints each representing the score obtained in an individual milestone of the project out of 100100100 points.All Participation Scores is a list of size 101010 containing ints each representing the score obtained in an individual participation activity out of 100100100 points. We provide you with one sample student to test your code. student = ['Manan', 1, [100, 100, 50, 100, 100, 50, 100, 50, 50, 50], 75, 90, [100, 100, 50, 100, 100, 50, 100, 50, 50, 50], [75, 75, 100], [100, 100, 50, 100, 100, 50, 100, 50, 50, 50], [100, 100, 50, 100, 100, 50, 100, 50, 50, 50]]  The examples provided below in the parts of this problem will reference these sample orders. Further, these sample orders DO NOT cover all possible test cases and hence, you must test your functions with your self-developed examples to make sure your code works as desired. "},{"title":"4a. Compute 4-point score for Quizzes (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4a-compute-4-point-score-for-quizzes-1-point","content":"In this problem, you must determine the 4-point Quizzes score of the student. You must aggregate the scores across all quizzes and then follow the points distribution below: Total Score in Quizzes\t4-point Score0 - 250\t1 251 - 500\t2 501 - 750\t3 751 - 1000\t4 Your task is to implement a function with the following signature: def compute_quizzes(quiz_scores)  The function takes as an argument quiz_scores which is a list of size 10 containing ints each representing the score obtained in an individual quiz out of 100100100 points. It should return the 4-point score of the student in Quizzes. Example: compute_quizzes([100, 100, 50, 100, 100, 50, 100, 50, 50, 50]) # This should return 3 compute_quizzes([0, 0, 50, 100, 100, 50, 0, 50, 0, 50]) # This should return 2  "},{"title":"4b. Compute 4-point score for the Midterm (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4b-compute-4-point-score-for-the-midterm-1-point","content":"In this problem, you must determine the 4-point Midterm score of the student. The points distribution is described below: Total Score in Midterm\t4-point Score0 - 20\t1 21 - 45\t2 46 - 80\t3 81 - 100\t4 Your task is to implement a function with the following signature: def compute_midterm(midterm_score)  The function takes as an argument midterm_score which is an int representing the score obtained in the midterm exam out of 100100100 points. It should return the 4-point score of the student on the Midterm. Example: compute_midterm(50) # This should return 3 compute_midterm(87) # This should return 4  "},{"title":"4c. Compute 4-point score for the Final (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4c-compute-4-point-score-for-the-final-1-point","content":"In this problem, you must determine the 4-point Final score of the student. The points distribution is described below: Total Score in Final\t4-point Score0 - 25\t1 26 - 50\t2 51 - 75\t3 76 - 100\t4 Your task is to implement a function with the following signature: def compute_final(final_score)  The function takes as an argument final_score which is an int representing the score obtained in the final exam out of 100100100 points. It should return the 4-point score of the student on the Final. Example: compute_final(50) # This should return 2 compute_final(87) # This should return 4  "},{"title":"4d. Compute 4-point score for HWs (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4d-compute-4-point-score-for-hws-1-point","content":"In this problem, you must determine the 4-point HWs score of the student. You must aggregate the scores across all HWs and then follow the points distribution below: Total Score in HWs\t4-point Score0 - 330\t1 331 - 440\t2 441 - 650\t3 651 - 1000\t4 Your task is to implement a function with the following signature: def compute_homework(hw_scores)  The function takes as an argument hw_scores which is a list of size 10 containing ints each representing the score obtained in an individual HW out of 100100100 points. It should return the 4-point score of the student in HWs. Example: compute_homework([100, 100, 50, 100, 100, 50, 100, 50, 50, 50]) # This should return 4 compute_homework([0, 0, 50, 100, 100, 50, 0, 50, 0, 50]) # This should return 2  "},{"title":"4e. Compute 4-point score for Project (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4e-compute-4-point-score-for-project-1-point","content":"In this problem, you must determine the 4-point Project score of the student. You must aggregate the scores across all Project milestones and then follow the points distribution below: Total Score in Milestones\t4-point Score0 - 150\t1 151 - 210\t2 211 - 270\t3 271 - 300\t4 Your task is to implement a function with the following signature: def compute_project(proj_scores)  The function takes as an argument proj_scores which is a list of size 333 containing ints each representing the score obtained in an individual Project milestone out of 100100100 points. It should return the 4-point score of the student in Project. Example: compute_project([75, 75, 100]) # This should return 3 compute_project([0, 75, 100]) # This should return 2  "},{"title":"4f. Compute 4-point score for Labs (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4f-compute-4-point-score-for-labs-1-point","content":"In this problem, you must determine the 4-point Labs score of the student. You must aggregate the scores across all Labs and then follow the points distribution below: Total Score in Labs\t4-point Score0 - 250\t1 251 - 500\t2 501 - 750\t3 751 - 1000\t4 Your task is to implement a function with the following signature: def compute_lab(lab_scores)  The function takes as an argument lab_scores which is a list of size 10 containing ints each representing the score obtained in an individual Lab out of 100100100 points. It should return the 4-point score of the student in Labs. Example: compute_lab([100, 100, 50, 100, 100, 50, 100, 50, 50, 50]) # This should return 3 compute_lab([0, 0, 50, 100, 100, 50, 0, 50, 0, 50]) # This should return 2  "},{"title":"4g. Compute 4-point score for Participation (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4g-compute-4-point-score-for-participation-1-point","content":"In this problem, you must determine the 4-point Participation score of the student. You must aggregate the scores across all Participation activities and then follow the points distribution below: Total Score in Milestones\t4-point Score0 - 250\t1 251 - 400\t2 401 - 600\t3 601 - 1000\t4 Your task is to implement a function with the following signature: def compute_participation(part_scores)  The function takes as an argument part_scores which is a list of size 10 containing ints each representing the score obtained in an individual Participation Activity out of 100100100 points. It should return the 4-point score of the student in Participation Activities. Example: compute_participation([100, 100, 50, 100, 100, 50, 100, 50, 50, 50]) # This should return 4 compute_participation([0, 0, 50, 100, 100, 50, 0, 50, 0, 50]) # This should return 2  "},{"title":"4h. Compute Weighted Cumulative Score (2 points)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4h-compute-weighted-cumulative-score-2-points","content":"In this problem, you must determine the weighted cumulative score of the student across all components of the course. Your task is to implement a function with the following signature: def get_cumulative(student)  The function takes as an argument student which is a list of lists representing a student and their scores in all components of the class as described in the problem statement (Please check how the list is formatted in the setup section). It should return weighted cumulative score of the student. Hint: For quizzes, weighted_score_quizzes = (4-point-score-quizzes/4) weight_quizzes_in_final_grade. You need to do this for each component.* Hint: cumulative_weighted_score = weighted_score_quiz + weighted_score_labs + weighted_score_HWs + weighted_score_midterm + weighted_score_final + weighted_score_Project + weighted_score_Participation Example: get_cumulative(student) #This should return 86.25  "},{"title":"4i. Compute Final Grade (2 points)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4i-compute-final-grade-2-points","content":"In this problem, you must determine the final grade of the student using the cumulative score and grade scale. Your task is to implement a function with the following signature: def determine_grade(cumulative_score, weights)  The function takes as arguments cumulative_score which is a float that stores the weighted cumulative score of the student and weights which is a list that stores the thresholds for grade boundaries. It should return the final grade of the student based on the specified grade boundaries. We format weights as follows: Element\tDescription1\tLower boundary for A 2\tLower boundary for A- 3\tLower boundary for B+ 4\tLower boundary for B 5\tLower boundary for B- 6\tLower boundary for C+ 7\tLower boundary for C 8\tLower boundary for C- 9\tLower boundary for D Otherwise, the student gets an 'F'. To test, we specify the following grade boundaries: weights_1 = [93, 90, 87, 84, 80, 77, 74, 70, 66] weights_2 = [97, 94, 91, 88, 85, 82, 79, 76, 73]  As an example, we can interpret weights_1 as follows: Anything ≥\\geq≥ 93 should get a 'A', anything &lt;93&lt; 93&lt;93 but ≥90\\geq 90≥90 should get an 'A-' and so on. Notice that this will vary according to the values in the argument weights and so your code should not hard-code values, but perform these comparisons in terms of the indices of the elements of weights. Example: determine_grade(86.25, weights_1) #This should return 'B' determine_grade(86.25, weights_2) #This should return 'B-'  "},{"title":"4j. Print Grade Report (1 point)​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4j-print-grade-report-1-point","content":"Finally, you must print the grade report for the user. Your task is to implement a function with the following signature: def print_report(student, weights)  The function takes as arguments student which is a list of lists representing a student and their scores in all components of the class as described in the problem statement (Please check how the list is formatted in the setup section) and weights which is a list that stores the thresholds for grade boundaries. It should print (not return!) the following: Name: STUDENT_NAME Cumulative: WEIGHTED_CUMULATIVE_SCORE Final Grade: FINAL_GRADE  The words in CAPITALS must be substituted using student and functions created in 4a.−4i.4a. - 4i.4a.−4i. Hint: Consider using f-strings here. To test, we specify the following grade boundaries: weights_1 = [93, 90, 87, 84, 80, 77, 74, 70, 66] weights_2 = [97, 94, 91, 88, 85, 82, 79, 76, 73]  Example: print_report(student, weights_1)  Name: Manan Cumulative: 86.25 Final Grade: B  print_report(student, weights_2)  Name: Manan Cumulative: 86.25 Final Grade: B-  "},{"title":"Grading Scale​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#grading-scale","content":"Note that points may be obtained from anywhere, you do not need to try to complete work in any particular order. There is also an abundance of possible points to obtain, giving you options in what you want to work on in order to get your total points within the desired range. "},{"title":"1: Below Standards: 0-5 points​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#1-below-standards-0-5-points","content":""},{"title":"2: Approaching Standards: 6-11 points​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#2-approaching-standards-6-11-points","content":""},{"title":"3: Meeting Standards: 12-17 points​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#3-meeting-standards-12-17-points","content":""},{"title":"4: Exceeding Standards: 18+ points​","type":1,"pageTitle":"Branching","url":"/main/assignments/branching#4-exceeding-standards-18-points","content":""},{"title":"File Handling","type":0,"sectionRef":"#","url":"/main/assignments/files","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#about","content":"The aim of this homework assignment is to work with files in Python. Even though we implement functions in Python in this class, the skills developed in this assignment will be relevant for any modern programming language. A file is a collection of data stored on a disk in one unit identified by a name. The process of file handling pertains to how we store the available data in a file with the help of a computer program. Data can be retrieved from these files and used in any program written in a modern programming language. Files are an essential part of computer systems. File Handling includes operations such as opening existing files and editing them, creating new files, removing existing files among several other operations. Even though we work with files in this assignment, be aware that you will be required to use the knowledge and skills you have acquired so far to succeed in this assignment. This includes defining functions, evaluating boolean expressions, evaluating arithmetic expressions, taking user input, working with f-strings, working with sequence types including lists and strings, branching, looping, working with modules, and handling exceptions. You may want to review them before you proceed. "},{"title":"Learning Objectives​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#learning-objectives","content":"Practice working with files in Python.Practice writing modular code in Python.Practice throwing and catching exceptions in Python. "},{"title":"Estimated Size​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#estimated-size","content":"This assignment consists of 666 problems. Unlike previous assignments, there is 111 required problem in this assignment and you cannot attempt remaining problems without successfully completing that problem. Each problem specifies a few functions to implement.Each function can be reasonably implemented in at most 10−1510 - 1510−15 lines of code, though you would find yourself attempting most in &lt;10&lt; 10&lt;10 lines of code.Many functions have simple computations, similar to the previous assignments.Some functions require you to use other functions implemented by you in the same file.Some functions may require you to create new variables, lists, strings, etc. "},{"title":"Note​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#note","content":"You do not need to use any assert statements in this assignment. "},{"title":"0. Setup​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#0-setup","content":"Make a folder on your computer and open it in VSCode. You must create 666 files in this folder. Make sure that you do not rename any of these files. basic_io.pytext_io.pyfile_info.pycsv_parse.pycsv_split.pycsv_stats.py Remember that for every file you need to have comments indicating the authors at the top. For example: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  The # Author/# Authors, # Email/# Emails, and # Spire ID/# Spire IDs are the only really necessary formatting details. Some copying and pasting here will save you some time and sanity. Note that these details are necessary for the auto-grader to recognize your solution. "},{"title":"1. Implement basic_io.py (REQUIRED)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#1-implement-basic_iopy-required","content":"Note: You must implement basic_io.py correctly to be able to work on other problems in this assignment. Without correctly implementing all functions in this file, you cannot solve other problems in this assignment since they depend on importing functions from basic_io.py. It can be somewhat overwhelming to start working with files. This problem is intended to be a gentle introduction to file handling in Python. The focus is on getting used to the syntax, basic error handling with files and reading as well as writing to and from files. In this problem, you will implement some simple functions that will help you get comfortable with file handling in Python. Note that every part of this problem will require an informative error message if there is an exception while opening a file. If you call a function from an earlier part that already catches exceptions, then you should not have to implement an exception handler in the current function. For example, if your read_string function handles an exception and you call read_string from read_lines, then your read_lines function won't require an exception check. Also note that the auto-grader will be looking for the exact error message Error occurred when opening FNAME to read, where FNAME should be replaced with the actual name of the file. "},{"title":"1a. Implement read_string (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#1a-implement-read_string-1-point","content":"One of the most fundamental tasks in file handling is to open a file and read its contents as a string. Your task is to implement a function that takes as argument the name of a file fname. The function should first attempt to open the file fname. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to read, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, your code should read the contents of the file and return the contents. The function should have the following signature: def read_string(fname)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, print(read_string('cics110.txt'))  you should get as output the following: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  "},{"title":"1b. Implement read_lines (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#1b-implement-read_lines-1-point","content":"A quick variation is to open a file and read its contents as a string line by line i.e. every line in the file is read one by one. This is in contrast to 1a., where we read the entire file into one string. Your task is to implement a function that takes as argument the name of a file fname. This function should use read_string to read the contents of fname. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to read, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, it should return a list containing the lines in the fname one by one. The function should have the following signature: def read_lines(fname)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, print(read_lines('cics110.txt'))  you should get as output the following: ['CICS 110 students will succeed in their future endeavors.', 'Allison is an instructor for CICS 110.', 'Manan is a TA for CICS 110.', 'Ben is a UCA for CICS 110.']  Hint: Using read_string, you can get a string that stores the contents of the file fname. Consider splitting this string into a list of strings using a function you have seen in this class before. "},{"title":"1c. Implement write_string (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#1c-implement-write_string-1-point","content":"Another fundamental task in file handling is to open a file and write text into the file, where text is some string. Your task is to implement a function that takes as argument the name of a file fname and a string text. The function should first attempt to open the file fname. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to write, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, your code should write into the file text. The function should have the following signature: def write_string(fname, text)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, write_string('cics110.txt', 'CICS 110 is an introductory python class.')  cics110.txt should contain only the following: CICS 110 is an introductory python class.  "},{"title":"1d. Implement write_lines (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#1d-implement-write_lines-1-point","content":"A quick variation is to open a file and write to it line by line i.e. every string in a provided list is written into the file line by line. Your task is to implement a function that takes as argument the name of a file fname and a list of strings text. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to write, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, this function should use write_string to write the elements of text into the file fname line by line. The function should have the following signature: def write_lines(fname, text)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, write_lines('cics110.txt', ['Hello,', 'World'])  cics110.txt should contain only the following: Hello, World  Hint: The newline character &quot;\\n&quot; will be useful in this problem. One possible approach could be to use list comprehension to add a &quot;\\n&quot; to the end of each line in text, save in another list, and use &quot;&quot;.join() to create a string from this new list which can be then written into the file using write_string. "},{"title":"1e. Implement append_string (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#1e-implement-append_string-1-point","content":"A third fundamental task in file handling is to open a file and write contents into it without erasing the existing contents of the file i.e. add new content at the end of the file. Your task is to implement a function that takes as argument the name of a file fname and a string text. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to append, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, your code should write into the file text after the existing content of the file. The function should have the following signature: def append_string(fname, text)  Example: Assume a file cics110.txt with the following contents (note the newline at the end): CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, append_string('cics110.txt', 'Tanush is also a UCA.')  cics110.txt should contain the following: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110. Tanush is also a UCA.  Hint: This is essentially the same as write_string but instead of opening the file in write mode, you need to open it in append mode. "},{"title":"1f. Implement append_lines (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#1f-implement-append_lines-1-point","content":"A quick variation is to open a file and append to it line by line i.e. every string in a provided list is written into the file line by line after the existing content in the file. Your task is to implement a function that takes as argument the name of a file fname and a list of strings lines. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to append, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, the function should use append_string to append the elements of lines into the file fname line by line after the existing content of the file. The function should have the following signature: def append_lines(fname, lines)  Example: Assume a file cics110.txt with the following contents (note the newline at the end): CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, append_lines('cics110.txt', ['Tanush is a UCA.', 'Lana is a UCA.', 'Dev is a UCA.'])  cics110.txt should contain the following: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110. Tanush is a UCA. Lana is a UCA. Dev is a UCA.  Hint: This is essentially the same as 1d. but instead of write mode, you should open the file in append mode. The hint in 1d. applies for this problem as well. "},{"title":"2. Implement text_io.py​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#2-implement-text_iopy","content":"Now that we are comfortable working with basic file handling operations, we will move to some more interesting file operations. Note that you will need to use the functions you implemented in basic_io.py so don't forget to import it into text_io.py! "},{"title":"2a. Implement echo_to_file (2 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#2a-implement-echo_to_file-2-points","content":"Remember the echo_until_quit function we implemented in the previous homework? Here is a slight variation of that problem with some file handling. Your task is to implement a function that takes as arguments the name of a file fname and a boolean append which is True if the user wants to append the content to the file fname and False when the user wants to rewrite the content of the file fname. This function should repeatedly ask the user for an input string until the user types the string quit and append these strings to the file fname if append is True and rewrite the file fname with only the strings entered by the user if append is False. Note: quit should not be appended/written into fname. Note: Your code should handle quit in any case such as QUIT, quit and QuiT. The function should have the following signature: def echo_to_file(fname, append)  Example 1: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, echo_to_file('cics110.txt', True)  and enter the following sequence of strings in the terminal: Enter line of text or &quot;quit&quot;: Hello, Enter line of text or &quot;quit&quot;: World! Enter line of text or &quot;quit&quot;: This Enter line of text or &quot;quit&quot;: is Enter line of text or &quot;quit&quot;: a python program Enter line of text or &quot;quit&quot;: quit  cics110.txt should contain the following: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110. Hello, World! This is a python program  Example 2: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, echo_to_file('cics110.txt', False)  and enter the following sequence of strings in the terminal: Enter line of text or &quot;quit&quot;: Hello, Enter line of text or &quot;quit&quot;: World! Enter line of text or &quot;quit&quot;: This Enter line of text or &quot;quit&quot;: is Enter line of text or &quot;quit&quot;: a python program Enter line of text or &quot;quit&quot;: quit  cics110.txt should contain the following: Hello, World! This is a python program  Hint: Store all inputs in a variable in Python and then use append_lines and write_lines appropriately. "},{"title":"2b. Implement print_file (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#2b-implement-print_file-1-point","content":"It can be important in some situations to display the content of a file. Your task is to implement a function that takes as argument the name of a file fname. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to read, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, the function should print (not return!) the content of the file if the file is non-empty. The function should have the following signature: def print_file(fname)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, print_file('cics110.txt')  you should get the following output: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  "},{"title":"2c. Implement copy_file (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#2c-implement-copy_file-1-point","content":"It can be important in some situations to duplicate the content from one file into another file. Your task is to implement a function that takes as arguments the names of two files: from_fname, the file whose content you need to copy, and to_fname, the file into which you should duplicate the content of the file from_fname. This function should read content from the file from_fname and write into the file to_fname. The function should have the following signature: def copy_file(from_name, to_fname)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  and another file temp.txt with the following contents: Kobi is an instructor. Jared is an instructor. Tim is the course chair.  If you run the following code statement, copy_file('cics110.txt', 'temp.txt')  then temp.txt should contain the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  and cics110.txt should remain unchanged. "},{"title":"2d. Implement erase_file (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#2d-implement-erase_file-1-point","content":"It can be important in some situations to remove all the content in a file. Your task is to implement a function that takes as arguments the name of a file fname. The function should then remove all the content in the file i.e. the file should be empty after a call to this function. If the file does not exist, the function should create an empty file. The function should have the following signature: def erase_file(fname)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, erase_file('cics110.txt')  then cics110.txt should be an empty file with no content. hint: If a file does not exist, then you are making a file. If a file does exist, then you are truncating the file's content. What mode for opening will allow for this logic to happen? "},{"title":"3. Implement file_info.py​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#3-implement-file_infopy","content":"Let's move on to some cool applications of files! In this problem, you will implement functions that will analyze the words and characters in a file and report cool statistics such as word counts and character counts. For the purpose of this problem, we make 222 assumptions: Every sentence ends with a .Sentences contain only words (all alphabetic characters) or numbers (all digits). Additionally, you will find the following useful for this problem: string.digits is the string '0123456789'.string.ascii_letters is the concatenation of 'abcdefghijklmnopqrstuvwxyz' and 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. You must import both of these from string module. "},{"title":"3a. Implement get_info (3 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#3a-implement-get_info-3-points","content":"Analyzing a file can help us understand the contents of the file better. In this problem, we will report some interesting file statistics. Your task is to implement a function that takes as argument the name of a file fname. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to read, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, the function should return a dictionary formatted as under reporting the following statistics: { lines: LINE_COUNT, sentences: SENTENCE_COUNT, words: WORD_COUNT, numbers: NUMBERS_COUNT, letters: LETTERS_COUNT, digits: DIGIT_COUNT }  where LINE_COUNT represents the total number of lines of text in the file, SENTENCE_COUNT represents the total number of sentences in the file, WORD_COUNT represents the total number of words in the file, NUMBERS_COUNT represents the total number of numbers in the file, LETTERS_COUNT represents the total number of alphabetic characters in the file, and DIGITS_COUNT represents the total number of digits in the file. The function should have the following signature: def get_info(fname)  Example: Assume a file cics110.txt with the following contents: CICS 110 is an introduction to computer programming and problem solving using computers. This course teaches you how problems in the real world can be solved computationally using programming constructs and data abstractions of a modern programming language. Concepts and techniques covered range from variables and expressions to logic and control flow to data structures and classes. We will also cover how to translate problems into a sequence of instructions as well as how to trace though and debug programs. No previous programming experience required. This is a 4 credit class. There are 6 sections being offered in Spring 2023.  If you run the following code statement, print(get_info('cics110.txt'))  then you should get the following output: { 'lines': 5, 'sentences': 7, 'words': 96, 'numbers': 4, 'letters': 520, 'digits': 9 }  Hint: You can use read_string from part 1 to read the contents of the file and store it in a variable, say text. To count the number of lines, you can get the length of the list returned by the .splitlines() string method. To count the number of sentences, you can simply count the occurrences of &quot;.&quot; (there is a .count() string method). You can then get a list of &quot;tokens&quot; (words and numbers) by taking text, replacing the periods (&quot;.&quot;)s with nothing &quot;&quot; (there is a .replace() string method), replacing the newlines (&quot;\\n&quot;) with spaces (&quot; &quot;), and splitting on the spaces (there is a .split() method). To count occurrences of words, numbers, characters, and digits, you can iterate over all words, maintaining and updating counters for each of these. You can identify if a character is a digit using string.digits. Likewise, you can identify if a character is a letter using string.ascii_letters. "},{"title":"3b. Implement get_info_files (2 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#3b-implement-get_info_files-2-points","content":"In the previous problem, we analyzed a single file for statistics such as sentence count, word count, etc. In this problem, we will analyze the same statistics for multiple files. Your task is to implement a function that takes as argument a list fname_list containing names of certain files. If a file in the list cannot be opened, it should be ignored (and an error message should be displayed, but if you're calling get_info from this function then you shouldn't need to reimplement the error message logic). This function should return a dictionary formatted as under reporting the following statistics: { FILE_1_NAME: { lines: LINE_COUNT, sentences: SENTENCE_COUNT, words: WORD_COUNT, numbers: NUMBERS_COUNT, letters: LETTERS_COUNT, digits: DIGIT_COUNT } FILE_2_NAME: { lines: LINE_COUNT, sentences: SENTENCE_COUNT, words: WORD_COUNT, numbers: NUMBERS_COUNT, letters: LETTERS_COUNT, digits: DIGIT_COUNT } ..... }  where LINE_COUNT represents the total number of lines of text in the file, SENTENCE_COUNT represents the total number of sentences in the file, WORD_COUNT represents the total number of words in the file, NUMBERS_COUNT represents the total number of numbers in the file, LETTERS_COUNT represents the total number of alphabetic characters in the file, and DIGITS_COUNT represents the total number of digits in the file, FILE_1_NAME refers to the name of the first file in the list, and so on. The function should have the following signature: def get_info_files(fname_list)  Example: Assume a file cics110.txt with the following contents: CICS 110 is an introduction to computer programming and problem solving using computers. This course teaches you how problems in the real world can be solved computationally using programming constructs and data abstractions of a modern programming language. Concepts and techniques covered range from variables and expressions to logic and control flow to data structures and classes. We will also cover how to translate problems into a sequence of instructions as well as how to trace though and debug programs. No previous programming experience required. This is a 4 credit class. There are 6 sections being offered in Spring 2023.  Assume another file temp.text with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, print(get_info_files(['cics110.txt', 'temp.txt']))  then you should get the following output: { 'cics110.txt': { 'lines': 5, 'sentences': 7, 'words': 96, 'numbers': 4, 'letters': 520, 'digits': 9 }, 'temp.txt': { 'lines': 4, 'sentences': 4, 'words': 26, 'numbers': 4, 'letters': 106, 'digits': 12 } }  hint: Iterate over the parameter list, call 3a., and add the filename and dictionary to the dictionary if the return of 3a is not None) "},{"title":"3c. Implement word_and_number_counts (2 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#3c-implement-word_and_number_counts-2-points","content":"Analyzing a file can help us understand the contents of the file better. In this problem, you will count the occurrences of words in a given file. Your task is to implement a function that takes as argument the name of a file fname. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to read, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, the function returns a dictionary that displays each word and number in the file as key and its count in the file as the value. The function should have the following signature: def word_and_number_counts(fname)  Note: 'HELLO' and 'hello' are the same words. To deal with this issue, convert the text into lowercase inside the function.  Note: You must strip off the . wherever present. Consider using .replace() to do so. Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, print(word_and_number_counts('cics110.txt'))  then you should get the following output: { 'cics': 4, '110': 4, 'students': 1, 'will': 1, 'succeed': 1, 'in': 1, 'their': 1, 'future': 1, 'endeavors': 1, 'allison': 1, 'is': 3, 'an': 1, 'instructor': 1, 'for': 3, 'manan': 1, 'a': 2, 'ta': 1, 'ben': 1, 'uca': 1 }  Notice that in context of this problem, 110 is considered to be a word and its occurrences are counted. That is, numbers are left in string form so the function is technically counting the occurrences of words and numbers. Hint: By now you probably know how to get a list of words after reading a file. If not, take a look at the hint in 3a. Once you have this list, iterate over all the words in this list, adding the word as a key to the dictionary with value 1 if the word is initially not present in the dictionary. Otherwise, if the word is present in the dictionary, increment the value by 1. This is similar to what you did in Lab 7. "},{"title":"3d. Implement word_and_number_counts_files (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#3d-implement-word_and_number_counts_files-1-point","content":"In the previous problem, we analyzed a single file for reporting word counts. In this problem, we will analyze the count of each unique word for multiple files. Your task is to implement a function that takes as argument a list fname_list containing names of certain files. This function returns a nested dictionary that displays the file name as the key and the dictionary representing word counts for that file (the dictionary you computed in 3c.) as the value. The function should have the following signature: def word_and_number_counts_files(fname)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110. Tim is the course chair. Students in this class are awesome.  and another file temp.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, print(word_and_number_counts_files(['temp.txt', 'cics110.txt']))  then you should get the following output: { 'temp.txt': { 'cics': 4, '110': 4, 'students': 1, 'will': 1, 'succeed': 1, 'in': 1, 'their': 1, 'future': 1, 'endeavors': 1, 'allison': 1, 'is': 3, 'an': 1, 'instructor': 1, 'for': 3, 'manan': 1, 'a': 2, 'ta': 1, 'ben': 1, 'uca': 1 } 'cics110.txt': { 'cics': 4, '110': 4, 'students': 2, 'will': 1, 'succeed': 1, 'in': 2, 'their': 1, 'future': 1, 'endeavors': 1, 'allison': 1, 'is': 4, 'an': 1, 'instructor': 1, 'for': 3, 'manan': 1, 'a': 2, 'ta': 1, 'ben': 1, 'uca': 1, 'tim': 1, 'the': 1, 'course': 1, 'chair': 1, 'this': 1, 'class': 1, 'are': 1, 'awesome': 1 } }  "},{"title":"3e. Implement letter_and_digit_counts (2 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#3e-implement-letter_and_digit_counts-2-points","content":"Analyzing a file can help us understand the contents of the file better. In this problem, will count the occurrences of characters in a given file. Your task is to implement a function that takes as argument the name of a file fname. If an exception occurs while opening the file, the function should display the informative error message Error occurred when opening FNAME to read, where FNAME should be replaced with the actual name of the file, and the function should then return None. If an exception does not occur while opening, the function returns a dictionary that displays each character in the file as key and its count in the file as the value. It should return None if the file is empty. The function should have the following signature: def letter_and_digit_counts(fname)  Note: 'HELLO' and 'hello' have the same characters. To deal with this issue, convert the text into lowercase inside the function.  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, print(letter_and_digit_counts('cics110.txt'))  then you should get the following output: { 'c': 12, 'i': 12, 's': 13, '1': 8, '0': 4, 't': 7, 'u': 6, 'd': 3, 'e': 8, 'n': 9, 'w': 1, 'l': 4, 'h': 1, 'r': 8, 'f': 4, 'a': 9, 'v': 1, 'o': 6, 'm': 1, 'b': 1 }  Hint: By now you probably know how to get a list of words after reading a file. If not, take a look at the hint in 3a. Once you have this list, iterate over all the words in this list character-by-character, adding the character as a key to the dictionary with value 1 if the word is initially not present in the dictionary. Otherwise, if the character is present in the dictionary, increment the value by 1. This is similar to what you did in Lab 7. Another way could be to split every word into characters and simply iterating over these characters maintaining the dictionary in the same way as mentioned above. "},{"title":"3f. Implement letter_and_digit_counts_files (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#3f-implement-letter_and_digit_counts_files-1-point","content":"In the previous problem, we analyzed a single file for reporting character counts. In this problem, we will analyze the count of each unique character for multiple files. Your task is to implement a function that takes as argument a list fname_list containing names of certain files. This function returns a nested dictionary that displays the file name as the key and the dictionary representing character counts for that file (the dictionary you computed in 3e.) as the value. The function should have the following signature: def letter_and_digit_counts_files(fname)  Example: Assume a file cics110.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110. Tim is the course chair. Students in this class are awesome.  and another file temp.txt with the following contents: CICS 110 students will succeed in their future endeavors. Allison is an instructor for CICS 110. Manan is a TA for CICS 110. Ben is a UCA for CICS 110.  If you run the following code statement, print(letter_and_digit_counts_files(['temp.txt', 'cics110.txt']))  then you should get the following output: { 'temp.txt': { 'c': 12, 'i': 12, 's': 13, '1': 8, '0': 4, 't': 7, 'u': 6, 'd': 3, 'e': 8, 'n': 9, 'w': 1, 'l': 4, 'h': 1, 'r': 8, 'f': 4, 'a': 9, 'v': 1, 'o': 6, 'm': 1, 'b': 1 }, 'cics110.txt': { 'c': 15, 'i': 17, 's': 21, '1': 8, '0': 4, 't': 12, 'u': 8, 'd': 4, 'e': 14, 'n': 11, 'w': 2, 'l': 5, 'h': 4, 'r': 11, 'f': 4, 'a': 13, 'v': 1, 'o': 8, 'm': 3, 'b': 1 } }  "},{"title":"4. Implement csv_parse.py​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#4-implement-csv_parsepy","content":"In this problem, you will learn how to parse a CSV file. A CSV file, short for Comma-Separated Values, is a plain text file that contains data in a tabular format, with each row representing a record and each column representing a field. The values in each field are separated by a comma. CSV files can be opened and edited by many different software applications, including spreadsheet programs like Microsoft Excel, and are commonly used for data storage, transfer, and analysis. Below is an example of students.csv. Each row represents a record for a different student. Each record has 12 values (separated by commas) that correspond to 12 different fields: student name, section, score1, score2, ..., score10. We will work with the following students.csv for this problem (note that the auto-grader will use a version of students.csv with more students and sections). Noa Marijus,A,91.4,82.53,86.52,84.7,81.69,84.11,86.29,91.63,92.42,94.7 Christa Maple,B,97.37,80.58,88.78,68.53,88.3,73.72,74.44,79.22,78.09,74.82 Laurelle Cecil,B,92.4,84.53,86.52,84.7,81.69,84.11,86.29,91.63,92.42,94.5 Ryanne Rusty,A,96.2,80.3,88.78,68.53,88.3,73.72,74.44,79.22,78.09,75.32  You will need to use the functions you implemented in basic_io.py here, so be sure to import basic_io at the top of csv_parse.py. "},{"title":"4a. Implement read_csv (2 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#4a-implement-read_csv-2-points","content":"In order to read a CSV file, we need to read its contents line-by-line. We already created a function that will read a file line-by-line (read_lines in basic_io.py) and we will use this function here. We also want to store the file's contents into a list such that each record of the CSV file is a dictionary element in this list. The function should have the following signature: def read_csv(fname)  fname is the filename (e.g., 'students.csv'). The function should call read_lines from basic_io.py and store the result into a string (let's call it lines). For each line in lines, you need to create a dictionary with the following key-value pairs: key = name, value = name of a student (this is always the 1st value in a record)key = section, value = section letter (this is always the 2nd value in a record)key = scores, value = list of 10 scores (this is always the 3rd to last values in a record and the values are floats)key = average, value = average of all scores, rounded to 3 decimal places (this is not a value in the CSV file; you need to calculate this) Your function should return the list of dictionaries. Example of returned list of dictionaries: [{'name': 'Noa Marijus', 'section': 'A', 'scores': [91.4, 82.53, 86.52, 84.7, 81.69, 84.11, 86.29, 91.63, 92.42, 94.7], 'average': 87.599}, {'name': 'Christa Maple', 'section': 'B', 'scores': [97.37, 80.58, 88.78, 68.53, 88.3, 73.72, 74.44, 79.22, 78.09, 74.82], 'average': 80.385}, {'name': 'Laurelle Cecil', 'section': 'B', 'scores': [92.4, 84.53, 86.52, 84.7, 81.69, 84.11, 86.29, 91.63, 92.42, 94.5], 'average': 87.879}, {'name': 'Ryanne Rusty', 'section': 'A', 'scores': [96.2, 80.3, 88.78, 68.53, 88.3, 73.72, 74.44, 79.22, 78.09, 75.32], 'average': 80.29}]  If read_lines returns None, then an error occurred when opening the file. It's best to catch this error with an if statement that simply returns None if lines is None. This check should happen before creating the dictionary. Hint: Since each record of the CSV is a comma-separated string, you can use .split(',') to split the string into a list. You can then index this list to retrieve specific values. For example, given the string txt = &quot;apple,banana,carrot,donut&quot;, I can split the string by calling txt.split(',') which will return [&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;, &quot;donut&quot;]. I can now get the 1st value by indexing the list at index 0: list[0]. Splitting and indexing can also be done in one line: txt.split(',')[0]. "},{"title":"4b. Implement write_csv (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#4b-implement-write_csv-1-point","content":"We want to write the contents of the CSV file to another file. We already created a function that will write to a file (write_lines in basic_io.py) and we will use this function here. The function should have the following signature: def write_csv(fname, student_list)  fname is the filename (e.g., 'output.txt') and student_list is the contents of the CSV file in a list data structure (i.e., the output of read_csv). For each dictionary in students_list, you need to create a string that contains the student name, section, and 10 scores with commas separating each value. That is, the string should be identical to one record in the original CSV file. Example of output.txt: Noa Marijus,A,91.4,82.53,86.52,84.7,81.69,84.11,86.29,91.63,92.42,94.7 Christa Maple,B,97.37,80.58,88.78,68.53,88.3,73.72,74.44,79.22,78.09,74.82 Laurelle Cecil,B,92.4,84.53,86.52,84.7,81.69,84.11,86.29,91.63,92.42,94.5 Ryanne Rusty,A,96.2,80.3,88.78,68.53,88.3,73.72,74.44,79.22,78.09,75.32  Since write_lines takes a list as the second parameter, we want to store each of these strings in a single list and pass this list to write_lines. Hint: Although it can be done, you are highly encouraged to NOT implement this function using only one line of code. Rather, it will be easier to tackle this problem using a loop (e.g., for student in student_list) and using variables for the multiple pieces (e.g., name = student['name']). For getting the scores to print in a comma-separated string, you can use python's map function to map the scores to a string, and then join the mapping into a string using a comma as a separator (e.g., ','.join(...)). "},{"title":"5. Implement csv_split.py​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#5-implement-csv_splitpy","content":"CSV files can hold a lot of data. For this reason, it is common to want to filter or split on values. In this problem, you will practice both filtering and splitting on section and average. We will continue to work with students.csv for this problem. You will need to use the functions you implemented in basic_io.py and csv_parse.py here, so be sure to import both at the top of csv_split.py. "},{"title":"5a. Implement filter_section (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#5a-implement-filter_section-1-point","content":"We want to be able to filter the CSV records such that only students of a specific section (e.g., section A) are shown. We can use list comprehensions to do this. The function should have the following signature: filter_section(student_info, section_string)  student_info is the list of all students returned by read_csv in csv_parse, and section_string is a string with the section name (e.g., &quot;A&quot;). Using list comprehensions, this function should return every record in which section is equal to section_string. Example: filter_section(csv_parse.read_csv(&quot;students.csv&quot;), &quot;A&quot;)  could return: [{'name': 'Noa Marijus', 'section': 'A', 'scores': [91.4, 82.53, 86.52, 84.7, 81.69, 84.11, 86.29, 91.63, 92.42, 94.7], 'average': 87.599}, {'name': 'Ryanne Rusty', 'section': 'A', 'scores': [96.2, 80.3, 88.78, 68.53, 88.3, 73.72, 74.44, 79.22, 78.09, 75.32], 'average': 80.29}]  "},{"title":"5b. Implement filter_average (1 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#5b-implement-filter_average-1-point","content":"Similar to filter_section, we want to be able to filter the CSV records such that only students with an average score within some threshold (e.g., 80 &lt;= average &lt; 90) are shown. The function should have the following signature: filter_average(student_info, min_inc, max_exc)  student_info is the list of all students returned by read_csv in csv_parse, min_inc is the minimum value of the threshold (it is inclusive), and max_exc is the maximum value of the threshold (it is exclusive). Using list comprehensions, this function should return every record in which min_inc &lt;= average &lt; max_exc. Example: filter_average(csv_parse.read_csv(&quot;students.csv&quot;), 80, 85)  could return: [{'name': 'Christa Maple', 'section': 'B', 'scores': [97.37, 80.58, 88.78, 68.53, 88.3, 73.72, 74.44, 79.22, 78.09, 74.82], 'average': 80.385}, {'name': 'Ryanne Rusty', 'section': 'A', 'scores': [96.2, 80.3, 88.78, 68.53, 88.3, 73.72, 74.44, 79.22, 78.09, 75.32], 'average': 80.29}]  "},{"title":"5c. Implement split_section (3 point)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#5c-implement-split_section-3-point","content":"Splitting refers to splitting the file into multiple, smaller files based on some criteria. We wish to split students.csv into multiple files, one for each section: students_section_A.csv and students_section_B.csv (note that the students.csv used by the auto-grader will have an unknown number of sections). Each file will contain only records for students belonging to each respective section. The function should have the following signature: def split_section(fname)  fname is the original filename (e.g., 'students.csv'). Your function should do the following in order: Read the CSV file by calling read_csv in csv_parse. Let's call the output of read_csv students.If read_csv returns None, then an error occurred when opening the file. It's best to catch this error with an if statement that simply returns None if students is None.Get a set of sections. DO NOT hardcode a set. Rather, use set comprehensions to find all sections in students. Let's call this set sections.For each section in sections, filter the students by section and usewrite_csv in csv_parseto write the contents to a file who's name is of the form FROMFILE_section_SECTION.csv, where FROMFILE is fname (the file we are splitting) and where SECTION is the actual section (e.g., students_section_A.csv). Example of students_section_A.csv: Noa Marijus,A,91.4,82.53,86.52,84.7,81.69,84.11,86.29,91.63,92.42,94.7 Ryanne Rusty,A,96.2,80.3,88.78,68.53,88.3,73.72,74.44,79.22,78.09,75.32  "},{"title":"5d. Implement split_average (2 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#5d-implement-split_average-2-points","content":"Similar to split_section, we wish to split students.csv into multiple files, one for each average score range: score 4: 85 &lt;= averagescore 3: 75 &lt;= average &lt; 85score 2: 60 &lt;= average &lt; 75score 1: average &lt; 60 The function should have the following signature: def split_average(fname)  fname is the original filename (e.g., 'students.csv'). You should follow the same steps as in split_section. Instead of a set of sections, however, you will need a dictionary of scores. You CAN hardcode this dictionary as follows: scores = {&quot;1&quot;: (-1,60), &quot;2&quot;: (60,75), &quot;3&quot;: (75,85), &quot;4&quot;: (85,101)}  The output file should have a name of the form FROMFILE_score_SCORE.csv, where FROMFILE is fname (the file we are splitting) and where SCORE is the score category (either 1, 2, 3, or 4). Example of students_score_4.csv: Noa Marijus,A,91.4,82.53,86.52,84.7,81.69,84.11,86.29,91.63,92.42,94.7 Laurelle Cecil,B,92.4,84.53,86.52,84.7,81.69,84.11,86.29,91.63,92.42,94.5  In the case that no students belong to a particular score category (e.g., in students.csv, there are no students that have a score of 1), you can do one of two things: (1) do not create a file for that score, or (2) create an empty file for that score category. *Hint: You'll want to use filter_average to help you find the the students who belong in each score category. "},{"title":"6. Implement csv_stats.py​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#6-implement-csv_statspy","content":"When working with data, it is common to calculate statistics (e.g., mean, min, max, range, standard deviation) on this data. In this problem, you will practice calculating these stats on the data as well as writing these stats to files. We will continue to work with students.csv for this problem. You will need to use the functions you implemented in basic_io.py, csv_parse.py, and csv_split here, so be sure to import all three at the top of csv_stats.py. Note: 6a and 6b are recommended helper functions that will not be tested by the auto-grader. You are encouraged to test them locally. "},{"title":"6a. Implement get_stats​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#6a-implement-get_stats","content":"The first thing we need to do is create a function that will calculate all of the stats we wish to work with. Given a list of numbers called num, we can calculate the mean, min, max, range, and standard deviation by using several built-in python functions: mean = sum(nums) / len(nums)min = min(nums)max = max(nums)range = max - minstd_dev = [(num-mean)**2 for num in nums])/len(nums))**(1/2) Write a function that returns these stats as a dictionary. The function should have the following signature: def get_stats(nums)  nums is a list of numbers. Example: get_stats([69.15, 85.71, 94.65, 93.49, 75.05])  should return: {'mean': 83.61, 'std_dev': 10.062516583837263, 'min': 69.15, 'max': 94.65, 'range': 25.5}  "},{"title":"6b. Implement get_assignment_stats​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#6b-implement-get_assignment_stats","content":"We will now create a function to extract the stats per a field/column of students.csv. More specifically, we will calculate the stats for 11 columns: each of the 10 score columns and the average column. The function should have the following signature: def get_assignment_stats(student_info)  student_info is the list of all students returned by read_csv in csv_parse. We can implement this function in three steps: Step 1: Map over student_info to create a list of score lists (let's call it scores_per_student). Each list in scores_per_student will contain the average value followed by the 10 score values (average must be at index 0, followed by score 1, score 2, ..., score 10). The length of scores_per_student should equal the length of student_info. Each list in scores_per_student should have a length of 11.Step 2: Transpose this list. Transposing a list of lists essentially means we are 'flipping' the data structure such that the rows become columns and the columns become rows. For example, if Step 1 creates 33 lists, each of length 11, inside scores_per_student, transposing scores_per_student will flip it such that there are 11 lists, each of length 33. You can transpose the list by creating a new list of 11 empty lists (let's call it scores_per_assignment) and looping over scores_per_student, appending values into scores_per_assignment (hint: think nested loops).Step 3: Map get_stats over scores_per_assignment and return this mapping. Example: get_assignment_stats(csv_parse.read_csv(&quot;students.csv&quot;))  should return: [{'mean': 84.03825, 'std_dev': 3.702226179949031, 'min': 80.29, 'max': 87.879, 'range': 7.588999999999999}, {'mean': 94.3425, 'std_dev': 2.502382614629505, 'min': 91.4, 'max': 97.37, 'range': 5.969999999999999}, {'mean': 81.985, 'std_dev': 1.7020061692015118, 'min': 80.3, 'max': 84.53, 'range': 4.230000000000004}, {'mean': 87.65, 'std_dev': 1.1300000000000026, 'min': 86.52, 'max': 88.78, 'range': 2.260000000000005}, {'mean': 76.61500000000001, 'std_dev': 8.085, 'min': 68.53, 'max': 84.7, 'range': 16.17}, {'mean': 84.995, 'std_dev': 3.3049999999999997, 'min': 81.69, 'max': 88.3, 'range': 6.609999999999999}, {'mean': 78.91499999999999, 'std_dev': 5.195, 'min': 73.72, 'max': 84.11, 'range': 10.39}, {'mean': 80.36500000000001, 'std_dev': 5.925000000000004, 'min': 74.44, 'max': 86.29, 'range': 11.850000000000009}, {'mean': 85.42500000000001, 'std_dev': 6.204999999999998, 'min': 79.22, 'max': 91.63, 'range': 12.409999999999997}, {'mean': 85.255, 'std_dev': 7.164999999999999, 'min': 78.09, 'max': 92.42, 'range': 14.329999999999998}, {'mean': 84.835, 'std_dev': 9.76685594242078, 'min': 74.82, 'max': 94.7, 'range': 19.88000000000001}]  "},{"title":"6c. Implement write_assignment_stats (3 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#6c-implement-write_assignment_stats-3-points","content":"We are now ready to write the stats for each assignment to a separate file. The function will look similar to split_section and split_average in csv_split, however we are outputting all stats to a single file called students_stats.csv. The function should have the following signature: def write_assignment_stats(fname)  fname is the original filename (e.g., 'students.csv'). Your function should do the following in order: Read the CSV file by calling read_csv in csv_parse. Let's call the output of read_csv students.If read_csv returns None, then an error occurred when opening the file. It's best to catch this error with an if statement that simply returns None if students is None.Get the average stats and assignment stats by calling get_assignment_stats.Output each dictionary of stats as a single line to a file who's name is of the form FROMFILE_stats.csv, where FROMFILE is fname. The stats should output in the following order: min, max, range, mean, and std_dev. The first line should be the stats for average, and the remaining lines should each be the stats for one of the assignments (in order). Thus, this file should have 11 lines. Example of the first 3 lines of students_stats.csv: 80.29,87.879,7.588999999999999,84.03825,3.702226179949031 91.4,97.37,5.969999999999999,94.3425,2.502382614629505 80.3,84.53,4.230000000000004,81.985,1.7020061692015118  "},{"title":"6d. Implement write_section_assignment_stats (3 points)​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#6d-implement-write_section_assignment_stats-3-points","content":"Similar to write_assginment_stats, we will write the assignment stats to a separate file. This time, we will write to multiple files, namely one for each section. Note that the input file (e.g., students.csv) used by the auto-grader will have an unknown number of sections. The function should have the following signature: def write_section_assignment_stats(fname)  fname is the original filename (e.g., 'students.csv'). Your function should be similar to write_assginment_stats. However, you should loop through a set of sections (as in split_section) and only include those records with a matching section letter in your stats calculation (hint: Use filter_section from csv_split). The stats from each section should be written to a file who's name is of the fromFROMFILE_section_SECTION_stats.csv, where FROMFILE is fname and where SECTION is the actual section. Each output file should still have 11 lines. Example of the first 3 lines of students_section_A_stats.csv: 80.29,87.599,7.3089999999999975,83.9445,3.6544999999999987 91.4,96.2,4.799999999999997,93.80000000000001,2.3999999999999986 80.3,82.53,2.230000000000004,81.41499999999999,1.115000000000002  "},{"title":"Grading Scale​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#grading-scale","content":"Note that points may be obtained from anywhere, you do not need to try to complete work in any particular order. There is also an abundance of possible points to obtain, giving you options in what you want to work on in order to get your total points within the desired range. "},{"title":"1: Below Standards: 0-5 points​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#1-below-standards-0-5-points","content":""},{"title":"2: Approaching Standards: 6-11 points​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#2-approaching-standards-6-11-points","content":""},{"title":"3: Meeting Standards: 12-17 points​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#3-meeting-standards-12-17-points","content":""},{"title":"4: Exceeding Standards: 18+ points​","type":1,"pageTitle":"File Handling","url":"/main/assignments/files#4-exceeding-standards-18-points","content":""},{"title":"Functions and Booleans","type":0,"sectionRef":"#","url":"/main/assignments/functions-booleans","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#about","content":"The aim of this homework assignment is to practice writing functions and working with booleans. As our skillset continues to expand, you should keep in mind that programming is a fairly cumulative process and as such you would want to refresh concepts introduced so far to succeed in this assignment. You may find this guide on functions useful as a reference. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#learning-objectives","content":"Practice defining functions.Practice function compositions.Practice boolean operations.Sanity check code using assert. "},{"title":"Estimated Size​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#estimated-size","content":"This assignment requires you to implement 5 Python files. Each file will have 4 to 6 functions to implement.Each function can be reasonably implemented in 1 - 5 lines of code.Many functions have simple computations, similar to the first assignment.Some functions require you to use other functions implemented by you in the same file. "},{"title":"Assignment​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#assignment","content":""},{"title":"0. Setup​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#0-setup","content":"Make a folder on your computer and open it in VSCode. You must create five files in this folder. Make sure that you do not rename any of these files. logic.pyfun_math.pyunits.pylines.pyquadratic.py Remember that for every file you need to have comments indicating the authors at the, for example: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  The # Author/# Authors, # Email/# Emails, and # Spire ID/# Spire IDs are the only really necesary formating detail. Some copying and pasting here will save you some time and sanity. Note that these details are necessary for the autograder to recognize your solution. "},{"title":"1. Implement logic.py​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#1-implement-logicpy","content":"This problem is a gentle introduction to boolean algebra, a branch of algebra in which computations are expressed in terms of True and False instead of numbers. Boolean logic is a key ingredient in all programming languages. Remember that at the most basic level, a computer is a machine that can understand only two states: ON (True) and OFF(False). Therefore, boolean algebra can be used to represent computations. Similar to addition, subtraction, multiplication and division, boolean algebra has its own set of operations. This problem invites you to explore these operations and implement them. The three most fundamental boolean operations that you will need to use in this assignment are described below: and: Given two booleans A and B, A and B is True if and only if both A and B are True and False otherwise. The truth table for and is described below for your reference. A\tB\tA and BTrue\tTrue\tTrue True\tFalse\tFalse False\tTrue\tFalse False\tFalse\tFalse or: Given two booleans A and B, A or B is True if either or both of A and B are True and False only when both A and B are False. The truth table for or is described below for your reference. A\tB\tA or BTrue\tTrue\tTrue True\tFalse\tTrue False\tTrue\tTrue False\tFalse\tFalse not: Given a boolean A, not A is True if A is False and False if A is True. The truth table for not is described below for your reference. A\tNot ATrue\tFalse False\tFalse If you revisit Lecture 5, you will notice that Python comes with and, or and not operators. In fact, these are all what you really need for this problem! There are several other complex boolean operations in boolean algebra. Interestingly, many of those operations can be constructed using and, or and not. In this problem, we provide to you descriptions of certain boolean operations. Your task is to implement the specified boolean operations using any combination of and, or and not, using one or more of these operations. "},{"title":"1a. Implement NAND (1 point)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#1a-implement-nand-1-point","content":"NAND is an operation that takes as input two booleans A and B and returns False only if both A and B are True. The truth table for NAND is described below for your reference. A\tB\tA nand BTrue\tTrue\tFalse True\tFalse\tTrue False\tTrue\tTrue False\tFalse\tTrue Your task is to implement a function with the following signature: def nand(a:bool, b:bool) -&gt; bool  This function should take as input two booleans a and b and return the value of a nand b. Example: nand(True, True) # This should return False nand(False, True) # This should return True  "},{"title":"1b. Implement IMPLIES (1 point)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#1b-implement-implies-1-point","content":"Implication is an operation that takes as input two booleans A and B and returns False only when A is True and B is False and False otherwise. The truth table for IMPLIES is described below for your reference. A\tB\tA implies BTrue\tTrue\tTrue True\tFalse\tFalse False\tTrue\tTrue False\tFalse\tTrue Your task is to implement a function with the following signature: def implies(a:bool, b:bool) -&gt; bool  This function should take as input two booleans a and b and return the value of a implies b. Example: implies(True, True) # This should return True implies(True, False) # This should return False  "},{"title":"1c. Implement IFF (1 point)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#1c-implement-iff-1-point","content":"If and only if (Iff) is an operation that takes as input two booleans A and B and returns True only when A and B are either both True or both False and False otherwise. The truth table for IFF is described below for your reference. A\tB\tA iff BTrue\tTrue\tTrue True\tFalse\tFalse False\tTrue\tFalse False\tFalse\tTrue Your task is to implement a function with the following signature: def iff(a:bool, b:bool) -&gt; bool  This function should take as input two booleans a and b and return the value of a iff b. Example: iff(True, True) # This should return True iff(True, False) # This should return False  "},{"title":"1d. Implement XOR (1 point)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#1d-implement-xor-1-point","content":"Exclusive or (xor) is an operation that takes as input two booleans A and B and returns False when A and B are either both True or both False and True otherwise. The truth table for XOR is described below for your reference. A\tB\tA xor BTrue\tTrue\tFalse True\tFalse\tTrue False\tTrue\tTrue False\tFalse\tFalse Your task is to implement a function with the following signature: def xor(a:bool, b:bool) -&gt; bool  This function should take as input two booleans a and b and return the value of a xor b. Example: xor(True, True) # This should return False xor(True, False) # This should return True  "},{"title":"2. Implement fun_math.py​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#2-implement-fun_mathpy","content":"In this problem, you will use functions to perform some simple mathematical computations. Any mathematical background or information that you may need is provided to you. "},{"title":"2a. Generate Cullen Numbers (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#2a-generate-cullen-numbers-2-points","content":"Cullen numbers are integers of the form n⋅2n+1n \\cdot 2^n + 1n⋅2n+1 where nnn is an integer. Your task is to implement a function with the following signature: def cullen(n:int) -&gt; int  The function should take as input an integer n and return the corresponding Cullen Number. Example: cullen(1) # This should return 3 cullen(5) # This should return 161  "},{"title":"2b. Generate Woodall Numbers (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#2b-generate-woodall-numbers-2-points","content":"Woodall numbers are integers of the form n⋅2n−1n \\cdot 2^n - 1n⋅2n−1 where nnn is an integer. Your task is to implement a function with the following signature: def woodall(n:int) -&gt; int  The function should take as input an integer n and return the corresponding Woodall Number. Example: woodall(1) # This should return 1 woodall(5) # This should return 159  "},{"title":"2c. Generate Fermat Numbers (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#2c-generate-fermat-numbers-2-points","content":"Fermat Numbers are integers of the form 22n+12^{2^n} + 122n+1 where nnn is an integer. Your task is to implement a function with the following signature: def fermat(n:int) -&gt; int  The function should take as input an integer n and return the corresponding Fermat Number. Example: fermat(1) # This should return 5 fermat(2) # This should return 17  "},{"title":"2d. Divisibility (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#2d-divisibility-2-points","content":"An integer a is said be divisible by another integer b if a when divided by b leaves no remainder. For instance, 121212 is divisible by 333 but not by 555. Your task is to implement a function with the following signature: def divides_evenly(dividend:int, divisor:int) -&gt; bool  The function should take as input two integers, the dividend and the divisor and returns whether the dividend is divisible by the divisor or not. Example: divides_evenly(10, 5) # This should return True divides_evenly(10, 3) # This should return False  "},{"title":"2e. Square Numbers (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#2e-square-numbers-3-points","content":"A square number or perfect square is an integer that is the product of some integer with itself. For instance, 999 is a square number since 32=93^2 = 932=9 but 555 is not. Your task is to implement a function with the following signature: def is_square(n:int) -&gt; bool  The function should take as input an integer n and returns whether the n is a square number or not. Example: is_square(100) # This should return True is_square(97) # This should return False  "},{"title":"3. Implement units.py​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3-implement-unitspy","content":"Do you remember fluid unit conversions from middle school? If not, here's a quick recap: 1 US fluid ounce = 8 US fluid drams 1 US liquid quart = 32 US fluid ounces 1 US liquid gallon = 4 US liquid quarts  In this problem, you will implement functions to convert fluid quantities from one unit to another. All the conversion factors that you need have been specified above for your reference. This problem will demonstrate how you can use functions to break a complex problem into smaller sub-problems. "},{"title":"3a. Convert ounces to drams (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3a-convert-ounces-to-drams-2-points","content":"Your task is to implement a function with the following signature: def ounces_to_drams(ounces:float) -&gt; float  The function should take as input a float ounces and return the corresponding quantity in drams. Example: ounces_to_drams(8) # This should return 64 ounces_to_drams(2.5) # This should return 20  "},{"title":"3b. Convert drams to ounces (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3b-convert-drams-to-ounces-2-points","content":"Your task is to implement a function with the following signature: def drams_to_ounces(drams:float) -&gt; float  The function should take as input a float drams and return the corresponding quantity in ounces. Example: drams_to_ounces(8) # This should return 1 drams_to_ounces(120.84) # This should return 15.105  "},{"title":"3c. Convert quarts to ounces (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3c-convert-quarts-to-ounces-2-points","content":"Your task is to implement a function with the following signature: def quarts_to_ounces(quarts:float) -&gt; float  The function should take as input a float quarts and return the corresponding quantity in ounces. Example: quarts_to_ounces(8) # This should return 256 quarts_to_ounces(2.5) # This should return 80  "},{"title":"3d. Convert ounces to quarts (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3d-convert-ounces-to-quarts-2-points","content":"Your task is to implement a function with the following signature: def ounces_to_quarts(ounces:float) -&gt; float  The function should take as input a float ounces and return the corresponding quantity in quarts. Example: ounces_to_quarts(64) # This should return 2 ounces_to_quarts(120.84) # This should return 3.77625  "},{"title":"3e. Convert gallons to quarts (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3e-convert-gallons-to-quarts-2-points","content":"Your task is to implement a function with the following signature: def gallons_to_quarts(gallons:float) -&gt; float  The function should take as input a float gallons and return the corresponding quantity in quarts. Example: gallons_to_quarts(64) # This should return 256 gallons_to_quarts(120.84) # This should return 483.36  "},{"title":"3f. Convert quarts to gallons (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3f-convert-quarts-to-gallons-2-points","content":"Your task is to implement a function with the following signature: def quarts_to_gallons(quarts:float) -&gt; float  The function should take as input a float quarts and return the corresponding quantity in gallons. Example: quarts_to_gallons(72) # This should return 18 quarts_to_gallons(120.84) # This should return 30.21  "},{"title":"3g. Convert gallons to drams (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3g-convert-gallons-to-drams-2-points","content":"Your task is to implement a function with the following signature: def gallons_to_drams(gallons:float) -&gt; float  The function should take as input a float gallons and return the corresponding quantity in drams. Example: gallons_to_drams(12) # This should return 12288 gallons_to_drams(0.078) # This should return 79.872  Hint: Re-use the functions in 3a. - 3f. "},{"title":"3h. Convert drams to gallons (2 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3h-convert-drams-to-gallons-2-points","content":"Your task is to implement a function with the following signature: def drams_to_gallons(drams:float) -&gt; float  The function should take as input a float drams and return the corresponding quantity in gallons. Example: drams_to_gallons(250) # This should return 0.244141 drams_to_gallons(2999) # This should return 2.928711  Hint: Re-use the functions in 3a. - 3f. "},{"title":"4. Implement lines.py​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#4-implement-linespy","content":"In this problem, you will write functions to characterize lines and find the point of intersection of two lines if it exists. Let's consider a two-dimensional space. Given two lines: y=m1x+b1y = m_1x + b_1y=m1​x+b1​ y=m2x+b2y = m_2x + b_2y=m2​x+b2​ three possibilities may arise: The two lines are the same i.e. they are coincidentThe two lines are parallelThe two lines intersect at a unique point All the necessary mathematical background you may need is provided below. "},{"title":"4a. Parallel Lines (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#4a-parallel-lines-3-points","content":"The two lines are parallel if m1=m2m_1 = m_2m1​=m2​ and b1≠b2b_1 \\neq b_2b1​=b2​. Your task is to implement a function with the following signature: def are_parallel(m1:float, b1:float, m2:float, b2:float) -&gt; bool  The function take as argument four floats m1, m2, b1, b2 as described above and returns whether the two lines defined by the specified parameters are parallel or not. Example: are_parallel(0.75, 1, 0.75, 2) # This should return True are_parallel(1, 2.5, 3.5, 2.5) # This should return False  "},{"title":"4b. Coincident Lines (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#4b-coincident-lines-3-points","content":"The two lines are the same (coincident) if m1=m2m_1 = m_2m1​=m2​ and b1=b2b_1 = b_2b1​=b2​. Your task is to implement a function with the following signature: def are_same(m1:float, b1:float, m2:float, b2:float) -&gt; bool  The function take as argument four floats m1, m2, b1, b2 as described above and returns whether the two lines defined by the specified parameters are coincident or not. Example: are_same(0.75, 1, 0.75, 1) # This should return True are_same(0.75, 1, 0.75, 2) # This should return False  "},{"title":"4c. Lines with Unique Intersection (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#4c-lines-with-unique-intersection-3-points","content":"The two lines intersect at a unique point if m1≠m2m_1 \\neq m_2m1​=m2​. Your task is to implement a function with the following signature: def have_unique_intersection(m1:float, b1:float, m2:float, b2:float) -&gt; bool  The function take as argument four floats m1, m2, b1, b2 as described above and returns whether the two lines defined by the specified parameters intersect at a unique point or not. Example: have_unique_intersection(1, 2.5, 3.5, 2.5) # This should return True have_unique_intersection(0.75, 2, 0.75, 4) # This should return False have_unique_intersection(0.75, 2, 0.75, 2) # This should return False  "},{"title":"4d. Intersecting Lines (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#4d-intersecting-lines-3-points","content":"Two lines are said to intersect either if they have a unique intersection point or they are coincident. Your task is to implement a function with the following signature: def have_intersection(m1:float, b1:float, m2:float, b2:float) -&gt; bool  The function take as argument four floats m1, m2, b1, b2 as described above and returns whether the two lines defined by the specified parameters intersect or not. Example: have_intersection(1, 2.5, 3.5, 2.5) # This should return True have_intersection(0.75, 1, 0.75, 1) # This should return True have_intersection(0.75, 2, 0.75, 4) # This should return False  "},{"title":"4e. Point of intersection​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#4e-point-of-intersection","content":"For two lines that have a unique intersecting point, we can easily determine this point. Since we are working with lines in a two dimensional plane, this point is an ordered pair of the form (x,y)(x,y)(x,y). "},{"title":"Part I: Determining the xxx coordinate (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#part-i-determining-the-x-coordinate-3-points","content":"A well established result states that x=−(b1−b2)m1−m2x = -\\frac{(b_1 - b_2)}{m_1 - m_2}x=−m1​−m2​(b1​−b2​)​. Your task is to implement a function with the following signature: def x_intersect(m1:float, b1:float, m2:float, b2:float) -&gt; float  The function takes as arguments four floats m1, m2, b1, b2 as described above and returns the x-coordinate of the point of intersection. The function should only return an output if the lines specified have a unique point of intersection, otherwise give an error. Hint: For the error, use an assert statement with one of the functions 4a. - 4d. Example: x_intersect(1, 2.5, 3.5, 2.5) # This should return 0 x_intersect(3.5, 2.5, 3.5, 7.5) # This should give an ERROR! x_intersect(3.5, 2.5, 3.5, 2.5) # This should give an ERROR!  "},{"title":"Part II: Determining the yyy coordinate (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#part-ii-determining-the-y-coordinate-3-points","content":"Notice that once we determine xxx, we can use direct substitution into the equations of the lines to calculate yyy. Therefore, given xxx, we can calculate y as either of the following: y=m1x+b1y = m_1x + b_1y=m1​x+b1​ y=m2x+b2y = m_2x + b_2y=m2​x+b2​ Your task is to implement a function with the following signature: def y_intersect(m1:float, b1:float, m2:float, b2:float) -&gt; float  The function takes as arguments four floats m1, m2, b1, b2 as described above and returns the y-coordinate of the point of intersection. The function should evaluate yyy using the two equations specified above, verify that both the equations yield the same value of yyy and return an output if the lines specified have a unique point of intersection, otherwise give an error. Hint: For the error, use an assert statement with one of the functions 4a. - 4d. Example: y_intersect(1, 2.5, 3.5, 2.5) # This should return 2.5 y_intersect(3.5, 2.5, 3.5, 7.5) # This should give an ERROR! y_intersect(3.5, 2.5, 3.5, 2.5) # This should give an ERROR!  "},{"title":"5. Implement quadratic.py​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#5-implement-quadraticpy","content":"In this problem, we revisit the problem of solving quadratic equations from Homework 1. You will be writing functions to characterize the solutions of quadratic equations in the standard form ax2+bx+c=0ax^2 + bx + c = 0ax2+bx+c=0 and find real solutions, if they exist. "},{"title":"5a. Determining the Discriminant (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#5a-determining-the-discriminant-3-points","content":"The discriminant of a quadratic equation is the quantity d=b2−4acd = b^2-4acd=b2−4ac. The discriminant determines the nature of roots of a quadratic equation. Your task is to implement a function with the following signature: def discriminant(a:float, b:float, c:float) -&gt; float  The function takes as arguments three floats a, b, c, as described above and returns the discriminant of the quadratic equation described by the specified parameters. Example: discriminant(6, 10, -1) # This should return 124 discriminant(1, -3, 4) # This should return -7  "},{"title":"5b. Check for the existence of real roots (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#5b-check-for-the-existence-of-real-roots-3-points","content":"A well known result in mathematics states that a quadratic equation has real roots if and only if the discriminant is strictly greater than 0 i.e. d≥0d \\geq 0d≥0. Your task is to implement a function with the following signature: def has_real_root(a:float, b:float, c:float) -&gt; bool  The function takes as arguments three floats a, b, c, as described above and returns the if the quadratic equation described by the specified parameters has real roots or not. Example: has_real_root(6, 10, -1) # This should return True has_real_root(1, -3, 4) # This should return False  Hint: Reuse 5a. to calculate the discriminant. "},{"title":"5c. Calculate a real root (3 points)​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#5c-calculate-a-real-root-3-points","content":"Using the discriminant, we can write the roots of the quadratic equation as x1=−b+d2ax_1 = \\frac{-b + \\sqrt{d}}{2a}x1​=2a−b+d​​ and x2=−b−d2ax_2 = \\frac{-b - \\sqrt{d}}{2a}x2​=2a−b−d​​. Your final task (Yay!) is to implement a function with the following signature: def get_any_real_root(a:float, b:float, c:float) -&gt; float  The function takes as arguments three floats a, b, c, as described above and returns any one root of the the quadratic equation described by the specified parameters. It should return a root only if the equation specified by the parameters has real roots otherwise should give an error. Hint: For the error, use an assert statement with one of the functions 5a. - 5b. Example: get_any_real_root(1, -7, 10) # This should return 2 or 5  "},{"title":"Grading Scale​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#grading-scale","content":"Note that points may be obtained from anywhere, you do not need to try or complete work in any particular order (except where a function depends on another function). "},{"title":"1: Below Standards: 0-15 points​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#1-below-standards-0-15-points","content":"This is the number of points that demonstrates proficiency equivalent to completing logic.py and fun_math.py. "},{"title":"2: Approaching Standards: 16-31 points​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#2-approaching-standards-16-31-points","content":"This is the number of points that demonstrates proficiency equivalent to completing through units.py. "},{"title":"3: Meeting Standards: 32-49 points​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#3-meeting-standards-32-49-points","content":"This is the number of points that demonstrates proficiency equivalent to completing through lines.py. "},{"title":"4: Exceeding Standards: 50-58 points​","type":1,"pageTitle":"Functions and Booleans","url":"/main/assignments/functions-booleans#4-exceeding-standards-50-58-points","content":"This is the number of points that demonstrates proficiency equivalent to completing almost the entire assignment. "},{"title":"Looping","type":0,"sectionRef":"#","url":"/main/assignments/looping","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#about","content":"The aim of this homework assignment is to practice loops. The focus is on getting comfortable working with for and while loops. Even though we implement functions in Python in this class, the skills developed in this assignment will be relevant for any modern programming language. In computer programming, a loop is a sequence of instructions that is continually repeated until a certain condition is reached. Along with branching, looping is one of the most important constructs in programming. Programs generally run sequentially, starting from the first instruction and then moving to the next instruction. Looping is used to introduce repetitive behaviour in more complex ways. Once again, be aware that you will be required to use the knowledge and skills you have acquired so far to succeed in this assignment. This includes defining functions, evaluating boolean expressions, evaluating arithmetic expressions, taking user input among others, working with f-strings, working with sequence types including lists and strings, and branching. You may want to review them before you proceed. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#learning-objectives","content":"Practice loops (for, while).Implement some simple applications using skills acquired so far. "},{"title":"Estimated Size​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#estimated-size","content":"This assignment requires you to implement 555 Python files. Each file will have a few functions to implement.Each function can be reasonably implemented in at most 10−1510 - 1510−15 lines of code, though you would find yourself attempting most in &lt;10&lt; 10&lt;10 lines of code.Many functions have simple computations, similar to the previous assignments.Some functions require you to use other functions implemented by you in the same file.Some functions may require you to create new variables, lists, strings, etc. "},{"title":"Note​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#note","content":"You do not need to use any assert statements in this assignment.You do not need to do any type checking, sanity checking or input validity checking in this assignment. "},{"title":"0. Setup​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#0-setup","content":"Make a folder on your computer and open it in VSCode. You must create five files in this folder. Make sure that you do not rename any of these files. loops.pyfizzbuzz.pyloop_math.pyguess_number.pytic-tac-toe.py Remember that for every file you need to have comments indicating the authors at the top, for example: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  The # Author/# Authors, # Email/# Emails, and # Spire ID/# Spire IDs are the only really necessary formatting details. Some copying and pasting here will save you some time and sanity. Note that these details are necessary for the auto-grader to recognize your solution. "},{"title":"1. Implement loops.py​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#1-implement-loopspy","content":"Loops can be tricky to work with! This problem is intended to be a gentle introduction to looping. In this problem, you will implement some simple functions that will help you get comfortable with loops. "},{"title":"1a. Implement print_1_to_n_while (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#1a-implement-print_1_to_n_while-1-point","content":"Your task is to implement a function that prints (not return!) the numbers 111 through nnn (both inclusive) where nnn is the argument passed by the user using a while loop. DO NOT use a for loop for this problem. The function should have the following signature: def print_1_to_n_while(n)  Examples: print_1_to_n_while(4)  1 2 3 4  print_1_to_n_while(6)  1 2 3 4 5 6  "},{"title":"1b. Implement print_1_to_n_for (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#1b-implement-print_1_to_n_for-1-point","content":"Your task is to implement a function that prints (not return!) the numbers 111 through nnn (both inclusive) where nnn is the argument passed by the user using a for loop. DO NOT use a while loop for this problem. The function should have the following signature: def print_1_to_n_for(n)  Examples: print_1_to_n_for(4)  1 2 3 4  print_1_to_n_for(6)  1 2 3 4 5 6  "},{"title":"1c. Implement echo_until_quit (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#1c-implement-echo_until_quit-1-point","content":"Your task is to implement a function with the following signature: def echo_until_quit():  This function should repeatedly ask the user for input and print (not return!) the specified input until the user enters quit (your code should work for uppercase, lowercase or mixed case) when the program ends. Note that quit should not be printed whenever it is provided as input. Examples: echo_until_quit()  The terminal interaction could look like this: Please enter a word: Manan Manan Please enter a word: Jared Jared Please enter a word: Kobi Kobi Please enter a word: Allison Allison Please enter a word: quit  "},{"title":"1d. Implement multiple_words (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#1d-implement-multiple_words-1-point","content":"Your task is to implement a function with the following signature: def multiple_words(s)  This function should take as argument a string s and returns True if the string is comprised of multiple words and False otherwise. Here, a word is any sequence of characters that does not include a space. Example: multiple_words('Hello') # This should return False multiple_words('Hello, World!') # This should return True multiple_words(&quot;it's&quot;) # This should return False multiple_words('misspelledd woords arre stilll woords') # This should return True  Hint: Consider using .split() function to do this without using a loop "},{"title":"1e. Implement count_multiple_word_titles (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#1e-implement-count_multiple_word_titles-1-point","content":"Your task is to implement a function with the following signature: def count_multiple_word_titles(titles)  This function should take as argument a list titles that contains book titles and it should return the number of book titles that have more than one word. Example: count_multiple_word_titles([&quot;Ulysses&quot;, &quot;Don Quixote&quot;, &quot;The Great Gatsby&quot;]) # This should return 2 count_multiple_word_titles([&quot;Ulysses&quot;, &quot;Don Quixote&quot;, &quot;Hamley&quot;, &quot;Hamlet&quot;]) # This should return 1  Hint: Use 1d. "},{"title":"2. Implement fizzbuzz.py​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#2-implement-fizzbuzzpy","content":"Have you heard of LeetCode? LeetCode is a social platform for preparing technical interviews for companies in the IT industry. LeetCode-style problems are prevalent in coding interviews at companies such as Google, Amazon and Meta. In this problem, we will introduce you to one such problem to get you started with your interview preparation! "},{"title":"2a. Implement fizzbuzz (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#2a-implement-fizzbuzz-1-point","content":"Your task is to implement a function with the following signature: def fizzbuzz(n)  This function takes as argument an integer n. If n is divisible by 333, it should return (not print!) &quot;fizz&quot;. If n is divisible by 555, it should return (not print!) &quot;buzz&quot;. If n is divisible by 333 and 555, it should return (not print!) &quot;fizzbuzz&quot;. Otherwise, it should simply return (not print!) n. Example: fizzbuzz(6) # This should return &quot;fizz&quot; fizzbuzz(5) # This should return &quot;buzz&quot; fizzbuzz(15) # This should return &quot;fizzbuzz&quot; fizzbuzz(1) # This should return 1  "},{"title":"2b. Implement first_n_fizzbuzz (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#2b-implement-first_n_fizzbuzz-1-point","content":"Your task is to implement a function with the following signature: def first_n_fizzbuzz(n)  This function takes as argument an integer n. It should return a list comprising of outputs obtained by calling fizzbuzz(n) from 2a.2a.2a. on the numbers 111, 222, …\\dots… nnn. Example: first_n_fizzbuzz(6) # This should return [1, 2, 'fizz', 4, 'buzz', 'fizz'] first_n_fizzbuzz(8) # This should return [1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8]  "},{"title":"3. Implement loop_math.py​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#3-implement-loop_mathpy","content":"In this problem, you will implement some mathematical formulations. Any background you may need is provided for your reference. "},{"title":"3a. Implement is_prime (2 points)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#3a-implement-is_prime-2-points","content":"A prime number is a whole number greater than 111 that is not a product of two smaller whole numbers. For example, 555 is prime because the only ways of writing it as a product, 1×51 \\times 51×5 or 5×15 \\times 15×1, involve 555 itself. However, 444 is not prime because it is a product 2×22 \\times 22×2 in which both numbers are smaller than 444. A simple but slow method to check if a given number nnn is prime is to test whether nnn is a multiple of any integer between 222 and n\\sqrt {n}n​. For instance, if we want to check if 999 is prime, it is sufficient to check if 999 is divisible by 222 and 333. Since 999 is divisible by 333, 999 is not a prime. Likewise, we can check if 171717 is a prime by checking if it is divisible by 222, 333, and 444. Since 171717 is divisible by none of these, it is a prime. Your task is to implement a function with the following signature: def is_prime(n)  The function takes a positive whole number n and returns whether n is a prime or not using the method described above. Example: is_prime(9) # This should return False is_prime(17) # This should return True  Hint: Run a loop from 222 to n\\sqrt{n}n​ and check if n is divisible by any of these. If that is case, return False. Otherwise, return True. Hint: n\\sqrt{n}n​ may always not be an integer! math.ceil() function from math will be helpful to mitigate this issue. Add the following statement to the top of your file (below the author comments) to import math: import math  "},{"title":"3b. Implement first_n_primes (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#3b-implement-first_n_primes-1-point","content":"Your task is to implement a function with the following signature: def first_n_primes(n)  The function takes an integer n and returns the first n prime numbers as a list. Example: first_n_primes(4) # This should return [2, 3, 5, 7] first_n_primes(6) # This should return [2, 3, 5, 7, 11, 13]  Hint: Starting with 222, check if each number is a prime number using 3a. and append it to a list. Return this list when the number of elements in this list is equal to n. "},{"title":"3c. Implement next_collatz_number (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#3c-implement-next_collatz_number-1-point","content":"Given a positive integer, the next Collatz number is defined by two very simple rules: If the integer is even, divide it by two.If the integer is odd, triple it and add one. Your task is to implement a function with the following signature: def next_collatz_number(n)  The function takes a positive integer n and returns the nnn-th Collatz number. Example: next_collatz_number(10) # This should return 5 next_collatz_number(17) # This should return 52  "},{"title":"3d. Implement collatz_sequence (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#3d-implement-collatz_sequence-1-point","content":"A famous unsolved conjecture in math says that if you start with any positive integer and form a sequence by performing the two operations defined in the previous problem repeatedly taking the result at each step as the input at the next, you will eventually reach 111. For example: Starting with 121212, you first get 12/2=612/2 = 612/2=6 , then 6/2=36/2 = 36/2=3, then 3(3)+1=103(3) + 1 = 103(3)+1=10, then 10/2=510/2 = 510/2=5, then 3(5)+1=163(5) + 1 = 163(5)+1=16, then 16/2=816/2 = 816/2=8, then 8/2=48/2 = 48/2=4, then 4/2=24/2 = 24/2=2 and finally 2/2=12/2 = 12/2=1. So, the Collatz sequence starting with 121212 is 121212, 666, 333, 101010, 555, 161616, 888, 444, 222, 111. Your task is to implement a function with the following signature: def collatz_sequence(n)  The function takes a positive integer n and returns the Collatz sequence starting at n as a list. Example: collatz_sequence(3) # This should return [3, 10, 5, 16, 8, 4, 2, 1] collatz_sequence(7) # This should return [7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]  Hint: Starting at nnn, repeatedly call the next_collatz_number on the number returned till you reach 111 and store this sequence in a list. Return this list "},{"title":"3e. Implement first_n_collatz_sequences (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#3e-implement-first_n_collatz_sequences-1-point","content":"Your task is to implement a function with the following signature: def first_n_collatz_sequences(n)  The function takes a positive integer n and returns a list that stores the Collatz sequences starting at 111, 222, …\\dots…, nnn as a list. Example: first_n_collatz_sequences(3) # This should return [[1], [2, 1], [3, 10, 5, 16, 8, 4, 2, 1]] first_n_collatz_sequences(5) # This should return [[1], [2, 1], [3, 10, 5, 16, 8, 4, 2, 1], [4, 2, 1], [5, 16, 8, 4, 2, 1]]  Hint: Starting at 111, repeatedly call the collatz_sequence till you reach nnn and store these lists returned in another list. Return that list "},{"title":"4. Implement guess_number.py​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#4-implement-guess_numberpy","content":"I'm thinking of a number between 0 and 10. Can you guess the number? In this problem, you will be implementing a guessing game. The program will randomly select a number and the player will then have to guess that number within so many tries. "},{"title":"4a. Implement choose_solution (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#4a-implement-choose_solution-1-point","content":"We first need to randomly come up with a number/solution. Your task is to implement a function with the following signature: def choose_solution(min, max)  The function takes in two integers, min and max, that represent the range in which the random number must fall. The range is inclusive, meaning the random number can be equal to min or max. Example: choose_solution(0, 10) # This should output a random number from the list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  Hint: Use range() to create a list from min to max (remember, the list should be inclusive) and use random.choice() to select a number from that list. Add the following statement to your file to import random: import random  "},{"title":"4b. Implement get_legal_guess (2 points)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#4b-implement-get_legal_guess-2-points","content":"We now need to let the player make guesses. Your task is to implement a function with the following signature: def get_legal_guess(min, max)  Once again, the function takes in two integers, min and max, that represent the range of numbers in which the player should guess from. The function should ask the player to enter a number (i.e., integer) within this range and then check if the number is actually within the range. If the guess is in the range, return the guess. Otherwise, the player should be told that their guess was not in the range again and then they should be asked again to input a guess that is within the range. Example 1: Please enter a number between 0 and 10: 5  Example 2: Please enter a number between 0 and 10: 11 Guess was not between 0 and 10. Please enter a number between 0 and 10: 13 Guess was not between 0 and 10. Please enter a number between 0 and 10: -9 Guess was not between 0 and 10. Please enter a number between 0 and 10: 3  In Example 1, the player enters 555, which is in the range 000 to 101010, so the function returns 555. In Example 2, the player first enters 111111, which is not in the range. The player is then told that their guess is not in range and asked to guess again. This repeats until they finally enter a valid guess, 333, and the function returns 333. "},{"title":"4c. Implement compare (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#4c-implement-compare-1-point","content":"We now need to compare the player's guess to the actual solution. Your task is to implement a function with the following signature: def compare(solution, guess)  The function should print &quot;Too High&quot; and return False if the guess is greater than the solution, &quot;Too Low&quot; and return False if the guess is less than the solution, and &quot;That's It!&quot; and return True if the guess is equal to the solution. Example: compare(5, 7) # Should print &quot;Too High&quot; and return False compare(5, 2) # Should print &quot;Too Low&quot; and return False compare(5, 5) # Should print &quot;That's It!&quot; and return True  "},{"title":"4d. Implement play_game (2 points)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#4d-implement-play_game-2-points","content":"Time to play! Your task is to implement a function with the following signature: def play_game(min, max, guess_limit)  Once again, min and max represent the range. guess_limit is the number of guess attempts that the player is allowed to make. The function should start by getting a solution. It should then repeatedly ask the player to guess until the player has either guessed correctly or reached the guess_limit. If they guess correctly before running out of guesses, they've won the game. Otherwise, you must tell them that they are out of guesses and tell them the correct number. Example 1: play_game(0, 10, 5)  Please enter a number between 0 and 10: 4 Too High Please enter a number between 0 and 10: 2 Too High Please enter a number between 0 and 10: 1 That's It!  Example 2: play_game(0, 100, 3)  Please enter a number between 0 and 100: 50 Too High Please enter a number between 0 and 100: 25 Too Low Please enter a number between 0 and 100: 35 Too High Out of guesses, answer was: 31  Hint: You should be calling all functions from 4a to 4c here. "},{"title":"5. Implement tic-tac-toe.py​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5-implement-tic-tac-toepy","content":"In this problem, you will be implementing the classic tic-tac-toe game. The game is played between two people on a 3x3 grid. Player 1 is X and Player 2 is O. Each player (starting with Player 1) takes turns marking an empty square on the board. The first player to get three marks in a row (either horizontally, vertically, or diagonally) wins the game. It is possible for games to end in a tie, where no one wins. Player 1 (X) wins:  X | O | O ---+---+--- O | X | ---+---+--- X | | X  Tie (i.e., no one wins):  X | X | O ---+---+--- O | O | X ---+---+--- X | O | X  "},{"title":"5a. Implement make_empty_board (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5a-implement-make_empty_board-1-point","content":"Since the game begins with an empty board, our first step is to create an empty board. Your task is to implement a function with the following signature: def make_empty_board()  The function uses nested lists to represent the board. That is, the first index of the list (index 0) holds a list of strings of size 3 (this represents row 1). The second index of the list holds another list of strings of size 3 (this represents row 2). And the last index of the list holds a final list of strings of size 3 (this represents row 3). Thus, we have a 3x3 grid created using nested lists. All strings should be blank (i.e., &quot; &quot;) since no players have marked the board yet. Example: make_empty_board() # This should return: [[&quot; &quot;, &quot; &quot;, &quot; &quot;],[&quot; &quot;, &quot; &quot;, &quot; &quot;],[&quot; &quot;, &quot; &quot;, &quot; &quot;]]  "},{"title":"5b. Implement print_board (2 points)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5b-implement-print_board-2-points","content":"While 5a created a structure for storing the Xs and Os of our board using nested lists, we want a more visually pleasing way to see the board. Your task is to implement a function with the following signature: def print_board(board)  board is the 3x3 nested list structure. This function should print (not return) the board like in the examples in the tic-tac-toe.py description above. At this point, you can test your function on an empty board, like in Example 1, as well as a hard-coded board, like in Example 2. Example 1: board = make_empty_board() print_board(board)   | | ---+---+--- | | ---+---+--- | |  Example 2: board = [[&quot; &quot;, &quot;X&quot;, &quot; &quot;],[&quot; &quot;, &quot; &quot;, &quot; &quot;],[&quot;O&quot;, &quot; &quot;, &quot; &quot;]] print_board(board)   | X | ---+---+--- | | ---+---+--- O | |  Hint: You may wish to use f-strings here. "},{"title":"5c. Implement get_legal_row_or_col_num (2 points)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5c-implement-get_legal_row_or_col_num-2-points","content":"Now that we have a board, we're ready to start asking the players to mark the board. We need to ask the players where they would like to put their X or O. Your task is to implement a function with the following signature: def get_legal_row_or_col_num()  The function should prompt the player to enter a row/column number between 0 and 2 (inclusive). Why 0 and 2? Because 0 represents row/column 1, 1 represents row/column 2, and 2 represents row/column 3. Anything else would be off the grid. If the player enters an invalid row/column, they should be told that the number was not in range and then be asked to enter another number. Example: Please enter a row/column number: 5 Guess was not between 0 and 2. Please enter a row/column number: -4 Guess was not between 0 and 2. Please enter a row/column number: 1  Hint: Your implementation here should be very similar to get_legal_guess from guess_number.py. "},{"title":"5d. Implement space_empty (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5d-implement-space_empty-1-point","content":"When a player enters a row and column, we need to make sure the square/location at (row, column) is empty. Your task is to implement a function with the following signature: def space_empty(board, loc)  board is the 3x3 nested list structure. loc is a tuple with two integers: row and column. The function should simply return True if board at loc equals &quot; &quot;. Otherwise, the function should return false. Example 1: board = make_empty_board() loc = (0,0) space_empty(board, loc) # This should return True  Example 2: board = [[&quot; &quot;, &quot; &quot;, &quot; &quot;],[&quot; &quot;, &quot;X&quot;, &quot; &quot;],[&quot; &quot;, &quot; &quot;, &quot; &quot;]] loc = (0,1) space_empty(board, loc) # This should return True  Example 3: board = [[&quot; &quot;, &quot;X&quot;, &quot; &quot;],[&quot; &quot;, &quot; &quot;, &quot; &quot;],[&quot; &quot;, &quot; &quot;, &quot; &quot;]] loc = (0,1) space_empty(board, loc) # This should return False  Hint: To index our nested list, we need to specify not 1 but 2 indexes (i.e., row and column). For example, if I wanted to print the element at row 0 and column 0 of list = [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;]], I would need to do print(list[0][0]). This will output a. "},{"title":"5e. Implement get_legal_coordinate (2 points)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5e-implement-get_legal_coordinate-2-points","content":"Now we're ready to get the actual location from the player. Your task is to implement a function with the following signature: def get_legal_coordinate(board)  The function should ask the player to select a row number (hint: call get_legal_row_or_col_num()), ask the player to select a column number (hint: call get_legal_row_or_col_num() again), and check if the location is empty (hint: call space_empty()). If the location is empty, return the row and column as a tuple (i.e., (row, column)). Otherwise, tell the user that the space is not empty and then repeat until they've input an empty location. Example: board = [[&quot; &quot;, &quot;X&quot;, &quot; &quot;],[&quot; &quot;, &quot; &quot;, &quot; &quot;],[&quot; &quot;, &quot; &quot;, &quot; &quot;]] get_legal_coordinate(board)  Please enter a row number: 0 Please enter a column number: 1 That space is not empty. Please enter a row number: 1 Please enter a column number: 1  Hint: get_legal_row_or_col_num() does NOT require a parameter (in fact, the auto-grader requires get_legal_row_or_col_nums() to work without any parameters). However, if you want to specify to the user when they should enter a row versus a column (like in the example above), you can tweak get_legal_row_or_col_num() to accept a string prompt with a default value (e.g., get_legal_row_or_col_nums(prompt=&quot;Please enter a row/column number: )). Then, in get_legal_coordinate(), you could pass either &quot;Please enter a row number&quot; or &quot;Please enter a column number&quot; as the prompt to overwrite the default prompt. This is not a requirement, but will make your program more user-friendly. "},{"title":"5f. Implement update_board (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5f-implement-update_board-1-point","content":"When a player marks the board, we need to update the board to contain this new marking. Your task is to implement a function with the following signature: def update_board(board, loc, player)  board is the 3x3 nested list structure and loc is a (row, column) tuple. player is a string that equals &quot;X&quot; for Player 1 and &quot;O&quot; for Player 2. This function should mark loc of board with player and return board. Example: board = make_empty_board() loc = (0,0) player = &quot;X&quot; update_board(board, loc, player) print_board(board)   X | | ---+---+--- | | ---+---+--- | |  Hint: This function should look similar to space_empty. "},{"title":"5g. Implement has_won (2 points)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5g-implement-has_won-2-points","content":"There are three ways to win: horizontally, vertically, or diagonally. This function should check all three ways of winning. Your task is to implement a function with the following signature: def has_won(board, player)  board is the 3x3 nested list structure and player is a string that equals &quot;X&quot; or &quot;O&quot;. This function return True if any one of the following are true: the 1st row has all the same stringsthe 2nd row has all the same stringsthe 3rd row has all the same stringsthe 1st column has all the same stringsthe 2nd column has all the same stringsthe 3rd column has all the same stringsthe diagonal from top left to bottom right has all the same stringsthe diagonal from bottom left to top right has all the same strings Otherwise, the function should return False. Example 1: board = [[&quot;X&quot;, &quot;O&quot;, &quot;O&quot;],[&quot;O&quot;, &quot;X&quot;, &quot; &quot;],[&quot;X&quot;, &quot; &quot;, &quot;X&quot;]] has_won(board, &quot;X&quot;) # This returns True has_won(board, &quot;O&quot;) # This returns False  Example 2: board = [[&quot;X&quot;, &quot;X&quot;, &quot;O&quot;],[&quot;O&quot;, &quot;O&quot;, &quot;X&quot;],[&quot;X&quot;, &quot;O&quot;, &quot;X&quot;]] has_won(board, &quot;X&quot;) # This returns False has_won(board, &quot;O&quot;) # This returns False  "},{"title":"5h. Implement get_winner (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5h-implement-get_winner-1-point","content":"While has_won checks if there is a winner, get_winner returns who won. Your task is to implement a function with the following signature: def get_winner(board)  The function should return 1 if Player 1 (&quot;X&quot;) wins, return 2 if Player 2 (&quot;0&quot;) wins, or 0 if no one wins. Example 1: board = [[&quot;X&quot;, &quot;O&quot;, &quot;O&quot;],[&quot;O&quot;, &quot;X&quot;, &quot; &quot;],[&quot;X&quot;, &quot; &quot;, &quot;X&quot;]] get_winner(board) # This returns 1  Example 2: board = [[&quot;X&quot;, &quot;X&quot;, &quot;O&quot;],[&quot;O&quot;, &quot;O&quot;, &quot;X&quot;],[&quot;X&quot;, &quot;O&quot;, &quot;X&quot;]] get_winner(board) # This returns 0  "},{"title":"5i. Implement one_turn (1 point)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5i-implement-one_turn-1-point","content":"We will now use the functions above to allow for one turn of play. Your task is to implement a function with the following signature: def one_turn(board, player)  The function should do the following (sequentially): Determine if the current player is Player 1 (&quot;X&quot;) or Player 2 (&quot;O&quot;). That is, create some variable (let's call it pnum) and set it equal to 1 if player equals &quot;X&quot; or 2 if player equals &quot;O&quot;.Print whose move it is (e.g., &quot;Player 1 move:&quot; or &quot;Player 2 move:&quot;).Get the location of the board where the player will mark.Mark/update the board.Print the board.Return the game board and winner as a tuple. Example: board = [[&quot;X&quot;, &quot;O&quot;, &quot;O&quot;],[&quot;O&quot;, &quot; &quot;, &quot; &quot;],[&quot;X&quot;, &quot; &quot;, &quot;X&quot;]] one_turn(board, &quot;X&quot;) # This returns ([['X', 'O', 'O'], ['O', 'X', ' '], ['X', ' ', 'X']], 1) if Player 1 enters row 1 and column 1 like below  Player 1 move: Please enter a row number: 2 Please enter a column number: 2 X | O | O ---+---+--- O | X | ---+---+--- X | | X  "},{"title":"5j. Implement play_game (2 points)​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#5j-implement-play_game-2-points","content":"Finally, it's time to play! Your task is to implement a function with the following signature: def play_game()  The function should start by creating an empty board. While there are still free spaces on the board and a winner has not been found, a turn of tic-tac-toe should be played. If there are no more free spaces and a winner has not been found, then &quot;Tie!&quot; should be outputted. Example: Player 1 move: Please enter a row number: 1 Please enter a column number: 1 | | ---+---+--- | X | ---+---+--- | | Player 2 move: Please enter a row number: 2 Please enter a column number: 1 | | ---+---+--- | X | ---+---+--- | O | Player 1 move: Please enter a row number: 1 Please enter a column number: 0 | | ---+---+--- X | X | ---+---+--- | O | Player 2 move: Please enter a row number: 1 Please enter a column number: 2 | | ---+---+--- X | X | O ---+---+--- | O | Player 1 move: Please enter a row number: 0 Please enter a column number: 0 X | | ---+---+--- X | X | O ---+---+--- | O | Player 2 move: Please enter a row number: 2 Please enter a column number: 2 X | | ---+---+--- X | X | O ---+---+--- | O | O Player 1 move: Please enter a row number: 2 Please enter a column number: 0 X | | ---+---+--- X | X | O ---+---+--- X | O | O Player 1 Wins!  "},{"title":"Grading Scale​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#grading-scale","content":"Note that points may be obtained from anywhere, you do not need to try to complete work in any particular order. There is also an abundance of possible points to obtain, giving you options in what you want to work on in order to get your total points within the desired range. "},{"title":"1: Below Standards: 0-5 points​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#1-below-standards-0-5-points","content":""},{"title":"2: Approaching Standards: 6-11 points​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#2-approaching-standards-6-11-points","content":""},{"title":"3: Meeting Standards: 12-17 points​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#3-meeting-standards-12-17-points","content":""},{"title":"4: Exceeding Standards: 18+ points​","type":1,"pageTitle":"Looping","url":"/main/assignments/looping#4-exceeding-standards-18-points","content":""},{"title":"Extras","type":0,"sectionRef":"#","url":"/main/extras","content":"Extras Here we will put extra resources, content, and materials. Feel free to check stuff out!","keywords":""},{"title":"Variables and Expressions","type":0,"sectionRef":"#","url":"/main/assignments/variables-expressions","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#about","content":"This purpose of this homework is to practice variable assignment and expressions. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#learning-objectives","content":"Learn to use the input() functionPractice using variables to store informationPractice basic expressions "},{"title":"Estimated Size​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#estimated-size","content":"11 small files: Each will have 1 to 4 calls to input()Each will have 1 to 3 print() statements.Each will have some reasonably short computations. "},{"title":"Preamble​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#preamble","content":"The input() and print() function will be integral to this assignment. input() prompts the user for input, and returns that as a string. The input() function optionally takes a string to use as flavor text when prompting the user. So the command s = input(&quot;Enter Input: &quot;) would print outEnter Input: to terminal, wait for the user to type in something and hit return/enter, and then store the text the user entered as a string in the variable s. print() takes in pretty much anything, and prints it to the terminal. So print(&quot;Received: &quot; + s) (assuming s is a string). Would print Received: followed by the contents of s. If you wanted to print a number n, print(n) will work. If you wanted to print a number n with some flavor-text in front, print(&quot;n: &quot; + str(n)) will work (note the use of a string concatenation expression as an argument to print()). You do not need to know or use this, but:A final note, if you want some flavor text but find the concatenation bothersome: there is something called f-Strings.f&quot;n: {n}&quot; would be the same as &quot;n: &quot; + str(n). You have that f outside the quotation marks, and then you can place expression within the {} within the string to have those expressions resolved and filled in when the string is used. "},{"title":"Assignment​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#assignment","content":""},{"title":"0. Setup​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#0-setup","content":"Make a folder on your computer and open it in VSCode. Remember that for every file you need to have comments indicating the author(s) at the, for example: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  The # Author/# Authors, # Email/# Emails, and # Spire ID/# Spire IDs are the only really necessary formatting detail. Some copying and pasting will save you some sanity. Apologies for the tedium. In the future (once we have functions), you'll probably only need to make one file per assignment. "},{"title":"1. Implement echo.py (1 point)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#1-implement-echopy-1-point","content":"Whenever playing with something new, in this case input() and print() (and variables), it is helpful to make a minimal working use-case as a sanity-check. This program will get input from the user, and print that input back out exactly as is. Running a correct implementation of this program could look like: $ python3 echo.py Enter input: Hello, World! Hello, World!  You may use whatever prompt you like, all that matters that the last line perfectly echo the input typed by the user (what is returned by the input() function). The specific prompt, if any, the you provide to the input() function is up to your discretion. Hints The commands to accomplish this are pretty much given in the Preamble section, except you don't want the &quot;Received: &quot; part. Testing Run it, play with it. That's pretty much true for all of these. "},{"title":"2. Implement aba.py (1 point)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#2-implement-abapy-1-point","content":"New program. This one should read in two inputs from the user. It should then print the first, concatenated with/followed by the second, concatenated with/followed by the first again. So if input 1 was &quot;a&quot; and input 2 was &quot;b&quot;, then &quot;aba&quot; would be printed. Running a correct implementation of this program could look like: $ python3 aba.py Enter first string: on Enter second string: i onion  Hints We learned about an operator for concatenating/combining strings. "},{"title":"3. Implement round.py (1 point)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#3-implement-roundpy-1-point","content":"Time for some numbers. This program will ask for input that may be a whole or decimal number. It will then print that number rounded to the nearest int (there is round() function that takes a float and return the nearest int). Running a correct implementation of this program could look like: $ python3 round.py Enter a number: 3.14159265358979323 3.141592653589793 rounds to 3  The last number of the last line must be the solution, you may add flavor text or have no flavor text at all (you could just print the rounded number). Hints Note that input() will return a string. That will then need to be turned into (cast/converted to) a number.int() will cause an error if the number is formatted like a decimal number, which only leaves one numeric type option... Then, you can round(). "},{"title":"4. Implement liters.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#4-implement-literspy-2-points","content":"This program will ask for input that should represent a whole number (an int) of liters. It should then convert that to cubic centimeters and print the converted value. There are 1000 cubic centimeters per liter. Running a correct implementation of this program could look like: $ python3 liters.py Enter a number: 314 314 litres is 314000 cubic centimeters  (Or you could infer the conversion factor from the example...) Like before, the last number of the last line must be the solution. The output should be a whole number. "},{"title":"5. Implement miles.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#5-implement-milespy-2-points","content":"This program will ask for input that should represent a whole number (an int) of miles. It should then convert that to yards and to feet and print the converted values on separate lines. There are 1760 yards per mile and 3 feet per yard. Running a correct implementation of this program could look like: $ python3 miles.py Enter a number: 314 314 miles is: 552640 yards 1657920 feet  Formatting details: The last number on the second-to-last line must be the number of yards, as a whole number.The last number on the last line must be the number of feet, as a whole number.No other lines of text or additional formatting is necessary "},{"title":"6. Implement kilos.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#6-implement-kilospy-2-points","content":"This program will ask for input that should represent a whole or decimal number (a float) of kilograms. It should then convert that to pounds and print the converted value. For the purposes of this assignment, there are 2.205 pounds per kilogram. Running a correct implementation of this program could look like: $ python3 kilos.py Enter a number: 314.15 314.15 kilograms is 692.701 pounds  The last number on the last line must be the conversion, no other lines of text or additional formatting is necessary. "},{"title":"7. Implement temp.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#7-implement-temppy-2-points","content":"This program will ask for input that should represent a whole or decimal number (a float) temperature in degrees Fahrenheit. It should then convert that to Celsius and Kelvin. For the purposes of this assignment: Converting the temperature from Fahrenheit to Celsius can be done by subtracting 32 from the temperature in Fahrenheit and then multiplying the result by 5 / 9.Converting the temperature from Celsius to Kelvin can be done by adding 273.15 to the temperature in Celsius. Running a correct implementation of this program could look like: $ python3 temp.py Enter temperature in Fahrenheit: 31.41 31.41 degrees Fahrenheit is equivalent to: -0.3277777777777777 degrees Celsius 272.8222222222222 degrees Kelvin  Formatting details: The last number on the second-to-last line must be the Celsius conversion.The last number on the last line must be the Kelvin conversion.No other lines of text or additional formatting is necessary Extra If you'd like, f-String allow for formatting options that can round floats to a number of decimal places (e.g. f&quot;{num:.3f}&quot;). This can make the output look nicer. I believe the tolerance for this test is being within .02, so you can safely truncate or round to the nearest thousandth or hundredth. "},{"title":"8. Implement cube.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#8-implement-cubepy-2-points","content":"This program will ask for input that is a whole number (an int) representing the length of the side of a cube. It should then compute the volume and surface area of the cube, and print the computed values on separate lines. For a given length: The volume is the length cubedThe surface area is 6 times the length squared (6 sides) Running a correct implementation of this program could look like: $ python3 cube.py Enter the length of the cube: 5 A cube with length 5 has: Volume of 125 Surface area of 150  Formatting details: The last number on the second-to-last line must be the volume as a whole number.The last number on the last line must be the surface area as a whole number.No other lines of text or additional formatting is necessary "},{"title":"9. Implement seconds.py (3 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#9-implement-secondspy-3-points","content":"This program will ask for input that is a whole number (an int) representing a number of seconds. It will then convert that to a total number of days, hours, minutes, and seconds such that hours &lt; 24, minutes &lt; 60, and seconds &lt; 60. Running a correct implementation of this program could look like: $ python3 seconds.py Enter a number of seconds: 314159 314159 seconds can be broken up into: 3 days, 15 hours, 15 minutes, and 59 seconds.  Formatting details: The last number on the forth-to-last line must be the number of days involved.The last number on the third-to-last line must be the remaining number of hours involved.The last number on the second-to-last line must be the remaining number of minutes involved.The last number on the last line must be the remaining number of seconds involved.No other lines of text or additional formatting is necessary Hints This is the integer/floor division and remainder/module operator challenge. "},{"title":"10. Implement quadratic.py (3 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#10-implement-quadraticpy-3-points","content":"This program will ask for input that is a whole number (an int) representing the a b and c in the standard form of a quadratic equation a x^2 + b x + c = 0. It will then solve for the roots (x such that the equation equals 0) and print them on separate lines. There is a quadratic equation that gives the roots: x=−b±b2−4ac2ax = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}x=2a−b±b2−4ac​​ Running a correct implementation of this program could look like: $ python3 quadratic.py Enter a: 1 Enter b: -2 Enter c: 1 1 * x^2 + -2 * x + 1 has roots: 1.0 1.0  Formatting details: While the answers are designed to always be whole numbers, you may safely print them out as floats. (If you want to convert to an int, I suggest using round() and not int() due to how int() simply truncates.)The roots may be in any order, they just need to be on separate lines.If there is 1 root with a multiplicity of 2, you should still print 2 lines, they will just both have the same root.The numbers on the last two lines must be the roots.Nothing beyond 2 lines with numbers is necessary, flourish as you please. Hints If you use import math you will have access to math.sqrt(), but n ** (1/2) actually works just fine. "},{"title":"11. Implement weave.py (3 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#11-implement-weavepy-3-points","content":"This program requests 4 inputs in order: A string, referred to as A hereA whole number, referred to as m hereA string, referred to as B hereA whole number, referred to as n here It will then print an &quot;interweaving&quot; of m copies of A with n copies of B. So the final result will end up looking something like either ABABAAA or ABABBBB depending on m and n. Running a correct implementation of this program could look like: $ python3 weave.py Enter first string: on Enter first number: 2 Enter second string: i Enter second number: 1 onion  last line needs to be exactly the interweaving. Hints We haven't used string-int multiplication yet. You can think of the resultant string as AB a bunch of times followed by A a bunch of times or B a bunch of times. This in turn can be AB n1 times, followed by A n2 times, followed by B n3 times; where n2 or n3 ends up being 0. As for how many times to do both, that depends on the lesser of the two numbers, which is mathematically known as the &quot;minimum&quot;. A function that computes the minimum would certainly be helpful. For most really simple operations like that, there likely is a built-in function or a function in the math library. We can't possibly memorize or know all the functions that exist in python, and so looking up functions that we hope or suspect might exist is a key skill. Hence, using a search engine for &quot;python minimum function&quot; is left as an exercise to the reader. "},{"title":"Grading Scale​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#grading-scale","content":"This assignment is roughly partitioned into 3 phases: 3 Initial exercises worth 1 point each: echo.py, aba.py, round.py5 Middle exercises worth 2 points each: liters.py, miles.py, kilos.py, temp.py, cube.py3 Final exercises worth 3 points each: seconds.py, quadratic.py, weave.py Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0-3 points​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#1-below-standards-0-3-points","content":"This is the number of points gained by completing only the initial exercises. "},{"title":"2: Approaching Standards: 4-12 points​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#2-approaching-standards-4-12-points","content":"This is the number of points gained by completing the initial exercises and only some of the middle batch of exercises. "},{"title":"3: Meeting Standards: 13-19 points​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#3-meeting-standards-13-19-points","content":"This is the number of points gained by completing all the initial and middle exercises, but not all of the final exercises. "},{"title":"4: Exceeding Standards: 20-22 points​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#4-exceeding-standards-20-22-points","content":"This is the number of points gained by completing basically all the exercises (and specifically completing all the final exercises). "},{"title":"Guides","type":0,"sectionRef":"#","url":"/main/guides","content":"Guides Welcome to the guides section of the course website! In this section, you will find a wealth of information and resources to help you get started and succeed in your course. Whether you are a beginner or have prior experience, our goal is to provide you with the support and guidance you need to succeed. To get started, you will find guides for installing Python and setting up Visual Studio Code (VSCode), two essential tools for programming. If you ever get stuck, our guide on &quot;Getting Unstuck&quot; will provide you with practical tips and strategies for overcoming common challenges. You will also find information on common errors and how to avoid them, as well as a guide on how to use Piazza, an online platform for connecting with your instructors and classmates and getting help with your coursework. We are committed to helping you succeed in your computational thinking and computer programming course, and these guides are a key part of that support. Whether you are looking to install your first Python environment, troubleshoot an error, or get help with a course assignment, these guides are designed to provide you with the information and resources you need to achieve your goals. We hope you find them helpful and wish you the best of luck in your programming journey!","keywords":""},{"title":"Common Errors","type":0,"sectionRef":"#","url":"/main/guides/common-errors","content":"","keywords":""},{"title":"NameError​","type":1,"pageTitle":"Common Errors","url":"/main/guides/common-errors#nameerror","content":"NameError occurs when we attempt to reference a variable name that has not been declared. This usually occurs because We're referencing a variable that doesn't exist yetWe're referencing a variable that does exist, but we misspelled a reference somewhere Remember that python runs line by line, top to bottom (once we start writing our own functions this isn't strictly true), so a variable has to be declared above where you first attempt to use it. In rare cases, a variable can get deleted or &quot;garbage collected&quot; before it is called, and this error can occur, but this is extremely rare in Python specifically. This case is more common in almost any other language, like C or Java, where variables declared inside a loop are deleted/garbage collected once the loop finishes. For example for i in range(3): print(i) print(i)  will print 0\\n1\\n2\\n3\\n. In C, the equivalent code for (int i; i &lt; 3; i++) { printf(&quot;%d\\n&quot;, i); } printf(&quot;%d\\n&quot;, i);  will not even compile, because i is deleted, or &quot;garbage collected&quot;, after the loop finished. Keep this in mind in the future if you switch to another language. "},{"title":"IndexError​","type":1,"pageTitle":"Common Errors","url":"/main/guides/common-errors#indexerror","content":"IndexError means we are trying to access an element of an indexed collection, like a String or list, but that index is outside the range of the collection. For example, if I have the String 'test', e is the 2nd character at index 1. However, if I try to access index 4, that would mean accessing the 5th character of the String, which doesn't exist. Therefore attempting to access index 4 will result in an IndexError: &gt;&gt;&gt; 'test'[4] Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; IndexError: string index out of range  "},{"title":"EOFError​","type":1,"pageTitle":"Common Errors","url":"/main/guides/common-errors#eoferror","content":"EOF stands for &quot;end of file&quot;. If the Python interpreter unexpectedly reads through the end of a file, it returns an EOFError. This typically happens in one of two ways: The Python interpreter hits the end of your Python source file unexpectedly. This can happen if you write a loop with no content in it (more recent python versions return an IndentationError, but zyBooks will often return EOFError. If you'd like to know why, make a Piazza post asking about it :D)Your Python tries to read more input than it is given. For example, say your python code checks the first 5 lines of a file. If the file has 4 lines total, Python tries to read the 5th line and sees the EOF character. This is unexpected behavior, so it returns an EOFError. "},{"title":"The Big List","type":0,"sectionRef":"#","url":"/main/extras/big-list","content":"","keywords":""},{"title":"Asserts​","type":1,"pageTitle":"The Big List","url":"/main/extras/big-list#asserts","content":""},{"title":"int assertions​","type":1,"pageTitle":"The Big List","url":"/main/extras/big-list#int-assertions","content":"Given a variable number containing an int, write a single line of code that asserts that number is equal to 3Given a variable count containing an int, write a single line of code that asserts that count is greater than or equal to 0.Given two variables first and second containing int values, write a single line of code that asserts that first is strictly smaller than second.Given two variables num_apples and num_pears containing int values, write a single line of code that asserts that num_apples and num_pears are not equal.Given a variable day containing an int, write a single line of code that asserts that day is between 1 and 7 inclusive. "},{"title":"String assertions​","type":1,"pageTitle":"The Big List","url":"/main/extras/big-list#string-assertions","content":"Given a variable name containing a String, write a single line of code that asserts that name contains the value 'Ben'Given a variable name containing a String, write a single line of code that asserts that name does not contain the value 'John'Given a variable name containing a String, write a single line of code that asserts that name is at most 10 characters long.Given a variable name containing a String, write a single line of code that asserts that name is neither 'Ben' nor 'John' "},{"title":"type assertions​","type":1,"pageTitle":"The Big List","url":"/main/extras/big-list#type-assertions","content":"Given a variable count, write a single line of code that asserts count contains an intGiven a variable ratio, write a single line of code that asserts ratio contains a floatGiven a variable name, write a single line of code that asserts that name is a String.Given two variables num_apples and num_pears, write a single line of code that asserts that both num_apples and num_pears contain ints "},{"title":"Functions​","type":1,"pageTitle":"The Big List","url":"/main/extras/big-list#functions","content":"Define parameters in the order they are listed in the prompt. "},{"title":"Function headers​","type":1,"pageTitle":"The Big List","url":"/main/extras/big-list#function-headers","content":"Write the function header for a function named my_function, which takes in no parametersWrite the function header for a function named convert, which takes in a single parameter named meters, and returns meters times 1000Write a function header for a function named multiply, which takes in two positional parameters named multiplier and multiplicandWrite a function header for a function named get_capacity, which takes in a single parameter named water_level with default value 0Write a function header for a function named take_power which takes in two parameters: base, with no default value, and exponent, with a default value of 2 "},{"title":"Return statements​","type":1,"pageTitle":"The Big List","url":"/main/extras/big-list#return-statements","content":"Complete the following function by writing a single line of code that returns the value 3 def return_three():  Complete the following function by writing a single line of code that returns the value of result def return_variable(num): result = num + 3  Complete the following function by writing a single line of code that returns the value of the parameter num def return_parameter(num):  Complete the following function by writing a single line of code that returns the value of the parameter num multiplied by 5 def quintuple(num):  Complete the following function by writing a single line of code that returns the value of the first parameter subtracted by the second parameter def subtract(a, b):  "},{"title":"Full functions​","type":1,"pageTitle":"The Big List","url":"/main/extras/big-list#full-functions","content":"Write a function named print_hello, which takes in no parameters and prints the String 'Hello!'Write a function named add_three, which takes in a single parameter num, and returns the value of num plus the value 3.Write a function named compare, which takes in two parameters a and b, which returns True if a is greater than b, and False otherwise. This function should be two lines including the header, and should not require the use of if-statements or a ternary!Write a function named fifth_power, which takes in a single parameter num, asserts that num is an int, and then returns num raised to the 5th power. This function should be three lines including the header. "},{"title":"Object Oriented Programming","type":0,"sectionRef":"#","url":"/main/assignments/oop","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#about","content":"The aim of this homework assignment is to introduce Object Oriented Programming (OOP) and a bit of recursion. This assignment serves as a natural transition from CICS110 to CICS160 where you will study these fundamental programming constructs in much more detail. Remember that even though we implement code in Python in this class, the skills developed in this assignment will be relevant for any modern programming language. Even though we work with OOP and Recursion in this assignment, be aware that you will be required to use the knowledge and skills you have acquired so far to succeed in this assignment. This includes defining functions, evaluating boolean expressions, evaluating arithmetic expressions, taking user input, working with f-strings, working with sequence types including lists and strings, branching, looping, working with modules, and handling exceptions. You may want to review them before you proceed. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#learning-objectives","content":"Practice modelling real world scenarios in code using OOP techniques.Practice defining classes in Python.Practice instantiating objects in Python.Practice breaking a larger problem into simpler sub-problems.Practice defining recursive methods. "},{"title":"Estimated Size​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#estimated-size","content":"This assignment consists of 555 problems. Each problem specifies a class to implement. This means you get to implement your own user defined data-types!Each class would contain both some attributes as well some methods.Unlike the previous assignments where you were explicitly told what to implement, in this assignment we leave it up to you to decide the specifics of classes that you write. This means that while we describe a situation that your code should model, it is up to you to decide what features and methods you would need to implement.Many methods inside these classes have simple computations, similar to the previous assignments.Some methods require you to use recursion. "},{"title":"Note​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#note","content":"You do not need to use any assert statements in this assignment.You do not need to use any files in this assignment. "},{"title":"OOP Primer​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#oop-primer","content":"Object Oriented Programming (OOP) relies on the concept of classes and objects. The underlying idea is to structure software into simple, reusable pieces of code (called classes) which serve as templates and are used to create individual instances (called objects). Modern programming languages such as JavaScript, C++, Java, and Python provide support for OOP. Classes are essentially user-defined data types. In this sense, a class is an abstract blueprint. Classes contain fields for attributes and methods for behaviors. Objects are more specific and concrete entities which are instantiated from classes. To understand the advantage of OOP, let's consider how a real world situation can be modelled using a class. Think about how we can represent cars in software. All cars have a model name, a colour, a year in which the car was manufactured, an engine size and so on. We can, therefore, write a class with these attributes common to all cars. Cars also have behaviors including acceleration and braking. These behaviors can be incorporated into our class using methods (functions!). As a consequence, this class provides a general blueprint to create different kinds of cars. But we also know that there are so many different cars. How can we represent each car specifically? Since each car has all the features and behaviors specified in the class we defined above, for every new car we use, we could use an instance of this class. For example, we can have a 2019 Blue BMW or a 2017 Red Audi. In each instance we would reuse the code contained in the original object by instantiating an object of this class and specifying necessary details within the object. Therefore, while the class can represent any car, an instance of the class represents a specific car. "},{"title":"Recursion Primer​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#recursion-primer","content":"A common algorithm design tactic is to divide a bigger problem into sub-problems of the same type as the original, solve those sub-problems, and combine the results. Recursion is used to solve problems by dividing it into smaller sub-problems. At its core, recursion is the act of a function calling itself. A recursive function has two components: a base case (which ends recursion) and a recursive case (which resumes recursion). In Lab 101010, we worked with recursive functions. You may want to review it before you proceed. "},{"title":"0. Setup​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#0-setup","content":"Make a folder on your computer and open it in VSCode. You must create 555 files in this folder. Make sure that you do not rename any of these files. shapes.pyfrac.pysequences.pyvending.pymarbles.py Remember that for every file you need to have comments indicating the authors at the top. For example: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  The # Author/# Authors, # Email/# Emails, and # Spire ID/# Spire IDs are the only really necessary formatting details. Some copying and pasting here will save you some time and sanity. Note that these details are necessary for the auto-grader to recognize your solution. "},{"title":"1. Implement shapes.py​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1-implement-shapespy","content":"In this problem, you will practice creating geometry-based classes, instantiating those classes (i.e., creating objects), and calling methods from those classes. You will create 7 classes: Shape, Triangle, IsoscelesTriangle, EquilateralTriangle, Quadrilateral, Rectangle, and Square. Note that: Triangle and Quadrilateral are both subclasses of ShapeIsoscelesTriangle is a subclass of TriangleEquilateralTriangle is a subclass of IsoscelesTriangleRectangle is a subclass of QuadrilateralSquare is a subclass of Rectangle If ClassB is a subclass of ClassA, then ClassB inherits all of the attributes and methods of ClassA. It is a common practice in OOP to create a subclass that inherits from a parent class in order to reuse code and add additional functionality. "},{"title":"1a. Implement the Shape class (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1a-implement-the-shape-class-1-point","content":"Shape is a simple class. It has no attributes and no methods. We will simply use Shape to create subclasses Triangle and Quadrilateral. Create a class called Shape that has one line of code in it: pass. "},{"title":"1b. Implement the Triangle class (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1b-implement-the-triangle-class-1-point","content":"Triangle is a subclass of Shape. In order to show this relationship, we will add Shape enclosed in parentheses in the class signature: class Triangle(Shape):  Triangle should have a constructor that takes in three parameters, one for each side of a triangle (you can assume that the sides create a valid triangle). Triangle should also have two methods: perimeter() and get_sides(), neither of which take in a parameter (besides self). perimeter() should return the sum of all of the sides, while get_sides() should return a tuple of the sides. It is up to you to determine how you'd like to implement this class. Example: tri = Triangle(2,3,4) print(tri.get_sides()) # output (2,3,4) print(tri.perimeter()) # output 9  "},{"title":"1c. Implement the IsoscelesTriangle class (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1c-implement-the-isoscelestriangle-class-1-point","content":"IsoscelesTriangle is a subclass of Triangle. Thus, IsoscelesTriangle will inherent all attributes and methods of Triangle. Since IsoscelesTriangle will have 2 sides that are of equal length, we really only need the constructor to take in two values: the doubled side and the other side (in that order). In this class, you need to write the constructor such that it takes in only two parameters. DO NOT rewrite the methods perimeter() and get_sides() in this class - these are already inherited from Triangle. That is, the only thing in this class should be a constructor. Example: isotri = IsoscelesTriangle(2,5) print(isotri.get_sides()) # output (2, 2, 5) print(isotri.perimeter()) # output 9  Hint: You can use Python's super() function to refer to the parent class explicitly. That is, super() in IsoscelesTriangle will refer to Triangle. You can use this to call Triangle's __init__() method (e.g., super().__init__()). "},{"title":"1d. Implement the EquilateralTriangle class (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1d-implement-the-equilateraltriangle-class-1-point","content":"EquilateralTriangle is a subclass of IsoscelesTriangle. Thus, IsoscelesTriangle will inherent all attributes and methods of Triangle. Since EquilateralTriangle will have 3 sides of equal length, we really only need the constructor to take in one value. Write EquilateralTriangle such that the constructor only accepts one parameter. Example: eqitri = EquilateralTriangle(4) print(eqitri.get_sides()) # output (4, 4, 4) print(eqitri.perimeter()) # output 12  "},{"title":"1e. Implement the Quadrilateral class (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1e-implement-the-quadrilateral-class-1-point","content":"Quadrilateral is a subclass of Shape. It should have a constructor that takes in four parameters, one for each side of a quadrilateral. Quadrilateral should also have two methods: perimeter() and get_sides(), neither of which take in a parameter (besides self). Similar to Triangle, perimeter() should return the sum of all of the sides, while get_sides() should return a tuple of the sides. It is up to you to determine how you'd like to implement this class. Example: quad = Quadrilateral(2,3,4,5) print(quad.get_sides()) # output (2,3,4,5) print(quad.perimeter()) # output 14  "},{"title":"1f. Implement the Rectangle class (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1f-implement-the-rectangle-class-1-point","content":"Rectangle is a subclass of Quadrilateral. Thus, Rectangle will inherent all attributes and methods of Quadrilateral. Since Rectangle will have 2 pairs of sides of equal length, we really only need the constructor to take in two values: length and width. Similar to IsoscelesTriangle, write Rectangle such that the constructor only accepts two parameters. You should also create one more function inside Rectangle that is not part of Quadrilateral and that function is area. area does not take in any parameters (besides self) and simply returns the area of the rectangle (calculated by length*width). Example: rec = Rectangle(3,5) print(rec.get_sides()) # output (3,5,3,5) print(rec.perimeter()) # output 16 print(rec.area()) # output 15  "},{"title":"1g. Implement the Square class (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1g-implement-the-square-class-1-point","content":"Square is a subclass of Rectangle. Thus, Square will inherent all attributes and methods of Rectangle. Since Square will have all sides of equal length, we really only need the constructor to take in one value. Write Square such that the constructor only accepts one parameter. Example: square = Square(5) print(square.get_sides()) # output (5,5,5,5) print(square.perimeter()) # output 20 print(square.area()) # output 25  "},{"title":"2. Implement frac.py​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2-implement-fracpy","content":"In this part, we implement a Python class named Frac that defines a fraction object. The Frac constructor takes three parameters:sign, num, and den, representing the sign, numerator, and denominator of a fraction, respectively. The class provides methods for arithmetic operations, such as addition, subtraction, multiplication, and division, between two fractions. The purpose of this class is to provide a way to handle fraction calculations in Python with a simplified and optimized approach. As a quick reminder, defining features for a class involves implementing special methods, also known as dunder methods. These methods allow you to add specific functionality to your class by defining how it behaves in different scenarios. "},{"title":"2a. Constructor​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2a-constructor","content":"Similar to the previous examples, you will need to initialize the class attributes using a constructor. Attributes represent the properties of the entity. In this case, you need to write the constructor that takes in three parameters: sign, num, and den. The sign parameter represents the sign of the fraction, and num and den represent the numerator and denominator of the fraction respectively. "},{"title":"2b. Implementing the get_sign_num_den() method (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2b-implementing-the-get_sign_num_den-method-1-point","content":"Write a method called get_sign_num_den() for the Frac class that returns a representation of a fraction in simplified form as a tuple of the sign (-1, 0, or 1), numerator, and denominator respectively. Examples: frac1 = Frac(1, 15, 20) print(frac1.get_sign_num_den()) # prints (1, 3, 4) because 15/20 simplifies to 3/4 frac2 = Frac(-1, 3, 5) print(frac2.get_sign_num_den()) # prints (-1, 3, 5) this represents -3/5 frac3 = Frac(0, 0, 1) print(frac3.get_sign_num_den()) # prints (0, 0, 1) this represents 0  Extra: We highly encourage you to implement the __str__ method at this point. For the purposes of presenting examples, from here on, we will assume a __str__ method that turns the fraction into a string with a negative sign at the front if sign is negative, followed by NUM / DEN, where NUM and DEN are the simplified forms of the numerator and denominator respectively. "},{"title":"2c. Negation of a Fraction (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2c-negation-of-a-fraction-1-point","content":"Implement the __neg__() method in order to enable fraction negation. This method should take in only self and return a new fraction object representing &quot;-self&quot;. Example: a = Frac(1,1,2) print(-a) # print: - 1 / 2  "},{"title":"2d. Addition of Two Fractions (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2d-addition-of-two-fractions-1-point","content":"Implement the __add__() method in order to enable fraction addition. This method should take in self and other, and return a new fraction object representing &quot;self + other&quot;. Example: a = Frac(1, 15, 20) b = Frac(-1, 3, 7) print(a + b) # print: 9 / 28  "},{"title":"2e. Subtraction of Two Fractions (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2e-subtraction-of-two-fractions-1-point","content":"Implement the __sub__() method in order to enable fraction subtraction. This method should take in self and other, and return a new fraction object representing &quot;self - other&quot;. Example: a = Frac(1, 15, 20) b = Frac(-1, 3, 7) print(a - b) # print: 33 / 28  "},{"title":"2f. Multiplication of Two Fractions (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2f-multiplication-of-two-fractions-1-point","content":"Implement the __mul__() method in order to enable fraction multiplication. This method should take in self and other, and return a new fraction object representing &quot;self * other&quot;. Example: a = Frac(1, 15, 20) b = Frac(-1, 3, 7) print(a * b) # print: - 9 / 28  "},{"title":"2g. Division of Two Fractions (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2g-division-of-two-fractions-1-point","content":"Implement the __truediv__() method in order to enable fraction division. This method should take in self and other, and return a new fraction object representing &quot;self / other&quot;. Example: a = Frac(1, 15, 20) b = Frac(-1, 3, 7) print(a / b) # print: - 7 / 4  "},{"title":"3. Implement sequences.py​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3-implement-sequencespy","content":"Sequences are one of the most interesting topics in mathematics. Many sequences are recursive by their definition i.e. the next value depends on one or more previous values of the sequence. In this problem, we will generate some interesting recursive sequences using a simple sequence generator class. Important: The first term of a sequence is actually the Oth term. So, for instance, if we have a list of Fibonacci numbers, say [0, 1, 1, 2, 3, 5, 8], then the 0 is the 0th Fibonacci number, 1 is the 1st, 2 is the 2nd and so on. "},{"title":"3a. Implement the Sequence class​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3a-implement-the-sequence-class","content":"In this problem, you will create a class that generates recursive sequences using recursive functions. Your class should have two components: An attribute that stores a function (Yes, an attribute can be a function!)A method generate_sequence that takes as argument an integer nnn and returns a list obtained by calling the function on numbers 000, 111, …\\dots… nnn. This class is a template for generating different sequences. In the following problems, we will specify functions that will be used in instances of this class to generate specific sequences. "},{"title":"3b. Factorial (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3b-factorial-1-point","content":"The factorial of a number nnn is the product of all positive integers less than or equal to nnn. Thus, factorial of seven is written 7!7!7! and is equal to 1×2×3×4×5×6×71 × 2 × 3 × 4 × 5 × 6 × 71×2×3×4×5×6×7. As a convention, the factorial of 000 is defined as equal to 111. Your task is to write a recursive function that takes as argument an integer nnn and returns the factorial of nnn. It should have the following signature: def factorial(n)  Example: print(factorial(5)) #This should print 120  Use this function to generate the Factorial sequence using the Sequence class. Example: factorial_sequence = Sequence(factorial) print(factorial_sequence.generate_sequence(10))  Output: [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]  "},{"title":"3c. Fibonacci numbers (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3c-fibonacci-numbers-1-point","content":"The Fibonacci sequence is one of the most important sequences in mathematics. It is the sequence 000, 111, 111, 222, 333, 555, 888, 131313, …\\dots…. Can you see a trend here? Starting with 000 and 111, each successive number is the sum of the previous two numbers. In mathematical notation, we denote this as: Fn=Fn−1+Fn−2F_n = F_{n-1} + F_{n-2}Fn​=Fn−1​+Fn−2​ where FnF_nFn​ is the nnn-th Fibonacci number and n≥2n \\geq 2n≥2. Your task is to write a recursive function that takes as argument an integer nnn and returns the nnn-th Fibonacci number. It should have the following signature: def fibonacci(n)  Example: print(fibonacci(5)) #This should print 5  Use this function to generate the Fibonacci sequence using the Sequence class. Example: fibonacci_sequence = Sequence(fibonacci) print(fibonacci_sequence.generate_sequence(10))  Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]  "},{"title":"3d. Tribonacci numbers (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3d-tribonacci-numbers-1-point","content":"The Tribonacci sequence is a generalization of the Fibonacci sequence. It is the sequence 000, 111, 111, 222, 444, 777, 131313, 242424, …\\dots…. Can you see a trend here? Starting with 000, 111, and 111 each successive number is the sum of the previous three numbers. In mathematical notation, we denote this as: Tn=Tn−1+Tn−2+Tn−3T_n = T_{n-1} + T_{n-2} + T_{n-3}Tn​=Tn−1​+Tn−2​+Tn−3​ where TnT_nTn​ is the nnn-th Tribonacci number and n≥3n \\geq 3n≥3. Your task is to write a recursive function that takes as argument an integer nnn and returns the nnn-th Tribonacci number. It should have the following signature: def tribonacci(n)  Example: print(tribonacci(5)) #This should print 4  Use this function to generate the Tribonacci sequence using the Sequence class. Example: tribonacci_sequence = Sequence(tribonacci) print(tribonacci_sequence.generate_sequence(10))  Output: [0, 0, 1, 1, 2, 4, 7, 13, 24, 44, 81]  "},{"title":"3e. Lucas numbers (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3e-lucas-numbers-1-point","content":"The Lucas sequence is the sequence 222, 111, 333, 444, 777, 111111, 181818, 292929, …\\dots…. Can you see a trend here? Starting with 222 and 111, each successive number is the sum of the previous two numbers. In this sense, Lucas numbers follow the same rule as Fibonacci numbers but start at different integers. Your task is to write a recursive function that takes as argument an integer nnn and returns the nnn-th Lucas number. It should have the following signature: def lucas(n)  Example: print(lucas(5)) #This should print 11  Use this function to generate the Lucas sequence using the Sequence class. Example: lucas_sequence = Sequence(lucas) print(lucas_sequence.generate_sequence(10))  Output: [2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123]  "},{"title":"3f. Padovan numbers (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3f-padovan-numbers-1-point","content":"The Padovan sequence is the sequence 111, 111, 111, 222, 222, 333, 444, 555, 777, …\\dots…. Can you see a trend here? Starting with 111, 111, and 111, each successive number is the sum of the two numbers before the previous number. In mathematical notation, we denote this as: Pn=Pn−2+Pn−3P_n = P_{n-2} + P_{n-3}Pn​=Pn−2​+Pn−3​ where PnP_nPn​ is the nnn-th Padovan number and n≥2n \\geq 2n≥2. Your task is to write a recursive function that takes as argument an integer nnn and returns the nnn-th Padovan number. It should have the following signature: def padovan(n)  Example: print(padovan(5)) #This should print 3  Use this function to generate the Padovan sequence using the Sequence class. Example: padovan_sequence = Sequence(padovan) print(padovan_sequence.generate_sequence(10))  Output: [1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12]  "},{"title":"3g. Pell numbers (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3g-pell-numbers-1-point","content":"The Pell numbers are the sequence 000, 111, 222, 555, 121212, 292929, 707070, 169169169, 408408408, …\\dots…. Can you see a trend here? Starting with 000 and 111, each successive number is the sum of the two times the previous number and the second previous number. In mathematical notation, we denote this as: Pn=2(Pn−1)+Pn−2P_n = 2 (P_{n-1}) + P_{n-2}Pn​=2(Pn−1​)+Pn−2​ where PnP_nPn​ is the nnn-th Pell number and n≥2n \\geq 2n≥2. Your task is to write a recursive function that takes as argument an integer nnn and returns the nnn-th Pell number. It should have the following signature: def pell(n)  Example: print(pell(5)) #This should print 29  Use this function to generate the Pell sequence using the Sequence class. Example: pell_sequence = Sequence(pell) print(pell_sequence.generate_sequence(10))  Output: [0, 1, 2, 5, 12, 29, 70, 169, 408, 985, 2378]  "},{"title":"3h. Jacobsthal numbers (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3h-jacobsthal-numbers-1-point","content":"The Jacobsthal numbers is the sequence 000, 111, 111, 333, 555, 111111, 212121, 434343, 858585, …\\dots…. Can you see a trend here? They are very similar to the Pell numbers. Starting with 000 and 111, each successive number is the sum of the previous number and two times the second previous number. In mathematical notation, we denote this as: Jn=Jn−1+2(Jn−2)J_n = J_{n-1} + 2(J_{n-2})Jn​=Jn−1​+2(Jn−2​) where JnJ_nJn​ is the nnn-th Jacobsthal number and n≥2n \\geq 2n≥2. Your task is to write a recursive function that takes as argument an integer nnn and returns the nnn-th Pell number. It should have the following signature: def jacobsthal(n)  Example: print(jacobsthal(5)) #This should print 11  Use this function to generate the Jacobsthal sequence using the Sequence class. Example: jacobsthal_sequence = Sequence(jacobsthal) print(jacobsthal_sequence.generate_sequence(10))  Output: [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341]  "},{"title":"4. Implement vending.py (12 points total)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4-implement-vendingpy-12-points-total","content":"Have you ever purchased some snacks from a Vending Machine? Think about the different steps involved in this process. You start by viewing the selection of snacks and deciding what you would like to purchase. Then, you make a selection, load money into the machine and purchase the item you desire. At this point, you may either request change or you may continue purchasing more items until you have no balance left. In this problem, you will use create a class VendingMachine that represents a Vending Machine. We will provide a simple Application Programming Interface (API) to describe the requirements of this class, but you are free to decide attributes within the class. "},{"title":"4a. Implement the constructor​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4a-implement-the-constructor","content":"Remember that you must initialize the attributes of the class using a constructor. Attributes represent properties of the entity. In this case, what are the different properties you might want to maintain for a Vending Machine? You may take inspiration from the description above. Feel free to add whatever attributes you think are appropriate. If you realize later on that you may need a new attribute, feel free to add it later! "},{"title":"4b. Display list of snacks and their quantities​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4b-display-list-of-snacks-and-their-quantities","content":"A vending machine should be able to display the snacks, their cost and quantities to the customer. Your class should have a method list_items that prints (not returns) a list of snacks with their respective quantities in the following format sorted alphabetically based on the item name: ITEM ($COST): NUM available  Hint: Python's sorted() function can be used to get a sorted list of keys from a dictionary. For example: vowel_counts = {'u':0, 'a':3, 'i':1, 'e':4, 'o':2} sorted_vowels = sorted(vowel_counts) print(sorted_vowels) # prints ['a', 'e', 'i', 'o', 'u']  "},{"title":"4c. Add items to the vending machine​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4c-add-items-to-the-vending-machine","content":"At some point, the vending machine may run out of snacks. One might want to restock the vending machine or add a new snack. Your class should implement a method add_item that takes item name, price and quantity as arguments and adds the item to the vending machine. When successfully added, it should print the following: QUANTITY ITEM_NAME(s) added to inventory  "},{"title":"4d. Insert money into the vending machine​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4d-insert-money-into-the-vending-machine","content":"In order to make a purchase, the user must be able to add money to their balance in the vending machine. Your class should implement a method insert_money that takes an amount as argument, checks if it is either $1, $2 or $3 and if so adds the amount to their customer's balance. The balance should be rounded to 222 decimal places. When successfully added, it should print the following: Balance: BALANCE  If not successful, it should display the following message: Invalid amount  "},{"title":"4e. Purchase a snack from the vending machine​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4e-purchase-a-snack-from-the-vending-machine","content":"Perhaps the most important aspect of a vending machine is to be able to purchase snacks. Your class should implement a method purchase that takes an item as argument. If the item is not in the vending machine, it should print the following informative message: Invalid item  If the item is in the vending machine, it should check if it is in stock and the customer has sufficient balance. If the item is out of stock, it should print the following informative message: Sorry ITEM is out of stock  If the customer does not have enough balance, it should print the following informative message: Insufficient balance. Price of ITEM is PRICE  Otherwise, the purchase can be made successfully. The quantity of the item should be decreased by 111 in the vending machine and the amount of the item should be deducted from the customer's balance (rounded to 222 decimal places). Lastly, the total sale of the vending machine should be incremented by the amount of the item sold (rounded to 222 decimal places). "},{"title":"4f. Give back the customer change​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4f-give-back-the-customer-change","content":"After a purchase is complete, the machine may need to return to the user change. Your class should include a method display_change that prints (not returns) the change that should be given back to the user. It should then set the user's balance to 000 since this amount has been given back to the user. Change: CHANGE  If the user does not have any change, it should print the following informative message: No change  "},{"title":"4g. Get the price of an item in the vending machine​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4g-get-the-price-of-an-item-in-the-vending-machine","content":"The user may want to check the price of an item before purchasing. Your class should include a method get_item_price that takes as argument an item name and returns (not prints) the price of that item. If the item does not exist in the vending machine, it should print the following informative message: Invalid item  "},{"title":"4h. Empty the vending machine​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4h-empty-the-vending-machine","content":"The owner may want to empty the vending machine by removing all items from it for cleaning or for other purposes. Your class should include a method empty_inventory that removes all items from the vending machine. It should print the following informative message: Inventory cleared  "},{"title":"4i. Get total sale of the vending machine​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4i-get-total-sale-of-the-vending-machine","content":"The owner may want to see the total sales of the vending machine. Your class should include a method get_total_sales that returns (not prints) the total sales of the vending machine. "},{"title":"4j. Get the quantity of an item in the vending machine​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4j-get-the-quantity-of-an-item-in-the-vending-machine","content":"The owner may want to check the quantity of an item to decide if it needs to be restocked. Your class should include a method get_item_quantity that takes as argument an item name and returns (not prints) the quantity of that item. If the item does not exist in the vending machine, it should print the following informative message: Invalid item  "},{"title":"4k. Remove an item from the vending machine​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4k-remove-an-item-from-the-vending-machine","content":"The owner may want to remove an item (from the possible selection) if they decide that a product is not selling well. Your class should include a method remove_item that takes as argument an item and removes all of that item. If successful, it should print the following message: ITEM removed from inventory  If the item does not exist in the vending machine, it should print the following informative message: Invalid item  "},{"title":"Test your Code​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#test-your-code","content":"Your code should work as the example below. # Create a new vending machine vending_machine = VendingMachine() # Add some items to the inventory vending_machine.add_item('Soda', 1.50, 5) vending_machine.add_item('Chips', 0.75, 10) vending_machine.add_item('Candy', 0.50, 15) # Show the available items vending_machine.list_items() # Insert some coins vending_machine.insert_money(1.00) vending_machine.insert_money(1.00) # Purchase an item vending_machine.purchase('Soda') # Get the price of an item print(vending_machine.get_item_price('Chips')) # Purchase another item vending_machine.purchase('Chips') # Get the total sales print(vending_machine.get_total_sales()) # Remove an item vending_machine.remove_item('Candy') # Show the available items again vending_machine.list_items() # Get the quantity of an item print(vending_machine.get_item_quantity('Gum')) # Empty the inventory vending_machine.empty_inventory() # Show the available items again vending_machine.list_items()  5 Soda(s) added to inventory 10 Chips(s) added to inventory 15 Candy(s) added to inventory Available items: Candy ($0.5): 15 available Chips ($0.75): 10 available Soda ($1.5): 5 available Balance: 1.0 Balance: 2.0 Purchased Soda Balance: 0.5 0.75 Insufficient balance. Price of Chips is 0.75 1.5 Candy removed from inventory Available items: Chips ($0.75): 10 available Soda ($1.5): 4 available Invalid item None Inventory cleared No items in the vending machine  "},{"title":"5. Implement marbles.py​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#5-implement-marblespy","content":"Do people still play with marbles? Imagine you found a bag of marbles in your parents' attic that has been collecting dust for years. You shake the dust off, close your eyes, and pick out a marble. What color marble did you pull out? In this problem, you will create the class MarbleBag and functions for taking out a marble, adding a marble, and calculating the permutations of marbles. "},{"title":"5a. Implement the MarbleBag constructor​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#5a-implement-the-marblebag-constructor","content":"To get started, create the MarbleBag class with one constructor that takes in three parameters (besides self): number of red marbles, number of green marbles, and number of blue marbles. These should be stored collectively in some data structure such that you can reference them again. Hint/Extra: So far, you've learned about __init__, which is the default constructor. Another default method is __str__ which is called when you print an object. You can override the default __str__ by adding function __str__(self) in your class and returning a string that you want printed. This is not necessary for the assignment, but will be very helpful in verifying the properties of an object (i.e., in verifying the contents of the marble bag). For example, you could have __str__(self) return an f-string of the counts of red, green, and blue marbles like the example below: bag = MarbleBag(1, 2, 3) print(bag) # may print: The marble bag has 1 red, 2 green, and 3 blue marbles.  "},{"title":"5b. Implement the get_contents method (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#5b-implement-the-get_contents-method-1-point","content":"We need a function that let's us easily see all the contents in the marble bag. Create a function called get_contents that takes in no parameters (besides self, of course) and returns a dictionary with marble color counts. Example: bag = MarbleBag(1, 2, 3) print(bag.get_contents()) # prints {'red': 1, 'green': 2, 'blue': 3}  "},{"title":"5c. Implement the take_marble() method (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#5c-implement-the-take_marble-method-1-point","content":"Taking a marble out of the marble bag is random. For this method, you will need to import the random module in order to randomly select a marble to take out of the bag (i.e., randomly select red, green, or blue marble). When a marble is removed from the bag, the count of marbles for that particular color must be decremented by 1. The return for this method must be the marble taken from the bag (&quot;red&quot;, &quot;green&quot;, or &quot;blue&quot;). If there are no marbles to be removed from the bag, print &quot;Bag is empty.&quot; and return None. Note that, since selection for taking out is random, this function does not require a parameter (besides self). "},{"title":"5d. Implement the add_marbles() method (1 point)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#5d-implement-the-add_marbles-method-1-point","content":"Adding marbles to the marble bags involves adding red, green, and/or blue marbles all at the same time. Thus, this function must take in three parameters: number of red marbles to add, number of green marbles to add, and number of blue marbles to add. The function should add those marbles to the bag. "},{"title":"5e. Implement the all_permutations() method (3 points)​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#5e-implement-the-all_permutations-method-3-points","content":"A permutation is a way in which a set of things can be ordered. This function requires you to find all permutations of the marbles in the bag. For example: If the marble bag has 1 red, 1 green, and 1 blue, then there are 6 permutations (each permutation is represented as a tuple): ('red', 'blue', 'green')('red', 'green', 'blue')('green', 'blue', 'red')('green', 'red', 'blue')('blue', 'red', 'green')('blue', 'green', 'red') If the marble bag has 2 red, 1 green, and 1 blue, then there are 12 permutations. If the marble bag has 3 red, 2 green, and 1 blue, then there are 60 permutations. As you can see, the larger the inputs the larger the number of permutations. Thus, this example can be solved recursively by solving smaller problems in order to solve the larger problem. We highly suggest you create a helper function (you can call it permutations_helper()) for this function. In all_permutations(), you can call permutations_helper(). Inside permutations_helper() is where the recursive calls happen to permutations_helper(). It is common practice to use a helper function when doing recursion. The function should return a set of permutations (a set is helpful here as we have no use for duplicate permutations), where each permutation is a tuple. Example: bag = MarbleBag(1, 2, 1) print(bag.all_permutations())  Output: {('blue', 'red', 'green', 'green'), ('red', 'blue', 'green', 'green'), ('green', 'blue', 'red', 'green'), ('green', 'green', 'red', 'blue'), ('green', 'red', 'green', 'blue'), ('green', 'red', 'blue', 'green'), ('green', 'green', 'blue', 'red'), ('red', 'green', 'green', 'blue'), ('blue', 'green', 'green', 'red'), ('red', 'green', 'blue', 'green'), ('green', 'blue', 'green', 'red'), ('blue', 'green', 'red', 'green')}  Hint: First, think about the base case. When do we want to stop permutating? ... That is, when are we unable to continue permutating? ... What are the counts of each marble color when we can no longer permutate? Next, think about the recursive cases. We want to recursively shrink the problem into smaller problems. Let's say we have 6 marbles (1 red, 2 green, 3 blue). There's 60 permutations total. But, what if we remove one of those marbles, say red? We now have 5 marbles (0 red, 2 green, 3 blue), which only has 10 permutations! What if we remove a green instead of a red? We have 5 marbles (1 red, 1 green, 3 blue), which only has 20 permutations. What if we remove a blue instead of green? We would have 5 marbles (1 red, 2 green, 2 blue), which only has 30 permutations. 10+20+30=60! By removing one marble from each color and combining those results, we were able to find all permutations for the original 6 marbles. "},{"title":"Grading Scale​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#grading-scale","content":"Note that points may be obtained from anywhere, you do not need to try to complete work in any particular order. There is also an abundance of possible points to obtain, giving you options in what you want to work on in order to get your total points within the desired range. "},{"title":"1: Below Standards: 0-5 points​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#1-below-standards-0-5-points","content":""},{"title":"2: Approaching Standards: 6-11 points​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#2-approaching-standards-6-11-points","content":""},{"title":"3: Meeting Standards: 12-17 points​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#3-meeting-standards-12-17-points","content":""},{"title":"4: Exceeding Standards: 18+ points​","type":1,"pageTitle":"Object Oriented Programming","url":"/main/assignments/oop#4-exceeding-standards-18-points","content":""},{"title":"Lists, Tuples, and Strings","type":0,"sectionRef":"#","url":"/main/assignments/sequence-types","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#about","content":"The aim of this homework assignment is to practice working with sequence types. The focus in on getting comfortable working with strings, lists, and tuples. Be aware that you will be required to use the knowledge and skills you have acquired so far to succeed in this assignment. This includes defining functions, evaluating boolean expressions, evaluating arithmetic expressions, taking user input among others. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#learning-objectives","content":"Practice working with strings.Practice working with lists and tuples.Practice working with python string methods. "},{"title":"Estimated Size​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#estimated-size","content":"This assignment requires you to implement 555 Python files. Each file will have a few functions to implement.Each function can be reasonably implemented in 1−51 - 51−5 lines of code.Many functions have simple computations, similar to the first assignment.Some functions require you to use other functions implemented by you in the same file.  "},{"title":"Note​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#note","content":"You do not need to use any assert statements in this assignment. You do not need to do any type checking, sanity checking or input validity checking in this assignment.  "},{"title":"Preamble​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#preamble","content":"We are trying a sort of new approach to the homework assignments. You will be presented with a bunch of options of things to work on and can choose what seems reasonable to try and work toward the point totals you want. We do not expect you to do everything. Note that the exceeding threshold is at 18+ points, whereas there are 37 total points to possibly gain. "},{"title":"0. Setup​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#0-setup","content":"Make a folder on your computer and open it in VSCode. You must create five files in this folder. Make sure that you do not rename any of these files. stats.pystr_checks.pyrps.pytup_frac.pycipher.py Remember that for every file you need to have comments indicating the authors at the, for example: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  The # Author/# Authors, # Email/# Emails, and # Spire ID/# Spire IDs are the only really necessary formatting details. Some copying and pasting here will save you some time and sanity. Note that these details are necessary for the auto-grader to recognize your solution. "},{"title":"1. Implement stats.py​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#1-implement-statspy","content":"This problem is a revisit to elementary statistics, and you will implement functions to operate on collections of data to understand certain quantities of interest. "},{"title":"1a. Implement Minimum (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#1a-implement-minimum-1-point","content":"The minimum value in a collection of data is the value with the smallest magnitude. Your task is to implement a function with the following signature: def list_min(l)  This function should take as input a list l and returns the minimum value in l. Example: list_min([1, 2, 3]) # This should return 1 list_min(['bb', 'cb', 'abc']) # This should return abc  Hint: Consider using the Python min() function. "},{"title":"1b. Implement Maximum (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#1b-implement-maximum-1-point","content":"The maximum value in a collection of data is the value with the largest magnitude. Your task is to implement a function with the following signature: def list_max(l)  This function should take as input a list l and returns the maximum value in l. Example: list_max([1, 2, 3]) # This should return 3 list_max(['bb', 'cb', 'abc']) # This should return 'cb'  Hint: Consider using the Python max() function. "},{"title":"1c. Implement Range (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#1c-implement-range-1-point","content":"The range of a collection of data is defined as the difference between the maximum value and the minimum value. Your task is to implement a function with the following signature: def list_range(l)  This function should take as input a list l and returns the range of l. Example: list_range([1, 2, 3]) # This should return 2 list_range([20, 40, 1, 3, 400]) # This should return 399  Hint: Consider using 1a. and 1b. to simplify your work. "},{"title":"1d. Implement Mean (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#1d-implement-mean-1-point","content":"The mean of a collection of data is defined as the sum of the values in the collection divided by the total number of values in the collection. Your task is to implement a function with the following signature: def list_mean(l)  This function should take as input a list l and returns the mean of l. Example: list_mean([1, 2, 3]) # This should return 2 list_mean([5, 5, 4, 4]) # This should return 4.5  Hint: Consider using the Python sum() function. "},{"title":"1e. Implement Median (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#1e-implement-median-1-point","content":"The median of a collection of data is the middle-most value in the sorted collection. Your task is to implement a function with the following signature: def list_median(l)  This function should take as input a list l and returns the median of l. You may assume that l always contains an odd number of elements. Example: list_median([1, 2, 3]) # This should return 2 list_median([5, 5, 4, 4, 6]) # This should return 5 list_median(['abc', 'ab', 'bc']) # This should return 'abc'  Hint: Consider using the Python sorted() function. "},{"title":"2. Implement str_checks.py​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#2-implement-str_checkspy","content":"In this problem, you will use functions to perform some simple checks on strings. Any background information that you may need is provided to you. "},{"title":"2a. Palindrome Strings (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#2a-palindrome-strings-2-points","content":"Palindromes are strings that read the same backwards as forwards. For example, madam and racecar. Your task is to implement a function with the following signature: def is_palindrome(s)  The function should take as input a string s and returns if s is a palindrome or not. Example: is_palindrome('foo') # This should return False is_palindrome('madam') # This should return True  "},{"title":"2b. Anagrams (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#2b-anagrams-2-points","content":"A string is said to be an anagram of another string if it can be created by rearranging the letters of the other string. For example, fried is an anagram of fired and vice versa. Another example is listen and silent. Your task is to implement a function with the following signature: def is_anagram(s, t)  The function should take as input two strings s and t and return if the two strings are anagrams of each other. Example: is_anagram('fired', 'fried') # This should return True is_anagram('fired', 'silent') # This should return False  "},{"title":"2c. 'Same' Strings (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#2c-same-strings-2-points","content":"For this problem, we define two strings to be 'same' if they have the same alphabets in the same order irrespective of whether the letters are in upper or lower case. For example, foo, Foo, fOO, FoO are all 'same' strings. Your task is to implement a function with the following signature: def same_word(s, t)  The function should take as input two strings s and t and returns whether the two strings are 'same' or not. Example: same_word('foo', 'Foo') # This should return True same_word('foo', 'bar') # This should return False  Hint: Consider using the Python String .lower() function. "},{"title":"3. Implement rps.py​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#3-implement-rpspy","content":"Do you remember playing Rock, Paper, Scissors? Here's a quick reminder: At the same time, two players display one of three symbols - a rock, paper, or scissors. A rock beats scissors by destroying it, scissors beat paper by cutting it, and paper beats rock by covering it. In this problem, you will implement functions to simulate this game using a python program. Btw, this problem will involve using boolean expressions! You might want to refresh your knowledge before moving ahead. "},{"title":"3a. Get input from the user (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#3a-get-input-from-the-user-2-points","content":"Your task is to implement a function with the following signature: def get_input()  The function does not take any argument. It should ask the user for an input string (which would be either rock, paper or scissors) and return the user's choice in lower case. Example: get_input() # If the user types 'rock' when prompted, this should return 'rock' get_input() # If the user types 'PaPeR' when prompted, this should return 'paper'  "},{"title":"3b. Check if player 1 wins (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#3b-check-if-player-1-wins-1-point","content":"Your task is to implement a function with the following signature: def p1_wins(p1, p2)  The function should take as input two strings p1 and p2 corresponding to the choices of player 1 and player 2 respectively (This means they could be either rock, paper or scissors). It should return whether player 1 wins or not based on p1 and p2. Example: p1_wins('rock', 'scissors') # This should return True p1_wins('paper', 'scissors') # This should return False  "},{"title":"3c. Check if player 2 wins (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#3c-check-if-player-2-wins-1-point","content":"Your task is to implement a function with the following signature: def p2_wins(p1, p2)  The function should take as input two strings p1 and p2 corresponding to the choices of player 1 and player 2 respectively (This means they could be either rock, paper or scissors). It should return whether player 2 wins or not based on p1 and p2. Example: p2_wins('rock', 'scissors') # This should return False p2_wins('paper', 'scissors') # This should return True  "},{"title":"3d. Check for a tie (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#3d-check-for-a-tie-1-point","content":"Your task is to implement a function with the following signature: def tie(p1, p2)  The function should take as input two strings p1 and p2 corresponding to the choices of player 1 and player 2 respectively (This means they could be either rock, paper or scissors). It should return if there is a tie based p1 and p2. Example: tie('paper', 'paper') # This should return True tie('paper', 'rock') # This should return False  "},{"title":"Play the game!​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#play-the-game","content":"You can play your game to test it. Use the following code snippet after implementing 3a.−3d.3a. - 3d.3a.−3d. import random p1 = get_input() p2 = random.choice([&quot;rock&quot;, &quot;paper&quot;, &quot;scissors&quot;]) print(f&quot;Player 1: {p1}&quot;) print(f&quot;Player 2: {p2}&quot;) print(f&quot;P1 Winner : {p1_wins(p1, p2)}&quot;) print(f&quot;P2 Winner : {p2_wins(p1, p2)}&quot;) print(f&quot;No Winner : {tie(p1, p2)}&quot;)  "},{"title":"4. Implement tup_frac.py​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4-implement-tup_fracpy","content":"Do you remember fractions from pre-calculus? In this problem, we will implement some basic operations on fractions. Don't worry if you don't remember! We will reintroduce the operations for your assistance. All the necessary mathematical background you may need is provided below. "},{"title":"4a. Simplify fractions (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4a-simplify-fractions-1-point","content":"To simplify a fraction, we divide the top and bottom by the highest number that can divide into both numbers exactly i.e. the greatest common divisor (gcd). For example, 210\\frac{2}{10}102​ in simplified form is 15\\frac{1}{5}51​. Your task is to implement a function with the following signature: def simplify(frac)  The function take as argument a tuple frac that stores the top as the first element and bottom as the second element. It should simplify the fraction and return a tuple with the first element as the simplified top and the second element as the simplified bottom. Example: simplify((2, 10)) # This should return (1, 5) simplify((5, 13)) # This should return (5, 13)  Hint: Consider using the Python math.gcd() function. "},{"title":"4b. Create Fractions (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4b-create-fractions-1-point","content":"Your task is to implement a function with the following signature: def make_fraction(top, bottom)  The function take as argument two integers top and bottom. Note that bottom cannot be negative. It should return a simplified fraction created from top and bottom as a tuple. Example: make_fraction(1, 5) # This should return (1, 5) make_fraction(2, 10) # This should return (1, 5)  "},{"title":"4c. Addition of Fractions (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4c-addition-of-fractions-1-point","content":"Addition of two fractions ab\\frac{a}{b}ba​ and cd\\frac{c}{d}dc​ involves several steps: Step 111: Find the least common multiple of bbb and ddd. Let's call this lll. This is the bottom of the sum of the two fractions. Step 222: Multiply aaa by lb\\frac{l}{b}bl​Step 333: Multiply ccc by ld\\frac{l}{d}dl​Step 444: Add the two numbers obtained in Step 222 and Step 333. This is the top of the sum of the two fractions.Step 555: Simplify the fraction. Your task is to implement a function with the following signature: def add(frac1, frac2)  The function take as argument two fractions stored as tuples frac1 and frac2 where the first element of the tuple stores the top and the second element stores the bottom. It should add the two fractions according to the steps described above and return the new fraction as a tuple where the first element of the tuple stores the top and the second element stores the bottom. Example: add((1, 5), (3, 5)) # This should return (4, 5) add((1, 6), (3, 4)) # This should return (11, 12)  Hint: Consider using the Python math.lcm() function. "},{"title":"4d. Negate Fractions (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4d-negate-fractions-1-point","content":"The negation of a fraction ab\\frac{a}{b}ba​ is the fraction −ab\\frac{-a}{b}b−a​. Your task is to implement a function with the following signature: def negate(frac)  The function take as argument a fraction stored as a tuple frac where the first element of the tuple stores the top and the second element stores the bottom. It should return the negation of frac as a tuple where the first element of the tuple stores the top and the second element stores the bottom. Example: negate((1, 5)) # This should return (-1, 5) negate((-1, 5)) # This should return (1, 5)  "},{"title":"4e. Subtraction of Fractions (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4e-subtraction-of-fractions-1-point","content":"Subtraction of two fractions follows almost the same procedure as addition. The only difference is that in Step 444, instead of adding we subtract the number obtained in Step 333 from that obtained in Step 222. Your task is to implement a function with the following signature: def sub(frac1, frac2)  The function take as argument two fractions stored as tuples frac1 and frac2 where the first element of the tuple stores the top and the second element stores the bottom. It should subtract frac2 from frac1 according to the steps described above and return the new fraction as a tuple where the first element of the tuple stores the top and the second element stores the bottom. Example: sub((3, 5), (1, 5)) # This should return (2, 5) sub((3, 4), (1, 6)) # This should return (7, 12)  Hint: There exists a one/two line solution for this problem by using 4c. and 4d. "},{"title":"4f. Multiplication of Fractions (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4f-multiplication-of-fractions-1-point","content":"Multiplication of two fractions ab\\frac{a}{b}ba​ and cd\\frac{c}{d}dc​ involves several steps: Step 111: Multiply aaa by ccc. This becomes the new top.Step 222: Multiply bbb by ddd. This becomes the new bottom.Step 333: Simplify the fraction. Remember that multiplying a negative number with another negative number results in a positive number. Your task is to implement a function with the following signature: def mul(frac1, frac2)  The function take as argument two fractions stored as tuples frac1 and frac2 where the first element of the tuple stores the top and the second element stores the bottom. It should multiply frac1 by frac2 according to the steps described above and return the new fraction as a tuple where the first element of the tuple stores the top and the second element stores the bottom. Example: mul((3, 5), (1, 5)) # This should return (3, 25) mul((3, 4), (1, 6)) # This should return (1, 8)  "},{"title":"4g. Multiplicative Inverse of Fractions (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4g-multiplicative-inverse-of-fractions-2-points","content":"The multiplicative inverse of a fraction ab\\frac{a}{b}ba​ is the fraction ba\\frac{b}{a}ab​. Your task is to implement a function with the following signature: def inverse(frac)  The function take as argument a fraction stored as a tuple frac where the first element of the tuple stores the top and the second element stores the bottom. It should return the multiplicative inverse of frac as a tuple where the first element of the tuple stores the top and the second element stores the bottom. Example: inverse((3, 4)) # This should return (4, 3) inverse((-3, 4)) # This should return (-4, 3)  Hint: Remember that the top of the input fraction can be negative. When calculating the multiplicative inverse, the new bottom should not be negative. You must take into account the sign of the top and handle it so the sign is preserved and the new bottom is not negative. Hint: Consider using the Python abs() function. "},{"title":"4h. Division of Fractions (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4h-division-of-fractions-2-points","content":"Dividing a fraction ab\\frac{a}{b}ba​ by cd\\frac{c}{d}dc​ is equivalent to multiplying ab\\frac{a}{b}ba​ by dc\\frac{d}{c}cd​. Your task is to implement a function with the following signature: def div(frac1, frac2)  The function take as argument two fractions stored as tuples frac1 and frac2 where the first element of the tuple stores the top and the second element stores the bottom. It should divide frac1 by frac2 according to the steps described above and return the new fraction as a tuple where the first element of the tuple stores the top and the second element stores the bottom. Example: div((3, 5), (4, 5)) # This should return (3, 4) div((3, 4), (1, 6)) # This should return (9, 2) div((3, 5), (-1, 6)) # This should return (-18, 5)  Hint: There exists a one/two line solution for this problem by using 4f. and 4g. "},{"title":"5. Implement cipher.py​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#5-implement-cipherpy","content":"Ciphers are programs for encrypting and decrypting data. A cipher converts a message, called plaintext, into ciphertext. This process is called encryption. The process to obtain plaintext from ciphertext reverses the encryption and is called decryption. In this problem, you will implement encryption and decryption schemes for the ciphers specified below. All information you need is provided. "},{"title":"l337 Cipher​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#l337-cipher","content":"The l337 cipher encoding scheme is defined as below: Character\tEncodingO\t0 I\t1 E\t3 A\t4 S\t5 T\t7 B\t8 For example, EAT would be encoded as 347 and MANAN will be encoded as M4N4N. "},{"title":"5a. l337 Encryption (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#5a-l337-encryption-2-points","content":"Your task is to implement a function with the following signature: def l337_encrypt(s)  The function take as argument a string s that represents a message and replaces each of the characters described in the table above (if it occurs in the string) with the corresponding encoding and returns the encoding as a string. Example: l337_encrypt('EAT') # This should return '347' l337_encrypt('MANAN') # This should return 'M4N4N'  Hint: Consider using String .replace() function. "},{"title":"5b. l337 Decryption (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#5b-l337-decryption-2-points","content":"Your task is to implement a function with the following signature: def l337_decrypt(s)  The function take as argument a string s that represents an encoding and replaces each of the encoded characters described in the table above (if it occurs in the string) with the corresponding character and returns the original message as a string. Example: l337_decrypt('347') # This should return 'EAT' l337_dncrypt('M4N4N') # This should return 'MANAN'  Hint: Consider using String .replace() function. "},{"title":"Odd-Even Cipher​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#odd-even-cipher","content":"This cipher creates two substrings from the message: s1s_1s1​: It comprises of all the characters at odd indicess2s_2s2​: It comprises of all the characters at even indices. It then joins (concatenates) the s2s_2s2​ to s1s_1s1​. This is the required encoding.  For example, abcd generates the substrings bd and ac and thus, the encoding is bdac. Likewise, abcdef is encoded as bdface. The decryption scheme is rather more involved. Step 111: Convert the encoded string into a list. Now, you can access each letter in the encoded string. Step 222: Read the first half of the encoded string. Access each letter in the string and store these letters at odd positions in the list. Step 333: Read the second half of the encoded string. Access each letter in the string and store these letters at even positions in the list. Step 444: Convert the list into a string. This string represents the original message. "},{"title":"5c. Odd-Even Encryption (2 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#5c-odd-even-encryption-2-points","content":"Your task is to implement a function with the following signature: def odd_even_encrypt(s)  The function take as argument a string s that represents a message and performs the encoding process described above and returns the encoding as a string. Example: odd_even_encrypt('abcd') # This should return 'bdac' odd_even_encrypt('MANAN') # This should return 'AAMNN'  "},{"title":"5d. Odd-Even Decryption (3 points)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#5d-odd-even-decryption-3-points","content":"Your task is to implement a function with the following signature: def odd_even_decrypt(s)  The function take as argument a string s that represents an encoding and reverses the encoding process described above and returns the original message as a string. Example: odd_even_decrypt('bdac') # This should return 'abcd' odd_even_decrypt('AAMNN') # This should return 'MANAN'  Hint: For Step 444, you can use the following where lll is the name of the list. ''.join(l)  "},{"title":"l337 and two-shuffle cipher​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#l337-and-two-shuffle-cipher","content":"Finally, let's use the two ciphers above to generate our own cipher! This cipher first encodes a message using the l337 scheme and then two times using the odd-even scheme. Fun Fact: For the following two problems, you exclusively need to use 5a. - 5d. "},{"title":"5e. Encryption (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#5e-encryption-1-point","content":"Your task is to implement a function with the following signature: def cipher_encrypt(s)  The function take as argument a string s that represents a message and performs the encoding process described above and returns the encoding as a string. Example: cipher_encrypt('abcd') # This should return 'dcba' cipher_encrypt('MANAN') # This should return '4N4MN'  "},{"title":"5f. Decryption (1 point)​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#5f-decryption-1-point","content":"Your task is to implement a function with the following signature: def cipher_decrypt(s)  The function take as argument a string s that represents an encoding and reverses the encoding process described above and returns the original message as a string. Example: cipher_decrypt('dcba') # This should return 'abcd' cipher_decrypt('4N4MN') # This should return 'MANAN'  "},{"title":"Grading Scale​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#grading-scale","content":"Note that points may be obtained from anywhere, you do not need to try to complete work in any particular order. There is also an abundance of possible points to obtain, giving you options in what you want to work on in order to get your total points within the desired range. "},{"title":"1: Below Standards: 0-5 points​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#1-below-standards-0-5-points","content":""},{"title":"2: Approaching Standards: 6-11 points​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#2-approaching-standards-6-11-points","content":""},{"title":"3: Meeting Standards: 12-17 points​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#3-meeting-standards-12-17-points","content":""},{"title":"4: Exceeding Standards: 18+ points​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/assignments/sequence-types#4-exceeding-standards-18-points","content":""},{"title":"Functions","type":0,"sectionRef":"#","url":"/main/guides/functions","content":"","keywords":""},{"title":"What is a function?​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#what-is-a-function","content":"A function in Python is a block of code designed to perform a specific task that can be reused multiple times without the need to rewrite it. By breaking down a problem into smaller, specific tasks, functions allow programmers to write more organized and efficient code. "},{"title":"Parts of a function​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#parts-of-a-function","content":"All functions have two main parts: The function header defines the function's name, what inputs it can expect, if any, and what we can expect it to return if anything. There are 4 main parts to a function header: The def keyword will appear at the beginning of the function header, signifying to python that &quot;Hey! This line is the definiton of a new function!&quot;The function name is simply the name of the function. For example, print()'s function name is 'print', and math.pow(a, b)'s name is 'pow'. The function name is what you use to call the function, much like how you use a variable's name to use the value of a variable. The function name will always be followed by a set of parenthesis: ()Parameters, also known as arguments, are the inputs that are passed to the function. Parameters are optional, since in some cases you may not want your function to take in any values. Parameters are defined as a series of parameter names separated by commas, written in the parenthesis following the function name.At the end of the function header, you will always find a colon (:) followed by a new line. The function body is the code that is executed when the function is called. The function body starts on the first line after the function header. (right after the :) "},{"title":"Defining a new function​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#defining-a-new-function","content":"To define a function in Python, we first write our function header. For the sake of example, let's say I want to write a function that takes in one value a, triples it, and prints the result out. First, we write the def keyword to signify we're defining a new function. Then, we write the function's name. Function names are important! You want it to be clear what a function does from its name. In this case, we'll name our function 'triple'. Following our function name, we insert a set of parenthesis, followed by a colon. This is our bare bones function header: def triple():  While this will work, we also want our function to take in arguments: we can't triple a if we don't let the programmer provide us a!. Therefore we define a single parameter named a by simple inserting a in the parenthesis: def triple(a):  Now that we have written the function header, we can write the body. The function body must be indented one level more than the function header. In this case, we simply want to calculate the value 3 * a and print the result, so our function body will simply be print(3 * a)  Adding this to our function header, we have def triple(a): print(3 * a)  Here is an example that shows the general structure of a function in Python: /* code before the function */ def function_name (parameters)): /* function body */  It's important that, when we go to write the next line of code in our program after a function, we write the new code outside the function. The way python tells where the function body stops is by indentation. It's easiest to see this in examples. In the above example, if I wanted to write a line of code that prints the string 'Done.' after the definition of the triple() function, but not in the function, I would write the line on the same level of indentation as the function header, rather than the function body: def triple(a): print(3 * a) print('Done.')  If I didn't unindent this new line, python would see it as apart of the function definition. "},{"title":"Calling a function in Python​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#calling-a-function-in-python","content":"Once the function is defined, you can call it in your code by invoking the function name, followed by parentheses. For example, if I wanted to call the built-in print function, I would just write print('This is me printing!')  The same goes for functions we define. If I want to call the triple function with input value 3, I would write triple(3)  It is important that we pass a parameter to the triple function. If I were to simply make a call to triple() with no parameter, python would look for a function named triple with no parameters. Think of this like if you call a restaurant to order food. You tell them you want to place an order, they ask what you would like, and then you hang up. The restaurant doesn't know what to do, it needs extra information to do its job. The triple() function is the same way here, it needs a single parameter to do its job. "},{"title":"Types of parameters​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#types-of-parameters","content":"So far our functions have had a single parameter. To define multiple parameters, we simply write a list of parameter names separated by commas. "},{"title":"Positional parameters​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#positional-parameters","content":"Take the following sum() function as an example: def sum(a, b): result = a+b print(result)  This function expects two parameters: a and b, so to call sum I would need to pass two values. For example, if I call sum(2, 3), the function assigns a to be 2, since a appears first in the function definition and 2 is the first value passed, and b is assigned to be 3. For this reason, a and b are called positional parameters, since they are assigned to the value passed in their position. If we were to call sum(3, 2), then a would be 3 and b would be 2. "},{"title":"Default parameter values​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#default-parameter-values","content":"We can also define our parameters to have default values. Take the following name age function as an example, which takes in two positional parameters name and age, and prints a formatted string: def name_age(name, age): print(f&quot;{name} is {age} years old.&quot;)  Let's say most people whose names we're printing are 18 years old, with a few expections that are older or younger. We don't want to have to pass 18 as a second parameter every time, we just want to specify when age isn't 18. Therefore, we give age a default value of 18: def name_age(name, age=18): print(f&quot;{name} is {age} years old.&quot;)  If a value is not provided for these parameters when the function is called, the default value is used. For example, if I call name_age('John'), the function will use age's default value of 18. If we call the function with both name and age parameters, the provided value is used. In this case, we can pass two positional parameters, like name_age('John', 20). However, in some cases you might have 20 parameters with default values, and you only want to specify one. In this case, you would specify you want to change age in your call: name_age('John', age=20). "},{"title":"Type annotations​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#type-annotations","content":"In some cases, we want to specify what type of value we expect to be passed to a parameter. In this case, we use the : operator to specify the type of each parameter. Type annotations are optional, but can help with code readability. For example, our triple() function from before is expecting a single number, so we can add a type annotation to the a parameer that we're expecting a float. If we want our sum() function to expect two int parameters, we can specify that as well: def triple(a: float): print(3 * a) def add(a: int, b: int): result = a+b print(result)  We can also do this for functions with default parameters: def name_age(name: str, age=18: int): print(f&quot;{name} is {age} years old.&quot;)  "},{"title":"Return statements​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#return-statements","content":"All of our previous examples here have computed some value and passed the result to the print function. This might be useful for us, since it shows us the result in the terminal, but it isn't very useful for the program itself. Compare sum() to the 2 + 3 operator. sum(2, 3) will print out the value 5 to the terminal, where as 2+3 computes 5 &quot;in place&quot;, it's a value that the python program can use. For example, if we do value_1 = 2 + 3 value_2 = sum(2, 3)  The first line performs addition 2 + 3, which &quot;returns&quot; a value of 5, which is then stored in value_1. The second line does the same addition, but the sum() function only prints the value, it doesn't evaluate to 5 the same way that 2+3 does. Therefore the &quot;output&quot; of sum(2, 3) is None, since it returns nothing to the program. Some functions do return a value though. For example, math.pow(2, 3) calculates 2 to the 3rd power, which is 8, and returns back 8. To make our function return values, we use the return keyword, followed by the value we'd like to return. This specifies the value or values that the function returns after completing its operation. Returning a value is optional. To change our sum() function so that it returns a value, we can add the return keyword, followed by the value we want to return, result. def add(a: int, b: int): result = a+b print(result) return sum  Notice that we didn't have to get rid of the print statement. Printing and returning are not &quot;mutually exclusive&quot;, a function that prints can still return a value, and vice versa. Printing is useful for us, since it lets us see what the program is doing as it runs, but it doesn't provide the program with any additional features. return is what lets us use functions to perform calculations. danger Once a function executes a return statement, the function will stop running. Any code written in the function body that can only be reached after a return statement will never be executed, because the function will stop on the return. This is sometimes referred to as &quot;dead code&quot;, line print('Dead code :(') in the following example. def dead_code_example(): return 3 print('Dead code :(') # this code will never execute  "},{"title":"Return annotations​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#return-annotations","content":"Similar to type annotations for parameters, we can annotate what type we expect a function to return. This is done by adding -&gt; after the parameters in our function header, followed by a type. This is known as function annotation. Function annotations are optional, but they can be helpful for providing clarity and documentation for the code. For example: def sum(a: int, b: int) -&gt; int: sum=a+b return sum  This defined intuitively, so that reading across the function header, we have &quot;we're defining a function called sum, which takes in two int values, a and b, and returns an int. This way, we don't have to read the whole function body to figure out what the function's going to return "},{"title":"Function examples​","type":1,"pageTitle":"Functions","url":"/main/guides/functions#function-examples","content":"Write a function to print “Hello World”: def hello_world(): print(“hello world”)  Write a function to print the user’s name: def name(user_name): print(user_name)  Write a function to add 1 to the given number and print the result: def add_one(n): increased_n=n+1 print(increased_n)  Write a function to calculate the sum of two numbers: def add_numbers(a, b): sum=a+b return sum  Now let's look at a more complex example and try to implement the complete code: Write a program to prompt the user to enter their first name, last name, and age. Then, define a function to print this information def print_info(first_name, last_name, age): print(f&quot;First Name: {first_name}\\nLast Name: {last_name}\\nAge: {age}&quot;) first_name = input(&quot;Enter your first name: &quot;) last_name = input(&quot;Enter your last name: &quot;) age = input(&quot;Enter your age: &quot;) print_user_info(first_name, last_name, age)  Write a program that takes two numbers as input from the user and uses a function to calculate their addition, subtraction, multiplication, and modulus, and then returns these values. Finally, print these values. def operations(num1, num2): add = num1 + num2 sub = num1 - num2 mul = num1 * num2 mod = num1 % num2 return (add, sub, mul, mod) num1 = int(input(&quot;Enter the first number: &quot;)) num2 = int(input(&quot;Enter the second number: &quot;)) addition, subtraction, multiplication, modulus = operations(num1, num2) print(f&quot;The sum of {num1} and {num2} is {addition}.&quot;) print(f&quot;The difference of {num1} and {num2} is {subtraction}.&quot;) print(f&quot;The product of {num1} and {num2} is {multiplication}.&quot;) print(f&quot;The modulus of {num1} and {num2} is {modulus}.&quot;)  Write a program that takes three numbers as input, finds and returns the biggest number among them, and then prints the biggest number def find_max(a, b, c): max_num = a if b &gt; max_num: max_num = b if c &gt; max_num: max_num = c return max_num num1 = input(&quot;Enter the first number: &quot;) num2 = input(&quot;Enter the second number: &quot;) num3 = input(&quot;Enter the third number: &quot;) max_num = find_max(num1, num2, num3) print(&quot;The maximum number is:&quot;, max_num)  "},{"title":"Getting Unstuck","type":0,"sectionRef":"#","url":"/main/guides/getting-unstuck","content":"","keywords":""},{"title":"How to start​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#how-to-start","content":"Sometimes the hardest part of coding, especially when we're learning a language for the first time, is figuring out where to even start. There are two main steps to writing successful code: Developing an algorithm to solve the problemFiguring out how to code our algorithm "},{"title":"Example​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#example","content":"Let's say I give you three numbers, and ask you which of the three is the smallest. For example, I give you the numbers [3,7,1], and you need to determine somehow that 1 is the smallest. First, we develop an algorithm: Compare the first two numbers, and keep the smaller of the two.Compare the two remaining numbers, and tell me the smaller of the two. With our [3,7,1] example, we first compare 3 and 7. 3 is smaller, so we throw out 7. Then we compare 3 and 1, and say &quot;1 is smallest.&quot; Now that we've developed an algorithm, we just have to translate our algorithm into Python code. The easiest way to do this is to take the algorithm you've written, and put it in your source file as comments: # 1. Compare the first two numbers, and keep the smaller of the two. # 2. Compare the two remaining numbers, and tell me the smaller of the two.  and then writing our code in between the comments: # 1. Compare the first two numbers, and keep the smaller of the two. smaller = min(number1, number2) # 2. Compare the two remaining numbers, and tell me the smaller of the two. our_min = min(smaller, number3) print(f'{our_min} is smallest.')  "},{"title":"Asking for help​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#asking-for-help","content":"If you are stuck with how to start, Identify which step you are having trouble with. Are you having trouble figuring out how to solve the problem, or are you stuck on how to translate your algorithm into source code.Formulate a specific question about what you need help withMake a Piazza post, or ask for help in Office Hours Step 2 is by far the most helpful for us. If you say &quot;I am stuck on Todo 2&quot;, we have to essentially walk you through this process to figure out how to help you. Questions we'd love to answer are I'm having trouble with developing an algorithm to solve Todo 2, specifically with x.I know how to solve Todo 3, but I'm having trouble converting this step of my algorithm into Python code. "},{"title":"Stuck in the Middle​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#stuck-in-the-middle","content":"If you get stuck in the middle of coding a section, there are often two things that can be causing the block: You aren't sure what the next step in your algorithm isYou aren't sure how to convert the next step of your algorithm into code If you're finding yourself stuck because you don't know the next step in your algorithm, take a break from coding and try to write out your entire algorithm. Psuedocode and control-flow diagrams are both very useful in outlining your full algorithm. In either case, if you're still stuck, see the Asking for Help section above. Another reason you can get stuck in the middle of a section is that you have come up with a solution, but are stuck on how to write an efficient or &quot;clean&quot; solution. Our suggestion here is that you either Finish your current implementation, and then go back and tidy up specific sections.Restart entirely. Run through your algorithm top to bottom before you start to code anything, and look for things you can fix. The first suggestion often works better if your algorithm is solid, but you weren't quite sure the best way to implement one part of the algorithm. The second suggestion is better for cleaning up an inefficient algorithm. tip This is not something that goes away! Even as advanced programmers, we will get halfway through coding a section, and think Well, I know how I can finish this function, but it's going to end up really messy. Do I restart, or will this be manageable to tidy up later? This is a balancing act that you will get better at handling the more complicated problems you tackle. "},{"title":"Warning and Error Messages​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#warning-and-error-messages","content":"Once we're done coding, there are two main types of errors we can get, Compilation or interpretation errors: the source code we've written isn't valid PythonRuntime errors: our source code is valid, but the code performs an unexpected action while running In VSCode for Python, there is a program called the linter. The linter reads through our code, looking for syntax or style issues. How to fix a problem detected by the linter will obviously depend on the problem, but the linter broadly categorizes problems. VSCode will display issues detected by the linter by drawing a squiggly line under the problematic code segment. The color of the squiggly line will change depending on what type of problem was detected: A red underline signifies an error. The linter will produce an error if thinks there is a bug in your code.A green underline signifies a warning. Warnings mostly appear under functions names we have misspelled, under variables we declare and never use, or under variables we attempt to use before they are declared.A blue underline signifies information. In python, this usually means the code segment will run fine, but is bad practice, or is &quot;old&quot; python. In any case, if you hover over the underlined code, the error, warning, or information message will appear, often times indicating what you need to fix:  info What your linter considers an error, warning, or information will depend on what linter you install. Find more information on linter messages here. The VSCode Python extension uses Pylint by default. tip The underline colors listed above are the default colors. Your theme may change the color of the underlines. If you are red-green or green-red color deficient, I highly recommend changing your warning underline color from green to a different color. I use yellow. For a guide on how to do change your warning colors, see the Change Linter Colors guide. "},{"title":"Unexpected Errors​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#unexpected-errors","content":"Although the linter will detect many errors, there are some errors that the linter will not detect (at least by default). For example, say we have the following code: example.py text = input(&quot;What would you like to type?\\n&quot;) third_character = text[2] print(third_character)  First, we get some input string, and store it in text. Then, we get the character at index 2 of text (the third character), and store it in third_character. Finally, we print third_character out. As written, this code will result in zero messages from the linter. However, this doesn't mean nothing can go wrong. What if I just say Hi? There's only two characters, so happens when we try to access the third character? In Python, we will get the following message back: Traceback (most recent call last): File &quot;/path/to/example.py&quot;, line 2, in &lt;module&gt; third_character = text[2] ~~~~^^^ IndexError: string index out of range  This is an error message. This is essentially Python's way of saying, &quot;Something unexpected just happened, here's the problem we identified and what we were doing when it happened.&quot; More specifically this is what's called a traceback: Python has &quot;traced back&quot; it's steps to figure out: What happened?Where are we? What file are we in, and on what line? Are we in a function call?What steps did we take to get here? Did we make multiple nested function calls? If so, what function calls did we make? The first line of the error message should always read Traceback (most recent call last):  This line identifies an error occurred, and tells us that, if the error lists multiple function calls, the most recent function call is listed last (in other words, the problem happened in the last line listed). Next we have a series of code snippets of the form  File &quot;/path/to/example.py&quot;, line 2, in &lt;module&gt; third_character = text[2] ~~~~^^^  Each of these snippets lists The snippet itself, in this case third_character = text[2]Where the code lives, File &quot;/path/to/example.py&quot;, and on what line, line 2If the snippet is in a function, denoted as in function_name, or not in a function, denoted as in &lt;module&gt;. Code not written in a function is sometimes called &quot;top-level&quot; code. In this instance, the error message also tells us that the error is specifically in the attempt to access text[2], and not in the assignment of text[2] to third_character. In this case, we'd say that &quot;line 2 throws an error&quot;, or &quot;accessing text[2] throws an error.&quot; Finally, the error message will list the name of the specific error that occurred. In this case, we have IndexError: string index out of range  which indicates that we're attempted to access the element of text at an index that doesn't exist. See the Common Errors guide for tips on how to approach various specific errors. "},{"title":"More complicated errors​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#more-complicated-errors","content":"With more complicated code, your error might have multiple successive snippets listed. For example, if we make a function call, and then the error occurs inside the function call, like in: print-name.py def print_name(name): print('My name is ' + my_name) print_name('John')  Python will print out the location of each nested function call made, then the location of the code snippet where the problem happened. In this instance we get the following error message: Traceback (most recent call last): File &quot;/path/to/print-name.py&quot;, line 4, in &lt;module&gt; print_name('John') File &quot;/path/to/print-name.py&quot;, line 2, in print_name print('My name is ' + my_name) ^^^^^^^ NameError: name 'my_name' is not defined  There are two snippets: first the function call print_name('John'), which is listed as in &lt;module&gt; since it's &quot;top-level&quot; code, and then inside the function call we have print('My name is ' + my_name), which is in a call to the print_name function, so it is listed as in print_name. This gives us a sense of what the function call stack looked like at the time of the error, since each successive snippet is a nested function call, with the last line being where the error occurred. "},{"title":"Conditional Errors​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#conditional-errors","content":"It's possible that you sometimes get an error when you run your program, but not always. In our first example, giving an input of 3 characters or more will not cause an error, because there would be a third character to access. However, sometimes our program will return an error, like when we input Hi. If you only get an error sometimes, but not always, you should figure out Is the error always in the same place?Is it always the same error message?Is the code snippet using some sort of user input? Probably the most common error to get sometimes, but not always, is an IndexError, especially if you're accessing an index of user input. Say we're assuming that a user is going to give us a four digit binary number, and we want to check if the one's digit is less than 6. A bad way to check this would be number = input(&quot;What 4-digit number would you like to check?\\n&quot;) digit = int(number[3]) print(digit &lt; 6)  Why is this bad? Well, what happens if the user gives us a three digit number? number[3] will throw an IndexError. If you don't always get the same error, or the error isn't always in the same place, you likely have multiple errors. It's possible that one of them always happens, and the other only happens sometimes, but happens before we get to the error that is always there. "},{"title":"Unexpected Output​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#unexpected-output","content":"Say our code has run without any error, but the code isn't doing what we want it to. For example, your program runs successfully, but prints the wrong thing. This is where we largely get into the realm of debugging. Getting rid of error messages is also debugging, but it can be much easier to guess what might be going wrong from an error message than it is from an incorrect, but error-free output. There are four main ways of debugging: Rereading your source code and looking for bugsPutting print statements in various places to check values of variables or what parts of your code are/aren't being executedUsing the debuggerWriting unit tests "},{"title":"Manual Debugging​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#manual-debugging","content":"Rereading your source code is probably the easiest way to find small errors, so it's highly recommended in the beginning when your code is short. The main downside of this is that, if you've been coding for 2+ hours straight, it's often hard to look for errors in the code you've been staring. If you've ever written a paper and come back the next day to find lots of grammatical or spelling errors, this is the same idea. It can get hard to spot errors in code you've spent a lot of time looking at. tip Take a break before you start debugging. Seriously. If you've been coding for a couple hours straight, implementing your algorithm and getting rid of error messages, the best thing to do is take a quick, 30 minute break and come back to it, especially if you're under a time crunch. "},{"title":"Print Debugging​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#print-debugging","content":"Print debugging, sometimes referred to as &quot;caveman debugging&quot;, is the most brute force approach. It consists of just putting print statements in various parts of your code to check both what parts are/aren't running and values of variables. Print debugging is effective for small projects where you have a good idea of what is going wrong, or finding what region of your code has the problem. However, if you don't quickly find what is wrong, have a multi-file project where many things could be going wrong, or have multiple underlying problems all at one, print debugging can take a lot of time. You might spend hours changing values of print statements, commenting prints out or back in, and running your code over and over again after each change. "},{"title":"The Debugger​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#the-debugger","content":"As the name suggests, the debugger is the most powerful tool for finding bugs in your code. Like how the Python interpreter runs your code line by line, the debugger lets you step through your code's execution line-by-line. As your code runs, the debugger will show you What local variables are declared and their valuesThe state of the function call stackTerminal output as it happens The debugger lets you put break points at specific lines in your code, letting you run the program up to a certain point, and then pausing execution, giving you a snapshot in time of how your program is running. You can also set conditional breakpoints, like &quot;stop at this line only if i is 3&quot;. For this reason, the debugger is essentially a strictly stronger version of print debugging. For a tutorial on how to use the debugger in VSCode, see the debugger guide. "},{"title":"Print Debugging vs the Debugger​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#print-debugging-vs-the-debugger","content":"When it comes to choosing between print debugging vs using the debugger, print debugging is useful if you have a good hunch about what is wrong, and just need verification where things are going wrong. For computer science and informatics students planning on taking more programming languages in the future, we highly suggest you learn to use the debugger now. In less &quot;user-friendly&quot; languages like C, debuggers are objectively more powerful than print debugging for things like picking up segmentation faults. (Aside: these are like Python errors, but instead of immediately giving you the error message and where it happens, C dumps a record of your computer's recorded working memory and says &quot;here's what went wrong!&quot;, which is a lot less fun to read. A debugger will just stop where the segfault happened, and show you what all the variables were, without you having to read through the core dump). We as programmers still use print debugging all the time. But knowing how to use a debugger is an important skill, so we recommend you learn as early as possible, especially while we're working with a &quot;user-friendly&quot; language like Python. "},{"title":"Unit Tests​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#unit-tests","content":"Say you're writing a calculator app, and you've implemented the following underlying math functions: def add(a, b): ... def subtract(a, b): ... def multiply(a, b): ... def divide(a, b): ... def exponential(a, b): ...  You press all the buttons on your calculator, and expect it to evaluate subtract(add(3, multiply(4, 5)), divide(exponential(10, 2), 2)) and out the result of (3 + 4 * 5) - (10^2)/2 = -27. However, you're calculator gives you a result of -2. How do we know where the problem is? Is it with your calculator buttons? Do the buttons work, but the calculator has an order of operations problem? Is there a problem with one of our math functions? What we can do is we can write a set of tests for each separate function, where we pass it two inputs, and check the output is what we expect. For example, we could call add(2, 3), and then check that it returns 5. We call these tests unit tests, they're a series of tests that make sure the building blocks of our program work in isolation. The idea is that, if we know each of our functions work in isolation, then the problem is in how we call them, or in our algorithm. In Python, we often use assert for unit testing. An example of a set of unit tests for the above code would be assert add(2, 3) == 5 assert add(9, 0) == 9 assert subtract(5, 2) == 3 assert subtract(2, 9) == -7 assert multiply(5, 2) == 10 assert multiply(3, 0) == 0 assert divide(9, 1) == 9.0 assert divide(10, 2) == 5.0 assert exponential(4, 2) == 16 assert exponential(2, 5) == 32  You want your unit tests to cover all inputs. For example, here we'd want to check that our functions all work how we'd expect with positive numbers, negative numbers, floats, and any special cases like 0 for divide and exponential. Unit tests often work best in tandem with another debugging technique. For example, if all of these pass, we can assume that our math functions work, and that our problem is actually that we're using our functions improperly. So we boot up the debugger, and pin down that the problem is in the order of operations conversion section (the example I gave does (10/2)^2, not (10^2)/2). Unit test are often the bulk of your grade on programming assignments. We check that all of your functions work how we ask them to, and then once we know all your functions are working test that your project works as a whole after that. "},{"title":"If Statements","type":0,"sectionRef":"#","url":"/main/guides/ifs","content":"","keywords":""},{"title":"Motivation​","type":1,"pageTitle":"If Statements","url":"/main/guides/ifs#motivation","content":"Up until this point, our programs are a linear recipe: do x, then do y, and so on. This is great for some tasks, but sometimes we don't always want a certain procedure to run. For example, let's say I wanted to pack my backpack for the day. A program to pack my backpack might look something like the following: pack_laptop() replace_snacks() pack_umbrella() refill_water()  But what happens if I don't always want to pack the same things? Maybe I only need to pack snacks if it's a Monday, when I have a bunch of classes, and not on a Tuesday when I have more free time? Maybe I only want to bring my umbrella if I think it's going to rain and it's not too windy, and if it's windy and raining I pack a raincoat? This is the goal of a conditional statement, also refered to as an if statement. Conditionals let us mark a section of code and say &quot;only run this if condition x is true&quot;. So for example, if it is Monday, replace my snacks. "},{"title":"Writing an If Statement​","type":1,"pageTitle":"If Statements","url":"/main/guides/ifs#writing-an-if-statement","content":"Step 1: Identify the condition. The first step in converting logic into if statements is to identify the condition or situation that needs to be checked. For example, if you're trying to determine whether a user has entered a valid password, the condition might be whether the password contains at least one uppercase letter, one lowercase letter, and one number. Step 2: Determine the action(s). Once you've identified the condition, you need to determine what action(s) should be taken if the condition is true or false. For example, if the user has entered a valid password, you might allow them to log in to their account. If the password is invalid, you might display an error message and prompt them to enter a new password. Step 3: Write the if statement. Now that you have identified the condition and actions, it's time to write the if statement. The basic syntax for an if statement is as follows: if (condition): # code that only runs if condition is True # more code that runs independent of if condition is True of False  "},{"title":"Multiple Conditions​","type":1,"pageTitle":"If Statements","url":"/main/guides/ifs#multiple-conditions","content":"In some cases, you may need to check multiple conditions in order to make a decision. For example, I might want to pack an umbrella if I have class today and it's raining outside. I only want to pack my umbrella if both conditions are true. In these cases, you can use logical operators such as and and or to combine conditions: if is_raining and has_class: pack_umbrella()  "},{"title":"Else Statements​","type":1,"pageTitle":"If Statements","url":"/main/guides/ifs#else-statements","content":"It's fairly common to want to make a &quot;this-or-that&quot; type decision. For example, let's say I just got out of class. If I'm hungry, I'll go to the dining hall, otherwise I'll head to the library. This is the utility of the else statement: if hungry: go_to_woo() else: go_to_du_bois()  "},{"title":"If statement examples​","type":1,"pageTitle":"If Statements","url":"/main/guides/ifs#if-statement-examples","content":"Below are some practice problems using branching code. Below each problem we have included an example solution, which walks through the logical approach to the problem and how to convert that solution into code. Problem 1: Write a function that takes in floats representing the length and width of a rectangle, and prints “square” if it is a square, or prints “not square” if it is not a square. The first step here is to find important details in the problem. You can often find the different branches you’ll need in the prompt itself. Here we can see two cases, either print “square” if it is a squareprint “not square” if it is not a square We can take the language of the prompt and directly turn it into psuedocode: if it is a square: print “square” if it is not a square: print “not square”  Now, given the length and width, how do we know if the rectangle we're given is a square? If the length and width are equal! And we have operators for that, “==” and “!=”. if length == width: print(“square”) elif length != width: print(“not square”)  Finally, note that length == width and length != width are opposite cases, we can can just use an if else statement rather than an elif: if length == width: print(“square”) else: print(“not square”)  Problem 2: A school has following rules for grading system: below 60 - F60 to 69 - D70 to 79 - C80 to 89 - BAbove 90 - A Ask the user to enter their number grade, print out their corresponding letter grade. Let's rewrite the problem statement, with the conditions we want to check in bold, and the corresponding code we want to run in italics. A school has following rules for grading system: below 60 - (print) F60 to 69 - (print) D70 to 79 - (print) C80 to 89 - (print) BAbove 90 - (print) A Ask the user to enter their number grade and print the corresponding letter. In other words, we want to make a conditional check on the user's grade, and then print that letter. We can check the various letters in any order, but the two ways that make the most sense are to go in ascending or descending order. Here’s the pseudocode, again using language pulled directly from the problem: if(number grade is below 60): print F elif(number grade is 60 to 69): print D elif(number grade is 70 to 79): print C elif(number grade is 80 to 89): print B elif(number grade is above 90): print A  We’ll need to find the right comparison operators to use here. Which ones check if a number is greater than or less than another number? &gt; and &lt;. We’ll also need a variable to actually compare against the threshold grades, which we know from the problem is an input from the user. I’ll call it user_grade. user_grade = int(input(“what’s your grade?”)) if user_grade &lt; 60: print(“F”): elif user_grade &lt; 70: print(“D”): elif user_grade &lt; 80: print(&quot;C&quot;) elif user_grade &lt; 90): print(&quot;B&quot;) else: print(“A”)  A good question to ask is, why don't we need to check both sides of the range when we're checking B, C, and D? For example, why don't we check (user_grade &gt;= 60 and user_grade &lt; 70) for “D”? The reason being is, if we have gotten to the first elif statement, the condition in the if must have been False. So, by the time we get to “D”, we know that the first if didn’t pass, so user_grade must not be less than 60. Therefore we know that, if we are checking the condition on the fifth line, user_grade must be greater than or equal to 60. It wouldn’t be wrong to include the extra check, but this ends up much neater. "},{"title":"Installing Python","type":0,"sectionRef":"#","url":"/main/guides/installing-python","content":"Installing Python A set of guides that walk through installing Python 📄️ Windows This guide will help you install Python on Windows. If you are using a different operating system, please see the Installing Python for a different guide. 📄️ MacOS This guide will help you install Python on macOS. Python on macOS can get messy. If you run into any issues while running the instructions detailed below, please post to Piazza. 📄️ Linux Installing python on linux depends slightly on your distribution, but your distribution's default package manager should have python as an installation option.","keywords":""},{"title":"Installing Python on Linux","type":0,"sectionRef":"#","url":"/main/guides/installing-python/linux","content":"Installing Python on Linux Installing python on linux depends slightly on your distribution, but your distribution's default package manager should have python as an installation option. For example, Ubuntu's package manager is apt, so you can install python by running sudo apt update sudo apt install python3.11 If you are not familiar with your distribution's package manager, you can google &quot;install python distribution name&quot; to find the commands you need to run. Alternatively, you can install and build python from source, which you can find here: https://www.python.org/downloads/source/. You can find more information here.","keywords":""},{"title":"Installing Python on macOS","type":0,"sectionRef":"#","url":"/main/guides/installing-python/macos","content":"","keywords":""},{"title":"(Optional) Update macOS​","type":1,"pageTitle":"Installing Python on macOS","url":"/main/guides/installing-python/macos#optional-update-macos","content":"Prior to macOS 12.3, macOS came with Python 2.7. This version is nearly 13 years old and not suitable for development. Therefore, Apple removed it from macOS in 12.3. If possible, you can update your computer to any version of macOS after 12.2, and the installer will delete Python. This is not necessary, but if your machine is new enough that 12.3+ is supported and you don't have any concerns about it effecting your battery health, it is easier if you update your computer. "},{"title":"Verify you don't already have python3 installed​","type":1,"pageTitle":"Installing Python on macOS","url":"/main/guides/installing-python/macos#verify-you-dont-already-have-python3-installed","content":"Open Finder &gt; Applications &gt; TerminalRun python3 --version. You should get something along the lines of zsh: command not found: python3. Otherwise, you have python3 installed. If you have python installed from the developer website, you are all set. If you have python3 installed through Homebrew, we recommend you install and use python from the developer website. To tell the difference, run whereis python3 in Terminal. If you get /usr/bin/python3, you're all set. Otherwise, we recommend you follow the below installation directions. "},{"title":"Installing​","type":1,"pageTitle":"Installing Python on macOS","url":"/main/guides/installing-python/macos#installing","content":"Go to https://www.python.org/downloads/You should see &quot;Download the latest version for macOS&quot;, followed by a button labeled Download Python 3.x. Click the button to start the download. If the website does not automatically detect you are running macOS, select macOS under &quot;Looking for Python with a different OS?&quot;.  Once the download is finished, run the .pkg to run the installer. Run through the installer, and click Install.Open Finder &gt; Applications &gt; Python 3.x.Right-click on Update Shell Profile.command, and click open. This will run a process in Terminal that lets you run python3 from your command line.Restart Terminal, type python3, and press Enter. At this point, you should see something like the following screen:  To exit, type quit() and press Enter. "},{"title":"Installing Python on Windows","type":0,"sectionRef":"#","url":"/main/guides/installing-python/windows","content":"","keywords":""},{"title":"Make sure you don't already have Python​","type":1,"pageTitle":"Installing Python on Windows","url":"/main/guides/installing-python/windows#make-sure-you-dont-already-have-python","content":"Open the start menu and search for &quot;cmd&quot; (or &quot;command prompt&quot;)Type python --version and press enter. If you get a message saying &quot;python is not recognized as an internal or external command&quot;, you do not have Python installed. If you get a message saying &quot;Python 3.6.1&quot; (or any other set of numbers), you already have Python installed. "},{"title":"Installing Python​","type":1,"pageTitle":"Installing Python on Windows","url":"/main/guides/installing-python/windows#installing-python","content":"Go to the Microsoft store websitehttps://apps.microsoft.com/store/detail/python-311/9NRWMJP3717K?hl=en-us&amp;gl=us Click the &quot;Get in Store App&quot; button (should open the microsoft store app) Click the &quot;Get&quot; button. This will download and install Python. When it is done installing, follow the steps above to verify that you have Python installed successfully. "},{"title":"For if things go wrong​","type":1,"pageTitle":"Installing Python on Windows","url":"/main/guides/installing-python/windows#for-if-things-go-wrong","content":"Other methods of installing Python on Windows are available, but are not recommended. Contact an instructor if you have trouble installing Python using the method above. Or, try one of the following methods. caution These methods are not ideal, they have more risk of not working. If you have trouble installing Python using the method above, try one of the following methods. Try these at your own risk (though they should still work fine) Download the latest version of Python from the Python website. Make sure to select the &quot;Add Python to PATH&quot; option when installing.Install Python using Chocolatey. This is a package manager for Windows. You can install Chocolatey by following the instructions on their website. Once you have Chocolatey installed, you can install Python by running choco install python in the command prompt.Install Python using Scoop. This is another package manager for Windows. You can install Scoop by following the instructions on their website. Once you have Scoop installed, you can install Python by running scoop install python in the command prompt. "},{"title":"Staff","type":0,"sectionRef":"#","url":"/main/guides/staff","content":"Staff This is a collection of our staff documents. These are publicly available so it's easier for our staff to access, but also for transparency reasons. 📄️ CICS 110 Staff Guide This is a guide for all-things staff for CICS 110. This page is rather long! I'd recommend using the section headers to navigate. Don't feel like you have to plow through it all in one sitting, since this serves a dual purpose as a guide and a manual (and therefore likely doesn't make for particularly fun reading D:). 🗃️ Website Meta Guides 6 items","keywords":""},{"title":"Piazza","type":0,"sectionRef":"#","url":"/main/guides/piazza","content":"","keywords":""},{"title":"Why to use Piazza​","type":1,"pageTitle":"Piazza","url":"/main/guides/piazza#why-to-use-piazza","content":"Piazza is a place for students to post questions they have about CICS 110, and get quick answers from instructors, TAs, UCAs, or even other students. Piazza is a great resource for Clarifying logistics, like asking what you need for the lab this week, when something is going to posted or where it will be posted, or questions about office hour times.Asking topical questions, like how to use an f-string, or how if statements actually work.Getting help on assignments, whether you're having trouble starting the assignment, really stuck on a certain TODO, or want help improving your solution. Piazza is helpful for you as a student for a variety of reasons: It gives you the opportunity to get timely answers to your questions: 2-3 members of course staff are monitoring Piazza on any given day of the week, which guarantees you get an answer ASAP.It lets you see questions other students ask, so each question only gets asked once.It allows you to practice answering questions other students have, and getting feedback on your answers from Instructors. We highly encourage you to try to answer questions other students ask on Piazza.It is a place for you to discuss course topics with other students, or even ask questions beyond the scope of the course! You are welcome to ask curiosity questions outside what we cover here (for example, &quot;how does a for loop actually work&quot;, or &quot;how does the program know where it is in an opened file&quot;), and our course staff will be happy to give our best answer! "},{"title":"How to use Piazza​","type":1,"pageTitle":"Piazza","url":"/main/guides/piazza#how-to-use-piazza","content":"To ask a question, click the New Post button in the top left corner:  You'll then be presented with the following screen:  99% of the time you'll want to pick Question. Public posts are Entire Class, private posts are Individual Student(s)/Instructor(s). If you pick the latter, typing Instructors posts to the entire staff. You can also post to just your instructor if you need to, put we're prefer you reserve this for personal matters. Then select a folder based on what your question is about, type up your question. Before you select Post My Question/Note, you can chose if you want your question to have your name shown, or be anonymous to classmates. It's up to you, but I know from personal experience it's much easier to ask questions anonymously. "},{"title":"How to ask for Help​","type":1,"pageTitle":"Piazza","url":"/main/guides/piazza#how-to-ask-for-help","content":"There are three main types of questions Approach-based questions: How do I start Todo 4 in the project? Code-specific questions: Why is my code not working how I want it?Logistical questions Piazza is great for approach-based questions. We highly recommend that you make these posts public. That way other students can see the questions, as well as discuss them or even answer them. If you are shy about asking your classmates for help, you can always post anonymous! Posting publicly is also a huge help to us, since it prevents us from asking the same question over and over again. For more on code-specific questions, see the Posting Code section. For logistical questions, you can either post public or private. It's up to your discretion based on the question you want to ask. "},{"title":"Posting Code​","type":1,"pageTitle":"Piazza","url":"/main/guides/piazza#posting-code","content":"A classic question that we see every semester is Why is this not working? with an image of someone's source code attached. This is an academic honesty violation, and is also usually hard for us to answer without just giving you the solution. Firstly, do not ever include your source code for an assignment in a public Piazza post.Posting your code to the entire class is code sharing, and is therefore an academic dishonesty violation per the academic honesty policy detailed in the syllabus. We take this very seriously, so please do not do it. Instead, If you have a question about zyBooks or zyLabs, please make a public post directing us to the specific section and question. We can see your submissions, and will respond to your post either with general pointers, or even with what you should look to change. Example: I've been stuck on section 2.15 of the lab. Can you give me some pointers? If you have a question about an assignment, please first submit your current code to Gradescope. Then, ask your question and include a link to your Gradescope submission at the bottom. Example: I am stuck on Todo 4, specifically the part with getting the print formatting right. Any advice? Gradescope link: link to submission Lecture code and code in the homework exercises are fine to be posted. In fact, we encourage you as students to try to respond to these! Just make sure you err on the side of leading the student in the right direction. Do not give them the answer directly (again, academic honesty is important to us). "},{"title":"Committing Code","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/adding_code_to_repo","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Committing Code","url":"/main/guides/staff/meta-guides/adding_code_to_repo#prerequisites","content":"Have a GitHub accountHave Git installed (see here for instructions on how to install Git)Have a local version of the development environment (see here for instructions on how to set it up) Warning Never commit directly to the main or gh-pages branches! This will cause the website to break. "},{"title":"Committing Code​","type":1,"pageTitle":"Committing Code","url":"/main/guides/staff/meta-guides/adding_code_to_repo#committing-code-1","content":"Make sure your changes are in a separate branch (not main) If you have already made changes, don't worry. You can still commit them to a new branch.To make a new branch (and use it), type git checkout -b &lt;branch_name&gt; in the terminal.To use an existing branch, type git checkout &lt;branch_name&gt; in the terminal. Add your changes to the staging area. To add all changes, type git add . in the terminal.To add specific changes, type git add &lt;file_path&gt; in the terminal. Commit your changes. To commit all changes, type git commit -m &quot;&lt;commit_message&gt;&quot; in the terminal.To commit specific changes, type git commit &lt;file_path&gt; -m &quot;&lt;commit_message&gt;&quot; in the terminal. Push your changes to GitHub. To push all changes, type git push in the terminal.To push specific changes, type git push &lt;file_path&gt; in the terminal. Create a pull request on GitHub. To create a pull request, go to the repository on GitHub and click the Compare &amp; pull request button.Add a title and description for the pull request.Click the Create pull request button. Merging First, a test build is created to make sure the code compiles.Second, someone must approve the pull request (this can be done by anyone).Third, the pull request is merged to main. This will automatically deploy the changes to the website. "},{"title":"Website Meta Guides","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides","content":"Website Meta Guides A set of guides that walk through working with this website 📄️ Getting Started This guide will walk you through the process of setting up a local development environment for the website 📄️ Committing Code This is a guide on how to commit code to the repository. 📄️ Making A Guide This is a guide on how to make a guide. This guide will teach you how to make a guide for this website. 📄️ Making an Announcement This guide will show you how to make an announcement in the blog section. 📄️ Python Live Code Blocks Hello World you can run 📄️ Markdown Tutorial This website is made of markdown documents. This guide will walk you through the process of writing markdown documents for the website.","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/getting_started","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Getting Started","url":"/main/guides/staff/meta-guides/getting_started#prerequisites","content":"A computer that you can install software on "},{"title":"Steps to setup the local development environment​","type":1,"pageTitle":"Getting Started","url":"/main/guides/staff/meta-guides/getting_started#steps-to-setup-the-local-development-environment","content":"Install Node.js: https://nodejs.org/en/download/Install Yarn: Open a terminalRun npm install --global yarn Install Git: https://git-scm.com/downloadsClone the repository: Open a terminal and navigate to the directory you want to clone the repository intoRun git clone https://github.com/CICS110/CICS110.github.io.git Install dependencies: In the same terminal, navigate to the directory you cloned the repository into: cd CICS110.github.ioRun yarn install in the terminal to install the dependencies "},{"title":"Steps to run the local development environment​","type":1,"pageTitle":"Getting Started","url":"/main/guides/staff/meta-guides/getting_started#steps-to-run-the-local-development-environment","content":"Note: must have the local development environment setup first In the terminal, navigate to the directory you cloned the repository intoRun yarn start in the terminal to start the local development environment This should open a browser window with the website running locally Search Bar Will Not Work Locally In the local development environment, the search bar will not work. You can get it to work by first building it then serving the local production build: yarn build npx http-server ./build  "},{"title":"Python Live Code Blocks","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/live_python","content":"","keywords":""},{"title":"Hello World you can run​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#hello-world-you-can-run","content":"To make a runnable code block, add live_py to the code blockThe code block will have a play button in the top right corner, click it to run the codeThe code can be edited and run again on the website No need to change any source code I don't know why the subtitles are in german print('Hello World')  "},{"title":"Hello World Not Runnable​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#hello-world-not-runnable","content":"For Reference, here is a code block that is not runnable print('Hello World')  "},{"title":"Adding a title​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#adding-a-title","content":"To add a title to the code block, add title=My_Title to the code blockIf you want a space in the title, use _ or - instead of a spaceIf you want an '_' or '-' in the title, use __ or -- instead of a single one Hello-World,-with-a-title print('Hello World, with a title')  "},{"title":"Hello World \"slim\"​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#hello-world-slim","content":"The slim version is a little smallerDoesn't display the titlePlay button is inlineTo make a slim code block, add slim to the code block can't_see_me print('Hello World slim')  "},{"title":"You can use a turtle too:​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#you-can-use-a-turtle-too","content":"Can import turtle and use itCan save the drawings to a file the download button is in the top right of the turtle window turtle_example from turtle import * color('red', 'yellow') begin_fill() while True: forward(200) left(170) p = pos() if abs(p[0]) &lt; 1 and abs(p[1]) &lt; 1: break end_fill() done()  "},{"title":"Importing Default Libraries​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#importing-default-libraries","content":"Can import and use various libraries that are included by default Link to standard library: https://docs.python.org/3/library/index.html Warning: This has a large output fetching_json from urllib.request import urlopen import json # A Url that returns JSON data (without requiring authentication) url = &quot;https://pokeapi.co/api/v2/pokemon/ditto&quot; with urlopen(url) as response: body = response.read() body_parsed = json.loads(body) print(json.dumps(body_parsed, indent=2))  "},{"title":"Making A Guide","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/making_a_guide","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#prerequisites","content":"A code editor (VS Code, Atom, etc.)A local version of the development environment (see here for instructions on how to set it up)An understanding of Markdown (see here for a guide on Markdown) "},{"title":"Creating A Guide​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#creating-a-guide","content":"Create a new file in the guides folder. The file name should be the name of the guide, with the .md extension. For example, if you were making a guide on how to make a guide, you would name the file making_a_guide.md.Create a title for the guide. This is done by adding a # at the start of the file. For example, if you were making a guide on how to make a guide, you would add # Making A Guide at the start of the file.Continue to write markdown content for the guide. "},{"title":"Front Matter​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#front-matter","content":"Front matter is a set of metadata that is used to configure the guide. It is written in YAML and is placed at the top of the guide file. It allows you to configure things such as the guide's title, description, and sidebar position. "},{"title":"Example​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#example","content":"--- title: Making A Guide description: This is a guide on how to make a guide. sidebar_position: 1 ---  For the example above: The guide's title will be Making A Guide. This is used for the guide's page title and as the text in the sidebar for this guide. The guide's description will be This is a guide on how to make a guide. This is used for the guide's page description. I've only found it to be used in the search results. The guide's sidebar position will be 1. This is used to determine the order of the guides in the sidebar. The lower the number, the higher up the guide will be in the sidebar. "},{"title":"Guide Front Matter​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#guide-front-matter","content":"The following is a list of front matter that can be used for guides: title: The guide's title.description: The guide's description.sidebar_position: The guide's sidebar position. "},{"title":"Special Features​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#special-features","content":""},{"title":"Live Code Editor​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#live-code-editor","content":"If you want to add a live python code editor, see this guide: Live Code Editor "},{"title":"Linking To Other Guides​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#linking-to-other-guides","content":"You can use relative file paths to link to other guides. For example, if you had the following folder structure: guides website_guides making_a_guide.md other_guides markdown_tutorial.md  You could link to markdown_tutorial.md from making_a_guide.md by using the following syntax: [Markdown Tutorial](../other_guides/markdown_tutorial.md)  "},{"title":"JavaScript​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#javascript","content":"Expressions defined in curly braces will be evaluated as JavaScript. For example, if you had the following text {1 + 1}  It would be rendered as 1 + 1 =  2 NOTE: To trigger this functionality, somewhere in the file needs to be a JSX element. In this case, I added &lt;&gt;&lt;/&gt; to the line so that it would be rendered as a JSX element. The line looks like &lt;&gt;&lt;/&gt;1 + 1 = {1 + 1}  "},{"title":"JSX and HTML Elements​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#jsx-and-html-elements","content":"You can use JSX elements (React) in the guides too. For example, here is a button that says &quot;Click Me&quot;: Click Me! The code for the button is &lt;button onClick={() =&gt; alert('Hello!')}&gt;Click Me!&lt;/button&gt;  "},{"title":"Images​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#images","content":"You can add images to the guides. Put the image you want somewhere in the guides folder. Then, you can reference the image using the following syntax: ![Image Title](image_path)  For example, if you had the following folder structure: guides website_guides making_a_guide.md images image.png  You could add the image to the guide by using the following syntax: ![Image Title](../images/image.png)  "},{"title":"Extra Resources​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#extra-resources","content":"Docusaurus Guide Teach you how to use Docusaurus (the framework that this website is built on) to make docs and guides. "},{"title":"Markdown Tutorial","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/markdown_tutorial","content":"","keywords":""},{"title":"Resources​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#resources","content":"Markdown Cheat Sheet: https://www.markdownguide.org/cheat-sheet/Basic Syntax Guide (Way better than this webpage): https://www.markdownguide.org/basic-syntax/ "},{"title":"Prerequisites​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#prerequisites","content":"An environment to write markdown documents. Some online editors to play around with: StackEdit.Dillinger  "},{"title":"Main Ideas of Markdown​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#main-ideas-of-markdown","content":"In markdown, you can write text and add formatting to it. You can also add links, images, and other elements to your text. This does not cover everything that markdown can do, but it should be enough to get you started. "},{"title":"Sections​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#sections","content":"You can create sections by using the # symbol. The more # symbols you use, the smaller the section will be. For example, # will create a large section, ## will create a medium section, and ### will create a small section. For example: # Hello World will create a large section with the text Hello World in it. ## Hello World will create a medium section with the text Hello World in it. ### Hello World will create a small section with the text Hello World in it. "},{"title":"Text Formatting​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#text-formatting","content":"You can add formatting to your text by using the following symbols: * or _ for italics** or __ for bold*** or ___ for bold and italics To use them, surround the text you want to format with the symbols. For example, *italics* will create italics, **bold** will create bold, and ***bold and italics*** will create bold and italics. "},{"title":"Links and Images​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#links-and-images","content":"You can add links and images to your text with the following syntax: [Link Text](Link URL) ![Image Text](Image URL)  To do a link, surround the text you want to be the link with [] and then put the link in (). For example, [Google](https://google.com) will create a link to google with the text Google in it. To do an image, do the same but put an ! in front. For example, ![Google Logo](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png) will create an image of the google logo with the text Google Logo in it. "},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#code-blocks","content":"There are two types of code blocks: inline and multiline. Inline code blocks are used to show code in the middle of a sentence. Multiline code blocks are used to show code on their own line. To do an inline code block, surround the code with `. For example, `print('Hello World')` will create an inline code block with the text print('Hello World') in it. To do a multiline code block, surround the code with ```. For example: ``` print('Hello World') ```  will create a multiline code block with the text print('Hello World') in it. On the line where you start the code block, you can add a language to the code block. For example, ```py will create a python code block. This will add syntax highlighting to the code block. Here is an example of a python code block: print('Hello World')  And the markdown for it: ```py print('Hello World') ```  "},{"title":"Lists​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#lists","content":"You can create lists by using the following symbols: - for unordered lists1. for ordered lists To create an unordered list, put - in front of each item in the list. For example: - Item 1 - Item 2 - Item 3  will create an unordered list with the items Item 1, Item 2, and Item 3. To create an ordered list, put {a number}. in front of each item in the list. For example: 1. Item 1 2. Item 2 3. Item 3  will create an ordered list with the items Item 1, Item 2, and Item 3. "},{"title":"Tables​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#tables","content":"You can create tables by using the following syntax: | Column 1 | Column 2 | Column 3 | | -------- | -------- | -------- | | Row 1 | Row 1 | Row 1 | | Row 2 | Row 2 | Row 2 | | Row 3 | Row 3 | Row 3 |  This will create a table with the columns Column 1, Column 2, and Column 3 and the rows Row 1, Row 2, and Row 3. "},{"title":"Horizontal Rule (Line)​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#horizontal-rule-line","content":"You can create a horizontal rule by using the following syntax: ---  This will create a horizontal rule. "},{"title":"CICS 110 Staff Guide","type":0,"sectionRef":"#","url":"/main/guides/staff/staff-guide","content":"","keywords":""},{"title":"Communication and Organization​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#communication-and-organization","content":"If you need to be added to the staff chat, email bburns@umass.edu. Every week, Ben will send out a message detailing all assignments due that week and any unfinished grading to #logisticsMeeting notes will be sent in #logistics as well. We have a Trello board for course organization. This is mostly used for making sure slides and assignments are ready before we need them, status on graded items (grading, needs uploading, uploaded). You do not need to check the Trello, as it's mostly for my (Ben's) use in keeping us organized. However, you should be able it, and it will let you can see, at a glance, the status of everything in the course. "},{"title":"Labs​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#labs","content":"Labs are hosted every Friday. Each UCA and half TA attends 1 lab per week, and each full TA attends 2 labs. Staff assignments can be found on the Labs course information page. The labs themselves are hosted in the Labs directory. Each lab will have its own instructions on what is expected of students. Typically students will be working in groups. Your job as staff is to be actively trying to help students. Some students will really want help, but are too embarrassed or intimidated to ask. That being said, some students will not want help. Trying to force help on a student who doesn't want it can make it more difficult for them to work, and potentially make them less likely to ask for help in the future when they do need help. Even if they're doing something incorrectly just let them figure it out, maybe they ask for help at a later point. Learn students' names! This is the place they get to know you and really get familiar with the course staff. "},{"title":"Office Hours​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#office-hours","content":"Your office hours should either be in-person or over zoom. On the office hours page, please include your NameDay of week and timeRoom or zoom link "},{"title":"Logging​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#logging","content":"In the staff chat you'll find a channel named #office-hours. At some point in hour or two after you office hour, post a log to this channel that estimates how many students attended your office hour and what people asked about. An example log: 12/4, 11am - 12pm. 4 students showed up to ask about Project 4. Student A and Student B did not know how to approach todos 3 and 6. Student C was having trouble getting the enumerate in the 5th todo to add items to the set correctly. An equally valid log is 12/4, 11am - 12pm. No students attended my office hour. This is 100% fine, and will probably be the case in the first couple weeks. It's better to log that no one showed up than it is to not log, don't feel pressured to say you had students when you didn't. This is for the instructors so they know if people are coming to office hours and what students are confused about. "},{"title":"Canceling Office Hours​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#canceling-office-hours","content":"If you have to cancel your office hour, you should immediately post a note to Piazza saying your office hour is canceled. Then post to the #office-hours channel. If you miss your office hour, you should post about it in #office-hours as well, and make a Piazza post acknowledging that you missed your office hour. It's fine if you miss an office hour, just make sure you're honest and up front about it, because otherwise it might look like you're skipping. "},{"title":"Piazza​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#piazza","content":"Each UCA and TA has a day on which you are expected to monitor Piazza. You aren't expected to be monitoring at all times, you're just supposed to be paying extra attention that one day. For me, this means turning on Push Notifications on the mobile app, which I can definitely recommend, but do what ever works best for you. "},{"title":"Responsibilities​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#responsibilities","content":"You should spend up to an hour answering questions that day. If there aren't any new questions posted on your day, go back through the Unresolved section.  This will show all posts that have no student or instructor responses yet, and any posts with unresolved follow ups. Try to sift through these. Most are usually already answered by another post, outdated (e.g. asking about an assignment whose deadline has now passed), are resolved but marked unresolved, or a logistical question UCAs and TAs don't have an answer to. "},{"title":"Ask for help!​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#ask-for-help","content":"If there is a question that you can't answer, but an Instructor can, @ all instructors or a specific instructor in #general, and include a link to the post. The best example of posts in this category are things like &quot;what's on the next exam?&quot; or &quot;when's project/challenge X being posted?&quot; If questions are coming in faster than the assigned staff can handle, like before a major deadline or exam, don't be afraid to @ all UCAs asking if anyone is free to help out. "},{"title":"Grading​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#grading","content":"Grading is all done via Gradescope. Most, if not all assignments in this course are autograded. For a guide on how to manual grade (at the high level, how to design a rubric, and how to use Gradescope itself), see this guide on the UCA website. "},{"title":"Uploading to Moonami​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#uploading-to-moonami","content":""},{"title":"zyBooks​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#zybooks","content":"note Until future notice, this course has no grades in zyBooks, so this section will be expanded as needed "},{"title":"Gradescope​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#gradescope","content":""},{"title":"Exams​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#exams","content":"A detailed break down of exam structure can be found in the Guide to Exams (Currently In /main/archive/guides/exams.md) note In Spring 2023, CICS 110 plans to have no exams. However, this guide will remain for future semesters. "},{"title":"Before the Exam​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#before-the-exam","content":"A Google sheet needs to be created for check out. There should be subsheet for each section with all student names and emails imported. The sheet should look something like: First Name\tLast Name\tStudent Email\tStaff initialJohn\tDoe\tjdoe@umass.edu J. Random\tHacker\tjrhacker@umass.edu\tBB ...\t...\t...\t... The night before the exam, at least two UCAs should proof read the questions and report any typos or questions they find confusing. A guide of how to do this is here A staff member should get to the lab 15-20 minutes early to straighten out desks so that no two students are sitting too close. If possible, students should not sit in the back row. If it is necessary, pull the desks forward so that staff can freely walk behind the back row. "},{"title":"During the Exam​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#during-the-exam","content":"During the exam, there are three main jobs we have Answering student questionsChecking students out once they finishMonitoring for academic honesty violations At least one staff member should be at the back watching students' screens, monitoring for academic honesty violations. Another staff member should be at the front ready to check out students as they finish. Any other staff are free to walk around asking questions, or stand at the back of the room. "},{"title":"Student check out​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#student-check-out","content":"The staff member in charge of check out should have the check-out sheet open, as well as the exam responses page open. You can find the latter by going to Moodle, then the exam page, then clicking the cog on the right, and selecting Responses. The process for checking out a student is as follows Ask for the student's uCardLook the student up in Responses and verify the student has submittedFind the student in the check out sheet, and put your initials next to their email. Return their uCard and tell them they're free to leave Step 1 is so we know they're who they say they are. Step 2 is to make sure they submitted, otherwise they can leave the exam, reopen their laptop, and keep working. Step 3 is to make sure the student actually attended the lab to take the exam. "},{"title":"Proof Reading and Reporting Typos​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#proof-reading-and-reporting-typos","content":"To proof read the exam, go to the Exam on Moodle, click the cog on the right, and select Edit quiz. On each question you will a field that says (See questions), which you should open (it's way easier if you open it in a new tab). Then click the Edit dropdown, and select Preview (again, easier in a new tab). If you find a typo in a question, or find the wording confusing or ambiguous, @ the instructor who last edited the question, including the question number, the name of the version, and the typo you found/what you found confusing. Unless specified otherwise, only Instructors should be editing exam questions directly. "},{"title":"Responsibilities​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#responsibilities-1","content":""},{"title":"UCAs​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#ucas","content":"All UCAs are going to have 3.5 out of their 5 hours &quot;fixed&quot;: this is time reserved for labs, piazza, office hours, and meetings. The other hour and a half are sort of &quot;up to the UCA&quot; as to what we're expecting from you. Filling everyone's hours with tasks doesn't give us much room for flexibility, nor is it particularly engaging. It's not a good model for adapting to the challenges of various weeks. This is also a responsibility for you as a UCA to try new things. Figure out what the course needs, what students need, or even what you struggle with as a UCA and want to improve on. A guideline for UCA responsibilities is: 1 hour of attending lab1 hour of hosting an office hour1 hour of monitoring Piazza, spread throughout a single day each week30 minutes of attending a weekly all-UCA meeting1 hour 30 minutes of flexible responsibilities, which can include attending a lectureproofreading slides, homework, or quizzesanswering Piazza on busy days you aren't assigned tohelping fix autogradersreviewing similarity results for homeworks submitted to Gradescope If you're every feeling underutilized or unhappy about your responsibilities, ping Ben and I'll help you rework your responsibilities. "},{"title":"TAs​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#tas","content":"The TA responsibilities are a little less fun. For half TAs, you have 5 hours of fixed responsibilities between labs, office hours, piazza, and meetings. Full TAs have the same thing, but with 2 hours of labs, giving 6 hours of fixed responsibilities. In addition, each TA will be required to complete the weekly homework and weekly lab. This is not to give you busy work or to test your abilities, it's so that we have at least four people each week reading through the documentation looking for confusing instructions or explanations, finding problems with the autograder, and who are very familiar with what we are asking from our students. The hope is that each of these takes at most an hour. You should shoot to have a submission to the autograder by 5pm EST the day before the assignment is due. A guideline for TA responsibilities is: 1 or 2 hours of attending lab2 hours of hosting an office hour1 hour of monitoring Piazza, spread throughout a single day each week1 hour of attending a weekly meetingUp to 2 hours of proofreading labs and homeworks "},{"title":"Python Debugger","type":0,"sectionRef":"#","url":"/main/guides/vscode/debugger","content":"Python Debugger This guide is a work-in-progress on how to best use the VSCode debugger. If you have installed the Python VSCode extension, then you already have the debugger installed. For a guide on how to use the debugger, see this tutorial on the Microsoft website.","keywords":""},{"title":"Making an Announcement","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/making_an_announcement","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#prerequisites","content":"Have a local version of the development environment (see here for instructions on how to set it up)Have an understanding of Markdown (see here for a guide on Markdown) note Almost all of this comes from the Docusaurus documentation. If you want to learn more about how to make announcements, you should check out the documentation. "},{"title":"Creating An Announcement​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#creating-an-announcement","content":""},{"title":"Making the file​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#making-the-file","content":"Create a new file in the blog folder. The file should be named YYYY-MM-DD-announcement-title.md, where YYYY is the year, MM is the month, DD is the day, and announcement-title is the title of the announcement. For example, if you were making an announcement on January 1st, 2021, you would name the file 2021-01-01-announcement-title.md. Example Structure: blog 2021-01-01-announcement-title.md  If you think that you may want to include images in your announcement, you should create a folder with the same name as the file, but without the .md extension. For example, if you were making an announcement on January 1st, 2021, you would create a folder named 2021-01-01-announcement-title. Inside this folder, also create a file called index.md. This will be the file we will write our announcement in. Other resources, such as images, can be placed in this folder. This is only necessary if you want to include other files in the announcement. Example Structure (for an announcement with images): blog 2021-01-01-announcement-title index.md image1.png image2.png  "},{"title":"Creating the Front Matter​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#creating-the-front-matter","content":"Front matter is a set of metadata that is used to configure the announcement. It is written in YAML and is placed at the top of the announcement file. It allows you to configure things such as the announcement's title, description, and sidebar position. Example:​ --- slug: my-url title: Making an Announcement Guide is Out! authors: [Kobi, Tim] tags: [guides, hello, docusaurus] ---  For the example above: Slug​ The slug is the URL extension for the announcement. For example, if the slug is welcome2, the announcement will be located at /blog/welcome2. If the slug is not specified, it will follow the format /blog/yyyy/mm/dd/announcement-title. For example, if the announcement is named 2021-01-01-announcement-title.md, the slug will be /blog/2021/01/01/announcement-title. Title​ The title is the title of the announcement. This will be displayed at the top of the announcement. Authors​ The authors is a list of authors by their unique id (as defined in authors.yml) that wrote the announcement. This will be displayed at the top of the announcement. Authors can be added to authors.yml by following the instructions here. Tags​ The tags is a list of tags that are associated with the announcement. This will be displayed at the top of the announcement. They don't need to be defined in any other file. Clicking a tag will show all announcements with that tag. "},{"title":"Content of the Announcement​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#content-of-the-announcement","content":"The content of the announcement is written in Markdown. You can learn more about Markdown here. It also shares the same additional features as the docs pages. Finally, there is also support for truncated posts. To make a truncated post, add the following to the content of the announcement: &lt;!--truncate--&gt;  Anything below this will not be shown on the announcement page. Instead, a &quot;Read More&quot; button will be shown, which will take the user to the full announcement. "},{"title":"Adding an Author​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#adding-an-author","content":"In the blog folder is a file called authors.yml. This file contains a list of authors that have written announcements. To add an author, add a new entry to the list. The entry should be in the following format: author-id: name: Author Name title: Author Title url: https://author-url.com image_url: https://author-image-url.com  For example: kobi: name: Kobi title: Instructor url: https://kobif.github.io/block-game/ image_url: http://images4.fanpop.com/image/user_images/2069000/Unnoticed-2069013_266_394.jpg  Author ID​ The author-id is the unique id of the author. This is used to associate the author with the announcement. This must be unique. This is also what is used in a blog post's authors field. Name​ The name is the name of the author. This is what will be displayed on the announcement. This does not need to be unique. Title​ The title is the title of the author. In our case, this is the role of the author for the course. This will be displayed on the announcement. URL​ The url is a URL that will be linked to the author's name on the announcement. This is optional. Image URL​ The image_url is a URL to an image that will be displayed next to the author's name on the announcement. This is optional. "},{"title":"Setting up VSCode","type":0,"sectionRef":"#","url":"/main/guides/vscode","content":"Setting up VSCode These guides serve to get your VSCode environment setup","keywords":""},{"title":"Helpful VSCode Extensions","type":0,"sectionRef":"#","url":"/main/guides/vscode/extensions","content":"","keywords":""},{"title":"Themes​","type":1,"pageTitle":"Helpful VSCode Extensions","url":"/main/guides/vscode/extensions#themes","content":"Probably the most popular type of VSCode extension are themes, which let you change the visual appearance of your VSCode. There are a few themes already preinstalled. To switch your theme to a preinstalled theme, open the VSCode Command Pallet: press Ctrl+Shift+P on Windows, or ⌘+Shift+P on MacOS. Then enter &quot;Preferences: Color Theme&quot;. You can use the arrow keys to preview what each theme looks like, and select whichever you prefer. You can find a visual explorer of VSCode themes here. Below are themes that members of the CICS 110 staff use: Built-in light/dark (Kobi) Github Dark Colorblind (Beta), from the &quot;Github Theme&quot; extension (Ben)All of the &quot;Ayu&quot; themes (Ben)Dark+ Python (Manan) "},{"title":"Material Icon Theme​","type":1,"pageTitle":"Helpful VSCode Extensions","url":"/main/guides/vscode/extensions#material-icon-theme","content":"A theme I highly recommend installing is the &quot;Material Icon Theme&quot;. It's strictly better than the default, especially for differentiating between different types of text files. Just make sure you apply the theme after you install at. "},{"title":"Quality of Life Extensions​","type":1,"pageTitle":"Helpful VSCode Extensions","url":"/main/guides/vscode/extensions#quality-of-life-extensions","content":"&quot;Better Comments&quot; highlights TODOs in orange, making it easier to see what you still need to do&quot;Todo Tree&quot; also highlights TODOs, and gives you a sidebar icon that you can click to view all your TODOs in one place (you just have to make sure to write a comment like: # TODO : whatever you want to do)If you get sick of reaching for your arrow keys to move your cursor out of parenthesis or brackets, &quot;TabOut&quot; lets you press your Tab key to move the cursor past the next close parenthesis/bracket/brace. "},{"title":"Installation and Setup","type":0,"sectionRef":"#","url":"/main/guides/vscode/installation","content":"","keywords":""},{"title":"Installing VSCode​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#installing-vscode","content":"To install VSCode, visit the VSCode website. The webpage should detect your operating system, and the button will be the version of VSCode for your OS. Click download, run the installer, and install VSCode. "},{"title":"VSCode Interface​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#vscode-interface","content":"Once you install VSCode, you should open the application. The interface presents you with a lot, but there's a lot of stuff we can ignore for now. There is an in-depth tutorial on the VSCode interface on the VSCode website, but it is a little outdated and doesn't focus on the features we will be using. Once you launch VSCode, you'll see a window similar to the following image:  On the left edge of the image, you'll see the sidebar icons. Reading down from the top, we have the File explorerSearchVersion control (ignore for now)DebuggerExtensions The icons after the &quot;Tetris block&quot; Extensions icon are all icons for extensions I have installed. The ones useful for this course will be detailed in the extensions guide, but we can ignore these for now. "},{"title":"Opening a folder​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#opening-a-folder","content":"To use VSCode to edit code, we need to open files. When writing code for a homework or project, the best practice is often to have all your files for that project in a single folder on your computer. That way, all your files are in one place for easy access, and we can just open the folder in VSCode to edit the code, rather than opening each file individually. To open a folder, select the file explorer icon in the top left. Then click &quot;Open Folder&quot;.  Alternatively, you can press ⌘+O on Mac (that is, press the command key and the &quot;O&quot; key at the same time, O for open), or Ctrl+K, Ctrl+O on Windows (just pressing Ctrl+O only lets you open single files, not folders). This will open your computer's file manager. In this window, you should navigate to either a.) an existing folder that either contains the code your want to edit, or is where you want to put new code, or b.) navigate to where you want to create a new folder. For example, let's say I want to make a new project. I want to open a folder called demo. On my Mac, I would press ⌘+O, then navigate through my files to umass &gt; cics110 &gt; code &gt; demo, and select open in the bottom right.  "},{"title":"Creating a new Python file​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#creating-a-new-python-file","content":"Now that we have an empty folder open, we want to create a Python file to write code in. In the top left, there is a new file button, highlighted below (the first icon to the right of Demo):  If we click the new file button, VSCode will create a file, and let us type in a file name. It is important that your file name ends in .py, so your computer knows it's a python file. For example, I name my file example.py:  "},{"title":"Installing Python Extensions​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#installing-python-extensions","content":"We have an empty Python file, and are able to start coding. However, VSCode has some extensions that will make our job easier. When you open a Python file for the first time, you should get a pop up in the bottom right informing you of Python extensions in the VSCode marketplace, which you should click. If not, click the Extension icon (Tetris blocks) on the left sidebar. Then enter &quot;Python&quot; in the search bar. The first result should be the Python extension, which you should install:  This extension gives you everything you need to start coding. It includes features like Syntax highlighting - colors your source code to make it easier to read what is a variable, what is a function, etc.A Python linter - a program that detects some errors, like typos, undeclared variables, or incorrect indentation, without you having to run the programA Python debugger - a powerful program that lets you step run your Python program line-by-line, and view the values of all your variables at any point in the execution.  This is a minimal install just to get you everything you need to succeed in the course. However, there are some other (optional) extensions you may find helpful, like different color themes or TODO highlighting, which we detail in the next guide. "},{"title":"Course Information","type":0,"sectionRef":"#","url":"/main/information","content":"Course Information Welcome to the course information section of the course website! Here, you will find all the information you need to get started on your journey to becoming a proficient programmer and computational thinker. Whether you are a beginner or have prior experience, this section is designed to provide you with the resources and support you need to succeed. In this section, you will find a detailed syllabus outlining the course objectives and expectations, as well as a schedule of when each topic will be covered. You will also have access to information about the staff, including their qualifications and areas of expertise. Additionally, you will find information about the labs, including lab hours and available resources. Finally, office hours and Piazza will provide you with opportunities to connect with your instructors and classmates and get help with any questions or issues you may encounter along the way. We are confident that with these resources at your disposal, you will have everything you need to thrive in your computational thinking and computer programming course. Our goal is to provide you with a supportive and engaging learning environment where you can develop your skills, explore your passions, and achieve your goals. Whether you are looking to build a foundation in programming or take your skills to the next level, we are here to help you succeed.","keywords":""},{"title":"Labs","type":0,"sectionRef":"#","url":"/main/information/labs","content":"Labs Section\tDate &amp; Time\tLocation\tStaff01LL-LAB(62220)\tFr 11:15AM - 12:05PM\tGoessmann Laboratory Addition, room 152\tYuefeng Peng (TA) Ben Burns (UCA) Wenhao Yang (UCA) 02LL-LAB(66937)\tFr 10:10AM - 11:00AM\tEngineering Laboratory, room 323\tErfan Entezami (TA) Rachana Reddy (UCA) Sreya Nimmagadda (UCA) 03LL-LAB(66939)\tFr 11:15AM - 12:05PM\tLederle Graduate Research Tower, room 123\tManan Talwar Cynthia Rajeshkanna (UCA) Tanush Savadi (UCA) 04LL-LAB(66941)\tFr 1:25PM - 2:15PM\tHasbrouck Laboratory Addition, room 126\tWill Lee (TA) Charvi Attri (UCA) Emerson Lewiecki (UCA) 05LL-LAB(66943)\tFr 2:30PM - 3:20PM\tGoessmann Laboratory Addition, room 151\tYuefeng Peng (TA) Dev Mehta (UCA) Kelly Deng (UCA) 06LL-LAB(66945)\tFr 2:30PM - 3:20PM\tMorrill Science Center 1, room N326\tErfan Entezami (TA) Lana Vu (UCA) Sonali Palit (UCA)","keywords":""},{"title":"Office Hours","type":0,"sectionRef":"#","url":"/main/information/oh","content":"Office Hours These are all office hour times for the course. All office hours will start the second week of classes (2/13). There are no office hours before 2/13. Day\tTime\tCourse Staff\tName\tLocationMonday\t9AM-10AM\tUCA\tLana Vu\tZoom: link Monday\t12PM-1PM\tUCA\tSonali Palit\tZoom: link Monday\t1:30PM-3:30PM\tTA\tManan Talwar\tZoom: link Monday\t4PM-5PM\tUCA\tDev Mehta\tIn-person: LGRC T225 Monday\t5:30PM-6:30PM\tTA\tWill Lee\tZoom: link Tuesday\t9AM-10 AM\tTA\tErfan Entezami\tZoom: link Tuesday\t2:30PM-3:30PM\tTA\tYuefeng Peng\tIn-person: LGRC T225 Tuesday\t2:30PM-3:30PM\tInstructor\tJakob (Kobi) Falus\tIn-person: Morrill 3 room 404 Tuesday\t4PM-5PM\tInstructor\tJared Yeager\tIn-person: LGRC T223 Tuesday\t5PM-6PM\tTA\tWill Lee\tZoom: link Tuesday\t5:30PM-6:30PM\tUCA\tEmerson Lewiecki\tZoom: link Tuesday\t7PM-9PM\tInstructor\tCole Adam Reilly\tZoom: link Wednesday\t11AM-12PM\tInstructor\tEduardo Calle Ortiz\tZoom: link Wednesday\t12PM-1PM\tUCA\tTanush Savadi\tZoom: link Wednesday\t1PM-2PM\tUCA\tWenhao Yang\tIn-person: LGRC T223 Wednesday\t3PM-4PM\tUCA\tCynthia Rajeshkanna\tZoom: link Wednesday\t4PM-5PM\tUCA\tKelly Deng\tZoom: link Thursday\t11:30AM-12:30AM\tTA\tErfan Entezami\tZoom: link Thursday\t1PM-2PM\tUCA\tBen Burns\tIn-person: LGRC T223 Thursday\t2:30PM-3:30PM\tTA\tYuefeng Peng\tIn-person: LGRC T225 Thursday\t2:30PM-3:30PM\tInstructor\tJakob (Kobi) Falus\tIn-person: Morrill 3 room 404 Thursday\t4PM-5PM\tInstructor\tJared Yeager\tIn-person: LGRC T223 Thursday\t4PM-5PM\tUCA\tCharvi Attri\tZoom: link Thursday\t6PM-7PM\tUCA\tSreya Nimmagadda\tZoom: link Friday\t9AM-11AM\tInstructor\tAllison Poh\tZoom: link Friday\t3PM-4PM\tUCA\tRachana Reddy\tZoom: link","keywords":""},{"title":"Changing Linter Colors","type":0,"sectionRef":"#","url":"/main/guides/vscode/linter-colors","content":"Changing Linter Colors Open the VSCode Command Pallet: press Ctrl+Shift+P on Windows, or ⌘+Shift+P on MacOS.Enter Preferences: Open User Settings (JSON)Scroll to the end of the file, and make a new line before the last }Insert the following snippet on the newline: &quot;workbench.colorCustomizations&quot;: { &quot;editorWarning.foreground&quot;: &quot;#ffff00&quot;, // changes warning squiggle color &quot;editorError.foreground&quot;: &quot;#ff0000&quot;, // changes error squiggle color &quot;editorInfo.foreground&quot;: &quot;#3794ff&quot; // changes information squiggle color } Update the colors you would like to change info The # followed by 6 characters is the &quot;hex code&quot; of a particular color. If you want to change the underline to a particular color, search that color's hex code, and replace the appropriate hex code. For example, to change the warning's color, I googled &quot;yellow hex code&quot;, and put it in the warning line after the colon but before the comment. Delete the lines of any colors you do not wish to change For example, I just want change my warning color to yellow, and don't want to change the info and error line colors. Therefore, the last 7 lines of my settings.json looks like settings.json &quot;git.confirmSync&quot;: false, &quot;diffEditor.ignoreTrimWhitespace&quot;: false, &quot;workbench.colorCustomizations&quot;: { &quot;editorWarning.foreground&quot;: &quot;#ffff00&quot;, } } ","keywords":""},{"title":"Piazza","type":0,"sectionRef":"#","url":"/main/information/piazza","content":"Piazza Day\tStaff\tNotesMonday\tManan Talwar Sonali Palit Tuesday\tSreya Nimmagadda Wenhao Yang Wednesday\tEmerson Lewiecki Dev Mehta Cynthia Rajeshkanna\tHomeworks due Thursday\tErfan Entezami Lana Vu Yuefeng Peng\tQuizzes due Friday\tWill Lee Tanush Savadi\tLabs due Saturday\tBen Burns Charvi Attri Sunday\tBen Burns Rachana Reddy\t","keywords":""},{"title":"Schedule","type":0,"sectionRef":"#","url":"/main/information/schedule","content":"Schedule Below is the projected schedule for Spring 2023. You are welcome to visit any of the material at any time. This is the first offering where we are using this website structure for the course. As such, not all the material is currently available, however, we will be updating as we progress through the semester hoping to have the material for each lecture and lab out as early as possible. Each link below will bring you to a page for the particular lecture, lab, assignment, etc. It is your responsibility to monitor the release and due dates of assignments to ensure that you submit on time. #\tDate\tMonday\tTuesday\tWednesday\tThursday\tFriday1\t2/6 - 2/10\tIntroduction\tIntroduction\tArithmetic Expressions\tArithmetic Expressions\tInstalling Python 2\t2/13 - 2/17\tVariables and Expressions\tVariables and Expressions\tFunction Basics\tFunction Basics\tString Formatting 3\t2/20 - 2/24\tPresidents Day\tBooleans and Assert\tBooleans and Assert\tSnow Day\tAssert 4\t2/27 - 3/3\tSequence Types\tSnow Day\tCancelled Class\tSequence Types\tSlicing 5\t3/6 - 3/10\tBranching\tBranching\tDebugging\tDebugging 6\t3/13 - 3/17\tSpring Break\tSpring Break\tSpring Break\tSpring Break\tSpring Break 7\t3/20 - 3/24\tWhile Loops\tWhile Loops\tFor Loops\tFor Loops 8\t3/27 - 3/31\tDictionaries and Sets\tDictionaries and Sets\tComprehensions\tComprehensions 9\t4/3 - 4/7\tExceptions\tExceptions\tCreating Modules\tCreating Modules 10\t4/10-4/14\tFiles\tFiles\tCSV Files\tCSV Files 11\t4/17-4/21\tPatriots Day\tPatriots Day\tRecursion\tRecursion 12\t4/24-4/28\tClasses and OOP\tClasses and OOP\tMethods\tMethods 13\t5/1-5/5\tInstalling Libraries\tInstalling Libraries\tURLLib and APIs\tURLLib and APIs 14\t5/8-5/12\tLambdas, map, and filter\tLambdas, map, and filter\tTkinter and Event Loops\tTkinter and Event Loops 15\t5/15-5/19\tCapstone Project Prep\tCapstone Project Presentations\tCapstone Project Presentations\tNo Class\t","keywords":""},{"title":"Staff","type":0,"sectionRef":"#","url":"/main/information/staff","content":"","keywords":""},{"title":"Instructors​","type":1,"pageTitle":"Staff","url":"/main/information/staff#instructors","content":"Tim Richards Tim Richards is a senior teaching faculty member at the Manning College of Information and Computer Sciences, where he teaches a variety of courses and dabbles in research. He is the course administrator for this course and is dedicated to teaching computer science and enjoys sharing his passion with students. Allison Poh Hello! I’m Allison and I’m a second year PhD student. I greatly enjoy teaching computer science and I’m very happy to be part of the 110 staff 🙂 My research interests include HCI, gamification, and learning technologies. I’m a member of the Advanced Learning Technologies Lab where I work on a system that promotes math learning through game design and embodied learning. In my free time, I enjoy running and chasing my cats around the house. Cole Adam Reilly I'm Cole. I've been with the college for about 8 years now starting as an undergrad in CS (Graphics), Math (Abstract Algebra), and Classics (Greek Archaeology). In my free time I like to woodwork. Eduardo Calle Ortiz Hi, I am Eduardo, a doctoral student in computer Science interested in AI. I am particularly interested in how AI will reframe education and any stuff related to AI and education. I am also the father of a two years old boy. I enjoy spending time with my wife and son when I am not studying. Jared Yeager My name is Jared. I was a Math and CS dual degree at UMass, now a 10th semester grad student (.....when did that happen!?) researching formal methods and theorem proving. In my free time I like to play video games. Kobi Falus Hi, I'm Kobi. This is my second time teaching this course, and I'm really excited to meet everyone. In my free time I like browsing Reddit/Youtube, playing board games, and talking with people. Feel free to come up and have a conversation with me! "},{"title":"TAs​","type":1,"pageTitle":"Staff","url":"/main/information/staff#tas","content":"Erfan Entezami Hi! My name is Erfan and I’m a Ph.D. student in CS at UMass. My research focuses on the intersection of machine learning and Human-computer interaction. The goal of my research is to design intelligent systems/algorithms that are able to deal with non-stationary situations. Outside of work, I enjoy reading, playing guitar, photography and hiking. Manan Talwar Hey! I am Manan. I am a graduate student in Computer Science. I recently completed my undergrad at UMass in CS and Math. My research focuses on the applications of machine learning to solve real-world problems. I am also interested in computer science education. I love binge-watching, playing the guitar, traveling, hiking and baking. Will Lee My name is Will Lee - third year Computer Science graduate student. Dad of two cats - Rebecca and Rachel Yuefeng Peng Hello! My name is Yuefeng. I am a Ph.D. student in Computer Science. My research focuses on security and privacy in machine learning. I like reading, hiking, and playing video games in my free time. "},{"title":"UCAs​","type":1,"pageTitle":"Staff","url":"/main/information/staff#ucas","content":"Ben Burns Hello! My name is Ben Burns. I am a junior Math and CS double major. This is my seventh semester as a UCA, and third with CICS 110. My research focuses on computational algorithms and topology. I love music, strategy games, and food :D Charvi Attri Hello! My name is Charvi and I am an undergrad senior studying Computer Science. I love to travel, go hiking and solve sudoku puzzles in my free time. Cynthia Rajeshkanna Hello! My name is Cynthia Rajeshkanna. I’m a freshman Computer Science major. As an aspiring entrepreneur, I like to spend my time working on ventures and exploring the intersection of entrepreneurship and technology. I also love trying new foods and learning about different cultures. Dev Mehta Hey everyone! I’m Dev Mehta and I’m an undergraduate freshman studying Computer Science and pursuing a minor in Business. In my free time I love singing, swimming and playing pool. Emerson Lewiecki Hi Everyone! My name is Emerson (I often go by Emmet as well) and I'm an undergraduate Junior studying Computer Science. I also have an interest in Biology and am pursuing a Bio minor. In my free time I like to cook, work out, and play video games. Kelly Deng Hello my name is Kelly Deng and I’m an undergrad sophomore CS major and philosophy minor. I love reading and camping in my free time. Lana Vu Hi! My name is Lana Vu and I'm a first semester sophomore CS major. I love to crochet, make jewelry, and dancing in my free time. Rachana Reddy Hi! I’m Rachana Reddy and I’m currently a undegraduate junior Computer Science Major. I love listening to music, playing piano, and doing anything outdoors like taking walks, biking, or hiking! Sonali Palit Hi! My name is Sonali Palit. I'm a sophmore and I'm majoring in Computer Science. I was a UCA for CS121 last semester. I enjoy traveling and in my free time I like to sing and listen to music. Sreya Nimmagadda Hello! My name is Sreya Nimmagadda and I am a junior Computer Science major. This is my second semester as a UCA for CICS 110. In my free time I love to paint, dance, and enjoy new foods! Tanush Savadi Hi, my name is Tanush, my friends call me Thanos (you can call me either). I am an undergraduate freshman Computer science major. I love playing video games, watching TV shows, playing and watching sports. I'm a big foodie and I am very interested in entrepreneurship! Wenhao Yang Hi! I'm Wenhao Yang. I'm a freshman majoring in Computer Science and Math. I enjoy reading, foosball, tennis, and games of all kinds. "},{"title":"Welcome","type":0,"sectionRef":"#","url":"/main/information/Welcome","content":"Welcome Welcome to the world of computational thinking and computer programming! This course is designed to provide you with a solid foundation in the basics of programming, regardless of a specific programming language, although we use Python to demonstrate concepts and techniques. This course will cover the key concepts and elements of programming that you need to know to get started in the field of computing. 5 Key Concepts of Programming: Overview of the fundamental concepts of computer programming, including syntax, variables, data types, and control structures.Explanation of the problem-solving process in programming, including the use of algorithms and implementation of solutions.Discussion of the importance of debugging, testing, and code quality in software development.Overview of the software development life cycle, including design, coding, testing, and maintenance.Explanation of how programming concepts and skills can be applied to a variety of real-world scenarios, regardless of the programming language used. Programming is all about using a set of instructions to tell a computer what to do. The basic building blocks of programming include syntax, variables, data types, and control structures. Syntax refers to the specific set of rules for writing code in a particular programming language. Variables are used to store and manipulate data in your programs. Data types determine the type of data that can be stored in a variable, such as numbers, text, or Boolean values. Control structures are used to control the flow of a program and include constructs such as loops, if statements, and switch statements. Programming is not just about writing code, it's also about solving problems. In order to write effective code, you need to be able to identify a problem and then create a solution for it. This solution is often implemented as an algorithm, which is a step-by-step set of instructions for solving a problem. You will use algorithms in your code to control the flow of a program and make decisions based on the data you are processing. As you begin to write more complex programs, you will encounter bugs and errors. Debugging is the process of identifying and fixing these bugs to ensure your code is working as intended. Testing is an essential part of the software development process and involves checking your code for both correctness and performance. Code quality refers to the overall readability, maintainability, and efficiency of your code. It is important to strive for high-quality code, as this makes it easier to debug and maintain your programs over time. The software development life cycle is the process of creating and maintaining software applications. It includes the following phases: design, coding, testing, and maintenance. The design phase involves creating a plan for what your application should do and how it should work. The coding phase involves writing the code for your application. The testing phase involves verifying that your code works as intended. The maintenance phase involves fixing bugs, adding new features, and keeping your application up to date. Programming skills are in high demand and can be applied to a wide range of real-world scenarios, including website development, data analysis, automation, and more. By understanding the basic concepts of programming, you will have the skills and knowledge you need to develop software applications and solve problems in any number of fields. Whether you are interested in creating mobile apps, building websites, or automating tasks, programming is a valuable and versatile skill that can open doors to many exciting career opportunities. note The course material, including all assignments and labs, is openly available from the start of the course. Our goal is to be transparent and open about the material in the course, giving you the opportunity to plan ahead and make the most of your time. This open access allows you to see what is coming up in future lectures, readings, assignments, and labs, so you can stay organized and focused. By providing you with this level of visibility, we aim to make the course as accessible and user-friendly as possible. This approach is in line with our commitment to creating a supportive and inclusive learning environment that empowers you to achieve your goals as a programmer.","keywords":""},{"title":"Labs","type":0,"sectionRef":"#","url":"/main/labs","content":"Labs Welcome to the lab material section of the course website! Here, you will find everything you need to succeed in the hands-on component of this course. Our labs are designed to provide you with a deeper understanding of the course topics and give you the opportunity to apply your newly acquired skills to real-world problems. The labs meet weekly and cover course topics in additional detail, providing you with a hands-on and engaging learning experience. Each lab is accompanied by a coding exercise that will challenge you to use your newfound skills to solve problems. You will work in small groups, allowing you to collaborate, learn from one another, and deepen your understanding of the course material. Our goal is to provide you with a comprehensive and engaging learning experience that goes beyond the traditional lecture-based format. The lab component of our course is an essential part of that experience, giving you the opportunity to apply your newly acquired skills to real-world problems and work alongside your classmates to deepen your understanding of the course material. Whether you are a beginner or have prior experience, we are confident that you will find our lab material to be a valuable tool in your programming journey. Good luck and happy coding!","keywords":""},{"title":"Syllabus","type":0,"sectionRef":"#","url":"/main/information/syllabus","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#description","content":"An introduction to computer programming and problem solving using computers. This course teaches you how real-world problems can be solved computationally using programming constructs and data abstractions of a modern programming language. Concepts and techniques covered include variables, expressions, data types, objects, branching, iteration, functions, classes, and methods. We will also cover how to translate problems into a sequence of instructions, investigate the fundamental operation of a computational system and trace program execution and memory, and learn how to test and debug programs. No previous programming experience required. "},{"title":"Prerequisites​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#prerequisites","content":"R1 (or a score of 20 or higher on the math placement test Part A), or one of the following courses: MATH 101&amp;102 or MATH 104 or MATH 127 or MATH 128 or MATH 131 or MATH 132. "},{"title":"Statement of Inclusivity​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#statement-of-inclusivity","content":"The staff for this course support the UMass commitment to diversity, and welcome individuals regardless of age, background, citizenship, disability, sex, education, ethnicity, family status, gender, gender identity, geographical origin, language, military experience, political views, race, religion, sexual orientation, socioeconomic status, and work experience. In this course, each voice in the classroom has something of value to contribute. Please take care to respect the different experiences, beliefs and values expressed by students and staff involved in this course. "},{"title":"Course Goals​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#course-goals","content":"The objective of this course is to introduce the fundamentals of computing and programming using a general-purpose programming language from a modern perspective. This includes understanding the operation of a machine from a programming language perspective and what it means to execute a whole program as well as its individual parts, how to solve problems using constructs that a programming language provides such as variables, data types, objects, branching, iteration, functions, and classes, and how to write programs that receive data from various sources, process that data, and produce output in various forms. "},{"title":"Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#learning-outcomes","content":"At the completion of this course you will be able to: Read and write programs to solve non-trivial programs using the Python programming language.Describe fundamental units of computation and program structure.Translate real-world problems into computational solutions.Solve problems using a general-purpose programming language and the tools it provides such as variables, data types, objects, branching, iteration, functions/methods, and classes.Design and implement whole programs and functions to solve computational problems using top-down and bottom-up techniques.Describe application programming interfaces (API) and use APIs available from existing objects and libraries to solve problems.Translate data from and into various formats that are in computer memory, a graphical interface, a file, from a remote API on the web, or other data resources.Use console-based or graphical interfaces to learn about input/output to move data into and out of a program.Use modules and classes to organize data and functions.Explain the notion of a machine and how it relates to the execution of a general-purpose programming language.Explain how programs and their data are represented in a computer and build mental models and use diagrams of program and function execution and data stored in memory.Use basic debugging techniques such as “print debugging” and assert statements to determine the cause of logical programming errors and show the correctness of a program and its implementation.Describe programs using proper documentation techniques to communicate implementation details at various levels of granularity. "},{"title":"Course Format​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#course-format","content":""},{"title":"Lecture​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#lecture","content":"Lecture will begin with a brief review of what was covered in the previous lecture followed by a presentation of new material. This presentation may include slides as well as code demonstrations that you will have access to as part of the course material. This will often be followed by an exercise that will help solidify your understanding of the material. "},{"title":"Labs​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#labs","content":"Lab will have an associated assignment that you are required to complete. You are expected to complete these activities during the lab working with others taking the course. Course staff will be available to answer questions and help guide you through the assignment. "},{"title":"How to Succeed​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#how-to-succeed","content":"Your success in this class is important to us. We all learn differently and bring different strengths and needs to the class. If there are aspects of the course that prevent you from learning or make you feel excluded, please let us know as soon as possible. Together we’ll develop strategies to meet both your needs and the requirements of the course. There are also a range of resources on campus, including: Academic CalendarLearning Resource CenterCenter for Counseling and Psychological Health (CCPH)English as a Second Language (ESL) Program "},{"title":"Course Material​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#course-material","content":""},{"title":"Textbook​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#textbook","content":"The following textbook is required: Programming in Python 3, an interactive textbook from zyBooks designed specifically for this course. The information you need to subscribe to this book can be found on the course LMS (e.g., Moodle). Here are some additional textbook recommendations freely available online. You may consider looking at these as supplemental material: Automate the Boring Stuff with Python, Al Sweigert, https://automatetheboringstuff.comA Byte of Python, https://www.gitbook.com/book/swaroopch/byte-of-python/detailsDive into Python, Mark Pilgrim, http://getpython3.com/diveintopython3Learn python the hard way, Zed Shaw, http://learnpythonthehardway.org/bookPython Practice Book, Anad Chitpothu, http://anandology.com/python-practice-book "},{"title":"Laptop Computer​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#laptop-computer","content":"It is highly recommended that you have a laptop computer. We will be writing code both in and out of class, so a portable computer capable of installing software (not a Chromebook) is valuable for this class. Most in-class programming activities will be group-based, so if you do not own a laptop, you can easily work with another student in class. "},{"title":"Software Platforms and Tools​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#software-platforms-and-tools","content":""},{"title":"Moodle​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#moodle","content":"We will use the Moodle Learning Management System (LMS) as the primary hub for course content. You will be able to access readings, lecture material, assignments, and any other important material pertaining to this course. We may use Moodle to submit some assignments. You will be able to access your latest grades and comments for assignments using the Moodle Gradebook. "},{"title":"zyBooks​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#zybooks","content":"The textbook for this course is available from zyBooks. Not only is zyBooks the book for the course, but it also includes visual and interactive content that increases your understanding of the material. It provides participatory content, challenge exercises, and a Python programming environment built right into the book! "},{"title":"Gradescope​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#gradescope","content":"We use Gradescope for automatically grading programming projects. Gradescope allows us to provide fast and accurate feedback on your work. Before the deadline you can submit as many times as you need, so submit early and often to ensure you have something in before the deadline. Become familiar with Gradescope and verify that your submission has been properly uploaded before the deadline. Use OneDrive, DropBox, Google Drive, or some other backup software to ensure that your work is not lost in the event of a computer failure. The Gradescope autograder will provide you with some limited feedback on your submissions: does it compile, does it pass automated tests, what your score is, etc. The autograder does not provide detailed feedback. We will help you get familiar with Gradescope as the course progresses. "},{"title":"VSCode​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#vscode","content":"We use the VSCode Development Environment for developing, debugging, and testing programming projects. This is free software and you will be given installation instructions and training in its use. There are many excellent Python integrated development environments (IDE), editors, and tools that exist, however, we recommend VSCode as it is easy to learn, and we will be using it in class for code demonstrations. You can read more about VSCode here and we encourage you to try out the “Getting Started with Python in VSCode” as preparation for the class. "},{"title":"Python​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#python","content":"We will be using the Python programming language in this course. It is an excellent language to learn about programming and computational thinking. It is also used extensively in the software engineering, data science domain, and many additional areas of computing. You will be required to download and install Python on your own computer. You will be using Python and VSCode to complete many programming tasks as part of your studies in this class. The current Python version used in this course is 3.10.6. "},{"title":"Echo360​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#echo360","content":"All lectures will be recorded and posted to the Echo360 platform. Echo360 is a plug-in tool that integrates personal and classroom video capture, student engagement tools, and analytic tools to maximize student participation and engagement for both campus-based and online courses. A link to Echo360 will be available in the course LMS. "},{"title":"Communication​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#communication","content":""},{"title":"Email​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#email","content":"Email should not be used. Please post privately to Instructors on Piazza. In the unlikely event that you are unable to post to Piazza, please send an email to the instructor teaching your course section. "},{"title":"Piazza​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#piazza","content":"We will be using Piazza for all other communication. This online discussion forum should be your first choice for asking questions. You should check the discussion forum before asking your question to see if the same question has already been posted. We will not answer questions that have already been answered in the discussion forum. Think before you post. We expect you to do a reasonable amount of thinking to try to solve your problems before posting for help. Make sure you are articulate and clear with your post (i.e., think before you post). You should post questions related to assignments early rather than wait until the last minute. Questions that are posted very near an assignment deadline may not be answered. Course staff are expected to answer questions Monday through Friday. Do not expect prompt answers on Saturday, Sunday, and scheduled holidays and breaks. Please post with respect and kindness. Posts that are disrespectful, crude, inappropriate, or mean will not be tolerated and will be reported and result in your immediate removal from the course and a failure for the course. "},{"title":"Attendance​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#attendance","content":"We expect you to attend lectures and labs on a regular basis. If you are absent or miss deadlines for health reasons or other extenuating circumstances, you will be able to view the lectures online as they will all be recorded on echo360. If you do miss class or lab and there is an assignment to complete you must notify us as soon as possible and, if you seek excusal from an assignment or require an extension, to provide written documentation. "},{"title":"Assessment and Grading​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#assessment-and-grading","content":"The final grade for this course is broken down into the following categories and weights: 10% Participation10% Quizzes20% Labs40% Homework20% Capstone Project The numerical cutoff for final course letter grade assignment will be made after all grading is completed. As a rough guide, expect to require at least a 93 to get an A, a 90 to get an A-, an 87 to get a B+, an 83 to get a B, an 80 to get a B-, etc. Individual grade items are not curved, so you should not get stressed about means, standard deviations, etc. related to scores you receive. What matters is your weighted average; we do not give favorable (or unfair) treatment by raising or lowering individual students’ letter grades. There are no opportunities for extra credit in this course; please do not ask. You are responsible for monitoring your grades. Grades will be available through Moodle and you should check them regularly and review any provided feedback. If you encounter any issues with your grades, you will have one week past the first posting of a particular assignment’s grade to Moodle to contact the course staff so that we can investigate. "},{"title":"Grading Categories​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#grading-categories","content":"This course uses a standards-based grading system. Our goal is to shift focus from grades to learning. Educational researchers developed a five-point scale to more clearly assess what a student knows and can do, which we will follow for all activities in this course: 4: Exceeding Standards, Consistently exceeds expectations for skills and understanding 3: Meeting Standards, Consistently meets expectations for skills and understanding2: Approaching Standards, Meets some expectations for skills and understanding1: Below Standards, Meets few expectations for skills and understanding0: No Submissions, Did not submit assignment What is standards-based grading? Why the shift from traditional grades? We believe that grades should communicate, as clearly as possible, what students know and can do. We also seek to create a growth mindset environment that encourages students to take risks and to embrace mistakes as learning opportunities. Standards-based grading and the corresponding five-point scale are set up to support these two values by clarifying learning goals and assessing students on their progress towards meeting those goals, rather than prioritizing completion of tasks and assignments over learning. This allows for more meaningful student learning and teacher feedback, and moves away from an approach in which students are seeking to earn points rather than practicing to meet the learning goal. What does this look like in practice? Students will receive assignment and final grades on the 0-4 scale: students will not receive letter grades (A, B, C, D) on assignments or fine-grained percentages. We will map our scale to letter grades for submission the the University at the end of the semester. Grades are clearer to students: Teachers and students engage in conversation about what 4/3/2/1/0 work looks like, so students understand what is expected and what they are learning. Grades are more useful and meaningful: When students get clear grades and feedback on a five point scale, they can monitor their progress and set goals for their learning. Teachers can also provide more specific feedback on how to improve from a “3” to a “4”. "},{"title":"Grading Scale​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#grading-scale","content":"For assignments that do give you a more granular number of points, we will try to articulate in the assignment description/instructions how many points map to what level on the 5-point scale. Those thresholds will be based on things like completing a set number of exercises or completing the more straight-forward exercises, for instance. "},{"title":"Participation​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#participation","content":"You will be assigned participation exercises to complete as part of the reading. These exercises exist inside of our online textbook, zyBooks, and you are expected to complete them by the assigned due date. You may not request an extension to the due date for these assignments. "},{"title":"Quizzes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#quizzes","content":"There will be a weekly quiz that focuses on the material covered prior to the release of each quiz. These quizzes are cumulative. You are able to take the quiz as many times as necessary to achieve a 100%. Quizzes contain multiple choice style questions covering material from lecture, the reading, and possibly labs and assignments. You may not request an extension to the due date for these assignments. "},{"title":"Labs​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#labs-1","content":"Lab assignments are low-stakes exercises that are designed to allow you to practice your understanding of the material covered in the book and during lecture in the presence of the course staff in a collaborative setting. You will need to bring a laptop if you have one or work with another student. If you do not have a laptop, please notify the course staff so we can make arrangements for you to work with another student. "},{"title":"Homework Assignments​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#homework-assignments","content":"Homework assignments require you to solve computational problems using the Python programming language. You will be presented with a number of different challenges that will require you to understand the problem, this how to solve that problem computationally, and implement an algorithm using Python to solve that problem. You will have a homework approximately every week. "},{"title":"Capstone Project​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#capstone-project","content":"You will be required to design and implement a Python program to solve a problem of your choice. The capstone project will be assigned and submitted toward the end of the semester. You will have the freedom to use any aspect of Python you learned in this course in your solution. On the last day of class we will have a poster session where you will have the opportunity to showcase your project to other students as well as see projects produced by others. "},{"title":"Late and Early Submissions​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#late-and-early-submissions","content":""},{"title":"Lateness General Guidelines​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#lateness-general-guidelines","content":"Lateness is defined as any assignment that is outside of the stated due date requirements. We allow assignments to be submitted three days “late” after the posted due date. However, penalties might be applied (see Submission Currency below). After the three days we will not accept a submission from any assessment component. It is your responsibility for maintaining your own schedule and being prompt with your submissions. We expect that you become familiar with the course submission software and verify that your submission has been properly uploaded. We will not accept late submissions due to lack of checking on this. We assume: You are an adult and have the ability to check and verify your work has been received properly.You are capable of using GitHub, DropBox, Google Drive, or some other backup software to ensure that your work is not lost in the event of a computer failure.You have a back-up plan in place in the event that your computer fails or your internet connection is unavailable. Make sure you have a plan B and C if your computer crashes or your internet is unavailable. This is your responsibility.To ensure that you submit projects on time you should begin them early and not wait until the last minute to submit. You will be able to submit multiple times so submit early and often to ensure you have something in before the deadline. If there are extenuating circumstances beyond your control that prevent you from completing an assignment by the posted deadline you must contact the instructor immediately using the appropriate communication channel (see Communication below). "},{"title":"Submission Currency 💵​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#submission-currency-","content":"To add some flexibility to submission deadlines, we will be using a form of “currency” in this course to earn “tokens” for submissions that are made before the day an assignment is due. If you submit an assignment on or before the deadline you will receive a token. You may then use a token to buy a late day allowing you to submit an assignment past the deadline. If you submit an assignment late and you run out of tokens, you may borrow tokens putting you in the negative. To get out of the hole you will need to submit subsequent assignments on time or early to earn tokens back and pay your debt! If you complete the course with leftover tokens it will be applied to your final grade and increase your overall grade for the course. If you complete the course with negative tokens it will be applied to your final grade and decrease your overall grade for the course. ✨ Caveat: you will only earn a token if your submission is at least Meeting Standards. Anything below is not considered to be token-level quality. ✨ "},{"title":"Token Rules​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#token-rules","content":"You start the semester with 3 tokens.A submission before or on a due date earns you 1 token.You can optionally apply a token for each day late up to 3 days.You can decide not to use tokens for late days. We reduce your assignment score by 1 for each day late (e.g., -1).After 3 days late an assignment and/or tokens will not be accepted.You can hold a maximum of 5 tokens at any time.You can earn tokens from homeworks only.You can apply tokens to homeworks and labs. "},{"title":"Submissions, Gradescope, and Token Application​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#submissions-gradescope-and-token-application","content":"The submission you choose to activate on gradescope is the submission we use. If your active submission is after the due date, and you do not report that your want to use tokens by submitting the token application form, we apply the late policy of -1 to your assignment submission per late day. You must submit a token application form to apply tokens to an assignment. The token application form is available on Moodle. "},{"title":"Examples​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#examples","content":"At the start of the semester Mia submits the first assignment two days early and receives a token increasing their purse to 4.In the middle of the semester Pat is late by 2 days. Pat decides to use 2 tokens from their purse. This is not bad since Pat hasn’t missed an assignment. Pat has 1 token remaining.At the end of the semester Jorge has 3 tokens and their grade is a B+. The tokens are applied and their final their final grade ends up as an A. Jorge is happy. 😃At the end of the semester Tanya has -2 tokens and their grade is an A-. The tokens are applied and their final grade is an B+. Tanya is unhappy 😔, but understands. You are ultimately responsible for maintaining your token count. We will do our best to calculate the number of tokens you have for each assignment. However, it may take a few days to do so. "},{"title":"Group Submissions​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#group-submissions","content":"When an assignment is submitted as a group, all group members earn a token if submitted before or on the date the assignment is due. If the assignment is submitted late, each group member can decide if they want to use tokens to pay for the late days or get marked down on the individual assignment. "},{"title":"Incompletes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#incompletes","content":"Typically, a course is completed after the last class, final exam, and/or final project or assignment. In rare cases, extenuating circumstances may prevent a student from completing a course by that time. As part of the University Regulations, we may issue an Incomplete (INC) for a course, rather than a course grade, if a student submits a request to the instructor(s). The criteria for granting an INC request are determined by the course instructors. The following is an excerpt from Section VI D in the Academic Regulations: “Students who are unable to complete course requirements within the allotted time because of severe medical or personal problems may request a grade of Incomplete from the instructor of the course. Normally, incomplete grades are warranted only if a student is passing the course at the time of the request and if the course requirements can be completed by the end of the following semester. Instructors who turn in a grade of &quot;INC&quot; are required to leave a written record of the following information with the departmental office of the academic department under which the course is offered: (1) the percentage of work completed, (2) the grade earned by the student on the completed work, (3) a description of the work that remains to be completed, (4) a description of the method by which the student is to complete the unfinished work, and (5) the date by which the work is to be completed. In the case of an independent study where the entire grade is determined by one paper or project, the instructor should leave with the department information pertaining to the paper or project, which will complete the course. To avoid subsequent misunderstanding, it is recommended that the student also be provided with a copy of this information.” "},{"title":"Criteria​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#criteria","content":"The incomplete criterion for this course requires that you have: At least 60% of the course must be completed with a passing grade.A valid reason for requesting an INC that relates to a severe medical or personal problem "},{"title":"Requests​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#requests","content":"Towards the end of the semester a notification will be posted about incomplete requests. You will follow the instructions provided to submit an incomplete request. After we review the request, we will make one of the following determinations: We approve the request upon which you will be notified by email and a separate incomplete agreement document will be sent to you to read through and sign no more than 48 hours after receiving the incomplete agreement document. This document will include what remains to be completed for the course and a deadline. After you sign and return this document, we will open extensions for the missing work. After the course has ended, we do not provide any additional help or support regarding the specifics of the course material. You are expected to complete the work using the material and online platforms that were available to you when the course was active. We deny the request and submit a grade based on your performance at the end of the course. "},{"title":"Course Support​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#course-support","content":""},{"title":"Office Hours​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#office-hours","content":"Office hours are times when we provide real-time access to the instructor, TAs, and UCAs. You do not need an appointment to attend office hours, attendance is optional, and all questions you have about the course are welcome. These sessions will be held at different times during the week. Office hours will be posted on the course website. Office hours will be held both in person and on Zoom. "},{"title":"Accommodations​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#accommodations","content":"The University of Massachusetts Amherst is committed to providing an equal educational opportunity for all students. If you have a documented physical, psychological, or learning disability on file with Disability Services (DS), you may be eligible for reasonable academic accommodations to help you succeed in this course. If you have a documented disability that requires an accommodation, please notify your instructor as soon as possible so that we may make appropriate arrangements. For further information, please visit Disability Services (https://www.umass.edu/disability). "},{"title":"Title IX​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#title-ix","content":"If you have been the victim of sexual violence, gender discrimination, or sexual harassment, the university can provide you with a variety of support resources and accommodations. UMass is committed to providing these resources with minimal impact and costs to survivors on a case-by-case basis. Resources are available to survivors with or without them filing a complaint. No upfront costs are charged to any currently enrolled students for University Health Services or the Center for Counseling and Psychological Health, and no fees exist for services in the Dean of Students Office, the Center for Women and Community, Student Legal Services, or by live-in residential staff. "},{"title":"General Education Requirements​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#general-education-requirements","content":""},{"title":"Statement​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#statement","content":"CICS 110 is a 4-credit General Education course that satisfies the R2 (Analytic Reasoning) general education requirements for graduation. The General Education Program at the University of Massachusetts Amherst offers students a unique opportunity to develop critical thinking, communication, and learning skills that will benefit them for a lifetime. For more information about the General Education Program, please visit the GenEd webpage. "},{"title":"General Education Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#general-education-learning-outcomes","content":"The General Education Program has four common objectives that pervade all designations. INFO 190S satisfies the following General Education objectives: Content: Students will know fundamental questions, ideas, and methods of analysis in computing. In particular, students will learn how to problem solve using a modern programming language, apply programming and problem solving to real world problems. Critical Thinking: Students will apply and demonstrate creative, analytical, quantitative, &amp; critical thinking through inquiry, problem solving, &amp; synthesis. Students will use critical thinking skills to solve problems from a computational perspective. As part of the problem-solving process students will use logical reasoning to create algorithms and data structures to develop programs that put their solutions into action. Furthermore, students will investigate aspects of performance and comparisons of equivalent algorithms to draw conclusions on efficiency. Lastly, students will explore and ask questions about real world problems and apply various forms of data analysis to answer these questions. Communication: Students will develop their writing skills through various assignments that require an articulation of their solution. They will also practice their oral communication by demonstrating their work (i.e., explaining an algorithm or technique) through a recorded video that will be part of assignment submissions. Connections: Students will connect the material in this course to real world problems such as using programming techniques to predict population size in the future and how that relates to pollution as well as many other issues that exist today. The goal of this course is to intentionally provide a connection between the concepts that are covered and how it impacts the world. This course is not only about learning how to program, it is about how to code to answer questions and to push forward and investigate how to construct solutions to solve problems. "},{"title":"R2 Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#r2-learning-outcomes","content":"This course will satisfy the R2 learning outcomes. In particular, it will advance student’s formal reasoning skills beyond the basic competency level by having them solve programming challenges on a weekly basis using a programming language. This will also increase a student’s sophistication as a consumer of numerical information as they must have a fundamental understanding of how a computer represents information (numerical or otherwise) in a discrete environment. Clearly, computer literacy is established in this context and naturally the limits of formal methods and the abuse of numerical arguments will be covered as part of developing programs and solving problems in general. "},{"title":"Time Management​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#time-management","content":"The university suggests that students spend 3-4 hours of time on a class per credit hour. This is a 4-credit course, so you should plan to spend 12-16 hours a week on this course. In a typical week you will: Attend 2 75-minute lectures (unless there is a holiday or class is canceled for any reason)Attend 1 50-minute lab (unless there is a holiday of lab is canceled for any reason)Complete participation exercises if some are due that week.Optionally attend office hours.Complete a lab assignment if one is due that week.Complete a homework assignment if one is due that week.Complete a quiz if one is due that week. "},{"title":"Code of conduct​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#code-of-conduct","content":"The course staff are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, shape, race, ethnicity, age, religion, nationality, or other similar characteristics.Please be kind and courteous. There’s no need to be mean or rude.Respect that people have differences of opinion and that differing approaches to problems in this course may each carry a trade-off and numerous costs. There isn’t always a single right answer to complicated questions.Please keep unstructured critique to a minimum. Criticism should be constructive.We will informally warn you, once, if you insult, demean or harass anyone. That is not welcome behavior. After that we will report your behavior to the Dean of Students office. We interpret the term “harassment” as including the definition in the Citizen Code of Conduct under “Unacceptable Behavior”; if you have any lack of clarity about what might be included in that concept, please read their definition and then ask us for clarification. We don’t tolerate behavior that excludes people in socially marginalized groups.Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a member of this class, please contact a member of the course staff immediately (or if you do not feel safe doing so, you should contact the Chair of the Faculty of CICS). Whether you’ve been at UMass for years or are a newcomer, we care about making this course a safe place for you and we’ve got your back.Likewise, any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome. "},{"title":"Collaboration Policy​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#collaboration-policy","content":"Group Work Encouragement: Students are encouraged to work in groups to facilitate learning, knowledge sharing, and skill development. Group work will be a regular part of the course and students are expected to actively participate in it. Group work is allowed on all assignments in this course. You are allowed to submit an assignment as a group of up to 4 collaborators.Individual Submissions: Although group work is encouraged, each student is required to submit their own individual work based on the group collaboration. This is to ensure that each student is held accountable for their own learning and understanding of the course material.Group Responsibilities: All group members are expected to contribute equally to the group discussions and work and should be prepared to share their knowledge and skills with their peers. Group members should also be respectful of each other's opinions and work styles.Conflict Resolution: In the event of a conflict within the group, students are encouraged to communicate and resolve the issue amongst themselves. If the conflict cannot be resolved, the instructor will mediate.Credit Allocation: Credit for group work will be allocated based on each student's individual contribution to the assignment. Students will assess their own contributions to submitted assignments and determine their grades accordingly.Cheating: Cheating, including plagiarism, is not tolerated and will result in a failing grade for the assignment. All work submitted must be original and should accurately reflect the student's own understanding of the course material.Communication: Regular communication between group members is essential for successful collaboration. Students are encouraged to use online tools, such as email or group chat platforms, to stay in touch and communicate effectively. By following this collaboration policy, students will be able to work collectively while still being held accountable for their individual learning and understanding of the course material. "},{"title":"AI Assistants​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#ai-assistants","content":"As students of the Manning College of Information and Computer Sciences, it's important to understand the judicious use of AI technologies like ChatGPT in your homework assignments and projects. While these tools can be a valuable resource in your learning journey, it's essential to use them in a responsible and ethical manner. In this course, we allow the use of AI technologies like ChatGPT as a means of learning and improving your understanding of the subject matter. However, it's important to remember that the work you submit must be original and created by you, the student. Submitting work that is not your own constitutes academic dishonesty and is a violation of the code of conduct in this course. The use of AI technologies like ChatGPT should be seen as a tool for assistance, not a substitute for your own efforts. While it's tempting to rely solely on these tools to complete your assignments and projects, doing so will not help you develop the critical thinking and problem-solving skills that are essential for success in computer science. In conclusion, while we encourage the use of AI technologies like ChatGPT in your learning journey, it's important to use them responsibly and ethically. The work you submit must be original and created by you, and the use of these tools should be seen as a means of assistance, not a substitute for your own efforts. By doing so, you'll be able to make the most of these tools and develop the skills and knowledge you need to succeed in computer science. "},{"title":"Lab 05: Branching Diagrams","type":0,"sectionRef":"#","url":"/main/labs/branching-diagrams","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradescope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#about","content":"This lab has you writing conditional statements and practicing transforming control flow diagrams into code. This lab has you use if, if/else, if/elif/else to create logic flows and allow your codes to make choices. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#learning-objectives","content":"Practice writing if, if/else, if/elif/elsePractice understanding and transforming control flow diagrams into codes "},{"title":"Estimated Size​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#estimated-size","content":"3 functions: Two lines of codeFour lines of codeTen lines of code "},{"title":"Preamble​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#preamble","content":""},{"title":"if/elif/else​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#ifelifelse","content":"This lab centers around control flow diagrams and conditional statements such as if, if/else, if/elif/else. For instance: If weather = input(&quot;What is the weather today: &quot;) equipment = [&quot;coat&quot;, &quot;hat&quot;] if weather == &quot;rain&quot;: # if it is raining equipment.append(&quot;umbrella&quot;) # I will grab an umbrella print(equipment)  If the weather variable has the value &quot;rain&quot; in the above example, then the program will add the string &quot;umbrella&quot; into the Python list named equipment. Building on this, we can make more advanced decisions using if/else. For instance: If_Else weather = input(&quot;What is the weather today: &quot;) equipment = [&quot;coat&quot;, &quot;hat&quot;] if weather == &quot;rain&quot;: # if it is raining equipment.append(&quot;umbrella&quot;) # I will grab an umbrella else: print(&quot;Spring break is coming!&quot;) print(equipment)  This time we see that if the weather variable has a value other than &quot;rain&quot;, we will do something different - in this case, print something out. Similarly, we can also check for multiple conditions in a row (as opposed to just one condition) using if/elif/else. Let's see an example: If_Elif_Else input_month = input() input_day = int(input()) if (input_month == &quot;March&quot;): if (input_day &gt; 0 and input_day &lt;= 19): print('Winter') elif (input_day &gt; 19 and input_day &lt;= 31): print('Spring is here!') else: print('Invalid')  Based on the variable input_month: If it is March: We will check if input_day is between 0 and 19. If it is, we know we are still in the Winter.Otherwise, we could next check if input_day is now between 19 and 31. If it is, we know we are no longer in the Winter, but in Spring.Lastly, if input_day is not between 0 and 31, we know something is wrong. "},{"title":"What is Golf?​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#what-is-golf","content":"Golfis a sport where your goal is to hit a ball into a hole. The expected number of hits necessary for a given hole is called the &quot;par&quot;. There are special names associated with the number of hits it take you to complete a hole relative to the par: 2 below par: &quot;Eagle&quot;1 below par: &quot;Birdie&quot;At par: &quot;Par&quot;1 above par: &quot;Bogie&quot; "},{"title":"Assignment​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#assignment","content":""},{"title":"0. Set up file named golf.py​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#0-set-up-file-named-golfpy","content":"You know the drill at this point, this lab is in a file named golf.py Use the starter codes and fill in the TODO "},{"title":"1. Implement played_sport() (1 point)​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#1-implement-played_sport-1-point","content":"played_sport() is a function that takes in a string parameter representing a sport name, and implements the control flow diagram below.  Here is some starter code for this function.Don't forget to copy this code to golf.py when you are done. Played_Sport def played_sport(sport): # TODO: Implement the control flow diagram # Testing your code: sport = input(&quot;What sports have you played before: &quot;).lower() played_sport(sport)  "},{"title":"2. Implement legal_par() (1 point)​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#2-implement-legal_par-1-point","content":"legal_par() is a function that takes in an integer parameter representing the par for a hole, and implements the control flow diagram below.  For this part, you will be responsible for making and testing the function. You can refer to the previous example for what testing can look like (although you will need to convert input to an int). Testing Prompt for input and save it in a variable. Let's call that variable par. Call the function with par as its argument, print the output. Try it with various values for par. "},{"title":"3. Implement score() (1 point)​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#3-implement-score-1-point","content":"score() is a function that takes in two integer parameters: The first represents the par for a hole.The second represents the number of hits/strokes taken to complete the hole. score() implements the control flow diagram below.  Testing Assuming you have the variable par from the previous testing section, then you can prompt for input again and save it in a new variable called strokes. Call the function with par and strokes as its arguments, and print the output. Try it with various values for par and strokes. "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#grading-scale","content":"Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0 points​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#1-below-standards-0-points","content":""},{"title":"2: Approaching Standards: 1 point​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#2-approaching-standards-1-point","content":""},{"title":"3: Meeting Standards: 2 points​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#3-meeting-standards-2-points","content":""},{"title":"4: Exceeding Standards: 3 points​","type":1,"pageTitle":"Lab 05: Branching Diagrams","url":"/main/labs/branching-diagrams#4-exceeding-standards-3-points","content":""},{"title":"Lab 04: Slicing","type":0,"sectionRef":"#","url":"/main/labs/collections","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradescope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#about","content":"This lab is centered around the sequence data type lists. You will practice indexing and slicing lists through 9 short exercises. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#learning-objectives","content":"Practice list indexing.Practice list slicing to retrieve sublists. "},{"title":"Estimated Size​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#estimated-size","content":"9 functions: Each function is 2 lines of code and of the form: def function_name(l): length = len(l) return l[...] # replace &quot;...&quot;  "},{"title":"Preamble​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#preamble","content":"A list is a sequence data type. Sequence data types are designed to store many pieces of data. In particular, lists can store multiple values of the same or various data types in one variable. For instance: random_list = [&quot;cats&quot;, 24, &quot;pizza&quot;, 8.1, False]  random_list has 5 values: 2 strings, 1 integer, 1 float, and 1 boolean. We can get the length of random_list by calling the len() method: len(random_list) # 5  We can get specific values from the list by indexing. To index, square brackets are placed after the list name with an index number between the opening and closing brackets. The leftmost value of a list is at index 0. The index values then increment by 1 from left to right. random_list[0] # &quot;cats&quot; random_list[1] # 24 random_list[2] # &quot;pizza&quot; random_list[3] # 8.1 random_list[4] # False  If you try to reference an index that does not exist (i.e., a value greater than or equal to the length of the list), then an IndexError will occur. For instance, the below will cause an IndexError: random_list[5] # IndexError  Note that negative values are NOT invalid! In fact, it can be very useful to use negative indexing. For instance, -1 refers to the last index: random_list[-1] # False  If you want to get a sublist of the original list (i.e., several values), then you can use slicing. Similar to indexing, slicing uses square brackets. However, rather than one index value, you will place multiple index values between the brackets, each divided by a colon. For instance, the below will slice from index 1 up to (but not including) index 3: random_list[1:3] # [24, &quot;pizza&quot;]  If you don't specify a second value, then python will assume you mean all of the remaining values: random_list[1:] # [24, &quot;pizza&quot;, 8.1, False]  Likewise, if you don't specify a first value, then python will assume you mean all values until (but not including) the second value: random_list[:3] # [&quot;cats&quot;, 24, &quot;pizza&quot;]  3's a crowd ... well not when it comes to slicing! You can specify a third value that is the &quot;step&quot; value. To demonstrate, let's expand random_list to have a length of 8: random_list = [&quot;cats&quot;, 24, &quot;pizza&quot;, 8.1, False, True, &quot;Taco&quot;, 7] random_list[1:6:2] # [24, 8.1, True]  Starting at index 1 and going to (but not including) index 6, the sublist will contain items in increments of step 2. 24 is in index 1 so it's added to the sublist. Then 2 indices down is 8.1, which is added to the sublist. Then 2 indices down is True, which is added to the sublist. And then we're at index 6 so no more values are added. It is valid to have only start and step values (i.e., no stop value): random_list[1::3] # [24, False 7]  It is also valid to have a negative step value. A negative step value is useful for stepping backwards through the list, starting at the start index and moving towards the stop value. random_list[6:1:-2] # [&quot;Taco&quot;, False &quot;pizza&quot;]  It's go time! As you go through the lab, use the below print statements to test your functions: l = [0,1,2,3,4,5,6,7,8,9] print(get_first(l)) # 0 print(get_last(l)) # 9 print(get_all_but_first_and_last(l)) # [1,2,3,4,5,6,7,8] print(get_all_but_first(l)) # [1,2,3,4,5,6,7,8,9] print(get_all_but_last(l)) # [0,1,2,3,4,5,6,7,8] print(get_indices_1_4_7(l)) # [1,4,7] print(get_odd_indices(l)) # [1,3,5,7,9] print(get_even_indices(l)) # [0,2,4,6,8] print(get_all_but_first_and_last_reversed(l)) # [8,7,6,5,4,3,2,1]  "},{"title":"Assignment​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#assignment","content":""},{"title":"0. Set up file named slicing.py​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#0-set-up-file-named-slicingpy","content":"You know the drill at this point. This lab is in a file named slicing.py "},{"title":"1. Implement get_first() (1 point)​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#1-implement-get_first-1-point","content":"Write a function named get_first() that takes in a list and returns the first value in the list. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;], then the output should be apples. Hint Indexing starts at 0, not 1. "},{"title":"2. Implement get_last() (1 point)​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#2-implement-get_last-1-point","content":"Write a function named get_last() that takes in a list and returns the last value in the list. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;], then the output should be cherries. If the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;], then the output should be dates. Hint Lists can vary in size so you don't want to hardcode an index value (e.g., don't do something like this: list[4]). Rather, you should allow the function to be flexible by having it calculate the last index. You can do this by getting the length of the list using len(). But be careful of an IndexError: list index out of range error. If indexing begins at 0, what would the last index of a list be equal to? "},{"title":"3. Implement get_all_but_first_and_last()​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#3-implement-get_all_but_first_and_last","content":"Write a function named get_all_but_first_and_last() that takes in a list and returns a sublist that is identical to the original list EXCEPT it is missing the first and last values. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;, &quot;eggplant&quot;], then the output should be [&quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;]. Hint Slicing time! When slicing, you need to specify a range of indices. Remember that the second index (the stop index) is NOT included in the range. "},{"title":"4. Implement get_all_but_first() (1 point)​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#4-implement-get_all_but_first-1-point","content":"Write a function named get_all_but_first() that takes in a list and returns a sublist that is identical to the original list EXCEPT it is missing the first value. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;, &quot;eggplant&quot;], then the output should be [&quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;, &quot;eggplant&quot;]. "},{"title":"5. Implement get_all_but_last() (1 point)​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#5-implement-get_all_but_last-1-point","content":"Write a function named get_all_but_last() that takes in a list and returns a sublist that is identical to the original list EXCEPT it is missing the last value. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;, &quot;eggplant&quot;], then the output should be [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;]. "},{"title":"6. Implement get_indices_1_4_7 (1 point)​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#6-implement-get_indices_1_4_7-1-point","content":"Write a function named get_indices_1_4_7() that takes in a list and returns a sublist with the values at indices 1, 4, and 7. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;, &quot;eggplant&quot;, &quot;figs&quot;, &quot;grapes&quot;, &quot;honeydew&quot;, &quot;icacina&quot;], then the output should be [&quot;bananas&quot;, &quot;eggplant&quot;, &quot;honeydew&quot;]. You may assume that the list has at least 8 elements (so indices 1, 4, and 7 all have elements). Hint How are the numbers 1, 4, and 7 related? 1 + ? = 4. 4 + ? = 7. &quot;One small step for man, three small steps for get_indices_1_4_7()&quot; - Neil Slicestrong. "},{"title":"7. Implement get_odd_indices() (1 point)​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#7-implement-get_odd_indices-1-point","content":"Write a function named get_odd_indices() that takes in a list and returns a sublist with all values in the odd indices of the original list. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;, &quot;eggplant&quot;], then the output should be [&quot;bananas&quot;, &quot;dates&quot;]. "},{"title":"8. Implement get_even_indices (1 point)​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#8-implement-get_even_indices-1-point","content":"Write a function named get_even_indices() that takes in a list and returns a sublist with all values in the even indices of the original list. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;, &quot;eggplant&quot;], then the output should be [&quot;apples&quot;, &quot;cherries&quot;, &quot;eggplant&quot;]. "},{"title":"9. Implement get_all_but_first_and_last_reversed() (1 point)​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#9-implement-get_all_but_first_and_last_reversed-1-point","content":"Write a function named get_all_but_first_and_last_reversed() that takes in a list and returns a sublist that is identical to the original list EXCEPT it is missing the first and last values AND it is in reverse order. For example, if the list is [&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;, &quot;dates&quot;, &quot;eggplant&quot;], then the output should be [&quot;dates&quot;, &quot;cherries&quot;, &quot;bananas&quot;]. Hint How can a negative step value be used here? "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#grading-scale","content":"Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0-2 points​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#1-below-standards-0-2-points","content":""},{"title":"2: Approaching Standards: 3-4 points​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#2-approaching-standards-3-4-points","content":""},{"title":"3: Meeting Standards: 5-7 points​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#3-meeting-standards-5-7-points","content":""},{"title":"4: Exceeding Standards: 8-9 points​","type":1,"pageTitle":"Lab 04: Slicing","url":"/main/labs/collections#4-exceeding-standards-8-9-points","content":""},{"title":"Lab 03: Booleans and Assert","type":0,"sectionRef":"#","url":"/main/labs/assert","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradescope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#about","content":"This lab has you making some boolean expressions and practicing the use of asserts. This lab has you use assert both to ensure the functions have received legal arguments, and as a means of checking that the result returned by a function is reasonable. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#learning-objectives","content":"Practice building up boolean expressionsSee a 2+ variable truth tablePractice using asserts as a sanity check "},{"title":"Estimated Size​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#estimated-size","content":"4 functions: A one-liner with two assertsAnother one-liner, with three assertsAnother one-liner, though could be broken up more. Has one assert.A function with 3 asserts "},{"title":"Preamble​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#preamble","content":"This lab centers around boolean expressions and assert statements. Remember that assert is not a function, it takes an expression to assert is true, and optionally a string to print if the assertion is violated. For instance: assert 0 &lt;= x, &quot;x is negative&quot;  If x were -5 in the above example, the program would terminate with an error message AssertionError: x is negative. This can be used to ensure the arguments passed to a function are legal. Imagine you had a function that would perform some arithmetic, you could use assert to ensure the arguments are numbers: def do_some_math(x:float, y:float) -&gt; float: assert type(x) == int or type(x) == float assert type(y) == int or type(y) == float # do something mathematical  These asserts would trigger if illegal arguments were passed to the function. In a finished working version of the code, they would hopefully not ever trigger. You can also use asserts to create &quot;tests&quot; or &quot;validation functions&quot;. Imagine you had a function that gave you a random number in a range. You could make a validation function full of asserts to ensure it is working correctly, for instance: def validate_get_number_in_range(lower_bound:int, upperbound:int, number:int) -&gt; None: # (return is None, because it will either throw an error or do nothing) assert lower_bound &lt;= number assert number &lt;= upper_bound # ... later in code # Some function we want to use: x = get_number_in_range(lower_bound, upper_bound) # Making sure/testing it satisfies some criteria: validate_get_number_in_range(lower_bound, upper_bound, x) # Do something with x  In a working version of the code, this would never trigger, but while writing code it can help catch bugs (like in the get_number_in_range() function above). "},{"title":"Assignment​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#assignment","content":""},{"title":"0. Set up file named school.py (1 point)​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#0-set-up-file-named-schoolpy-1-point","content":"Make a file named school.py, all your work should be in that file and that is what you will submit to Gradescope. Don't forget author comments at the top, e.g.: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  "},{"title":"1.1. Implement different_names() (1 point)​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#11-implement-different_names-1-point","content":"Write a function named different_names() that takes in two strings, and returns True if they are different and False if they are the same. Capitalization matters, &quot;Joe&quot; is not the same as &quot;joe&quot;, for this function. And they are not the same in terms of string comparison with == (so you basically don't need to worry about it). Hints Boolean expressions will be useful here. Just like arithmetic expressions and values, you can store boolean values and the results of boolean expressions in variables, e.g., in_range_01 = 0 &lt;= x and x &lt;= 1. Testing Call the function, get the output, print the output. Try it with names that are the same, try it with names that are different. "},{"title":"1.2. Add asserts to different_names() (1 point)​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#12-add-asserts-to-different_names-1-point","content":"assert allows you to force a guarantee about the state of your code beyond a point (by terminating the program if that guarantee is not met). We can use this for testing, but we can also use to it to reject illegal inputs to a function. We want to ensure that the inputs to the different_names() are both strings (type equal to str). So can add asserts requiring this to be so. This way, if the inputs are not strings, then you get a clear termination of the program with an error message and not have less clear error or quiet misbehavior. So add asserts to this function to ensure the inputs are of type str. These should be at the beginning of the function, like in the second code block in the preamble section. Note: You are editing the existing function, not making a new one. Hints If it hasn't come up, there is function called type() that gives you the type of something. And the result of that can be compared against something like int, float, or str. See the preamble for an example. "},{"title":"2.1. Implement three_unique_names() (1 point)​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#21-implement-three_unique_names-1-point","content":"Write a function named three_unique_names() that takes in three strings, and returns True if they are all different from each other and False if any two are the same. Capitalization still matters (e.g., &quot;Joe&quot; and &quot;joe&quot; are different in the eyes of this function and the == operator). Hints You can use your implementation of different_names() if you'd like. Testing To cover all the cases, you'd want to test when all names are the same, every passible combination of two names is the same and one is different (3 ways this can happen), and when all 3 names are different. "},{"title":"2.2. Add asserts to three_unique_names() (1 point)​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#22-add-asserts-to-three_unique_names-1-point","content":"Add asserts to this function to ensure the inputs are of type str. You want to ensure an assertion error is any of the three inputs are not of type str. These should be at the beginning of the function, like in the second code block in the preamble section. Note: You are editing the existing function, not making a new one. Extra Depending on how you implemented this function, you may not need to add asserts at all because of the asserts in different_names(). But, be warned, if you have function calls in an and or or statement, then they may not be called due to &quot;short circuiting&quot;. This is where the expression on the left of an and evaluates to False, and so the computer knows the whole thing is False and thus doesn't check the expression on the right. Ditto the left expression of an or evaluating to True. "},{"title":"3.1. Implement school_open() (2 points)​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#31-implement-school_open-2-points","content":"Write a function named school_open() that takes in variables (that I will call) day, is_holiday, is_snowy, and is_plowed: day is an int in the range of 1 to 7 (inclusive). 1 represents Sunday, 2 Monday, ..., 7 Saturday.is_holiday is a boolean that is True if and only if today is a holiday.is_snowy is a boolean that is True if and only if there is snow.is_plowed is a boolean that is True if and only if any snow has been plowed. If is_snowy is False, then this variable may be either True or False and it doesn't matter. This function should return True if and only is school is open. School can't be open on a weekend (Saturday or Sunday). School can't be open on a holiday. School can't be open if it has snowed and not been plowed. Otherwise, school is open. But forget words, have a big ol' truth table: is_weekday\tis_holiday\tis_snowy\tis_plowed\tis_openTrue\tTrue\tTrue\tTrue\tFalse True\tTrue\tTrue\tFalse\tFalse True\tTrue\tFalse\tTrue\tFalse True\tTrue\tFalse\tFalse\tFalse True\tFalse\tTrue\tTrue\tTrue True\tFalse\tTrue\tFalse\tFalse True\tFalse\tFalse\tTrue\tTrue True\tFalse\tFalse\tFalse\tTrue False\tTrue\tTrue\tTrue\tFalse False\tTrue\tTrue\tFalse\tFalse False\tTrue\tFalse\tTrue\tFalse False\tTrue\tFalse\tFalse\tFalse False\tFalse\tTrue\tTrue\tFalse False\tFalse\tTrue\tFalse\tFalse False\tFalse\tFalse\tTrue\tFalse False\tFalse\tFalse\tFalse\tFalse Hints The challenge of this is translating the words to code, and it's hard to give hints for that. Perhaps a starting point might be asking &quot;is school open if A and B and C and ... or if A or B or C or ..., and then trying to figure out what those A, B, C, et cetera are in code. Also, if you like the is_weekday value, then make you want a helper function that takes in a day as return True if (and only if) it is a weekday. Testing *Sigh*, my actual recommendation involves a for loop and printing out your empirical truth table, but we don't have loops yet. When you can't check every case, you can still test a collection of representative cases, and maybe also a bunch of random cases. For representative cases, you want to test the variable factors (weekend, holiday, and plowing stuff). As a control, I would start with some weekday, no holiday, no snow, no plow; make sure that's true. Then test toggling the day, the holiday, then snow, and the plow given snow. Basically, this slice of the truth table: is_weekday\tis_holiday\tis_snowy\tis_plowed\tis_openTrue\tFalse\tFalse\tFalse\tTrue False\tFalse\tFalse\tFalse\tFalse True\tTrue\tFalse\tFalse\tFalse True\tFalse\tTrue\tFalse\tFalse True\tFalse\tTrue\tTrue\tTrue (I'd also want play around with the day a bit to catch if I've messed up computing the helper variable is_weekday) I'd even go as far as making a helper function that takes the inputs for school_open(), passes those to school_open(), saves the output, and prints a line of the truth table in an aesthetically pleasing manner. For doing random sample testing, import random, and then random.randint(1,7) and multiple uses of random.choice([True,False]) would allow you to generate a random case. "},{"title":"3.2. Add asserts to school_open() (2 points)​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#32-add-asserts-to-school_open-2-points","content":"Add an assert to school_open() to ensure that the day parameter is in the 1 to 7 range. And think for a bit about how your solution would have treated a number outside the range. It would probably have run without issues, but something wrong would be happening in some sense without us being aware of it. This should be at the beginning of the function, like in the second code block in the preamble section. (If you want, feel free to ensure that the other values are all of type bool) Note: You are editing the existing function, not making a new one. "},{"title":"4. Implement verify_school_open() (2 points)​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#4-implement-verify_school_open-2-points","content":"Another way to test the above function is with a sanity check/validation test using assert. This approach is demonstrated in the third code block in the preamble section. When you pass day, is_holiday, is_snowy, and is_plowed to the school_open() function, you get back a result; call it is_open. There are several things that should be true about these variables: You should not have a case where day represents a weekend (is_weekday is False) and is_open is TrueYou should not have a case where is_holiday is True and is_open is TrueYou should not have a case where is_snowy is True, is_plowed is False, and is_open is True These will become the asserts for the validation function. Make a function with the signature verify_school_open(day, is_holiday, is_snowy, is_plowed, is_open)  This function should assert the three things above. This will allow you to run code of the form: is_open = school_open(day, is_holiday, is_snowy, is_plowed) verify_school_open(day, is_holiday, is_snowy, is_plowed, is_open)  Here, an incorrect implementation of school_open() has a chance of triggering the asserts in verify_school_open(). (Naturally, the implementation of verify_school_open()) may not be correct, but figuring out why there is a contradiction between the two can still be informative.) Extra So where did those assertions come from. Here are the original instructions: School can't be open on a weekend (Saturday or Sunday).School can't be open on a holiday.School can't be open if it has snowed and not been plowed.Otherwise, school is open. In logic terms the first three are respectively equivalent to: not weekday implies not openholiday implies not opensnowed and not plowed implies not open &quot;A implies B&quot; is logically equivalent to &quot;(not A) or B&quot;: weekday or not open(not holiday) or not opennot (snowed and not plowed) or not open Pulling the not out via reverse DeMorgans: not (not weekday and open)not (holiday and open)not (snowed and not plowed and open) Note that since I only translated 3 conditions, there are some illegal combinations that can get through the asserts. Violations of the &quot;otherwise school is open&quot; rule. False closures are completely missed. "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#grading-scale","content":"Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0-3 points​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#1-below-standards-0-3-points","content":""},{"title":"2: Approaching Standards: 4-7 points​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#2-approaching-standards-4-7-points","content":""},{"title":"3: Meeting Standards: 8-9 points​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#3-meeting-standards-8-9-points","content":""},{"title":"4: Exceeding Standards: 10-11 points​","type":1,"pageTitle":"Lab 03: Booleans and Assert","url":"/main/labs/assert#4-exceeding-standards-10-11-points","content":""},{"title":"Lab 09: Files","type":0,"sectionRef":"#","url":"/main/labs/files","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#overview","content":"This week's lab focuses on files, primarily on file opening and closing syntaxthe three file modessome examples of utilizing files to solve problems involving larger collections of data. This lab is meant to be an introduction to files, and act as practice for the concepts and skills necessary to complete homework 6. Refer to lecture 15 for example operations (i.e., open, read, write, append) on files. "},{"title":"How big is this lab?​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#how-big-is-this-lab","content":"There are 4 questions, with five parts in total. Questions 1 and 4.1 are purely coding questionsQuestions 2, 3, and 4.2 require describing an algorithm or explaining a syntax fix in words. If you have questions about the expected level of detail on questions asking for a description or explanation, please ask the staff in your lab. "},{"title":"Assignment​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#assignment","content":""},{"title":"1. Reading Syntax (1 point)​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#1-reading-syntax-1-point","content":"This question is just a refresher on file access syntax. Write a three line program that opens the file instructions.txt, reads out its contents, stores them in a variable named text, and closes the file. Your submission should consist of only 3 lines of Python code. No explanation is needed. You may assume that instructions.txt is in the same directory as your Python file. "},{"title":"2. Write vs. Append (1 point)​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#2-write-vs-append-1-point","content":"Recall that file accessing has three modes: read ('r'), write ('w'), and append ('a'). Briefly explain the difference between writing to a file opened in write mode and writing to a file opened in append mode. Name one real life example where it would make more sense to use append, and another where it would make more sense to use write. "},{"title":"3. Water Logged (1 point)​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#3-water-logged-1-point","content":"In an effort to drink more water, I've started to track my daily water intake. I have a single file in my Documents folder that tracks my water intake. Rather than finding the file, opening it, and manually logging my water every time, I've written a simple Python script to do it for me: my_log = open('~/Documents/water-intake.txt', 'w') text = input(&quot;How much water did you drink today?&quot;) my_log.write(text) my_log.close()  After 3 weeks of logging my water intake and one hundred total entires, I open the file to find, much to my dismay, a single entry. Explain why my file has one entry rather than 100 entires, and state what (very small) fix I should make to my code to fix this issue. "},{"title":"4. More Books (2 points)​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#4-more-books-2-points","content":"I own lots of books, so many that I can't remember all their names, much less where they all are in my house. Instead, I keep a single file named books.txt that contains a list of the title of every book, each on its own line. The first few lines of the file are shown below: Ender's Game Behave All the Light We Cannot See Curious George 1984 ...  4.1 Get Titles (1 point)​ Write a function get_titles that takes in the file path as its single parameter, reads in all the titles from the file, and returns a set of all the book titles listed in the file. Make sure your file is closed before you return. Your submission should consist of only Python code. No explanation is needed. You can assume the file path parameter is a valid path, and the file is safe to open. 4.2 Removing Duplicates (1 point)​ I'm worried my books.txt file has lots of duplicate titles. Describe in words how I can use get_titles to rewrite the contents of books.txt and remove all the duplicates. What mode should I be in when I write? As a hint, your solution should not involve any reading of the input file outside the reading done by get_titles. "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#grading-scale","content":"Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0 points​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#1-below-standards-0-points","content":""},{"title":"2: Approaching Standards: 2 points​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#2-approaching-standards-2-points","content":""},{"title":"3: Meeting Standards: 3 points​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#3-meeting-standards-3-points","content":""},{"title":"4: Exceeding Standards: 4 points​","type":1,"pageTitle":"Lab 09: Files","url":"/main/labs/files#4-exceeding-standards-4-points","content":""},{"title":"Lab 06: Looping","type":0,"sectionRef":"#","url":"/main/labs/looping","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#general-information","content":"Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#about","content":"This lab will ask you to 1) construct control flow diagrams from specific loop requirements, 2) describe in English how to solve particular iterative problems, and 3) trace through snippets of loop related code to answer questions. This lab's focus is on understanding the concept of iteration, and mastering the syntax of while and for loops. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#learning-objectives","content":"Practice creating control flow diagrams to solve iterative problemsPractice understanding and mastering loops in Python "},{"title":"Estimated Size​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#estimated-size","content":"4 questions: Two description questionsA control flow diagram questionA loop tracing questionA challenge question "},{"title":"Preamble​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#preamble","content":"This lab centers around creating control flow diagrams of iterative processes, and tracing through while and for loops. For instance, you have recently seen this while loop example in the online lecture notes: While nums = [] inp = input(&quot;Please enter a number or 'done'&quot;) while inp.lower() != &quot;done&quot;: num = int(inp) nums.append(num) inp = input(&quot;Please enter a number or 'done'&quot;) total = sum(nums) print(f&quot;Sum of {nums}: {total}&quot;)  In the above snippet, the while loop keeps appending a number to the list nums until the user inputs the string &quot;done&quot;. At that point, all the numbers in the list will be added together and the sum will be printed. An example of using a for loop is: For prices = [12.75, 2.50, 4.99, 7.50] sum = 0.0 avg = 0.0 for price in prices: sum += price avg = sum / len(prices) print(f&quot;Average of {prices}: {avg}&quot;)  This time we see that we iterate through a list of floats using a for loop. We iterate through the list of prices, and add each price to sum. When the for loop has gone through all the item in the list, we calculate the average and print it out. "},{"title":"Assignment​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#assignment","content":""},{"title":"0. Example Problem​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#0-example-problem","content":"Let's say we have a pile of books on a table, and we want to see if a particular book is in the pile. How can I solve this problem iteratively? At the beginning of the lab, your course staff will walk through a solution to this problem. You do not have to submit anything. "},{"title":"1. Solving iterative problems​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#1-solving-iterative-problems","content":"We are given a string my_string and a character char. In words, describe an iterative solution that determines if the char appears somewhere in my_string. For example, if the given string is &quot;Hello&quot; and the target character is '6', we would want to return False. If our character was 'H', we would want to return True. "},{"title":"2. Counting Digits​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#2-counting-digits","content":"You are given a line of text. In words, describe an iterative solution that determines how many characters in the line of text are digits. The goal is to count the number of digits in the line of text. For example, the line of text Let’s 86 those *&amp;^% spam cans with dates 12-30-1997 and 9-19-1976.&quot; contains 17 digits, so your solution should return 17. You can assume there is some process that determines if a single character is a digit, like the python isDigit() function. "},{"title":"3. Drawing Control Flow Diagrams​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#3-drawing-control-flow-diagrams","content":"Recall the example stack-of-books problem: Let's say we have a pile of books on a table, and we want to see if a particular book is in the pile. How can I solve this problem iteratively? Draw a control flow diagram of an iterative solution that returns True if the book is in the pile, and False otherwise. If you want an example of control flow diagrams, see the slides from lecture 9. You are welcome to choose any ways to construct control flow diagrams, such as with PowerPoint, a Google Doc, or paper and pencil. You will upload your drawings (either as a PDF or picture) to Gradescope. "},{"title":"4. Tracing through loops​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#4-tracing-through-loops","content":"Consider the following code snippet: base = 5 exponent = 15 final = 1 while exponent &gt; 0: final = base * final exponent -= 1  What are the values of the variables exponent, final, and base after the 3rd iteration of the while loop? What about after the 5th iteration? The 10th? How many times will the while loop execute? "},{"title":"5. (Challenge) Greatest Common Divisor​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#5-challenge-greatest-common-divisor","content":"For any two integers aaa and bbb, we define the greatest common divisor to be the largest positive number that divides both aaa and bbb. For example, if a=20a = 20a=20 and b=24b = 24b=24, aaa is divisible by 1, 2, 4, 5, 10, and 20, and bbb is divisible by 1, 2, 3, 4, 6, 8, 12 and 24. Therefore, the largest number that divides both aaa and bbb is 4. Describe an iterative solution that, given aaa and bbb, computes their greatest common divisor. Here, we can assume the user gives two positive integers (In other words, two whole numbers strictly greater than zero). Hint: Perhaps the easiest way to do this is to just test all the numbers that can possibly divide both aaa and bbb. What is the first number we should check? What's the last number we should check? "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#grading-scale","content":"Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: ???​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#1-below-standards-","content":""},{"title":"2: Approaching Standards: ???​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#2-approaching-standards-","content":""},{"title":"3: Meeting Standards: ???​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#3-meeting-standards-","content":""},{"title":"4: Exceeding Standards: ???​","type":1,"pageTitle":"Lab 06: Looping","url":"/main/labs/looping#4-exceeding-standards-","content":""},{"title":"Lab 08: Modules and Exceptions","type":0,"sectionRef":"#","url":"/main/labs/modules-exceptions","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#overview","content":"Modules are an essential part of the Python programming language as they provide a way to organize and reuse code. A module is a file containing Python code that defines functions, classes, variables, and other objects that can be reused in different programs. Here are some of the reasons why modules are important in Python:  Code Reusability: Modules allow developers to write code once and use it multiple times in different programs. This saves time and effort and makes the development process more efficient. Organization: Modules allow developers to organize their code into logical units, making it easier to read and understand. Modularity: Modules allow developers to break down complex programs into smaller, more manageable pieces, making it easier to debug and test. Extensibility: Python comes with a large number of built-in modules and libraries that provide a wide range of functionalities. Additionally, third-party modules can be easily installed and used to extend the capabilities of Python.  On the other hand, exceptions are an important part of programming in general because they allow developers to handle unexpected and exceptional situations that may occur during program execution. Exceptions provide a way for programs to recover from errors, continue execution, and provide meaningful feedback to the user about the cause of the error. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#learning-objectives","content":"Upon completion of this lab, you will be able to: Read documentation Implement exception handlingUnderstand the try catch finally statementDescribe and create modules in pythonWork with the built-in Python modules "},{"title":"How big is this lab?​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#how-big-is-this-lab","content":"There are 333 questions: One question is to discussion with your peers.Second question is to use exceptions as safe guard.Third question is to create your own module. "},{"title":"Preamble​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#preamble","content":"Errors happen and things go wrong. In lecture 131313, different types of errors and exceptions were covered. For example, doing the followings might lead to runtime errors: Runtime_error user_str = input(&quot;Please enter a number:&quot;) user_num = float(user_str)  The reason is that if the user inputs something other than a number such as abc, it will not make sense to convert abc to a decimal number. The result will lead to a crash. One way to keep this kind of runtime error from happening is to use safeguard such as try, except, and else. For example: Try_except_else while True: try: user_str = input(&quot;Please enter a number:&quot;) user_num = float(user_str) except: print(&quot;Illegal input recieved&quot;) else: break print(f&quot;user_num set to {user_num}&quot;)  The above block of codes will keep prompting the user as long as the input is not a number - and print out an error from the except clause. Once an acceptable number is entered and converted into a decimal. The else clause will take over and break out of the while loop. Now, let's do a refresh on modules. Also covered in lecture 131313, a module &quot;...is a collection of code you can use.&quot; One module you might already be familiar with is math. Using math, you can do math.log etc. For example: Math_module import math x = int(input('Enter a number: ')) print(f'Log is {math.log(x)}') print(f'Square root is {math.sqrt(x)}') print(f'Pi is {math.pi}')  You can also create your own module. For example, let's create a new file called mymath.py as the followings: My math module def add(a, b): return a + b def sub(a, b): return a - b def exp(a, b): return a ** b def div(a, b): if b == 0: raise ValueError(&quot;Division by zero is not possible.&quot;) return a / b  Let's also create a second file called main.py as the followings: Use my math module import mymath a = 100 b = 0 print(&quot;Addition from mymath: &quot;, mymath.add(a, b)) print(&quot;Subtraction from mymath: &quot;, mymath.sub(a, b)) print(&quot;Exponent from mymath: &quot;, mymath.exp(a, b))  What the above showed is that in main.py, I pull in the codes from mymath.py using the import. From there, I could call any of the methods defined in mymath.py such as .add() or .subtract() etc. So using modules, you can organize your codes nicely! Do note that in order for main.py to pull in your codes from mymath.py, both files need to be located in the same location or directory for them to find each other. "},{"title":"Assignment​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#assignment","content":"Let's say you are writing a program that reads data from a file and performs some calculations. One of the calculations involves dividing two numbers read from the file. You don't know what type of data the file may contain characters, so it's possible that you accidently read in two letters and attempt to divide them, leading to a ValueError exception. Additionally, it's possible that we successfully read in two numbers, but the denominator we read is a zero, so that when we divide we get a ZeroDivisionError. In this lab, you will write an algorithm that handles these exceptions to prevent your program from crashing. "},{"title":"1. Documentation (2 points)​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#1-documentation-2-points","content":"1.1 Use the following documentation​ https://docs.python.org/3/tutorial/errors.html 1.2 Discuss with your team how to use the try-except block to capture the ZeroDivisionError and ValueError exceptions​ 1.3 Provide two code examples that capture ZeroDivisionError and ValueError exceptions​ "},{"title":"2. Exceptions (2 points)​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#2-exceptions-2-points","content":"Create a Python script called division.py and write a function called divide(a, b) that takes two arguments, a and b. Use a try block to perform the division a / b. If b is zero, catch the ZeroDivisionError and print &quot;Cannot divide by zero&quot;. If a or b is not a number, catch the ValueError and print &quot;Both inputs must be numbers&quot;. Return the result if the division is successful. Test the function with different arguments to ensure it raises the correct exceptions. 2.1 Work with your team and write an algorithm to solve the problem. Decompose the problem in at least six steps​ 2.2 Implement your algorithm in Python​ "},{"title":"3. Modules (2 points)​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#3-modules-2-points","content":"Here, the task is to create a Python script called main.py that contains a function called calculate_sum(numbers). This function takes a list of numbers as an argument and returns the sum of the numbers. The division module created in Part 222 should be imported. In the calculate_sum function, a for loop iterates over the numbers in the list. For each number, the divide function from the division module is called. If an exception is raised, an error message is printed to the console and the next number in the list is processed. If the division is successful, the result is added to a running total. After all the numbers have been processed, the calculate_sum function returns the running total. Testing should be done with different lists of numbers to ensure it handles exceptions properly. 3.1 Work with your team and write an algorithm to solve the problem. Decompose the problem in at least nine steps​ 3.2 Implement your algorithm in Python​ "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#grading-scale","content":"Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0 point​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#1-below-standards-0-point","content":""},{"title":"2: Approaching Standards: 2 points​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#2-approaching-standards-2-points","content":""},{"title":"3: Meeting Standards: 3 points​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#3-meeting-standards-3-points","content":""},{"title":"4: Exceeding Standards: 4 points​","type":1,"pageTitle":"Lab 08: Modules and Exceptions","url":"/main/labs/modules-exceptions#4-exceeding-standards-4-points","content":""},{"title":"Lab 11: Object Oriented Programming","type":0,"sectionRef":"#","url":"/main/labs/oop","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#overview","content":"This week's lab focuses on object oriented programming, primarily on familiarizing yourself with the syntax and organization of classesgetting comfortable with creating objects or instances of a classunderstanding the concepts of methodsusing methods to manipulate properties of a class Refer to lecture 18 for examples of Python objects and methods. "},{"title":"How Big is this Lab?​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#how-big-is-this-lab","content":"The lab contains 5 questions. If you have questions about the expected level of detail for any of the questions, please ask your lab staff. "},{"title":"Assignment​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#assignment","content":""},{"title":"1. Create an Instance of a Class (1 point)​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#1-create-an-instance-of-a-class-1-point","content":"This question is just a refresher on class and object syntax. Consider the following Student class: Student_starter class Student: def __init__(self, name, courses): self.name = name self.courses = courses  Write one line of Python code which initializes a new student object with its name property set to &quot;Ben Burns&quot; and its courses property set to {&quot;CICS 110&quot;, &quot;MATH 131&quot;}. As a reminder, the __init__() method is called the Constructorm it is the Python method that runs every time we want to make a new instance of the Student class. You should not be calling __init__() directly, refer back to the slides if needed for examples. "},{"title":"2. Course Enrollment (1 point)​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#2-course-enrollment-1-point","content":"Now that we have our Student class set up, we want to allow our students to enroll in new courses. Here, we're going to add a method to the Student class to help our students enroll in a single new course. Write a new method for a Student class named enroll, which takes in a string new_course and adds it to the Student's course property. For example, if we run the following code Student_enroll bburns = Student(&quot;Ben Burns&quot;, {&quot;CICS 110&quot;}) bburns.enroll(&quot;MATH 131&quot;)  the name property of bburns should be set to &quot;Ben Burns&quot;, and the value of the courses property should be {&quot;CICS 110&quot;, &quot;MATH 131&quot;}. "},{"title":"3. Course Adjustment (1 point)​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#3-course-adjustment-1-point","content":"Similarly, we also would like to allow our students to drop courses. The goal is to add another method to the Student class so our students can drop a course. Write a new method for a Student class named drop, which takes in a string course and attempts to remove it from the Student's course property. For example, if we run the following code Student_drop bburns = Student(&quot;Ben Burns&quot;, {&quot;CICS 110&quot;, &quot;MATH 131&quot;}) bburns.drop(&quot;CICS 110&quot;)  the value of the courses property should now become {&quot;MATH 131&quot;} Hint: Use .discard() for removing an item from a set. This ensures no exception will occur if a non-existent item is removed from a set. "},{"title":"4. Discussion (1 point)​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#4-discussion-1-point","content":"In questions 2 and 3, you created two different methods within the Student class. Now, consider you do not have any methods defined within the Student class. Instead, you only have a single function called enroll_student(Student, new_course) defined outside the Student class to perform the enrollment operation. Discuss with your peers why do you need methods? What are the advantages and disadvantages of having methods? Hint: Review Lecture 18 slides 7-11 and section 12.1 in zyBooks. "},{"title":"5. (Challenge) Dictionaries vs. Classes (1 point)​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#5-challenge-dictionaries-vs-classes-1-point","content":"I don't know about you, but I personally find objects to be very confusing, especially all this self and __init__() syntax. However, I am really comfortable with dictionaries, including how to define a dictionary, how to work with key-value pairs, and how to use dictionaries in functions. To my surprise, classes and dictionaries are actually extremely similar. In fact, an object's properties and their values are actually stored (under the hood) as a dictionary! That being said, why might I want to use a dictionary instead of a class? Why I might want to use a class instead of a dictionary? "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#grading-scale","content":"Below are how many points are required for each level on the 5-point scale. "},{"title":"1: Below Standards: 0 point​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#1-below-standards-0-point","content":""},{"title":"2: Approaching Standards: 2 points​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#2-approaching-standards-2-points","content":""},{"title":"3: Meeting Standards: 3 points​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#3-meeting-standards-3-points","content":""},{"title":"4: Exceeding Standards: 4 points​","type":1,"pageTitle":"Lab 11: Object Oriented Programming","url":"/main/labs/oop#4-exceeding-standards-4-points","content":""},{"title":"Getting Started with Python","type":0,"sectionRef":"#","url":"/main/labs/python-setup","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradescope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#about","content":"Almost as a tradition, the first program someone learning to write code is likely to write is some variation of a Hello World program. So that's what you're doing! The real &quot;assignment&quot; here is more about installing things, setting up a programming environment, learning about the auto-grader, et cetera. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#learning-objectives","content":"Install PythonSet up Integrated Development Environment (IDE)Write first program in pythonBecome more familiar with Gradescope "},{"title":"Estimated Size​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#estimated-size","content":"One file, with one line of code and three lines of comments. "},{"title":"Assignment​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#assignment","content":"We're going to really break this one up into pieces. For this--and only this--assignment, you must work alone. You are totally welcome to talk to people nearby, everyone just needs to make their own submissions We want everyone to have everything installed and in working order, and to know the the Gradescope process looks like. "},{"title":"0.1. Install Python​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#01-install-python","content":"Follow the relevant guide on the website to install Python. "},{"title":"0.2. Set up VSCode​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#02-set-up-vscode","content":"Follow these guides on the website to install and set of the editor, VSCode. "},{"title":"1. Make a file named hello.py​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#1-make-a-file-named-hellopy","content":"Now the actual assignment can begin. Make a folder for this assignment somewhere of your choosing. Open that folder in VSCode (Open VSCode and select File &gt; Open Folder, navigate to that folder you made and select it). Make a new file named hello.py (select File &gt; New File, and name it when prompted). "},{"title":"2. Add author information to hello.py​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#2-add-author-information-to-hellopy","content":"We want you to put your name, UMass email, and who you worked with at the top of all assignments so that we know who wrote each file (when working in groups) and to help us connect each student with their email on Gradescope (sometimes non-UMass emails are used, and it's difficult to find the UMass one in that case) That can be done with comments. Comments are lines that are ignored by the computer. You start a comment (in python) with the # character. Anything on that line after that character is ignored. So specifically, we want: # Author or # Authors to be the start of the first line of the file.# Email or # Emails to be the start of the second line of the file.# Spire ID or # Spire IDs to be the start of third line of the file.each of the above followed by the relevant information. For example, the first three lines of a file may look like this: # Author: Jared Yeager # Email: jyeager@cs.umass.edu # Spire ID: 31415926  Note: this is expected of every file going forward. "},{"title":"3. Add print() statement to hello.py​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#3-add-print-statement-to-hellopy","content":"Finally, the actual code. After the comments from earlier add the line print(&quot;Hello, World!&quot;)  print(), as you may have guessed, is a command that prints the input (to the terminal). The input is surrounded by parentheses. The quotes around the input, &quot;Hello, World!&quot;, indicate it is text (a string, more technically). Note: When showing code in general, we will use a mono-spaced font. When talking about &quot;commands&quot; like print(), we will have the () afterward to denote that it is a command. (Technically, these are called &quot;functions&quot;, but that lecture is next week.) Testing While we have auto-graded tests for you, we don't want to encourage dependence on the auto-grader. We want to try and impart testing and debugging skills so that you are equipped in any circumstance. To that end, we will have testing recommendations/suggestions where we can, so that you can test your code. In this case, running the code and making sure &quot;Hello, World!&quot; is printed is the natural thing to do. Running code and making sure it does what you expect is the essence of testing. (Finding out where it first deviates from what you expect is the essence of debugging) To run the code, open the built-in terminal (select Terminal &gt; New Terminal) and type in python3 hello.py in the terminal. You should now see: $ python3 hello.py Hello, World! This $ sign notation is not literal, it represents lines you entered input on. "},{"title":"4. Submit hello.py to Gradescope​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#4-submit-hellopy-to-gradescope","content":"Log in to Gradescope, select the relevant assignment, and submit hello.py Gradescope has a guide on submittingassignments like this. Note: in general, you will submit all .py files for a relevant assignment at once. "},{"title":"Extra Details​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#extra-details","content":"There will be some times where we like to provide extra details or information--stuff that may not be covered in the course itself or that will be covered later. None of this is necessary to know at this point. "},{"title":"The Code​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#the-code","content":"It's all well and good to have you write print(&quot;Hello, World!&quot;), but what do the pieces of this mean? print() is a &quot;function&quot;. We will learn more about functions next week. But for some intuition: you can think of them as commands; you can think of them as ways to invoke re-usable, named snippets of code; or you can think of them as black boxes that take inputs (like functions in math), spit out outputs (like functions in math), and have side effect (un-like function in math). In this last view, print() takes in something to print, returns nothing, and has the side-effect of printing the input. &quot;Hello, World!&quot; is a &quot;string&quot;. We should have already learned about them (but in case not...). But for some intuition: there is a notion of numbers and text as different &quot;types&quot;, strings are the text-like type. To indicate something is text, we wrap it in quotation mark. Note: these are straight quotation marks. &quot;text&quot; will work, 'text' will also work; the following will not work: `text`, “text”, and ‘text’. No back-ticks, nothing that curls. And so print(&quot;Hello, World!&quot;) passes the string (text) &quot;Hello, World!&quot; to the function print(), which prints it. "},{"title":"The Terminal​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#the-terminal","content":"What is the terminal? The terminal is an interface to out computers that allows us to give it commands through text, which it will make a program to accomplish. It also allows us to give those programs input, and for those programs to give us output. It is a tool for us to run and interact with programs. "},{"title":"Running the Code​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#running-the-code","content":"What does the terminal command python3 hello.py mean? The python3 part is a command that says &quot;run the python 3 interpreter&quot;. The hello.py part is giving the file hello.py to the python 3 interpreter to, well, interpret. The command can be read as &quot;run python3 with input hello.py. "},{"title":"Lab 10: Recursion","type":0,"sectionRef":"#","url":"/main/labs/recursion","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#overview","content":"This week's lab focuses on recursion, primarily on identifying the components of a recursive functionwriting the base case for a recursive problemconverting a recursive procedure into an iterative procedure Refer to lecture 17 for examples of recursion and recursive functions. "},{"title":"How big is this lab?​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#how-big-is-this-lab","content":"The lab contains 4 questions. If you have questions about the expected level of detail in the explanation for question 1, please ask your lab staff. "},{"title":"Assignment​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#assignment","content":""},{"title":"1. Identifying base case and recursive step (1 point)​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#1-identifying-base-case-and-recursive-step-1-point","content":"Consider the following recursive function that takes in a list of numbers and computes the sum of all the elements in the list: Sum def sum_list(lst): if len(lst) == 0: return 0 else: return lst[0] + sum_list(lst[1:])  Identify the base case and the recursive step. Your answer should be two code snippets from the above function. No explanation is needed, but please clearly indicate which snippet is the base case and which snippet is the recursive step. "},{"title":"2. Coming up with base case (1 point)​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#2-coming-up-with-base-case-1-point","content":"Recall that base case terminates our recursion by return a specific value without making a new recursive call. Let's assume we have a recursive function that takes in an integer nnn and counts the number of digits nnn has. A partial implementation of the function is shown below: Count def digit_count(n): # &lt;TODO: Write a base case&gt; else: return 1 + digit_count(n // 10)  For example, digit_count(100) returns 3, and digit_count(1234567) returns 7. Write a single base case to complete the function above. Your submission should be up to two lines of code. "},{"title":"3. Returning woes (1 point)​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#3-returning-woes-1-point","content":"Consider the following recursive function that takes in two nonnegative integers aaa and bbb, and computes the quantity aba ^ bab: Exponentiation def exponentiation(a, b): if b == 0: return 1 a * exponentiation(a, b-1)  Unfortunately, our implementation has a problem: sometimes the function works, but other times our function returns nothing or even crashes! Briefly explain what is causing this issue, and provide a (short) code snippet of how you would fix this problem. (if you want, you can explain why this function can crash, but it is not required) "},{"title":"4. Converting from recursion to iteration (1 point)​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#4-converting-from-recursion-to-iteration-1-point","content":"In lecture 17 we saw a way to implement the factorial function recursively: Factorial def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1)  Try to change this recursive implementation of factorial to one that uses loops instead. The final solution should not include a call to factorial() inside the factorial() function (though you can have it outside to test it) "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#grading-scale","content":"Below are how many points are required for each level on the 5-point scale. "},{"title":"1: Below Standards: 0 point​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#1-below-standards-0-point","content":""},{"title":"2: Approaching Standards: 2 points​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#2-approaching-standards-2-points","content":""},{"title":"3: Meeting Standards: 3 points​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#3-meeting-standards-3-points","content":""},{"title":"4: Exceeding Standards: 4 points​","type":1,"pageTitle":"Lab 10: Recursion","url":"/main/labs/recursion#4-exceeding-standards-4-points","content":""},{"title":"Lectures","type":0,"sectionRef":"#","url":"/main/lectures","content":"Lectures Welcome to the lecture material section of the course website! Here, you will find all the information and resources you need to succeed in your course. Whether you are just starting out or have prior experience, our goal is to provide you with the tools and support you need to achieve your goals. In this section, you will find slides from each lecture, as well as example code and other relevant resources. Our lecture material is designed to provide you with a comprehensive and engaging learning experience, and we have included links to additional resources that you can use to expand your knowledge and develop your skills. Whether you are looking to reinforce what you have learned in class or explore new topics, this section has you covered. We are committed to providing you with the support and resources you need to succeed in your computational thinking and computer programming course. Our lecture material is an essential part of that support, and we have worked hard to ensure that it is both comprehensive and accessible. Whether you are a beginner or have prior experience, we are confident that you will find our lecture material to be a valuable tool in your programming journey. Good luck and happy coding!","keywords":""},{"title":"Lec 02 Arithmetic Expressions","type":0,"sectionRef":"#","url":"/main/lectures/arith-exprs","content":"","keywords":""},{"title":"Reading / Participation​","type":1,"pageTitle":"Lec 02 Arithmetic Expressions","url":"/main/lectures/arith-exprs#reading--participation","content":"Read Chapter 1 Introduction to Programming in CICS 110 - Foundations of Programming on zyBooks (note, you will first need to purchase the book)Complete Participation 1 in zyBooks "},{"title":"Slides​","type":1,"pageTitle":"Lec 02 Arithmetic Expressions","url":"/main/lectures/arith-exprs#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Additional Resources​","type":1,"pageTitle":"Lec 02 Arithmetic Expressions","url":"/main/lectures/arith-exprs#additional-resources","content":"Numbers in Python (Socratica)Python Strings (Socratica) "},{"title":"Lec 05 Booleans & Assert","type":0,"sectionRef":"#","url":"/main/lectures/booleans-and-assert","content":"","keywords":""},{"title":"Due this week​","type":1,"pageTitle":"Lec 05 Booleans & Assert","url":"/main/lectures/booleans-and-assert#due-this-week","content":"Participation 2 Due Thursday This is the Zybooks Quiz 3 Due ThursdayHW1 Due WednesdayLab Due Friday (2/24) "},{"title":"Slides​","type":1,"pageTitle":"Lec 05 Booleans & Assert","url":"/main/lectures/booleans-and-assert#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Lab 02: String Formatting","type":0,"sectionRef":"#","url":"/main/labs/string-formatting","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradescope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognize Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#about","content":"Labs will generally be designed to either reinforce something from class, or to teach something that may be useful for you but isn't tested in any way. This lab is about string formatting. You will not be tested on this going forward, but it is something that is good to know. String formatting can help you print information in a way that is more legible or easier to make sense of. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#learning-objectives","content":"Learn about f-StringsLearn to format float decimal placesLearn to format floats in scientific notationLearn about variables within formattingLearn about string alignment "},{"title":"Estimated Size​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#estimated-size","content":"3 functions: The first could reasonably be done with 2 lines, 1 of which is a print statement.The second could reasonably be done with 6 lines, 3 of which are print statements.The third could reasonably be done with 6 lines, 4 of which are print statements. "},{"title":"Preamble​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#preamble","content":"String formatting is an umbrella term for techniques and machinery that lets you print things with a little more control/specificity of how they are printed. This in generally useful making things more aesthetically pleasing and thus easier to make sense of at-a-glance. A reference for a number of formatting options can be foundhere. Below are some slides with examples of f-Strings: Download Powerpoint "},{"title":"Assignment​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#assignment","content":""},{"title":"0.1. Partner up, if you'd like​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#01-partner-up-if-youd-like","content":"Labs and assignments from here on may be done in groups of up to 3. Only the Python Setup lab had to be done alone, because we wanted to ensure everyone had the environment set up. "},{"title":"0.2. Make a file named format.py (1 point)​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#02-make-a-file-named-formatpy-1-point","content":"Pretty self explanatory. Make a folder for the lab, open it in VSCode, make the file. Now that you know about functions, most work will be in one file that has multiple functions. This is hopefully less annoying to write, and definitely easier and faster to test. The file for this lab's work is format.py. And don't forget author comments at the top, e.g.: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  "},{"title":"1.1. Implement short_exp() (1 point)​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#11-implement-short_exp-1-point","content":"This function will take two floats, base and exponent. (You may call them whatever you want, I originally just used f1 and f2, but these names are clearer). The function will print &lt;base&gt; ^ &lt;exponent&gt; = &lt;result&gt;, where: &lt;base&gt; is base formatted to always give 2 decimal places&lt;exponent&gt; is exponent formatted to always give 2 decimal places&lt;result&gt; is base ** exponent formatted to always give 2 decimal placesin scientific notation (the 'e' needs to be lower case)The '^' and = should also have space around them. For example, a call to short_exp(31.415926, 27.182818)should print 31.42 ^ 27.18 = 4.97e+40. You may assume that base is always positive. If you would like, you may use this starter code to make sure the spacing is appropriate: Short_Exp_Starter def short_exp(base:float, exponent:float) -&gt; None: result = base ** exponent print(f&quot;{base} ^ {exponent} = {result}&quot;) short_exp(31.415926, 27.182818)  Hints Hard to be subtle with hints for this one, so these are almost answers. Formatting floats in decimal form: check out the Padding and truncating numbers section of the linked page. Formatting floats in scientific notation: check out the Other number representations section of the linked page. Testing Stick some calls to short_exp() in your file (outside, and below the function) and click the play/run button in the upper-right, assuming the extensions are installed (or open VSCode's terminal and run python3 format.py). The outputs should have 2 decimal places each, and the result should be in scientific notation. "},{"title":"1.2 Modify short_exp() (1 point)​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#12-modify-short_exp-1-point","content":"Generalizing functions when you can to make them more flexible can be quite useful. So let's generalize short_exp(). Modify short_exp() to take in a third parameter, precision, that is 2 by default. (You may choose any name, the tests depend in it being the third parameter, not having a specific name.) Instead of everything having 2 decimal place printed, have precision decimal places printed. For example, a call to short_exp(31.415926, 27.182818, 3)should print 31.416 ^ 27.183 = 4.975e+40. You may assume precision is a positive int. Hints Check out the Parametrized formats section of the linked page. Testing Same as before, except make sure to try varying values for the precision field, and try some calls without that third field at all (to make sure the default precision is 2). "},{"title":"2. Fix long_div() (2 points)​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#2-fix-long_div-2-points","content":"You a given a function that currently prints long division in only a semi-formatted manner: Long_Div_Starter def long_div(dividend:int, divisor:int) -&gt; None: result = dividend // divisor length_dividend = len(str(dividend)) # how long the dividend is length_divisor = len(str(divisor)) # how long the divisor is horizontal_bar = length_dividend * '-' width = length_divisor + 1 + length_dividend print(f&quot;{result}&quot;) print(f&quot;{horizontal_bar}&quot;) print(f&quot;{divisor}|{dividend}&quot;) long_div(12865, 415)  This function takes two ints, a dividend and divisor, and should print out the long-division in a more appropriately formatted manner. For example, a call to long_div(12865, 415) should result in the following being printed:  31 ----- 415|12865  You task is to ensure the nicely formatted version is displayed. There are three lines of output total. The last of the three is the divisor, followed by a vertical line ('|'), followed by the dividend. The length of this line also determines the total width of the area alignment occurs in. (You may thus find the width variable helpful.)The second line is a right-justified series of dashes ('-') that covers exactly the dividend. the horizontal_bar variable already holds this, it just needs to be right-aligned.The first line is the result of the division (note the use of integer division), right justified. The result variable already holds this, it just needs to be right-aligned. You may assume both inputs are positive integers and that the dividend is a multiple of the divisor. Hints The only new formatting tool is string alignment, which can be found under the Padding/aligning strings section. Parametrized formats are still relevant. Also, as intuition for the future, note where those variables came from: We need the result of the division the show on top (result).We need a horizontal bar as long as the dividend (horizontal_bar),thus we need to know the length of the dividend (length_dividend).Everything needs to be right-aligned to the width (width),thus we need to know the length of the dividend and divisor (length_divisor). Testing As before, just try some calls and see if they look right. Try some dividends of various length the make sure the bar on the second line adjusts correctly. Make sure the first input to the function is multiple of the second. I would actually pick two int, get the product, and pass that product and an operand to the function. For instance: num1 = 31 num2 = 415 long_div(num1 * num2, num2) That way you know what the answer should be and know the divisor divides the dividend. "},{"title":"3. Implement long_addsub() (0 points)​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#3-implement-long_addsub-0-points","content":"danger The overall lab has been deemed too long, and this portion has been relegated to being purely extra content. This function will take two ints, n_top and n_bottom say (names unimportant), and prints a formatted long-addition/subtraction-looking final result. A reasonable function prototype might be long_addsub(n_top:int, n_bottom:int) -&gt; None. For example, a call to long_addsub(31415, 926) would result in the following being printed:  99900 + 314 ------ 100214  long_addsub(990, -1000) would would result in the following being printed:  990 -1000 ----- - 10  There are a lot of constraints: The numbers are right-justified.The second number's sign should always be visible and used to indicate addition/subtraction.The addition/subtraction symbol should never have a digit from the first number directly over it (it may have a digit from the result under it though).If the result is negative, it's sign is left-justified. You may assume the both numbers are integers and that the first one is positive. Hints In terms of formatting machinery, this is made possible by abusing some formatting options under the Signed numbers section. The hardest part of this is figuring out what the width of the formatted region is supposed to be. Here's some more articulation: You need the first number and one more space (for the second number's sign) to fitYou need the second number and its sign to fitYou need the third number (and it's sign if it is negative) to fit These length can be a bit trick to obtain, but calling len() on formatted f-Strings based on these number will allow you to get length when the sign is always there, for instance. And for ensuring all these guarantees, well, there's always the max() function. Testing There are enough interesting condition here that we want to make some tests to hit all our cases of concern. Each of those constraints may offer some test cases. The numbers are right-justified. Anything can be used to test this, so moving on. The second number's sign should always be visible and used to indicate addition/subtraction. This means we want a test where the second number is positive, and a test where it is negative. The addition/subtraction symbol should never have a digit from the first number directly over it (it may have a digit from the result under it though). I look at this and see the variable here being how long the first number is relative to the second. I would want to test when the first number is longer, where they are the same length, and where the second number is longer. If the result is negative, it's sign is left-justified. In order to check this, you need an example that has a negative result, and where that result is small enough in magnitude that the sign would be visibly moved. "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#grading-scale","content":"Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0-1 points​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#1-below-standards-0-1-points","content":"This is the number of points gained by only making the file. "},{"title":"2: Approaching Standards: 2 points​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#2-approaching-standards-2-points","content":"This is the number of points gained by making the file and completing only half of the first exercise. "},{"title":"3: Meeting Standards: 3-4 points​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#3-meeting-standards-3-4-points","content":"This is the number of points gained by making the file and completing the first exercise. "},{"title":"4: Exceeding Standards: 5 points​","type":1,"pageTitle":"Lab 02: String Formatting","url":"/main/labs/string-formatting#4-exceeding-standards-5-points","content":"This is the number of points gained by making the file completing the first and second exercises. "},{"title":"Lab 07: Sets and Dictionaries","type":0,"sectionRef":"#","url":"/main/labs/sets-dicts","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#general-information","content":"Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#about","content":"Data structures are an essential concept in computer science and are used to organize and store data efficiently. For example, sets can be used for data deduplication, identifying common elements in two datasets, or generating unique IDs. Dictionaries can be used for caching data, storing metadata, or implementing custom data structures like graphs and trees. Overall, sets and dictionaries are powerful tools for storing, accessing, and manipulating data in a fast and efficient way. In this lab we will explore the application and implementation of sets and dictionaries to solve problems. This will allow you to understand how sets and dictionaries could be used to solve problems. You will also learn to master the syntax of sets and dictionary. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#learning-objectives","content":"Discuss and explore the application of data structures.Describe sets and dictionaries operation.Solve problems using data structures.Implement sets and dictionaries on Python. "},{"title":"Estimated Size​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#estimated-size","content":"There are 222 questions: A multi-part question about dictionaryA multi-part question about setsAn optional challenge problem "},{"title":"Preamble​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#preamble","content":"In lectures 666 and 111111, you have seen different examples of lists, sets, and dictionaries. For instance, you have recently seen this set example: Set fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;} fruits.add(&quot;grape&quot;) print(f&quot;after : {fruits}&quot;)  In the above snippet, the set fruits consists of 333 unique elements. Using the add() method, you could add more elements into the existing set fruits. An example of using a dictionary: Dictionary fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;banana&quot;: &quot;yellow&quot;, &quot;cherry&quot;: &quot;red&quot;} print(fruit_colours) # Update with a dict fruit_colours.update({&quot;apple&quot;: &quot;green&quot;, &quot;orange&quot;: &quot;orange&quot;}) print(fruit_colours) # Update with a list of key-value tuples fruit_colours.update([(&quot;apple&quot;, &quot;yellow&quot;), (&quot;grape&quot;, &quot;purple&quot;)]) print(fruit_colours)  This time we see that using the update() method, you can not only modify the existing key-value pair - in this case &quot;apple&quot;: &quot;red&quot; to &quot;apple&quot;: &quot;green&quot;, you can also add new key-value pair into the dictionary. Similarly, if you want to update multiple items together, you can pass a list of tuples to the update() method. Below is an aggregated example of using lists, sets, and dictionary together Combine studentGrades = { 'Jimmy': 95, 'Will': 80, 'Joe': 95, 'Emily': 85 } studentsHighestGrades = [] threshold = 80 setAboveThreshold = set() highestGrade = max(studentGrades.values()) for aStudentName, aGrade in studentGrades.items(): if aGrade == highestGrade: studentsHighestGrades.append(aStudentName) if aGrade &gt; threshold: setAboveThreshold.add(aStudentName) print(f&quot;The top-scoring student(s) are: {', '.join(studentsHighestGrades)}&quot;) print(f&quot;{len(setAboveThreshold)} students scored above the threshold of {threshold}.&quot;)  The example created a dictionary of student name and grade as key-value pairs. The max method found the highest grade out of 757575, 808080, 959595, and 858585. For each pair, the for loop attempted to find which students have the highest grade. Once found, their names are added into a list. If a grade is also above a particular threshold, the student's name is also added into a set. "},{"title":"Assignment​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#assignment","content":""},{"title":"1. Counting Word Frequency (7 points) (40 minutes)​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#1-counting-word-frequency-7-points-40-minutes","content":"Counting word frequency is interesting and helpful because it provides valuable insights into the patterns and themes present in a piece of text. By analyzing the frequency with which words appear, we can gain a deeper understanding of the author's style, tone, and message. Understanding the topic: By looking at the frequency of words related to a specific topic, we can gain insights into what the text is about. For example, if we count the frequency of words like &quot;climate change&quot; or &quot;global warming&quot; in a news article, we can quickly understand that the article is about environmental issues. Identifying key themes: The frequency of certain words or phrases can help us identify key themes in a piece of text. For example, if we count the frequency of words like &quot;love,&quot; &quot;romance,&quot; and &quot;heartbreak&quot; in a novel, we can identify that the main theme of the novel is likely to be relationships. Measuring sentiment: Counting the frequency of positive and negative words in a piece of text can help us gauge the overall sentiment of the text. For example, if we count the frequency of words like &quot;happy,&quot; &quot;joyful,&quot; and &quot;pleased&quot; versus words like &quot;sad,&quot; &quot;angry,&quot; and &quot;disappointed&quot; in a set of customer reviews, we can understand the general sentiment towards a product or service. Improving language skills: Counting word frequency can also be helpful for improving language skills. By analyzing the frequency of words in a particular text, we can identify new words to add to our vocabulary and gain a better understanding of how words are used in context. In this exercise, you will implement an algorithm to count words frequency stored in a list using dictionaries. 1.1 A FIRST ATTEMPT (3 points)​ Word_Count # The following story was created using ChatGPT text = &quot;Once upon a time, there was a little girl named Lily who loved to explore. \\ One day, she stumbled upon a magical garden filled with colorful flowers and \\ butterflies. As she walked through the garden, she noticed a tiny fairy with \\ shimmering wings. The fairy thanked Lily for visiting and gave her a special \\ flower as a gift. Lily promised to visit the garden every day and soon became \\ friends with the fairy. They had many adventures together and shared lots of \\ laughter and joy. And even though Lily grew up and moved away, she never forgot \\ her magical friend or the special gift she received in the enchanted garden.&quot; word_list = text.split() new_list=[] for word in word_list: if not word in new_list: new_list.append(word) new_list.append(1) else: idx = new_list.index(word) new_list[idx+1]+=1 print(new_list)   Do you think the specified implementation works? (1 point)(4 minutes) Describe in words what the snippet of code provided does. (1 point)(4 minutes) What are some disadvantages of this implementation? (1 point)(2 minutes)  1.2 DICTIONARIES TO THE RESCUE (2 points)​  Can you propose a solution (in words) to this problem that uses dictionaries? (1 point)(7 minutes) What are some advantages of your proposed solution over the primitive solution in 1.1? (1 point)(3 minutes)  1.3 DEVELOPING AN IMPLEMENTATION (2 points)​ Your_Word_Count # The following story was created using ChatGPT text = &quot;Once upon a time, there was a little girl named Lily who loved to explore. \\ One day, she stumbled upon a magical garden filled with colorful flowers and \\ butterflies. As she walked through the garden, she noticed a tiny fairy with \\ shimmering wings. The fairy thanked Lily for visiting and gave her a special \\ flower as a gift. Lily promised to visit the garden every day and soon became \\ friends with the fairy. They had many adventures together and shared lots of \\ laughter and joy. And even though Lily grew up and moved away, she never forgot \\ her magical friend or the special gift she received in the enchanted garden.&quot; word_list = text.split() # Start your code here!   Try implementing Python code for your proposed solution in 2A. (1 point)(5 minutes) Share your code with your teammates and review their code. What are some similarities? What are some differences? Discuss and refine your code! (1 point)(5 minutes)  "},{"title":"2. Organizing Books (3 points) (10 minutes)​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#2-organizing-books-3-points-10-minutes","content":"Let's say we have a pile of books on a table, and we want to see if a particular book is in the pile. How can I solve this problem iteratively? As we discussed last week in Lab 6, we can iteratively search through the pile of books until we either find it and stop searching or we reach the end of the pile and can conclude we are unable to find the book. Now, suppose that we have a stack of books we want to analyze, but first, we want to organize the books. So, we want to figure out which authors wrote the books we own. One idea could be to iterate through the books, and append the author of each book to a running list of authors (here, &quot;list&quot; refers to the list data structure, like a python list). Here is one way to go about this problem. Say I have 131313 books on my bookshelf. I follow the steps described above, and end up with a list has 131313 strings. I conclude that I have books written by 131313 different authors.  Explain the problem with my conclusion. (1 point) (2 minutes) Is there a data structure I can use instead of a list that solves this problem? Name the data structure and briefly explain how it solves this problem. (1 point) (4 minutes) Use the following code to implement your solution. (1 point) (4 minutes)  Your_Book_Count listOfBooks = [{'title':'Harry Potter', 'Author':'J.K. Rowling'}] listOfBooks.append({'title':'Fantastic Beasts &amp; Where to Find Them', 'Author':'J.K. Rowling'}) listOfBooks.append({'title':'Quidditch Through the Ages', 'Author':'J.K. Rowling'}) listOfBooks.append({'title':'The Girl With the Dragon Tattoo', 'Author':'Steven T Murray'}) listOfBooks.append({'title':'A Little Life', 'Author':'Hanya Yanagihara'}) listOfBooks.append({'title':'Thinking, Fast and Slow', 'Author':'Daniel Kahneman'}) listOfBooks.append({'title':'Noise', 'Author':'Daniel Kahneman'}) listOfBooks.append({'title':'The Ice Queen', 'Author':'Steven T Murray'}) listOfBooks.append({'title':'The Hobbit', 'Author':'J. R. R. Tolkien'}) listOfBooks.append({'title':'A Game of Trones', 'Author':'George R. R. Martin'}) # Printing the title of the first book print(listOfBooks[0]['Author']) #Your code starts here  "},{"title":"3. (Optional Challenge) Lists of Email Addresses (0 point)​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#3-optional-challenge-lists-of-email-addresses-0-point","content":"You are given two lists of email addresses. There are two tasks. First task is the remove all the duplicated email addresses. Second task is to find email addresses that are common in both lists. For example: willContact = [&quot;krishna@mathworks.com&quot;, &quot;jim_clark@umass.edu&quot;, &quot;ming@ibm.com&quot;, &quot;hao@facebook.com&quot;, &quot;danielle@emsu.edu&quot;] kobiContact = [&quot;jim_clark@umass.edu&quot;, &quot;hao@facebook.com&quot;, &quot;jim_clark@umass.edu&quot;, &quot;mark@vt.edu&quot;, &quot;dbrown@gmail.com&quot;]  Describe in words how you will solve these two tasks. Hint: Since you are given two lists, you might want to first convert the two lists into sets first. "},{"title":"Grading Scale​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#grading-scale","content":"Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0 points​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#1-below-standards-0-points","content":""},{"title":"2: Approaching Standards: 1 point​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#2-approaching-standards-1-point","content":""},{"title":"3: Meeting Standards: 2 points​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#3-meeting-standards-2-points","content":""},{"title":"4: Exceeding Standards: 3 points​","type":1,"pageTitle":"Lab 07: Sets and Dictionaries","url":"/main/labs/sets-dicts#4-exceeding-standards-3-points","content":""},{"title":"Lec 07 Branching","type":0,"sectionRef":"#","url":"/main/lectures/branching","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 07 Branching","url":"/main/lectures/branching#assignment-updates","content":"Stuff due this week: Participation 4 Due Thursday 3/9Quiz 5: Due Thursday 3/9HW 3: Due Friday 3/10Lab 5: Due Friday 3/10 "},{"title":"Slides​","type":1,"pageTitle":"Lec 07 Branching","url":"/main/lectures/branching#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Branching","type":0,"sectionRef":"#","url":"/main/lectures/branching/Jared","content":"","keywords":""},{"title":"Making Choices​","type":1,"pageTitle":"Branching","url":"/main/lectures/branching/Jared#making-choices","content":"We as humans have plenty of cases where what we do depends on something. For instance, if it is raining, I will grab my umbrella. With boolean expressions we could represent the &quot;it is raining&quot; part of that. The &quot;I will grab my umbrella&quot; part could be represented a bunch of ways in code (such as adding &quot;umbrella&quot; to some list). But that &quot;if&quot; part, having the code be dependent on the boolean, that we can't do. Time to change that. Very Extra: Bootleg Branching danger This isn't a real point, this is just psychopathic coding. This may do actively do damage to your psyche. Although if you can make sense of it, you are probably in a really solid place. Technically, we could bootleg branching by abusing short-circuiting. By having the code we would like to be conditionally executed be in right hand side of an and statement, it will only be executed if the left hand side evaluates to True; otherwise the short circuiting on False would prevent that code from being run. Bootleg_If equipment = [&quot;coat&quot;, &quot;hat&quot;] weather = input(&quot;What is the weather today: &quot;).lower() is_rain = weather == &quot;rain&quot; is_rain and equipment.append(&quot;umbrella&quot;) print(f&quot;Heading out with: {equipment}&quot;) Bootleg_If_Else name = input(&quot;Please enter your name: &quot;) is_jared = name.lower() == &quot;jared&quot; is_jared and print(&quot;Jared, you are sociopathic monster...&quot;) not is_jared and print(f&quot;Hello, {name}&quot;)  "},{"title":"Control Flow Diagrams​","type":1,"pageTitle":"Branching","url":"/main/lectures/branching/Jared#control-flow-diagrams","content":"But before we get to new code syntax, let's talk about a new tool for organising our thoughts on branching:control flow diagrams. As the name somewhat implies, these are diagrams that show the flow of control/execution of code (or of actions more broadly). In a more strict form: They are composed of rectangles, diamonds, and arrowsRectangles represent actions (instructions in code)Diamonds represent choices/decisions (boolean conditions in code)There is a &quot;Start&quot; rectangleEach rectangle points to a &quot;next&quot; rectangle or diamondDiamonds have a &quot;True&quot; and &quot;False&quot; path coming out of them For instance, A control flow diagram for grabbing an umbrella before heading out if it is raining might look like: You can do totally different things in the True and False paths/branches. For example, here's what my decision making for when I eat on campus vs in my apartment looks like: Sometimes decisions aren't really True vs False in the way we think about them. For instance, what I wear when I go out depends on temperature ranges. But these cases can still usually be reduced to a combination of True vs False checks: Notice how the ranges are effectively 20+, 10-20, 0-10, 0-, but each range is broken off into a case. Moreover, by doing the cases in order, I can simplify how the cases are written (e.g., I only need to check 10+ for the 10-20 range, because that check only occurs in the &lt;20 case). "},{"title":"if​","type":1,"pageTitle":"Branching","url":"/main/lectures/branching/Jared#if","content":"Let's turn this into code. The most basic if statement is of the form: if condition: code more_code  We have the keyword if, some boolean condition (variable/expression), a :, and some indented block of code (can be multiple lines). The more_code is not part of the if statement, just some context around it. If condition is/evaluates to True, then the flow of execution will enter the if-block and code will be executed, then the flow of execution will exit the if-block and more_code will be executed. If condition is/evaluates to False, then the flow of execution will skip over the if-block and just more_code will be executed. As an example, here is code for the &quot;if it is raining, I will grab my umbrella&quot; scenario: If weather = input(&quot;What is the weather today: &quot;) equipment = [&quot;coat&quot;, &quot;hat&quot;] if weather == &quot;rain&quot;: # if it is raining equipment.append(&quot;umbrella&quot;) # I will grab an umbrella print(f&quot;Heading out with: {equipment}&quot;)  Compare this to the control flow diagram from earlier: The logical flow based on the decision is the same. "},{"title":"else​","type":1,"pageTitle":"Branching","url":"/main/lectures/branching/Jared#else","content":"Frequently, not only does condition being true mean we want to do something specific, but we also want to do something else specific when it is false. For example, my &quot;where to eat&quot; scenario. If it is Monday, Wednesday, or Friday, I choose to eat in my apartment. Otherwise, I choose to eat on campus. I'm doing distinct things in each case. This could be done by doing an explicit &quot;if true do this&quot; and &quot;if false do this&quot; type of thing: If_If_Not day = input(&quot;What day is it: &quot;).lower() if day == &quot;monday&quot; or day == &quot;wednesday&quot; or day == &quot;friday&quot;: print(&quot;Eating at Home&quot;) if not (day == &quot;monday&quot; or day == &quot;wednesday&quot; or day == &quot;friday&quot;): print(&quot;Eating on Campus&quot;)  But that's gross and we have machinery for this. Introducing else: if condition: if_block_code else: else_block_code more_code  After the if block we have the keyword else, a :, and some indented block of code (can be multiple lines). If condition is/evaluates to True, then the flow of execution will enter the if-block and if_block_code will be executed, then the flow of execution will exit the if-block (ignoring the else-block) and more_code will be executed. If condition is/evaluates to False, then the flow of execution will enter the else-block (ignoring the if-block) and else_block_code will be executed, then the flow of execution will exit the else-block and more_code will be executed. Returning to the &quot;where I eat&quot; example: If_Else day = input(&quot;What day is it: &quot;).lower() if day == &quot;monday&quot; or day == &quot;wednesday&quot; or day == &quot;friday&quot;: print(&quot;Eating at Home&quot;) else: print(&quot;Eating on Campus&quot;)  As before, the logical flow is the same as in the diagram: "},{"title":"elif​","type":1,"pageTitle":"Branching","url":"/main/lectures/branching/Jared#elif","content":"What about that &quot;what I wear&quot; scenario: Well, it can be pretty directly translated into if-else statements by nesting them (notice how nesting requires an additional level of indentation for each if-else statement): If_Else_If_Else temp = int(input(&quot;What is the temperature (in ℃): &quot;)) if temp &gt;= 20: print(&quot;Wearing t-shirt and sandles&quot;) else: if temp &gt;= 10: print(&quot;Wearing flannel shirt and sandles&quot;) else: if temp &gt;= 0: print(&quot;Wearing flannel shirt and shoes&quot;) else: print(&quot;Wearing coat and shoes&quot;)  This nested if-else-if-else-if-else thing is pretty gross. And wouldn't you know it, we have machinery for this. Introducing elif (a portmanteau of &quot;else&quot; and &quot;if&quot;): if condition1: if_block_code elif condition2: elif_block_code ..... # OPTIONAL else: # OPTIONAL else_block_code # OPTIONAL more_code  After the if block we have the keyword elif, another condition, a :, and some indented block of code (can be multiple lines). If condition1 is/evaluates to True, then the flow of execution will enter the if-block and if_block_code will be executed, then the flow of execution will exit the if-block (ignoring all remaining elif and else blocks) and more_code will be executed. If condition1 is/evaluates to False, then the flow of execution will skip over the if-block and check condition2. If condition2 is/evaluates to True, then the flow of execution will enter the elif-block and elif_block_code will be executed, then the flow of execution will exit the elif-block (ignoring all remaining elif and else blocks) and more_code will be executed. You can chain as many elifs together as you like, and can end them in an else. This lets us do the &quot;what to wear&quot; scenario more cleanly: If_Elif_Else temp = int(input(&quot;What is the temperature (in ℃): &quot;)) if temp &gt;= 20: print(&quot;Wearing t-shirt and sandles&quot;) elif temp &gt;= 10: print(&quot;Wearing flannel shirt and sandles&quot;) elif temp &gt;= 0: print(&quot;Wearing flannel shirt and shoes&quot;) else: print(&quot;Wearing coat and shoes&quot;)  While the logical flow does match the earlier control flow diagram, the intuition is more akin to: Finally, I want to emphasise the exclusive nature of the elifs. If you have if-elif-...-else, only one block can possibly trigger. And this lets you write later conditions under the assumption that prior conditions are false. (Again, I only need to check &gt;= 10, because that check only occurred when &gt;=20 was false, giving me &gt;= 10 and &lt; 20.) If you were to have a bunch of pure ifs in a row, multiple if statements could trigger. For instance, try this with a number of 20, you'll get three prints: If_If_Else temp = int(input(&quot;What is the temperature (in ℃): &quot;)) if temp &gt;= 20: print(&quot;Wearing t-shirt and sandles&quot;) if temp &gt;= 10: print(&quot;Wearing flannel shirt and sandles&quot;) if temp &gt;= 0: print(&quot;Wearing flannel shirt and shoes&quot;) else: print(&quot;Wearing coat and shoes&quot;)  And in fact, this is the equivalent control flow diagram: Notice the path that hits multiple choice-of-attire rectangles. "},{"title":"Types and Operations","type":0,"sectionRef":"#","url":"/main/lectures/arith-exprs/Jared","content":"","keywords":""},{"title":"replit​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#replit","content":"note This was written prior to replit being placed behind making an account. I am unenthused with a cursory glance at alternatives, so I can't just substitute in another tool. For this lecture, it will be convenient to have replit open. replit is quite cool. On the left-hand side, you can type python code and run it with the big, green &quot;Run&quot; button. Go ahead and try it with print(&quot;Hello, World&quot;). But we will be using the right-hand side today. On the right hand side you can put code/expressions (e.g. arithmetic) one line at a time. These will be evaluated, and the results will be displayed. The distinction is subtle. It may by more useful to think of the right-hand side a &quot;python calculator&quot; of sorts. Throughout this lecture, whenever I show a block of code I run in replit (or any other &quot;REPL&quot;), I will have a &gt;&gt;&gt; before the line of code, and the result on the following lines. For instance: &gt;&gt;&gt; 123 + 456 579  Represents me running the line 123 + 456 in replit and seeing that evaluate to the result 579. Note that in the runnable code blocks on the website (which are more like running a python file), I would need to print the result if I wanted to see it (print(123 + 456)). In replit, you are told the result. Extra: REPLs This calculator-like thing is more formally know as aread-eval-print loop (REPL), hence the name replit. It reads an expression from the user, evaluates it, prints the result, and repeats (loops). Extra: Python's built-in REPL replit's python REPL is presumably a wrapper around python's built-in REPL. If you are in a terminal (such as Terminal on Mac of PowerShell on Windows) and python 3 is installed, then you can start up the built-in REPL with the command python3(if you have installed python, it is almost surely python 3). That's it, just python3 with no file name after it. To get out of the REPL, you can use the exit() or quit() function, or you can hit control-d (it might be something else on Windows). "},{"title":"Types​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#types","content":"We as humans understand the difference between numbers and words. Even within numbers, we have whole numbers, fractions, and decimals. Computers formalise this with a notion of types. All data has some type associated with it. Everything is something, maybe a number, maybe text, and later on, maybe weirder things. There are 3 types we care about at the moment: Integers (int): these are the whole numbers of python, e.g.: 0,1,6,-7.Floating point numbers (float): these are the decimal numbers of python, e.g.: 0.0,-1.67,4e23.Strings (str): these are the &quot;text&quot; type of python. e.g.: &quot;Hello, World!&quot;. When we want to make a string out of verbatim text in code, we surround it with quotation marks so that the computer knows it is text, not code. We may use pairs of &quot; or ' (the start and end quote must match, both &quot; or both ').Note, these are both straight quotes. Curvy quotes like “, ”, ‘, and ’ do not work. Extra: Infinity and NaN There are some special floats to mention exist: Infinity (prints as inf): hard to deliberately make show up, but anything more than 1.8e308 or so is too big and thus &quot;infinite&quot;. Why that specific number is much longer story.Negative Infinity (prints as -inf): Much like inf, but negative.Not a Number (prints as nan): Sometimes when you do illegal math you get an error (such as dividing by 0). Sometimes, like with 1.8e308 - 1.8e308 (inf - inf) you get &quot;Not a Number&quot; Fun_Floats print(2e308) # inf print(-2e308) # -inf print(2e308 - 2e308) # nan  Extra: Escape Sequences Sometime, you want to something a little fancy in your strings. Maybe you want a tab, maybe a newline, or maybe you want a quotation mark. To do these things, we need what are called escape sequences. These are sequences of characters starting with a special escape character. The escape character, \\ (backslash) in python, tells the computer that what comes next is not verbatim, but rather a special sequence telling it to do something else. So for a new line, you can use &quot;\\n&quot;, for tabs, &quot;\\t&quot;. (The website's live python is a bit buggy with fancy whitespace, so you should try this in a REPL yourself.) &gt;&gt;&gt; print(&quot;Escapable Whitespace:\\n\\tNewlines\\n\\tTabs&quot;) Escapable Whitespace: Newlines Tabs For quotation marks, you don't need to escape if the marks around the entire string differ from what you are trying to display. E.g., &quot;'&quot; and '&quot;' work how you might hope. You do need an escape if they match though, e.g., &quot;\\&quot;&quot; and '\\''. &gt;&gt;&gt; print(&quot;The ' in a \\&quot;...\\&quot;-style string doesn't need quotes&quot;) The ' in a &quot;...&quot;-style string doesn't need quotes &gt;&gt;&gt; print('Don\\'t forget to escape apostrophes in a \\'...\\'-style string') Don't forget to escape apostrophes in a '...'-style string Finally, if you want a backslash itself to show up in a string, \\\\. &gt;&gt;&gt; print(&quot;Some Escape Sequences:\\n\\tNewline: \\\\n\\n\\tTab: \\\\t\\n\\tQuote (\\&quot;): \\\\\\&quot;\\n\\tBackslash (\\\\): \\\\\\\\&quot;) Some Escape Sequences: Newline: \\n Tab: \\t Quote (&quot;): \\&quot; Backslash (\\): \\\\  "},{"title":"Learning Something's Type​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#learning-somethings-type","content":"If you want to know what something's type is, you can use the type() function. This takes in anything and returns its type. For example: Get_Type print(type(-127)) # &lt;class 'int'&gt; print(type(3.1415)) # &lt;class 'float'&gt; print(type(&quot;Hello!&quot;)) # &lt;class 'str'&gt;  Ignore the class thing (its basically just the technical name for &quot;type&quot; in python). "},{"title":"Arithmetic Operations​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#arithmetic-operations","content":"We have a notion of expressions in the computer science world. The formal definitions can be a tad complex, by they are effectivelythings that evaluate to something. For instance, the expression 7 + 3 * 2 evaluates to 13. You are hopefully familiar with operations (as in &quot;order of operations&quot;) in the math sense. If we have the expression 7 + 8, we call 7 and 8operands, and + the operator. The basic arithmetic operators in python: +: Addition-: Subtraction*: Multiplication/: Division**: Exponentiation Arithmetic print(3 + 5) # 8 print(3 - 5) # -2 print(3 * 5) # 15 print(3 / 5) # 0.6 print(3 ** 5) # 243  There are two more arithmetic operators in python. They both have to do with the concept of whole number division with a remainder. So for instance, while you could say 171717 divided by 555 is 3.43.43.4, you could also say171717 divided by 555 is 333 with a remainder of 222 (because 5∗3+2=175 * 3 + 2 = 175∗3+2=17). The first approach is captured in python by /, the second with the following: //: Integer Division/Floor Divisions. 17 // 5 would give 3, the whole number of times to operator on the right can be taken out of the operator on the left.%: Modulo/Remainder. 17 % 5 would give 2, what remains of the operator on the left after the operator on the right is taken out of it as many times as possible. These both also work on floats in python. Division print(17 // 5) # 3 print(17 % 5) # 2 print(18.5 // 5.1) # 3.0 print(18.5 % 5.1) # 3.2  (As a bonus, you can even see the imperfection in the float's ability to represent 3.2.) Extra: ^ is not Exponentiation You may have the instinct to represent 353 ^ 535 as 3 ^ 5, though in python 353 ^ 535 is actually represented as 3 ** 5. While this is wrong, it isn't syntactically illegal, which can make it even trickier to catch as an error. danger The following is far outside the scope of what we need to worry about in this class. ^ is an operator that only makes sense in the context of the underlying binary representations of numbers. Brief binary primer: In &quot;base 10&quot; (our usual number system), we have a 111s, 101010s, 100100100s, etc. place. These are &quot;how many 10010^0100s, how many 10110^1101s, how many 10210^2102s, etc. And for each place, we can have between 000 and 999 (10 possibilities) of that particular 10n10^n10n. In binary (or &quot;base 2&quot;), the places are for 2n2^n2ns. Each place can have 000 or 111 (2 possibilities) of that particular 2n2^n2n. For example: 11211_2112​ (or 0b11 in python) has a 111 in the 202^020s (aka 111s) place, and a 111 in the 212^121s (aka 222s) place. 112=1∗21+1∗20=311_2 = 1 * 2^1 + 1 * 2^0 = 3112​=1∗21+1∗20=3.1012101_21012​ (or 0b101 in python) has a 111 in the 202^020s (aka 111s) place, a 000 in the 212^121s (aka 222s) place, and a 111 in the 222^222s (aka 444s) place.1012=1∗22+0∗21+1∗20=5101_2 = 1 * 2^2+ 0 * 2^1 + 1 * 2^0 = 51012​=1∗22+0∗21+1∗20=5. So with the notion of binary representations in mind, there are some specific binary arithmetic operators: &amp;: bitwise and. For each nnn, the 2n2^n2ns place of a &amp; b is a 111 ifboth the 2n2^n2ns place of a is a 111 andthe 2n2^n2ns place of b is a 111; otherwise it is a 000.|: bitwise or. For each nnn, the 2n2^n2ns place of a | b is a 111 ifeither the 2n2^n2ns place of a is a 111 orthe 2n2^n2ns place of b is a 111 (this includes if both are 111); otherwise it is a 000.^: bitwise exclusive or (xor). For each nnn, the 2n2^n2ns place of a ^ b is a 111 ifexactly one of the 2n2^n2ns places of a and b is 111(and the the other's is 000); otherwise (both 111s or both 000s), it is a 000. Bit_Arithmetic print(0b11) # 3 (0b011) print(0b101) # 5 (0b101) print(3 &amp; 5) # 1 (0b001) print(3 | 5) # 7 (0b111) print(3 ^ 5) # 6 (0b110)  "},{"title":"Order of Operations​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#order-of-operations","content":"With any luck, the phrase &quot;order of operation&quot; or &quot;PEMDAS&quot; is ingrained deep in your memory. If not, the idea is that in longer arithmetic expressions, some operations are done before others. The order: (): Expressions in Parentheses have highest priority.** : Exponentiation is the tightest binding operator.*,/,//,%: Multiplication, Division, and the like come next.+, -: Addition and Subtraction are last. Some examples of results by using parentheses to change the order of evaluation: Order_of_Operations print(5 ** 4 * 3 + 2) # 1877 print(5 ** 4 * (3 + 2)) # 3125 print(5 ** (4 * 3) + 2) # 244140627 print(5 ** (4 * 3 + 2)) # 6103515625 print(5 ** (4 * (3 + 2))) # 95367431640625  And within a level of precedence, the order of evaluation generally goes from left to right, both in math and in python. A demonstrated below: Normal_Associativity print(2 - 3 + 4) # 3 (default left associativity) print((2 - 3) + 4) # 3 (explicit left first) print(2 - (3 + 4)) # -5 (explicit right first)  There is an interesting exception. Both in math and python, exponentiation goes from top/right to bottom/left. For example 232=2(32)2 ^ {3 ^ 2} = 2 ^ {(3 ^ 2)}232=2(32). Exp_Associativity print(2 ** 3 ** 2) # 512 (default right associativity) print((2 ** 3) ** 2) # 64 (explicit left first) print(2 ** (3 ** 2)) # 512 (explicit right first)  "},{"title":"Operands' and Result's Types​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#operands-and-results-types","content":"Since ints and floats are both numbers, python lets you have operations with both in them: &gt;&gt;&gt; 2 * 3.1415 6.283  The type of the result depends on the type of the operands (and if the operation is division or not). Result_Type # print() can take multiple comma-separated arguments print(1 + 1, type(1 + 1)) # 2 &lt;class 'int'&gt; print(1 + 1.0, type(1 + 1.0)) # 2.0 &lt;class 'float'&gt; print(1.0 + 1, type(1.0 + 1)) # 2.0 &lt;class 'float'&gt; print(1.0 + 1.0, type(1.0 + 1.0)) # 2.0 &lt;class 'float'&gt; print(1 / 1, type(1 / 1)) # 1.0 &lt;class 'float'&gt;  If either operand is a float, or the operation is /, the result will be a float. Otherwise (If both operands are both ints and the operation is not /), it will be an int. "},{"title":"String Operations​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#string-operations","content":"We can work with more than numbers in python though. We also have text, aka strings (str). Turns out, there are some handy operations we can perform on strings: +: Concatenation. Combines 2 strings together.*: Repeat. This takes, as operands, a string and an integer, in either order, and repeats the string that many times. For example: String_Operations print(&quot;Hello&quot; + &quot; &quot; + &quot;World&quot;) # &quot;Hello World&quot; print(5 * &quot;ha&quot;) # &quot;hahahahaha&quot; print(&quot;ho&quot; * 3) # &quot;hohoho&quot;  "},{"title":"Converting Types (Casting)​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#converting-types-casting","content":"Finally, we can convert between these types if we so desire (this is sometimes called casting). For example, if we have the string &quot;125&quot;, we may want to convert it to the integer 125. Conversion function are conveniently named after their types: int(): attempts to convert something to an int. E.g., int(&quot;125&quot;) evaluates to 125.float(): attempts to convert something to a floatE.g., float(&quot;125&quot;) evaluates to 125.0.str(): attempts to convert something to a str. E.g., str(-0.12) evaluates to &quot;-0.12&quot;. I say &quot;attempts&quot;, because some things are illegal and will fail: &gt;&gt;&gt; int(&quot;3.14&quot;) Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; ValueError: invalid literal for int() with base 10: '3.14'  Finally, a warning about converting floats to ints, the int() function truncates (chops off) the decimal part. You may find it more appropriate to use the round() function. Float_to_Int print(int(126.9999999999)) # 126 print(round(126.9999999999)) # 127  Extra: Floor and Ceiling This truncating, or rounding down, is also called flooring (hence &quot;floor division&quot; from earlier, in fact). It can also be deliberately done with math.floor() in themath Module, explained more below. The notion of rounding up is captured by the ceiling (math.ceil()) function. Extra: It's Technically not Conversion This is material we will get to later. For each type (technically class), there is a special function, who's name matches the name of the type (class), called a constructor. Constructors construct an object of that type (class). They may also take in arguments to inform that construction. So int(5.6) isn't technically &quot;converting&quot; the float 5.6 to an int, but rather, creating a new int based on the float 5.6. It's a subtle distinction, and for all intents are purposes is effectively conversion, but I like to include technically correct information where possible. "},{"title":"math Module​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#math-module","content":"If you want even more mathematical functions and features, there is the math module. A module is effectively a collection of functions and/or constants that aren't included by default. The term library is also frequently used for this concept. To load (or import or include) the math module, use the command import math(import &lt;module_name&gt; for modules more broadly). You can use this command in the REPL. There are useful function and constants in the module, like sqrt() and pi, but in order to use them (at least with this import method), we must refer to them as math.sqrt() and math.pi. Math_Module import math print(math.sqrt(math.pi)) # 1.7724538509055159  A full list of the function available to in the math module can be found in the official documentation. "},{"title":"Booleans and Assert","type":0,"sectionRef":"#","url":"/main/lectures/booleans-and-assert/Jared","content":"","keywords":""},{"title":"Booleans​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#booleans","content":"So far we've learned about types for numbers (whole and decimal), text, and even nothingness itself. Now comes our final fundamental type: booleans (bools), the type for truth. There are only two possible values for bools: True and False. "},{"title":"Comparisons​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#comparisons","content":"So what can give us these booleans values? First and foremost, comparison between numbers. Some operators: x == y: returns True if x equals y, otherwise False.x != y: returns True if x does not equal y, otherwise False.x &lt; y: returns True if x is strictly less than y, otherwise False.x &gt; y: returns True if x is strictly greater than y, otherwise False.x &lt;= y: returns True if x is less than or equal to y, otherwise False.x &gt;= y: returns True if x is greater than or equal to y, otherwise False. Number_Comparisons print(3 == 5) # False print(3 != 5) # True print(3.5 &gt; 5) # False print(5 &lt;= 5) # True  Funnily enough, you can use all these operators on strings too. The less than vs greater than become lexicographical ordering, with earlier strings being &quot;less&quot; (all capital letters are less than/before all lower case letters). String_Comparisons print(&quot;Foo&quot; == &quot;Foo&quot;) # True print(&quot;Foo&quot; != &quot;foo&quot;) # True print(&quot;Foo&quot; &lt; &quot;foo&quot;) # True print(&quot;Fool&quot; &lt;= &quot;Foo&quot;) # False  "},{"title":"Float Representation Error​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#float-representation-error","content":"There is a dangerous pitfall lurking in checking if floats are equal: Float_NE print(.1 + .2 == .3) # False  Why is .1 + .2 not .3. Forcing them to be be more thoroughly displayed we see something interesting Float_Representation print(f&quot;{.1 : .17f}&quot;) # 0.10000000000000001 print(f&quot;{.2 : .17f}&quot;) # 0.20000000000000001 print(f&quot;{.1+.2 : .17f}&quot;) # 0.30000000000000004 print(f&quot;{.3 : .17f}&quot;) # 0.29999999999999999  The same way that we can not represent 1/3 perfectly in decimal form, there are plenty of values the computer can not represent perfectly, and so slight arithmetic errors can appear. If we want to see if two floats are equal, we can check the absolute value of the difference against a tolerance or use math.isclose() Float_Tolerance import math print(.1 + .2 == .3) # False print(abs(.1 + .2 - .3) &lt; .001) # True print(math.isclose(.1 + .2, .3)) # True  caution Below code is throwing an error on the website, but not if run in isolation in a file. Still working on that. Yet even within these, beware.math.isclose() defaults to using a tolerance based on the two arguments, so there will be an issue if one of the two values is 0.0. There is a way to specify an absolute tolerance to get around this: IsClose_Tolerance import math print(math.isclose(.1 + .2 - .3, 0)) # False print(math.isclose(.1 + .2 - .3, 0, abs_tol=0.001)) # True  "},{"title":"Logical Operators​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#logical-operators","content":"There are new operators that work on booleans: x and y: returns True if x and y are both True, otherwise returns False.x or y: returns True if either x or y is True (this includes if both are True), otherwise returns False.not x: returns True if x is False and returns False if x is True. Logic print(5 &lt; 6 and 6 &lt; 7) # True print(5 &gt;= 6 or 6 &gt;= 7) # False print(not 1 == 5) # True  "},{"title":"Precedence​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#precedence","content":"As there is an order of operations for math, so there is for logic. Parentheses always winEvaluation of math is done first (**,then *,/,//,%, then +,-)Then comparisons ==, !=, &lt;=, &gt;=, &lt;, &gt;Then not, which is almost like the negative sign in mathThen and, which is almost like multiplication in math (if True was 1 and False was 0)Then or, which is almost like addition in math (if True was 1 or more and False was 0) So for instance: Precedence # 3 ** 3 == 1 and 6 - 7 &lt; 0 or not 1 % 2 == 0 # 27 == 1 and -1 &lt; 0 or not 1 == 0 # False and True or not False # False and True or True # False or True # True print(3 ** 3 == 1 and 6 - 7 &lt; 0 or not 1 % 2 == 0) # True  That said, using parentheses for some visual clarity is advised. "},{"title":"Misc​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#misc","content":"Extra: DeMorgan's Laws A fancy name for a set of logical rules. DeMorgen's Laws tell us that: not (x and y) is equivalent to not x or not ynot (x or y) is equivalent to not x and not y You can fairly easily convince yourself this is true via some truth tables. The idea of a &quot;proof by truth table&quot; is that you just organise a proof by cases into a nice table form. Here I have one row for each possible value combination of x and y, with intermediate results also shown. Starting with not over and: x\ty\tnot x\tnot y\tx and y\tnot (x and y)\tnot x or not yFalse\tFalse\tTrue\tTrue\tFalse\tTrue\tTrue False\tTrue\tTrue\tFalse\tFalse\tTrue\tTrue True\tFalse\tFalse\tTrue\tFalse\tTrue\tTrue True\tTrue\tFalse\tFalse\tTrue\tFalse\tFalse not over or is much the same: x\ty\tnot x\tnot y\tx or y\tnot (x or y)\tnot x and not yFalse\tFalse\tTrue\tTrue\tFalse\tTrue\tTrue False\tTrue\tTrue\tFalse\tTrue\tFalse\tFalse True\tFalse\tFalse\tTrue\tTrue\tFalse\tFalse True\tTrue\tFalse\tFalse\tTrue\tFalse\tFalse Extra: Distributive Laws Analogously to the distributive law in math (x∗(y+z)=x∗y+x∗zx * (y + z) = x * y + x * zx∗(y+z)=x∗y+x∗z), there are distributive laws in logic: x and (y or z) is equivalent to (x and y) or (x and z)x or (y and z) is equivalent to (x or y) and (x or z) These also can be shown by proof tables. (If we had looping yet I could just give you code with a triple for-loop, but alas.) First is the table for distributing and over or. Since and is multiplication-y and or is addition-y, this also matches the math distribution rule's intuition nicely. x\ty\tz\tx and y\tx and z\ty or z\tx and (y or z)\t(x and y) or (x and z)False\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse False\tFalse\tTrue\tFalse\tFalse\tTrue\tFalse\tFalse False\tTrue\tFalse\tFalse\tFalse\tTrue\tFalse\tFalse False\tTrue\tTrue\tFalse\tFalse\tTrue\tFalse\tFalse True\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse True\tFalse\tTrue\tFalse\tTrue\tTrue\tTrue\tTrue True\tTrue\tFalse\tTrue\tFalse\tTrue\tTrue\tTrue True\tTrue\tTrue\tTrue\tTrue\tTrue\tTrue\tTrue The more surprising result (or at least the one less in sync with the mathematical intuition) is that or also distributes nicely over and. x\ty\tz\tx or y\tx or z\ty and z\tx or (y and z)\t(x or y) and (x or z)False\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse False\tFalse\tTrue\tFalse\tTrue\tFalse\tFalse\tFalse False\tTrue\tFalse\tTrue\tFalse\tFalse\tFalse\tFalse False\tTrue\tTrue\tTrue\tTrue\tTrue\tTrue\tTrue True\tFalse\tFalse\tTrue\tTrue\tFalse\tTrue\tTrue True\tFalse\tTrue\tTrue\tTrue\tFalse\tTrue\tTrue True\tTrue\tFalse\tTrue\tTrue\tFalse\tTrue\tTrue True\tTrue\tTrue\tTrue\tTrue\tTrue\tTrue\tTrueVery Extra: Hello Belphegor, My Old Friend danger We have not gotten to this material yet. Give it maybe 7 lectures. Consider this more of a glimpse of the kind of power you will come to have. One of the great motivating spirits of programming is cutting down on time for tedious or repetitive tasks. Not only are such tasks horribly dull, but the numbness of the repetition can lull us into making silly mistakes. For example, I sure didn't want to fill out two 8 by 8 truth tables and do all the markdown (the language the backend of this website uses) formatting for them; and it would have been easy to have some copy and paste that I forgot to edit, or to mess up a boolean computation. So, I wrote code the generate the markdown for the tables for me. Generate_And_Or_Distibution_Table cols = [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;x and y&quot;, &quot;x and z&quot;, &quot;y or z&quot;, &quot;x and (y or z)&quot;, &quot;(x and y) or (x and z)&quot;] print(&quot;| `&quot; + &quot;` | `&quot;.join(cols) + &quot;` |&quot;) print(&quot;|&quot; + len(cols) * &quot; :---: |&quot;) for x in [False, True]: for y in [False, True]: for z in [False, True]: row = [x, y, z, x and y, x and z, y or z, x and (y or z), (x and y) or (x and z)] print(&quot;| `&quot; + &quot;` | `&quot;.join(map(str,row)) + &quot;` |&quot;) Generate_Or_And_Distibution_Table cols = [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;x or y&quot;, &quot;x or z&quot;, &quot;y and z&quot;, &quot;x or (y and z)&quot;, &quot;(x or y) and (x or z)&quot;] print(&quot;| `&quot; + &quot;` | `&quot;.join(cols) + &quot;` |&quot;) print(&quot;|&quot; + len(cols) * &quot; :---: |&quot;) for x in [False, True]: for y in [False, True]: for z in [False, True]: row = [x, y, z, x or y, x or z, y and z, x or (y and z), (x or y) and (x or z)] print(&quot;| `&quot; + &quot;` | `&quot;.join(map(str,row)) + &quot;` |&quot;)  Extra: Short Circuiting In the nascent days of computers and programming, time and space (memory) were precious things (so I hear, I was born in '96). This informs functionality of languages in the present. As a motivating scenario, say we wanted to evaluate LHS and RHS, where both sides are arbitrary expressions, which could be quite long or contain function calls. We start be evaluating the left hand side (LHS). Say that evaluates to False. At this point we haveFalse and RHS. The right hand side doesn't matter, the whole thing will be False. So we can just short circuit, call the whole thing False, and save some time. This is what Python does. False and WHATEVER short circuits to False,True or WHATEVER short circuits to True. This can be seen by effectively sticking some print statements in the operands. Shortcircuit_And def ptrue(opnum): print(f&quot;Operand {opnum}: True&quot;) return True def pfalse(opnum): print(f&quot;Operand {opnum}: False&quot;) return False print(ptrue(1) and ptrue(2)) # True, True -&gt; True print(ptrue(1) and pfalse(2)) # True, False -&gt; False print(pfalse(1) and ptrue(2)) # False -&gt; False Shortcircuit_Or def ptrue(opnum): print(f&quot;Operand {opnum}: True&quot;) return True def pfalse(opnum): print(f&quot;Operand {opnum}: False&quot;) return False print(pfalse(1) or pfalse(2)) # False, False -&gt; False print(pfalse(1) or ptrue(2)) # False, True -&gt; True print(ptrue(1) or pfalse(2)) # True -&gt; True Most of the time, this is just a convenience that you don't think about. But there are some cases where you can explicitly leverage this. I tend to do this for multi-part checks where one part depends on another. For example, say I want to check if something is a natural number, i.e., a positive int. I would first check that it is an int at all before checking the positivity, since checking positivity for a non-int could cause an error. Nat_Check def is_nat(n): # We can use == for type comparison return type(n) == int and n &gt;= 0 print(is_nat(5)) # True print(is_nat(-5)) # False print(is_nat(5.0)) # False print(is_nat(&quot;5&quot;)) # False Nat_Check_Error def is_nat(n): # We can use == for type comparison return n &gt;= 0 and type(n) == int print(is_nat(5)) # True print(is_nat(-5)) # False print(is_nat(5.0)) # False print(is_nat(&quot;5&quot;)) # ERROR  "},{"title":"Assert​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#assert","content":"assert is a special command that takes a boolean (or something that evaluatse to a boolean) and an error message in string form; it checks the condition, and throws an error if the condition is not met. This can be used as a sort of gate/checkpoint to prevent illegal states (such as illegal input), the idea being that an explicit error is easier to notice and address than something wrong/unexpected but not illegal going on in a more invisible manner. Below is an example of exponentiation where we may want the result to always be an int. Interger_Exp def int_exp(x:int, y:int): # We can use == for type comparison, don't want floats if we want an int result assert type(x) == int, &quot;Illegal type for x&quot; assert type(y) == int, &quot;Illegal type for y&quot; return x ** y z = int_exp(3, -1) # something triggering this assert would tell us improvements can be made assert type(z) == int, &quot;int_exp() produced illegal return&quot; print(z)  That last error message could clue us in to a missed case. That can then be fixed: Interger_Exp_Fixed def int_exp(x:int, y:int): # We can use == for type comparison assert type(x) == int, &quot;Illegal type for x&quot; assert type(y) == int, &quot;Illegal type for y&quot; assert y &gt;= 0, f&quot;Illegal value for y (y is {y})&quot; return x ** y # z = int_exp(3.0, 5) # AssertionError: Illegal type for x # z = int_exp(3, .5) # AssertionError: Illegal type for y # z = int_exp(3, -1) # AssertionError: Illegal value for y (y is -1) z = int_exp(3, 5) # If int_exp was mis-implemented, we might trigger the assert below. assert type(z) == int, &quot;int_exp() produced illegal return&quot; print(z)  "},{"title":"Conversions and Truthy/Falsy Values​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#conversions-and-truthyfalsy-values","content":"Let's talk about how booleans interact with type conversion. Converting from booleans we can demonstrate exhaustively: From_Bool print(int(True)) # 1 print(int(False)) # 0 print(float(True)) # 1.0 print(float(False)) # 0.0 print(str(True)) # &quot;True&quot; print(str(False)) # &quot;False&quot;  Converting to booleans is a more interesting story. Every value is either &quot;Truthy&quot; (converts to True) or &quot;Falsy&quot; (coverts to False). The general rule is, for a given type, the &quot;empty&quot;-or-&quot;zero&quot;-like values are falsy, and everything else is truthy. To_Bool import math print(bool(0)) # False print(bool(0.0)) # False print(bool(-0.0)) # False print(bool(math.nan)) # False, interestingly enough print(bool(&quot;&quot;)) # False print(bool(None)) # False print() print(bool(1)) # True print(bool(-57)) # True print(bool(1.0)) # True print(bool(-math.inf)) # True print(bool(&quot;foo&quot;)) # True print(bool(&quot;False&quot;)) # True, which might surprise you  "},{"title":"Misc: More Built-In Functions​","type":1,"pageTitle":"Booleans and Assert","url":"/main/lectures/booleans-and-assert/Jared#misc-more-built-in-functions","content":"Python is a fairly well developed language. So for a lot of really basic properties of numbers and strings, there is some sort of built-in or library function to compute/check said property. It is impossible to memorise all the functions that exist, but there is also no need to. In practice, if you wanted to know something like the length of the string you would search the internet for &quot;python string length function&quot;. And you would presumably find the len() function and some examples online. Some example &quot;signatures&quot; of such functions: len(s): gets the length of a string.min(n1, n2, n3, ...): gets the minimum number in a list.max(n1, n2, n3, ...): gets the maximum number in a list.round(number, ndigits=None): rounds a number to ndigits digits, the default is to round to the nearest whole number.abs(x): gets the absolute value of a number. "},{"title":"Lec 18 Classes","type":0,"sectionRef":"#","url":"/main/lectures/Classes","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 18 Classes","url":"/main/lectures/Classes#assignment-updates","content":"Stuff due soon: HW6 Due Wednesday (Files)Participation due ThursdayQuiz due ThursdayLab on FridayCapstone Proposal Due Friday "},{"title":"Slides​","type":1,"pageTitle":"Lec 18 Classes","url":"/main/lectures/Classes#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Activities​","type":1,"pageTitle":"Lec 18 Classes","url":"/main/lectures/Classes#activities","content":""},{"title":"Counter Code:​","type":1,"pageTitle":"Lec 18 Classes","url":"/main/lectures/Classes#counter-code","content":"Download: Counter.py Counter.py class Counter: def __init__(self, start): self.count = start def inc(self): self.count += 1 my_counter = Counter(5) print(my_counter.count) my_counter.inc() print(my_counter.count)  "},{"title":"Undo Code:​","type":1,"pageTitle":"Lec 18 Classes","url":"/main/lectures/Classes#undo-code","content":"Download: Undo.py Undo.py # This class is a blueprint for an object that can be used to store a value that can be changed and undone class Undo: # This is the constructor (it is called when the object is created) def __init__(self, start_value=0): # History is a list of values that have been set previously self.history = [start_value] # History index stores the index of the current value that is being used self.history_index = 0 # This method sets the value of the object (in a way that can be undone) def set(self, new_value): # If we have undone some changes, and we want to make a new change, we need to delete the changes that we have undone # To do this, we remove everything after the current index (using slicing) self.history = self.history[:self.history_index + 1] self.history.append(new_value) self.history_index += 1 # This method returns the current value of the object def get(self): return self.history[self.history_index] # This method undoes the last change to the object (if possible) def undo(self): if self.history_index &gt; 0: self.history_index -= 1 return self.history[self.history_index] # This method redoes the last change to the object (if possible) def redo(self): if self.history_index &lt; len(self.history) - 1: self.history_index += 1 return self.history[self.history_index]  "},{"title":"Lec 16 CSV Files","type":0,"sectionRef":"#","url":"/main/lectures/CSV_Files","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 16 CSV Files","url":"/main/lectures/CSV_Files#assignment-updates","content":"Stuff due soon: HW5 (Looping) due WednesdayParticipation 8 due ThursdayQuiz 9 due ThursdayLab on Friday "},{"title":"Slides​","type":1,"pageTitle":"Lec 16 CSV Files","url":"/main/lectures/CSV_Files#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"CSV File​","type":1,"pageTitle":"Lec 16 CSV Files","url":"/main/lectures/CSV_Files#csv-file","content":"my_csv.csv Download my_csv.csv Contents: Name,Price,Quantity Pen,0.2,3 Pineapple,3.84,2 Apple,0.79,6  "},{"title":"Lec 08 Debugging","type":0,"sectionRef":"#","url":"/main/lectures/debugging","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 08 Debugging","url":"/main/lectures/debugging#assignment-updates","content":"Stuff due this week: Participation 4 Due Thursday 3/9Quiz 5: Due Thursday 3/9HW 3: Due Friday 3/10Lab 5: Due Friday 3/10 "},{"title":"Slides​","type":1,"pageTitle":"Lec 08 Debugging","url":"/main/lectures/debugging#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Code For Activities​","type":1,"pageTitle":"Lec 08 Debugging","url":"/main/lectures/debugging#code-for-activities","content":"For the debugger activity with the instructor: debugger.pyFor the debugging exploration activity: debug_on_own_1.pyFor the debugging exploration activity: debug_on_own_2.py "},{"title":"Classes and Object-Oriented Programming","type":0,"sectionRef":"#","url":"/main/lectures/Classes/Jared","content":"","keywords":""},{"title":"What are Classes?​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#what-are-classes","content":"Types. "},{"title":"No, Really?​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#no-really","content":"Yeah, types. In python, classes and types are the same thing. Extra: In Python ... ? There are other language, such as Java, where there are &quot;primitive types&quot; (such as int and bool, if memory serves) and &quot;classes&quot; as two distinct things. The difference between the two is roughly that classes can have methods and fields of other types, and primitive types do not. There are languages like C, where there are no classes as all. C pretty much just has the primitive types and bundles thereof. Some languages like SML have this cool datatype machinery for making new compound types. But in python, types and classes are the same thing. It might be more technically accurate to say that all types are classes in python, as classes in python match the more inter-language notion of classes, whereas the types in python are not like the primitive types elsewhere. Look at the return of the type() function: Type print(f&quot;type of 31415 : {type(31415)}&quot;) # &lt;class 'int'&gt; print(f&quot;type of None : {type(None)}&quot;) # &lt;class 'NoneType'&gt; print(f&quot;type of 'foo' : {type('foo')}&quot;) # &lt;class 'str'&gt;  Notice how the prints all contain the word class? Python itself certainly doesn't seem to feel there is an appreciable difference. The existence of the two different terms has more to do with history and the mechanics of other languages. "},{"title":"What are Objects?​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#what-are-objects","content":"Specific things of some type. "},{"title":"But, Actually?​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#but-actually","content":"Objects are to classes what a 5 living in memory is to int. Objects are specific instances of a type/class. So if we have the class int, then specific ints like 4, -345, 0, etc. that live and exist in memory are objects. If we have the class list, then specific lists like [3, 6, -1], [&quot;foo&quot;, &quot;bar&quot;], [], etc. that live and exist in memory are objects. "},{"title":"What is Object-Oriented Programming?​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#what-is-object-oriented-programming","content":"Object oriented programming is a language design paradigm and a programming paradigm that centres around classes and objects. That main characters and considerations are the objects. The objects are able to change/be changed by their methods. Objects and methods serve as the main nouns and verbs (respectively) of OOP. There are class-specific functions called methods, which require a specific object to invoke them via object_var_name.mathod_name(args). There are class-specific variables called field, which require a specific object to reference them via object_var_name.field_name. It's all about the object, its attributes (methods and fields), and using the methods to alter the fields. A lot of stuff we've done could be done in a more object-oriented programming-y manner. For example, a game of tic-tac-toe could have a TicTacToeGame class, with a specific instance/object representing a single game. Each object would have its own board (the class would have a board field), and there would be methods to do things like update the board and check the state of it. The class is basically a blueprint for internals of the objects, determining what they have information-wise (what fields/variables they have) and what they can do (what methods they have). "},{"title":"Making Classes​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#making-classes","content":"So, how do we make one of these classes? As a running example, we'll first make a &quot;dog&quot; that &quot;barks&quot; and give it a name. A class is declared like so: class ClassName: METHODS  The class keyword, followed by a name for the class (I'll be using a camel-case convention for class names, though that is not necessary), followed by a :, followed by code (which will be explored in subsequent sections). Once a class has been declared, you can make an object of that class with the function call ClassName(). (Remember creating empty sets with set()? Same deal.) So a rudimentary class declaration for our dog class could look like: Dog class Dog: pass # a do-nothing for now spot = Dog() print(f&quot;Spot is a {type(spot).__name__}&quot;) # Dog print(f&quot;Spot is a dog? {isinstance(spot, Dog)}&quot;) # True  "},{"title":"Making Methods​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#making-methods","content":"We want our objects to be able to do things. We want spot.bark() to make spot &quot;bark&quot;. Making a method is almost exactly like making a function, except it is inside the class declaration, and the first argument must be a special argument that is used to refer to the object that invoked the method (spot is the invoking instance in our above example). This argument is generally named self. That needs an example before we can start digesting it. So here's the Dog class from earlier except with a bark() method. Dog_Bark class Dog: def bark(self): print(&quot;Woof!&quot;) spot = Dog() spot.bark() Dog.bark(spot)  The bark() method takes in self, which won't be used yet. But what is self. Well, when we call spot.bark(), then bark() is run with self as spot. If we did fido.bark(), then bark() would be run with self as fido. This can be made more explicitly visible by writing spot.bark() in what I assume is closer to its true form: Dog.bark(spot), which now needs the &quot;invoking instance&quot; specified explicitly. "},{"title":"Initialisation​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#initialisation","content":"There are number of special method names that have special meanings/roles. The only only we must contend with in this lecture is __init__. This is special method know as the constructor, and governs how the object is initialised. If we want to initialise a class in any way other than the default manner, we can implement the __init__() method. We can have the __init__() method take any arguments we want as well. For example, the name of the dog. Any arguments that __init__() takes (beyond self) will need to be provided to the Dog() call. For example: Dog_Init class Dog: # Constructor takes in name def __init__(self, name): print(f&quot;Hello {name}!&quot;) def bark(self): print(&quot;Woof!&quot;) # Name provided to constructor spot = Dog(&quot;Spot&quot;) # __init__ run here spot.bark()  "},{"title":"Instance Variables​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#instance-variables","content":"That's cute and all, but it would be good if the name could be more permanently associated with the dog. Well, objects can have instance variables, so something like spot.name would give us the name associated with spot. But in the internals of the class definition, how do we reference and alter spot.name? Well, whenever spot is the invoking instance of a method,self is spot in the method call. It turns out that self.name thus works to affect that instance's name field. Dog_Name class Dog: def __init__(self, name): # save the name on initialisation self.name = name def bark(self): # print name on bark for our sake print(f&quot;Woof! (I'm {self.name}!)&quot;) spot = Dog(&quot;Spot&quot;) fido = Dog(&quot;Fido&quot;) # We can reference the field directly from the objects print(f&quot;spot.name: {spot.name}&quot;) print(f&quot;fido.name: {fido.name}&quot;) # The field can also be used in other methods spot.bark() fido.bark()  So finally: we have our class/type Dog. It's objects will have an instance variable name, which is set by the constructor. We also have a method that lets the dog can bark(). And this sort of encapsulates all of the core machinery for making classes. Extra: Class Variables danger This is really quite subtle and confusing. There is another concept called a class variable. The way that class variables behave is much more subtle. They are associated with the class itself. Moreover, in a scope-y way, objects can reference a class variable and shadow it with instance variables. It functions almost like a default, shared between instances. This is something to probably steer clear from unless you feel quite comfortable that you know what you are doing. Here is the code I use to experiment and see how it all works: Class_Variable class A: val = 0 def update(self, v): self.val = v x = A() y = A() z = A() # x, y, and z all see the class variable print(f&quot;A.val: {A.val} lives as {id(A.val)}&quot;) print(f&quot;x.val: {x.val} lives as {id(x.val)}&quot;) print(f&quot;y.val: {y.val} lives as {id(y.val)}&quot;) print(f&quot;z.val: {z.val} lives as {id(z.val)}&quot;) print(&quot;*** UPDATE: x,y ***&quot;) # x and y get instance variables that shadow the class variable x.val = 2 y.update(3) print(f&quot;A.val: {A.val} lives as {id(A.val)}&quot;) print(f&quot;x.val: {x.val} lives as {id(x.val)}&quot;) print(f&quot;y.val: {y.val} lives as {id(y.val)}&quot;) print(f&quot;z.val: {z.val} lives as {id(z.val)}&quot;) print(&quot;*** UPDATE: A ***&quot;) # clas variable changes, z still sees class variable A.val = 5 print(f&quot;A.val: {A.val} lives as {id(A.val)}&quot;) print(f&quot;x.val: {x.val} lives as {id(x.val)}&quot;) print(f&quot;y.val: {y.val} lives as {id(y.val)}&quot;) print(f&quot;z.val: {z.val} lives as {id(z.val)}&quot;) Class_Variable_Mut class A: val = [] def update(self, v): self.val.append(v) x = A() y = A() z = A() # x, y, and z all see the class variable print(f&quot;A.val: {A.val} lives as {id(A.val)}&quot;) print(f&quot;x.val: {x.val} lives as {id(x.val)}&quot;) print(f&quot;y.val: {y.val} lives as {id(y.val)}&quot;) print(f&quot;z.val: {z.val} lives as {id(z.val)}&quot;) print(&quot;*** UPDATE: x,y,z ***&quot;) # x and y update the class variable x.val.append(3) y.update(1) # z gets an instance variable that shadows the class variable z.val = [3, 1, 4] print(f&quot;A.val: {A.val} lives as {id(A.val)}&quot;) print(f&quot;x.val: {x.val} lives as {id(x.val)}&quot;) print(f&quot;y.val: {y.val} lives as {id(y.val)}&quot;) print(f&quot;z.val: {z.val} lives as {id(z.val)}&quot;) print(&quot;*** UPDATE: A ***&quot;) # class variable changes, x and y still see class variable A.val = [2, 7, 1] print(f&quot;A.val: {A.val} lives as {id(A.val)}&quot;) print(f&quot;x.val: {x.val} lives as {id(x.val)}&quot;) print(f&quot;y.val: {y.val} lives as {id(y.val)}&quot;) print(f&quot;z.val: {z.val} lives as {id(z.val)}&quot;)  "},{"title":"Examples​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#examples","content":"I presume a couple more examples would be beneficial, or at least not detrimental. "},{"title":"Tally Counter​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#tally-counter","content":"A tally counter class would be a fairly minimal example that uses all of these pieces. We would need to track an internal counter (call it counter), and we would want that counter initialised to 0. We would also want to be able to increment the counter (call that method click(), as though we are clicking the button). That could look like this: Tally_Counter class TallyCounter: def __init__(self): self.counter = 0 def click(self): self.counter += 1 clicker = TallyCounter() clicker.click() clicker.click() clicker.click() print(f&quot;count: {clicker.counter}&quot;)  "},{"title":"Tic Tac Toe Game​","type":1,"pageTitle":"Classes and Object-Oriented Programming","url":"/main/lectures/Classes/Jared#tic-tac-toe-game","content":"For an example that is much more plausible in code we might actually write, but a tad more complex, let's look at tic tac toe. As far is internal information we want to store, the board itself seems appropriate. As far as initialisation goes, the board should be empty. There are no shortage of possible useful methods, but for the purposes of making in minimal working example I'll just do printing and updating the board. Tic-Tac-Toe class TicTacToeGame: def __init__(self): self.board = [[&quot; &quot;,&quot; &quot;,&quot; &quot;],[&quot; &quot;,&quot; &quot;,&quot; &quot;],[&quot; &quot;,&quot; &quot;,&quot; &quot;]] def print_board(self): b = self.board print(&quot;+---+---+---+&quot;) print(f&quot;| {b[0][0]} | {b[0][1]} | {b[0][2]} |&quot;) print(&quot;+---+---+---+&quot;) print(f&quot;| {b[1][0]} | {b[1][1]} | {b[1][2]} |&quot;) print(&quot;+---+---+---+&quot;) print(f&quot;| {b[2][0]} | {b[2][1]} | {b[2][2]} |&quot;) print(&quot;+---+---+---+&quot;) def update_board(self, loc, player): self.board[loc[0]][loc[1]] = player game = TicTacToeGame() print(&quot;Turn 0:&quot;) game.print_board() game.update_board((1,1), &quot;X&quot;) print(&quot;\\nTurn 1:&quot;) game.print_board()  "},{"title":"Lec 13 Errors and Modules","type":0,"sectionRef":"#","url":"/main/lectures/errors_modules_docs","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 13 Errors and Modules","url":"/main/lectures/errors_modules_docs#assignment-updates","content":"Stuff due soon: HW5 due April 12th (next Wednesday)Participation 7 due ThursdayQuiz 8 due ThursdayLab on Friday "},{"title":"Slides​","type":1,"pageTitle":"Lec 13 Errors and Modules","url":"/main/lectures/errors_modules_docs#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Activities​","type":1,"pageTitle":"Lec 13 Errors and Modules","url":"/main/lectures/errors_modules_docs#activities","content":""},{"title":"Identify the Error​","type":1,"pageTitle":"Lec 13 Errors and Modules","url":"/main/lectures/errors_modules_docs#identify-the-error","content":"Activity: Categorize and fix the errors in the code below. There may be no error. If there is an error, what is it and how can you fix it? Block_1 # Goal: Get 33Hello x = 33 y = &quot;Hello&quot; print(x + y)  Block_2 # Goal Add the 2 entered numbers together: 12 + 13 = 25 x = input(&quot;Enter a number: &quot;) y = input(&quot;Enter another number: &quot;) print(x + y)  Block_3 # Goal: Sum 1x and 2x and print the total 1x = 33 2x = 0 total = 1x + 2x print(total)  Block_4 # Goal: Print the product of the 2 numbers entered num1 = input(&quot;Enter a number: &quot;) num2 = input(&quot;Enter another number: &quot;) product = int(num1) * int(num2) print(product)  "},{"title":"Using Documentation​","type":1,"pageTitle":"Lec 13 Errors and Modules","url":"/main/lectures/errors_modules_docs#using-documentation","content":"Great resources include: w3schools.comdocs.python.orggeeksforgeeks.orgstackoverflow.comtutorialspoint.comgoogle.com Try to find the answer to the activity in the slides using these resources (or others) "},{"title":"Debugging","type":0,"sectionRef":"#","url":"/main/lectures/debugging/Jared","content":"","keywords":""},{"title":"Other Resources​","type":1,"pageTitle":"Debugging","url":"/main/lectures/debugging/Jared#other-resources","content":"I feel that a fairly strong visual component is necessary for conversations about &quot;how to use the debugger&quot;. I don't think I can do that in a reasonable span of time in this format, and I don't think I can do it better than has already been done: Getting Unstuck guideThe SlidesVSCode Debugging Guide I'll mostly use these notes to pontificate about how I think about debugging. This is more of a philosophical rambling set of notes. "},{"title":"Fixing Bugs​","type":1,"pageTitle":"Debugging","url":"/main/lectures/debugging/Jared#fixing-bugs","content":"Inevitably, you will encounter cases where you run your code and it either does the wrong thing or explodes. That is to say, bugs or errors occur. Fixing those is what programming is really about. It's also where some of the best learning happens. "},{"title":"Getting a Reproducible Issue​","type":1,"pageTitle":"Debugging","url":"/main/lectures/debugging/Jared#getting-a-reproducible-issue","content":"The first step, is to be able to produce the bug/error at will. Once you can produce it whenever you run the code, you can start hunting it down. With what we currently have and the language we are using, things are generally deterministic; meaning that the same starting point and inputs lead to the same outcomes. So this step is likely pretty easy. If you are using some sort of randomness, such as the random module, you may have some cases where the bug occurs and some where it doesn't. Take the code below as an example. Run it multiple times. By my estimate there is 27.1% chance of an error occurring on each run. Random import random def rand_frac(): num = random.randint(-10,10) den = random.randint(0,10) return num/den n1 = rand_frac() n2 = rand_frac() n3 = rand_frac() avg = (n1 + n2 + n3) / 3 print(avg)  We want to able to get that error to occur for certain. True randomness is quite rare in the CS world, and so we frequently use what are technically pseudo-random number generators. The &quot;random&quot; numbers chosen depend on an initial seed. We can deliberately seedthe random number generator with a fixed seed to remove the randomness. We then can experiment with the seed until we can get the error to appear. Seed import random random.seed(2) # impose order over chaos def rand_frac(): num = random.randint(-10,10) den = random.randint(0,10) return num/den n1 = rand_frac() n2 = rand_frac() n3 = rand_frac() avg = (n1 + n2 + n3) / 3 print(avg)  Didn't take me long. Now the error always appears, which makes it a lot easier to hunt down. "},{"title":"Hunting for Divergence​","type":1,"pageTitle":"Debugging","url":"/main/lectures/debugging/Jared#hunting-for-divergence","content":"The next step is find where the error occurs in our code, where the program first deviates from what we expect. For errors, python generally gives us a specific line in the error message (line 8 in the earlier example, for instance). Although the root cause of the error may be further back (that division by 0 happened because of den being assigned to 0 earlier). For non-fatal bugs in the logic or in some calculations, it's more of a hunt. This is frequently where the debugger comes in, allowing you to step through your code and see where your expectations of what will happen first depart from what the program is doing. I'm a bit more of a plebeian myself, in that I generally use print statements a lot to just print the values of variables. If I was really at a loss, I'd probably start by having print statements at the beginning and end of my functions to show me the arguments values and returns of each function call. I would then narrow the search and start checking the internal values of functions where the output of a function isn't what I might expect based on the inputs to that function. "},{"title":"Understanding the Issue​","type":1,"pageTitle":"Debugging","url":"/main/lectures/debugging/Jared#understanding-the-issue","content":"Once we've found where we deviated from the path, it's just a matter of making sense of the root issue and fixing it. It's hard to give general advice on this. Usually if you've really nailed down where the issue is (to the point of knowing where within a line of code the issue is), what the issue is becomes fairly apparent. But especially when it isn't obvious, figuring out why something behaves differently than you expect can be a powerful learning moment. At least I find that's where I cement some of my understandings of things. "},{"title":"Testing if There are Bugs​","type":1,"pageTitle":"Debugging","url":"/main/lectures/debugging/Jared#testing-if-there-are-bugs","content":"In practice, we often wait until something explodes before beginning the bug hunt. This is an intrinsically very reactive mode of operation. If we are anticipating writing a non-trivial amount of code (making a bug harder to hunt), or if the code does something important (where we don't want a bug to turn up in something we think is &quot;done&quot;), then we probably want to be more proactive about hunting bugs. What does that look like? Testing! Testing our code comes in a lot of forms. On the formal end there areunit tests and unit testing frameworks. In fact, our auto-graders use python's own unit testing framework. But on the other end are much more casual tests. Basically just running your code and observing the results/output on enough different inputs to test it under every condition. For example: With numbers, you might often want to test the positive, zero, and negative case.For anything involving indexing, you might want to hit the first, last, and middle cases.For lists: empty, one-element, multi-element lists might be good. You are trying to find a case where your code doesn't work. Only when you have failed in you best attempts to break your own code should you be satisfied. This pitting yourself against yourself helps refine your code, and yourself. "},{"title":"Programming to Avoid Bugs​","type":1,"pageTitle":"Debugging","url":"/main/lectures/debugging/Jared#programming-to-avoid-bugs","content":"While it is impossible to avoid bugs, we can aim to produce fewer and catch our mistakes earlier. I think the easiest way to do this is to write code in very small chunks and test as you go. The moment you write some code who's effect could be seen by printing something out, you can run it and print those those things out. You'll often catch minor issues early and not need to go on a big hunt for them later. It also helps to have your code broken up into functions. This allows you to not have to juggle so much in your head at once. Once a function has been made and tested, you can sort of &quot;trust&quot; that it works, and treat is just a black box when you use it in other code. Fewer things to mentally juggle at once means more mental resources on the bit of code you are currently working on, which hopefully leads to fewer bugs. "},{"title":"Lec 15 Files","type":0,"sectionRef":"#","url":"/main/lectures/Files","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 15 Files","url":"/main/lectures/Files#assignment-updates","content":"Stuff due soon: HW5 (Looping) due WednesdayParticipation 8 due ThursdayQuiz 9 due ThursdayLab on Friday "},{"title":"Slides​","type":1,"pageTitle":"Lec 15 Files","url":"/main/lectures/Files#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Lec 10 For Loops","type":0,"sectionRef":"#","url":"/main/lectures/for-loops","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 10 For Loops","url":"/main/lectures/for-loops#assignment-updates","content":"Stuff due this week: Participation 5 due Thursday All (or almost all) of the participation HWs are up now (10 in total) Quiz 6 due ThursdayHW4 Due Next Wednesday (3/29) BranchingHas been available since last lab day Lab on Friday "},{"title":"Slides​","type":1,"pageTitle":"Lec 10 For Loops","url":"/main/lectures/for-loops#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Code For Activities​","type":1,"pageTitle":"Lec 10 For Loops","url":"/main/lectures/for-loops#code-for-activities","content":"Break Continue Example Code: break_continue.pyNested Loops Example Code: nested_loops.py "},{"title":"CSV Files","type":0,"sectionRef":"#","url":"/main/lectures/CSV_Files/Jared","content":"","keywords":""},{"title":"What are CSV Files​","type":1,"pageTitle":"CSV Files","url":"/main/lectures/CSV_Files/Jared#what-are-csv-files","content":"CSV (short for &quot;comma-separated value(s)&quot;) files are effectively the file type for tables and spreadsheets. So, consider this table of elements (in the &quot;periodic table of elements&quot; sense): Element\tSymbol\tAtomic MassHydrogen\tH\t1.00784 Helium\tHe\t4.0026 Lithium\tLi\t6.941 Beryllium\tBe\t9.0121 Boron\tB\t10.811 Look how beautifully it is rendered on this website. A CSV is basically the pure data/content of that table, it is much less aesthetically pleasing, but it contains all the same information: Element,Symbol,Atomic Mass Hydrogen,H,1.00784 Helium,He,4.0026 Lithium,Li,6.941 Beryllium,Be,9.0121 Boron,B,10.811  Observe the parallels between the table and the CSV. Honestly, the CSV just looks like the table but without the formatting (and with the commas). The format has a couple characteristics: The header row of the table (if it exists) is the first row of the CSV.Every non-header row in the table, becomes a line in the CSV, called a record.Every column in the table represents a field, the values in columns for a given row are separated by commas in the CSV. A CSV may not have a header row, so what each column represents may just need to be known to the programmer or user. For instance, I could have a file named elements.csv that just has: Hydrogen,H,1.00784 Helium,He,4.0026 Lithium,Li,6.941 Beryllium,Be,9.0121 Boron,B,10.811  Why cut of the header? Because it is annoying one-off row to deal with. Why keep the header? Because it contains useful information about what the file means/represents. There are arguments both ways. "},{"title":"Direct CSV Handling (Lists of Lists)​","type":1,"pageTitle":"CSV Files","url":"/main/lectures/CSV_Files/Jared#direct-csv-handling-lists-of-lists","content":"We'll look at unpacking, manipulating, and re-packaging a CSV both will only the machinery we already have (basic I/O and string methods) and with machinery provided by the csv module. For both of these, we will be starting with the file elements.csvwith the following contents: Hydrogen,H,1.00784 Helium,He,4.0026 Lithium,Li,6.941 Beryllium,Be,9.0121 Boron,B,10.811  Our goal will be go from this &quot;element name, periodic symbol, atomic mass&quot; layout to a layout of &quot;atomic number, periodic symbol, element name, atomic mass&quot;. This will be done by swapping the element name and periodic symbol for each row, and sticking the atomic number at the front. The updated table will be written to updated_elements.csv. "},{"title":"Normal I/O​","type":1,"pageTitle":"CSV Files","url":"/main/lectures/CSV_Files/Jared#normal-io","content":"So here is an approach with all the stuff we already have, broken up across these tabs to reduce the horizontal space consumed. ReadSplitModifyJoin Per RowJoin Rows and WriteLast Newline As a first step, let's open the file, read the contents, and split it into lines. Nothing new here over last lecture. I'll be using the .read().splitlines()approach: import pprint with open(&quot;elements.csv&quot;, &quot;r&quot;) as elem_file: elem_rows = elem_file.read().splitlines() pprint.pprint(elem_rows) The above code will produce the output below. ['Hydrogen,H,1.00784', 'Helium,He,4.0026', 'Lithium,Li,6.941', 'Beryllium,Be,9.0121', 'Boron,B,10.811']   "},{"title":"CSV Module: Reader and Writer​","type":1,"pageTitle":"CSV Files","url":"/main/lectures/CSV_Files/Jared#csv-module-reader-and-writer","content":"CSVs introduce the need to do that initial split on commas or the later join on commas (depending on if we need to read from or write to a CSV). This stuff is kind of annoying. As an alternative, there is some machinery that handles it for us in the built-in csv module. ReadModifyWrite For reading, the csv module provides us with Readers. These are created with csv.reader(FILE_OBJECT), where FILE_OBJECT is an opened file.Not a file name, but the opened file object.This function returns an iterable of the desired broken-up rows (each row as a list), which can in turn be cast to a list of these row-lists. Behold how we get the entire 2D-list construction with just this: import csv import pprint with open(&quot;elements.csv&quot;, &quot;r&quot;) as elem_file: reader = csv.reader(elem_file) elem_table = list(reader) pprint.pprint(elem_table) The above code will produce the output below. [['Hydrogen', 'H', '1.00784'], ['Helium', 'He', '4.0026'], ['Lithium', 'Li', '6.941'], ['Beryllium', 'Be', '9.0121'], ['Boron', 'B', '10.811']]   caution Material from here on was not part of the lecture, but is stuff I think is related and worth mentioning.  "},{"title":"Handling CSVs as Lists of Dictionaries​","type":1,"pageTitle":"CSV Files","url":"/main/lectures/CSV_Files/Jared#handling-csvs-as-lists-of-dictionaries","content":"Each row/entry/record in the CSV has columns that represent fields. The location/order of the fields is often more incidental or aesthetic (it doesn't change the informational content). In order words, a dictionary (where the field names are the keys) is actually often a more appropriate way to represent a given record. And a list thereof a better way to represent the informational content of the CSV. "},{"title":"Normal I/O​","type":1,"pageTitle":"CSV Files","url":"/main/lectures/CSV_Files/Jared#normal-io-1","content":"As before, everything can be done with basic I/O, string manipulation, and some comprehensions. ReadModifyJoinWrite The actual reading in of the CSV isn't different at first, in that we still do need to break the input into rows and values (in order to store values in the dictionaries). For each row (which has been broken up into values), we need to repackage those values into a dictionary. An operation over every row is ... a comprehension! import pprint with open(&quot;elements.csv&quot;, &quot;r&quot;) as elem_file: elem_rows = elem_file.read().splitlines() elem_table = [row.split(&quot;,&quot;) for row in elem_rows] elem_dicts = [{&quot;Element&quot;:row[0], &quot;Symbol&quot;:row[1], &quot;Atomic Mass&quot;:row[2]} for row in elem_table] pprint.pprint(elem_dicts) The above code will produce the output below. [{'Atomic Mass': '1.00784', 'Element': 'Hydrogen', 'Symbol': 'H'}, {'Atomic Mass': '4.0026', 'Element': 'Helium', 'Symbol': 'He'}, {'Atomic Mass': '6.941', 'Element': 'Lithium', 'Symbol': 'Li'}, {'Atomic Mass': '9.0121', 'Element': 'Beryllium', 'Symbol': 'Be'}, {'Atomic Mass': '10.811', 'Element': 'Boron', 'Symbol': 'B'}]   "},{"title":"CSV Module: DictReader and DictWriter​","type":1,"pageTitle":"CSV Files","url":"/main/lectures/CSV_Files/Jared#csv-module-dictreader-and-dictwriter","content":"This dictionary packing and unpacking is annoying. As an alternative, there is some machinery that handles it for us in the built-in csv module. ReadModifyWrite Instead of a Reader, we now have a DictReader. This is created with csv.DictReader(FILE_OBJECT, FIELDNAME_LIST), where FILE_OBJECT is as in scv.reader() and FIELDNAME_LISTis a list of the field names, in the order they are read. (We'll later see that we don't need FIELDNAME_LIST if the CSV has a header row.) This function returns an iterable of the desired row-dictionaries, which can in turn be cast to a list. Behold how we get the entire dictionary construction with just this: import csv import pprint with open(&quot;elements.csv&quot;, &quot;r&quot;) as elem_file: reader = csv.DictReader(elem_file, [&quot;Element&quot;,&quot;Symbol&quot;,&quot;Atomic Mass&quot;]) elem_table = list(reader) pprint.pprint(elem_table) The above code will produce the output below. [{'Atomic Mass': '1.00784', 'Element': 'Hydrogen', 'Symbol': 'H'}, {'Atomic Mass': '4.0026', 'Element': 'Helium', 'Symbol': 'He'}, {'Atomic Mass': '6.941', 'Element': 'Lithium', 'Symbol': 'Li'}, {'Atomic Mass': '9.0121', 'Element': 'Beryllium', 'Symbol': 'Be'}, {'Atomic Mass': '10.811', 'Element': 'Boron', 'Symbol': 'B'}]   "},{"title":"CSV Module with Header Row​","type":1,"pageTitle":"CSV Files","url":"/main/lectures/CSV_Files/Jared#csv-module-with-header-row","content":"There is one more thing to show off about DictReader and DictWriter. Consider a CSV with a header row. So imagine elements.csv was: Element,Symbol,Atomic Mass Hydrogen,H,1.00784 Helium,He,4.0026 Lithium,Li,6.941 Beryllium,Be,9.0121 Boron,B,10.811  If we don't specify the field names for DictReader, it will use the first row in the CSV. For the DictWriter, it always needs the field names given. But we get a .writeheader() method that writes that list of field names as the header of the csv. So if the CSV we were reading had a header row, and we wanted to write a header row in the transformed CSV, we could do this: import csv with open(&quot;elements.csv&quot;, &quot;r&quot;) as elem_file: reader = csv.DictReader(elem_file) elem_table = list(reader) for i in range(len(elem_table)): row = elem_table[i] # updates to row will affect elem_table (mutability) row[&quot;Atomic Number&quot;] = i+1 # Add number to row at the appropriate field with open(&quot;updated_elements.csv&quot;, &quot;w&quot;) as new_elem_file: writer = csv.DictWriter(new_elem_file, [&quot;Atomic Number&quot;,&quot;Symbol&quot;,&quot;Element&quot;,&quot;Atomic Mass&quot;]) writer.writeheader() writer.writerows(elem_table)  After running that code, the contents of the file updated_elements.csv would be: Atomic Number,Symbol,Element,Atomic Mass 1,H,Hydrogen,1.00784 2,He,Helium,4.0026 3,Li,Lithium,6.941 4,Be,Beryllium,9.0121 5,B,Boron,10.811  "},{"title":"Exception Handling","type":0,"sectionRef":"#","url":"/main/lectures/errors_modules_docs/Jared","content":"","keywords":""},{"title":"Error Types​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#error-types","content":"First, lets explore a brief taxonomy of the the types of errors we can encounter. "},{"title":"Syntactic Errors​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#syntactic-errors","content":"In non-compiled languages like python the line between these and the next blur a little, but: These are errors stemming from illegal syntax. For example, if you put semicolons instead of commas between elements of a list: List_Syntax_Error nums = [1; 2; 3; 4; 5] # ERROR print(nums)  Or if you mistyped a keyword: Typo_Syntax_Error import random num = random.randint(0,1) if num % 2 == 0: print(f&quot;{num} is even&quot;) esle: # ERROR print(f&quot;{num} is odd&quot;)  VSCode should yell at you about this stuff (via red squiggly underlines) before you even run the code. So by the point where you are running your code, you should have cleaned these up. "},{"title":"Runtime Errors​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#runtime-errors","content":"These are fatal errors that occur when the code is run and something illegal happens. The motivating example from earlier was about converting an illegal input: Input_Runtime_Error user_str = &quot;abc&quot; # pretend a user typed &quot;abc&quot; when prompted user_num = float(user_str) # ERROR  Division by 0 is a classic math example: Division_Runtime_Error nums = [] avg = sum(nums)/len(nums) # ERROR  These are the types of errors we are really interested in and able to address with the promised new machinery. "},{"title":"Logical Errors​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#logical-errors","content":"These are what I would probably more colloquially call &quot;bugs&quot;. These are when the code does what you are telling it to do (as code does), but not what you meant. For example: Parity_Logic_Error import random num = random.randint(0,1) if num % 2 == 1: # This 1 should be a 0 print(f&quot;{num} is even&quot;) else: print(f&quot;{num} is odd&quot;)  The code is totally legal, but just does the wrong thing. These are most stealthy of all issues, and are what we design tests for. "},{"title":"Exception Handling​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#exception-handling-1","content":"Exception handling is the ability to try to execute some code,catch any exceptions that arise (errors are all exceptions), and handle them in some way. "},{"title":"try and except​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#try-and-except","content":"The basic syntax for this is: try: try_block_code except: except_block_code  By now this keyword-colon style is probably familiar. Here are the components: The keyword try (with :).The &quot;try block&quot;, try_block_code. This code is executed like normal until an exception occurs. If an exception occurs, no further code in this block will be executed.The except keyword (with :).The &quot;except block&quot;, except_block_code. This code runs if, and only if, an exception occurs in the try-block. So we can put that input-to-float conversion inside a try block in case something bad happens during the conversion. And then we can have an error message print in the except block. And so that user_num is not undefined, we can have user_num set to 0 in the except block. Convert_Try_Except try: user_str = input(&quot;Please enter a number:&quot;) user_num = float(user_str) print(&quot;Thank you for the legal input&quot;) except: print(&quot;Illegal input recieved&quot;) user_num = 0 print(f&quot;user_num set to {user_num}&quot;)  Try running the above code with both legal and illegal inputs. We could also use this in order to create a loop that repeatedly tries to convert input and resets if the input causes an error. Get_Input_Try_Except while True: try: user_str = input(&quot;Please enter a number:&quot;) user_num = float(user_str) except: print(&quot;Illegal input recieved&quot;) continue break print(f&quot;user_num set to {user_num}&quot;)  Extra: `except Exception` We can specify a specific type of exception for except to handle. The syntax is simply to use except exception_type: instead of except:, where exception_type is some exception type. There are lists of exception types online. We can also use Exception as a generic catch-most type (It catches all errors, the stuff it doesn't catch, you probably don't want to catch). Convert_Try_Except_Specific try: user_str = input(&quot;Please enter a non-zero number: &quot;) user_num = float(user_str) inv_num = 1 / user_num print(&quot;Thank you for the legal input&quot;) except ValueError: print(&quot;Illegally formatted input recieved&quot;) inv_num = 0 print(f&quot;inv_num set to {inv_num}&quot;) In this above code, only ValueErrors are handled. So an illegal input to float(), like &quot;foo&quot;, would be handled; but a legal input that causes a different error, like &quot;0&quot;, causing a ZeroDivisionError, would not. We can specify multiple specific errors via a tuple (or at least a tuple-looking thing). Convert_Try_Except_Multiple_Specific try: user_str = input(&quot;Please enter a non-zero number: &quot;) user_num = float(user_str) inv_num = 1 / user_num print(&quot;Thank you for the legal input&quot;) except (ValueError, ZeroDivisionError): print(&quot;Illegally input recieved&quot;) inv_num = 0 print(f&quot;inv_num set to {inv_num}&quot;) Why does this ability to specify what exception(s) to handle help us? Because we can have multiple except clauses. This allows us to handle different types of errors differently. Convert_Try_Except_Cases try: user_str = input(&quot;Please enter a non-zero number: &quot;) user_num = float(user_str) inv_num = 1 / user_num print(&quot;Thank you for the legal input&quot;) except ValueError: print(&quot;Illegally formatted input recieved&quot;) inv_num = 0 except ZeroDivisionError: print(&quot;Zero recieved as input&quot;) inv_num = 0 except: # will catch any remaining Exceptions # E.g., EOFError could be trigger via control-D (on unix-based systems) when asked for input print(&quot;Unknown error encountered&quot;) inv_num = 0 print(f&quot;inv_num set to {inv_num}&quot;)  Extra: `except Exception as var_name` We can store the exception as a variable in order to more readily extract some information from it (Exceptions are objects too, so can be stored in variables). The syntax is simply to use except exception_type as var_name:, where exception_type is again some exception type and var_name is a choice of variable name. Again, a list of exception types. An example of using this to get some information out of the exception: Convert_Try_Except_As try: user_str = input(&quot;Please enter a non-zero number: &quot;) user_num = float(user_str) inv_num = 1 / user_num print(&quot;Thank you for the legal input&quot;) except Exception as err: # will catch any remaining Exceptions print(&quot;Exception occured!&quot;) print(f&quot;Exception type: {type(err)}&quot;) print(f&quot;Exception args: {err.args}&quot;) print(f&quot;Exception print:\\n{err}&quot;) inv_num = 0 print(f&quot;inv_num set to {inv_num}&quot;)  "},{"title":"else​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#else","content":"There are a couple of additional types of blocks that can be added to this structure. The first is an else block, that is run if no exception occurs. The basic syntax for this is: try: try_block_code except: except_block_code else: else_block_code  The new components: The keyword else (with :).The else-block, else_block_code. This code runs if, and only if, an try-block is completed without an exception occurring. The input example from before could be refactored to look like this: Get_Input_Else while True: try: user_str = input(&quot;Please enter a number:&quot;) user_num = float(user_str) except: print(&quot;Illegal input recieved&quot;) else: break print(f&quot;user_num set to {user_num}&quot;)  That said, I'm pretty sure that try-except-else could just be accomplished with a try-except like so: try: try_block_code else_block_code # only run on non-error in try block either way except: except_block_code  "},{"title":"finally​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#finally","content":"Finally, there is a finally block. This block always runs and is the last to run. The basic syntax for this is: try: try_block_code except: except_block_code # else and else block here if desired finally: finally_block_code  The new components: The keyword finally (with :).The finally-block, finally_block_code. This code always runs, and it runs after the try-block, except-block (if relevant), and else-block (if relevant) have been run. The earlier example about converting the input or defaulting to 0 could be refactored to look like this: Convert_Finally try: user_str = input(&quot;Please enter a number:&quot;) user_num = float(user_str) print(&quot;Thank you for the legal input&quot;) except: print(&quot;Illegal input recieved&quot;) user_num = 0 finally: print(f&quot;user_num set to {user_num}&quot;)  That said, I'm pretty sure that most normal uses of try-except-finally could just be accomplished with a try-except like so (may I'm missing something): try: try_block_code # else_block_code if it exists except: except_block_code finally_block_code # will be run after all try-except code  Extra: `finally` control flow danger This could do damage to your psyche and possibly sow more confusion than understanding. When I said the finally block always runs, I mean it always runs. This has terrifying implications. And when I said &quot;normal&quot; uses could be done with a try-except, I meant cases not deliberately abusing that fact. Below are two examples if finally winning over the control flow of breakand continue. Finally_Break while True: try: cursed_number = 0 / 0 except: print(&quot;Illegal Math&quot;) break finally: print(&quot;Oh, hey there.&quot;) print(&quot;I see that you're breaking out of this infinite loop.&quot;) print(&quot;I hope you don't mind me sneaking in here and doing my thing first.&quot;) Finally_Continue while True: try: user_str = input(&quot;Please enter a number:&quot;) user_num = float(user_str) except: print(f&quot;Illegal input recieved: {user_str}&quot;) continue finally: print(&quot;Oh, hey there.&quot;) print(&quot;I'm just doing my thing, regardless of your continuing.&quot;) break print(f&quot;user_num: {user_num}&quot;) But the most terrifying part of all is that if finallydoes a different control flow command, it wins. And yes, except blocks are technically optional. Finally_Override_Break count = 0 while count &lt; 10: try: break finally: print(&quot;Not this time&quot;) count += 1 continue print(f&quot;count: {count}&quot;) Finally_Override_Continue count = 0 while count &lt; 10: try: count += 1 continue finally: print(&quot;Breathe in. Focus. Let's bring an end to this&quot;) break print(f&quot;count: {count}&quot;) finally can supersede and override return Finally_Return def get_num(): try: return 0 finally: print(&quot;How about I return 1?&quot;) return 1 print(f&quot;num: {get_num()}&quot;) Finally_Void_Return def no_escape(): count = 0 while count &lt; 10: try: return -1 finally: print(&quot;You live under the illusion of control. Abandon the fight. It is written.&quot;) count += 1 continue return count print(f&quot;num: {no_escape()}&quot;) finally can supersede exit() # exit() doesn't quite behave in the web-python, so try it locally. try: exit() finally: print(&quot;Excuse me, let me just do something real quickly ...&quot;) Finally_Void_Exit def no_escape(): count = 0 while count &lt; 10: try: exit() finally: print(&quot;You're too impulsive. This is my time, my space. Your escape will fail&quot;) count += 1 continue print(f&quot;count: {count}&quot;) no_escape() Only the &quot;terminate this program right now, no cleanup, no nothing, just DIE!&quot; version of exit wins over finally. # os._exit() doesn't quite behave in the web-python, so try it locally. import os try: os._exit(0) finally: print(&quot;Wait, how did you ... ?&quot;)   caution Material from here on was not part of the lecture, but is stuff I think is related and worth mentioning.  "},{"title":"raise​","type":1,"pageTitle":"Exception Handling","url":"/main/lectures/errors_modules_docs/Jared#raise","content":"You can always trigger an error/exception at will. This is called raising or throwing an exception (we similarly may talk about try-except as catching exceptions). This is done with the raise keyword. Raise user_str = input(&quot;Please enter word: &quot;) if not user_str.isalpha(): raise Exception(f&quot;Illegal input from user: '{user_str}'&quot;) print(f&quot;Recieved: {user_str}&quot;)  Try the above on purely letters (e.g., &quot;Foo&quot;) and something else (e.g., &quot;314&quot;). Notice that we get to set error message. Specific types of errors can be raised, for example, the above could have been: Raise_Value_Error user_str = input(&quot;Please enter word: &quot;) if not user_str.isalpha(): raise ValueError(f&quot;Illegal input from user: '{user_str}'&quot;) print(f&quot;Recieved: {user_str}&quot;)  Now illegal inputs result in a ValueError, not a generic Exception. It is good practice to choose an appropriate error type to use. A list of common built-in errors can be foundhere. "},{"title":"Looping (For)","type":0,"sectionRef":"#","url":"/main/lectures/for-loops/Jared","content":"","keywords":""},{"title":"Iterating over Something​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#iterating-over-something","content":"So what is the case we want to address with for loops? The &quot;problem we want to solve&quot;? The while loop is most natural when your mental framing of a problem is &quot;I want to do X while/as long as Y&quot; or &quot;I want to do X until Y&quot;. The for loop is for &quot;I want to do X for each/every Z&quot;: &quot;For every/each element in this list&quot;&quot;For every/each element in this tuple&quot;&quot;For every/each letter in this string&quot;&quot;For every/each number in this range&quot; The countdown (&quot;10 ... 9 ... ... 1 ... Blastoff!&quot;) example from last time is an example of this, it has us printing (&quot;doing X&quot;) every number from 10 to 1 (&quot;the range 10 to 1&quot;). "},{"title":"For Loops​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#for-loops","content":"Let's see some explicit syntax. For loops are of the form: for variable_name in iterable: code # that may use variable_name  We have the keyword for, a variable name (variable_name) of our choice, the keyword in, something that can be iterated over (iterable), a :, and some indented block of code (can be multiple lines) that may use variable_name in it. For every element in iterable, variable_name is set to that element, and code is run. A way to think about that, is that you are running code for every possible assignment of variable_name such thatvariable_name in iterable is true. If iterable's elements have some sort of canonical ordering,variable_name will be assigned and code run based on that ordering (so lists go in the order you probably expect for instance). This'll be clearer with some examples. As for what can be iterated over/what is an iterable: That we already know: liststuplesstrings That we will see in this lecture: ranges That we will see soon: dictionariessets That we'll later: mapsfilters That I don't know when/if we'll see: zipsenumerations That we probably won't see: generators Quite a lot! Hence, examples to come. "},{"title":"On Lists​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#on-lists","content":"Here's an example that prints a bunch of elements in a list: Print_List # a list of not all string that we want to print ones = [True, 1, 1.0, &quot;One&quot;] for elem in ones: print(elem)  elem hold the values True, 1, 1.0, and &quot;one&quot;, in that order. "},{"title":"On Tuples​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#on-tuples","content":"Here's an example that prints is the days of the week are weekdays or weekends. Get_Type for day in (&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;): if day == &quot;Saturday&quot; or day == &quot;Sunday&quot;: print(f&quot;{day}: Weekend!&quot;) else: print(f&quot;{day}: Weekday&quot;)  "},{"title":"On Strings​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#on-strings","content":"Here is an example that inverts capitalisation in a string. Reverse_Capitalisation text = input(&quot;Please enter some text: &quot;) text_reverse_case = &quot;&quot; for letter in text: if letter.isupper(): letter_reverse_case = letter.lower() elif letter.islower(): letter_reverse_case = letter.upper() else: # for punctuation and the like letter_reverse_case = letter text_reverse_case += letter_reverse_case print(text_reverse_case)  "},{"title":"Ranges​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#ranges","content":"Say you want to iterate a specific number of times, maybe even doing something based on the iteration number, then ranges are probably what you want to use as the iterator. The range() function takes 1 to 3 arguments: range(stop)range(start, stop)range(start, stop, step) This works a lot like slicing in that the range starts at and includes start (default 0), stops at and does not include stop, and has a step size of step. It is important to note that ranges are their own thing, of type range. So if you wanted to print one to see what values it has, you would need to convert it into a list or something first. Range_Type # Displaying the range as a range nums_range = range(10) print(f&quot;nums_range : {nums_range}&quot;) print(f&quot;nums_range type: {type(nums_range)}&quot;) # Displaying the range as a list nums_list = list(range(10)) print(f&quot;nums_list : {nums_list}&quot;) print(f&quot;nums_list type : {type(nums_list)}&quot;)  With that noted, examples of making ranges of each type (and converting them to lists to print): Range_Arguments print(list(range(10))) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(list(range(5, 15))) # [5, 6, 7, 8, 9, 10, 11, 12, 13, 14] print(list(range(5, 55, 5))) # [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]  However, ranges are iterable, so we don't need to convert them to a list if we want to use them in a for loop. Here's how we could have used a range() to do the blastoff example from before. Blastoff for i in range(10,0,-1): print(f&quot;{i}...&quot;) print(&quot;Blastoff!&quot;)  "},{"title":"Nesting​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#nesting","content":"We can have loops inside loop, we refer to this an nesting. We need an additional level of indentation for every level of nesting. Nesting for x in range(3): print(f&quot;Start of x loop (x = {x})&quot;) for y in range(3): print(f&quot; Start of y loop (y = {y})&quot;) print(f&quot; (x, y, x+y): ({x}, {y}, {x+y})&quot;) print(f&quot; End of y loop (y = {y})&quot;) print(f&quot;End of x loop (x = {x})&quot;)  Stepping through this code in a debugger could be helpful if it's unclear why the print order is what it is. "},{"title":"Breaking and Continuing​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#breaking-and-continuing","content":"break and continue work with for loops in the same way as with while loops (note that continue moves on to the next value in the iterable). Both interact with nested loops in the same way as well: they affect the inner-most loop that they are in. Here's an example of triple loop over x, y, and z that skips when the sum of the three is odd and ends the middle loop when the sum of x and y is 3 or more. You can uncomment the break and continue prints to see more information. Break_and_Continue for x in range(3): for y in range(3): if (x + y) &gt;= 3: print(f&quot;Breaking! (x, y) : ({x}, {y})&quot;) break for z in range(3): if (x + y + z) % 2 == 0: # print(f&quot;Continuing! (x, y, z): ({x}, {y}, {z})&quot;) continue print(f&quot;(x, y, z; x+y, x+y+x): ({x}, {y}, {z}; {x+y}, {x+y+z})&quot;)  This is something that would be much easier to follow if stepping through in a debugger. The hope would be that from a given state in the code (given line and x, y, z values) you can correctly anticipate what the program will do next.  caution Material from here on was not part of the lecture, but is stuff I think is quite useful to know about.  "},{"title":"Unpacking/Destructuring​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#unpackingdestructuring","content":"I had basic unpacking/destructuringas extra stuff in an earlier set of notes. You can do that in the for-in line of a for loop, in a case where you had something like a list of tuples. Unpacking points = [(3,1), (4,1), (5,9), (2,6), (5,3)] xs = [] ys = [] for x, y in points: xs += [x] # xs = xs + [x], e.i. append ys += [y] # ys = ys + [y], e.i. append print(xs) print(ys)  "},{"title":"Zipping​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#zipping","content":"There is a function called zip() that takes in any number of iterables and returns something of type zip. This zip object can be cast to a list/tuple or iterated over directly with a for loop. The first element in a zip object is a tuple containing the first elements of all arguments to the zip() function. The second a tuple of all the second arguments. And so on. So for example, I can do the inverse of the previous example: Packing xs = [3, 1, 2, 3, 9] ys = [1, 5, 6, 5, 7] zs = [4, 9, 5, 8, 9] # List conversion of zip print(list(zip(xs, ys, zs))) # Logically equivalent loop-over-zip approach points = [] for xyz in zip(xs, ys, zs): points += [xyz] print(points)  Naturally, if you actually wanted the zip to be a list, you'd do the list(zip(...))approach, the loop is there to show it works. As for an example where the loop over a zip is more natural, there was a point in the auto-grader for Guess a Number (sigh that's not out yet to link to) where I want a bunch on minimums, maximums and random guesses in those ranges. Guess_a_Number import random rounds = 10 # how many rounds I want to do this for # get rounds (10) random minima and maxima mins = random.choices(range(0,10), k=rounds) maxs = random.choices(range(10,100), k=rounds) # get a bunch of guesses in the respective min to max range guesses = [] for min_num, max_num in zip(mins, maxs): guess = random.choice(range(min_num, max_num+1)) # min to max (inclusive) guesses += [guess] # print full lists print(&quot;mins :&quot;,mins) print(&quot;guesses :&quot;,guesses) print(&quot;maxs :&quot;,maxs) print() # print respetive values for min_num, guess, max_num in zip(mins, guesses, maxs): print(f&quot;{min_num} &lt;= {guess} &lt;= {max_num}&quot;)  "},{"title":"Enumerating​","type":1,"pageTitle":"Looping (For)","url":"/main/lectures/for-loops/Jared#enumerating","content":"Sometimes you do actually want the index and the element, maybe for pretty printing. Certainly by iterating over indices you can get both (for you can get elements from indices) Indices points = [(3, 1, 4), (1, 5, 9), (2, 6, 5), (3, 5, 8), (9, 7, 9)] for i in range(len(points)): x, y, z = points[i] # normal destructuring print(f&quot;Point {i+1}: x = {x}, y = {y}, z = {z}&quot;)  But having to do that points[i] thing is such a bother (it's really not that bad), and so there is fancy machinery to save us from this one line. We have enumerate(), which takes and iterable and generates something of type enumerate. The enumerate can either be iterated over in a loop (or used anywhere else a iterator can be) or turned into a list or such. The first element in an enumerate object is a tuple containing 0 (the first index) and the first element of the argument to the enumerate() function. The second a tuple of 1 and the second element of the argument. And so on. Behold the power of that, and nested destructuring: Enumerate points = [(3, 1, 4), (1, 5, 9), (2, 6, 5), (3, 5, 8), (9, 7, 9)] for (i, (x, y, z)) in enumerate(points): print(f&quot;Point {i+1}: x = {x}, y = {y}, z = {z}&quot;)  "},{"title":"File I/O","type":0,"sectionRef":"#","url":"/main/lectures/Files/Jared","content":"","keywords":""},{"title":"Basic I/O​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#basic-io","content":"For our purposes, there are 4 basic things we will do with files: Open them: We need to open files before we can do anything with them.Close them: We should close files when we are done with them.Read from them: We may want to read the contents of a file.Write to them: We may want to write content to a file. There are aptly named functions for each of these. As an example that uses all of these, we'll aim to read a file named words.txt, reverse the lines of that file, and write those to a file named rev_words.txt. If you want to follow along, I recommend making/opening a sandbox project and making a file named words.txt. The contents of my words.txt for testing are: Apple Banana Cherry Durian  "},{"title":"open(file_name, mode)​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#openfile_name-mode","content":"The first step when working with files is to open the file. The function for this is the open() function. This takes in two argument. The first is a string with name of the file to open. The second is a string indicating what mode to open the file in. The basic modes (examples will come later): &quot;r&quot; (read mode): Opens the file for reading. If the file does not exits, an error occurs.&quot;w&quot; (write mode): Opens the file for writing. If the file does not exits, it is created. If the file already has content, that content is erased (or &quot;truncated&quot;).&quot;a&quot; (append mode): Opens the file for writing. If the file does not exits, it is created. If the file already has content, writing occurs after the existing content. open() will return an object of a special type for files. So, for our example, we want to reverse the lines of words.txtand put that in rev_words.txt. The former is being read from, and the latter being written to (and we aren't updating it/appending to it), that's read and write mode respectively. The code for that so far is (with some extra prints): read_file = open(&quot;words.txt&quot;, &quot;r&quot;) print(read_file) write_file = open(&quot;rev_words.txt&quot;, &quot;w&quot;) print(write_file)  Doesn't do much yet, although it will make an empty &quot;rev_words.txt&quot;. From those prints, we can see we're definitely getting something new type-wise out of open(): &lt;_io.TextIOWrapper name='words.txt' mode='r' encoding='UTF-8'&gt; &lt;_io.TextIOWrapper name='rev_words.txt' mode='w' encoding='UTF-8'&gt;  "},{"title":".close()​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#close","content":"Closing files is good practice. The computer has to do a bit of book-keeping for every open file. Closing the file frees up the space that was used for the book-keeping associated with that files. At our scale it doesn't really matter, but it's good to adopt the instinct early. This is done with the .close() method. I also recommend closing the file as soon as you can. With proper and early closing of files, the outline of our code becomes: read_file = open(&quot;words.txt&quot;, &quot;r&quot;) # READ FILE read_file.close() write_file = open(&quot;rev_words.txt&quot;, &quot;w&quot;) # WRITE REVERSED LINES write_file.close()  "},{"title":".read()​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#read","content":"Let's actually do something now. There are a few different methods for reading from files. The most generic that will work for all files is .read(). This will just return the whole file as one long string. read_file = open(&quot;words.txt&quot;, &quot;r&quot;) text = read_file.read() read_file.close() print(text) # 'Apple\\nBanana\\nCherry\\nDurian'  Note that in the example I have for words.txt, the last line doesn't have a newline after it. I deliberately did that so we would need to worry about/think about the ramifications of that. Often there is a newline after the last line, but that's not a guarantee we have. So what are out other options? A common thing we might want to do is split the file into lines (which we want to do in our example too). One of the read methods for text files, .readlines(), returns a list of strings, one string for each line. The newline characters will still be there, but they can be removed with a comprehension and the .strip() method. read_file = open(&quot;words.txt&quot;, &quot;r&quot;) lines = read_file.readlines() read_file.close() print(lines) # ['Apple\\n', 'Banana\\n', 'Cherry\\n', 'Durian'] clean_lines = [line.strip(&quot;\\n&quot;) for line in lines] print(clean_lines) # ['Apple', 'Banana', 'Cherry', 'Durian']  Another option is the .readline() (singular) method. This reads one line from the file each call, and returns it as string (with the newline character). It returns '' when it has reached the end of the file. read_file = open(&quot;words.txt&quot;, &quot;r&quot;) while True: line = read_file.readline() if line == &quot;&quot;: break print(line.strip(&quot;\\n&quot;)) read_file.close()  Finally, forget that, you can straight-up iterate over the file. read_file = open(&quot;words.txt&quot;, &quot;r&quot;) for line in read_file: print(line.strip(&quot;\\n&quot;)) read_file.close()  That's a lot of options, so what should we use? If it was a big file and I wanted to process it line-by-line, I'd go for for the for-loop approach. If it was a smaller file and I wanted to do something less suited to iteration (like reversing the order of lines), I would want one of the bulk-read approaches. I find all the the newline stuff annoying and like to get rid of the whole thing. For my money, .read() combined with the .splitlines() method (turns a string into a list of strings based on newlines) feels like the nicest way to do it. So .read().splitlnes() it is for reading words.txt. As for reversing that list of lines, slicing is overpowered: read_file = open(&quot;words.txt&quot;, &quot;r&quot;) lines = read_file.read().splitlines() read_file.close() print(lines) # ['Apple', 'Banana', 'Cherry', 'Durian'] print(lines[::-1]) # ['Durian', 'Cherry', 'Banana', 'Apple'] write_file = open(&quot;rev_words.txt&quot;, &quot;w&quot;) # WRITE REVERSED LINES write_file.close()  "},{"title":".write(content)​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#writecontent","content":"Finally, writing to a file is done with the .write() method. This takes in a string to write to the file and writes it. For our reversing lines example, I have the reversed list of lines as strings, I just need to join them together with newlines to get the final string to write to rev_words.txt. Well, this is exactly what that weird .join() string method does. This gives us the solution: read_file = open(&quot;words.txt&quot;, &quot;r&quot;) lines = read_file.read().splitlines() read_file.close() write_file = open(&quot;rev_words.txt&quot;, &quot;w&quot;) write_file.write(&quot;\\n&quot;.join(lines[::-1])) write_file.close()  There is also a .writelines() method for text files. This takes in an iterable of strings and writes each to the file. Note: it does not add newlines to these string, they must have newlines at the end already. So if we were guaranteed that the last line of the file had a newline at the end of it, and we wanted the last line of rev_words.txt to have a newline it the end of it, this would be a very elegant solution: read_file = open(&quot;words.txt&quot;, &quot;r&quot;) lines = read_file.readlines() read_file.close() write_file = open(&quot;rev_words.txt&quot;, &quot;w&quot;) write_file.writelines(lines[::-1]) write_file.close()  "},{"title":"Write vs. Append​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#write-vs-append","content":"I promised some examples on opening in write mode vs append mode. Write mode and append mode function the same on empty files (they make a new one). So it suffices to restrict out consideration to when a file already exists. When writing to a file that already exists, the old content is truncated. # File is made write_file = open(&quot;more_words.txt&quot;, &quot;w&quot;) write_file.write(&quot;Long ago,\\n&quot;) write_file.write(&quot;In a distant land,\\n&quot;) write_file.write(&quot;I ... \\n&quot;) write_file.close() # File is over-written over_write_file = open(&quot;more_words.txt&quot;, &quot;w&quot;) write_file.write(&quot;Over-wrote the past.&quot;) write_file.close()  When the above code is run, the final content of more_text.txt will be: Over-wrote the past.  Because, opening up more_text.txt in write mode erases all the stuff that was originally written to it. When appending to a file that already exists, the old content is left alone, with new content being added afterwards. # File is made write_file = open(&quot;more_words.txt&quot;, &quot;w&quot;) write_file.write(&quot;Long ago,\\n&quot;) write_file.write(&quot;In a distant land,\\n&quot;) write_file.write(&quot;I ... \\n&quot;) write_file.close() # File is appended to append_file = open(&quot;more_words.txt&quot;, &quot;a&quot;) append_file.write(&quot;Astonishingly, did not violate causality.&quot;) append_file.close()  When the above code is run, the final content of more_text.txt will be: Long ago, In a distant land, I ... Astonishingly, did not violate causality.  Because, opening up more_text.txt in append mode adds new stuff to the existing stuff. "},{"title":"with and as​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#with-and-as","content":"The worrying about closing files business is a tad annoying. Worse, if some weird error occur while processing the file, then we may not be able to properly close it (rather, we'd need try-excepts and error handling to make sure it closes). There is special syntax that lets us open a file in a way that will automatically close it, even with error shenanigans: with open(arguements...) as file_var_name: code_block  We have: The keyword with.The open() call for how we want to open the file.The keyword as.The variable name file_var_name, which hold the opened file.The colon (:).The code block (code_block), which may make use of the variable file_var_name I think you can probably guess what this does, but: It opens the file, saves it infile_var_name, runs code_block, and closes the file at the end (or if an error occurs). With this, out earlier reverse-file-lines solution can be refactored like so: with open(&quot;words.txt&quot;, &quot;r&quot;) as read_file: lines = read_file.read().splitlines() with open(&quot;rev_words.txt&quot;, &quot;w&quot;) as write_file: write_file.write(&quot;\\n&quot;.join(lines[::-1]))  "},{"title":"Files in Other Places​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#files-in-other-places","content":"All of this has been based on the idea that the file being opened is in the same folder as the code you are running. This won't always be the case. "},{"title":"Directory Hierarchy​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#directory-hierarchy","content":"We need a brief interlude about the file system on computers, how the system is structured/&quot;where files are&quot; (in the model, where they actually are is a much more complicated story). Your computer has folders (also called directories) and files. There is a top-level/root folder somewhere, but you won't need to worry about that one beyond the fact that it exists. Within each folder there may a combination of files and more folders. In particular, there is some folder that your python script is in, and (for our purposes) that will serve as the starting location that your code looks for files in. So here an example of some files somewhere in a file system (explained below): CICS 110 |-- about.txt |-- notes | |-- lecture_01.txt |-- sandbox &lt;-- ** HERE ** |-- files | |-- bar | | |-- baz.txt | |-- foo.txt |-- main.py |-- words.txt  What does all this mean: There is a CICS 110 folder.Within that CICS 110 folder is the file about.txt and the folders notes and sandbox.Within that notes folder is the file lecture_01.txt.That sandbox folder is the open project in VSCode, for the purposes of this example.Within that sandbox folder are the files main.py (our script) and words.txt and the folder files.Within that files folder is the file foo.txt and the folder bar.Within that bar folder is the file baz.txt. [Example from earlier with words.txt] So if we wanted main.py to just read and print the contents of the file words.txt, we just do that as before: with open(&quot;words.txt&quot;, &quot;r&quot;) as read_file: contents = read_file.read() print(contents)  "},{"title":"Children​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#children","content":"Running example for reference: CICS 110 |-- about.txt |-- notes | |-- lecture_01.txt |-- sandbox &lt;-- ** HERE ** |-- files | |-- bar | | |-- baz.txt | |-- foo.txt |-- main.py |-- words.txt  What if we wanted main.py to open foo.txt? We might try this: with open(&quot;foo.txt&quot;, &quot;r&quot;) as read_file: # ERROR contents = read_file.read() print(contents)  This throws an error indicating the file doesn't exist.main.py is going to look for a file named foo.txt in it's current directory (sandbox), which indeed does not have a foo.txt file. We need to say &quot;go to the files folder, and get the file foo.txt&quot;. We write that as files/foo.txt. with open(&quot;files/foo.txt&quot;, &quot;r&quot;) as read_file: contents = read_file.read() print(contents)  And these slashes can be chained. So for instance, &quot;go to files, go to bar, get baz.txt&quot; is files/bar/baz.txt. with open(&quot;files/bar/baz.txt&quot;, &quot;r&quot;) as read_file: contents = read_file.read() print(contents)  "},{"title":"Parent​","type":1,"pageTitle":"File I/O","url":"/main/lectures/Files/Jared#parent","content":"Running example for reference: CICS 110 |-- about.txt |-- notes | |-- lecture_01.txt |-- sandbox &lt;-- ** HERE ** |-- files | |-- bar | | |-- baz.txt | |-- foo.txt |-- main.py |-- words.txt  So we can go down, but what about up? What if we wanted to say &quot;go to CICS 110, get about.txt&quot;. Well, since CICS 110 isn't insandbox we can't quite do that. We can say &quot;go up, get about.txt&quot;. We write that as ../about.txt, where the .. is a special reference for the parent directory. with open(&quot;../about.txt&quot;, &quot;r&quot;) as read_file: contents = read_file.read() print(contents)  Make sure to use ../about.txt, and not ./about.txt. The single dot is a special reference to the current directory (so ./words.txt would be the same file as words.txt). with open(&quot;./words.txt&quot;, &quot;r&quot;) as read_file: contents = read_file.read() print(contents)  And again, chaining is possible. &quot;go up, go to notes, get lecture_01.txt&quot; would be ../notes/lecture_01.txt. with open(&quot;../notes/lecture_01.txt&quot;, &quot;r&quot;) as read_file: contents = read_file.read() print(contents)  "},{"title":"Lec 04 Function Basics","type":0,"sectionRef":"#","url":"/main/lectures/function-basics","content":"","keywords":""},{"title":"Due this week​","type":1,"pageTitle":"Lec 04 Function Basics","url":"/main/lectures/function-basics#due-this-week","content":"ZyBooks 1 Due Thursday (2/16) Covers Week 1 material Quiz Due Thursday (2/16) 9 Questions, Unlimited Attempts Lab Due Friday (2/17) "},{"title":"Slides​","type":1,"pageTitle":"Lec 04 Function Basics","url":"/main/lectures/function-basics#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Additional Resources​","type":1,"pageTitle":"Lec 04 Function Basics","url":"/main/lectures/function-basics#additional-resources","content":"Arithmetic in Python (Socratica) "},{"title":"Functions","type":0,"sectionRef":"#","url":"/main/lectures/function-basics/Jared","content":"","keywords":""},{"title":"Black Box Functions​","type":1,"pageTitle":"Functions","url":"/main/lectures/function-basics/Jared#black-box-functions","content":"There are several ways to look at what functions are. Up to now, we have been treating functions as &quot;black boxes&quot;, meaning we view them as a sort of magical device that we feed input to and that we get output from, without needing to know how they work or what's happening inside. In the view, we care about things that interact with the function: input/parameters: what goes in to the function. Syntactically, we put inputs in between the parentheses that come after the function name. E.g., 314.159 is the input in round(314.159).output/return: This is what the function call evaluates to, or gives back. E.g., round(314.159) outputs 314. So x = round(314.159)would evaluate to x = 314.side effects: Functions in programming language may affect or interact with the broader world in some way. For instance: printing to a terminal. Here is how that view relates so some functions we've already seen. int(42.67): function: int().input: 42.67, of type float.side effects: none.output: 42, of type int. print(&quot;Hello, World&quot;): function: print().input: &quot;Hello, World&quot;, a str.side effects: prints Hello, World to terminal.Note: this is &quot;output&quot; in program sense, but not in the within-program function sense. After all, if I had x = print(&quot;Hello, World&quot;), what would print(&quot;Hello, World&quot;)evaluate to? What would be store in x? That's the function output.output: None, of type NoneType. We'll come back to this, but for now, think of None as a special object that represents nothing. In essence, the function returns nothing, or doesn't return anything. input(&quot;Please enter a number: &quot;): function: input().input: &quot;Please enter a number: &quot;, a str. This is the input in the function sense.side effects: prints &quot;Please enter a number: &quot; to terminal. Blocks the program until we enter something (input in the user-program-interaction sense). Say we enter 314.output: &quot;314&quot; (what we typed in), of type str. "},{"title":"Hello, You, One More Time​","type":1,"pageTitle":"Functions","url":"/main/lectures/function-basics/Jared#hello-you-one-more-time","content":"With all this, let us once more behold our second program: Hello_You your_name = input(&quot;Please enter your name: &quot;) print(&quot;Hello, &quot; + your_name)  With out understanding of functions as black boxes, I want to untangle two interwoven notions of input and output in this program. There is input (parameters) and output (returns) in the function sense. But there is also input and output in the user-program-interaction sense. What happens on each line: Run your_name = input(&quot;Please enter your name: &quot;) Evaluate input(&quot;Please enter your name: &quot;) function name: input()function input/parameter: &quot;Please enter your name: &quot;, of type strfunction side effects: prints Please enter your name: to Terminal (user-interaction output)has program wait until we enter user-interaction inputreads input, say Jared function output/return: &quot;Jared&quot;, of type str Line effectively reduces to your_name = &quot;Jared&quot;Assign your_name to be &quot;Jared&quot;, of type str Run print(&quot;Hello, &quot; + your_name) Evaluate &quot;Hello, &quot; + your_name Lookup your_name, currently &quot;Jared&quot;, of type strReduces to &quot;Hello, &quot; + &quot;Jared&quot;Evaluates to &quot;Hello, Jared&quot;, of type str Line effectively reduces to print(&quot;Hello, Jared&quot;)Evaluate print(&quot;Hello, Jared&quot;) function name: print()function input/parameter: &quot;Hello, Jared&quot;, of type strfunction side effects: prints Hello, Jared to Terminal (user-interaction output)function output/return: None Line effectively reduces to NoneNothing is done with value None "},{"title":"Functions as Code​","type":1,"pageTitle":"Functions","url":"/main/lectures/function-basics/Jared#functions-as-code","content":"Viewing functions as black boxes is fine for calling them. But there are times we want to build a &quot;black box&quot; that does something like, say, compute the area of a triangle. What functions are, and what we would be making, are reusable pieces of code, named pieces of code that each depend on some parameters (e.g., base and height) and produce some return (e.g., area). "},{"title":"Function Signatures​","type":1,"pageTitle":"Functions","url":"/main/lectures/function-basics/Jared#function-signatures","content":"Function signatures are a condensed way of representing the parameter and return information if a function, which we need to make functions in a bit. For instance: round(number:float) -&gt; int The name of the function, round is the first thing.Then within the parentheses you have the parameters or arguments the function takes in These are each given a name, e.g., numberThese can optionally have expected types, :, then type, e.g., float Then optionally at the end, an -&gt; followed by the output type, e.g., int So a function signature for the area of a triangle function might be:triangle_area(base:float, height:float) -&gt; float. "},{"title":"Making Functions​","type":1,"pageTitle":"Functions","url":"/main/lectures/function-basics/Jared#making-functions","content":"So how do we make a function? First we make what is called the function header, basically saying &quot;I'm making a function&quot;. The header is composed of the keyword def(as in &quot;define&quot;), followed by the signature for the function we want to create, followed by a :. So for the area of a triangle function, this could be def triangle_area(base:float, height:float) -&gt; float: # [Add code here]  Then we want to add code to this function. The actual computation of the area, in this case.Very important: Code that is part of a function needs to be indented, that is how the computer tells it is part of the function. Updating our function: def triangle_area(base:float, height:float) -&gt; float: area = base * height / 2 # [Something is still missing]  But we are still missing something. Remember the black box view of this. This function should take in base and height and give back/return area. We've computed area, but we need a specific keyword to tell the function to return it. This is the return keyword. And so our function becomes: def triangle_area(base:float, height:float) -&gt; float: area = base * height / 2 return area  That last line says have &quot;the function output/return area&quot;. As a final note, we could actually shorten this.return can work on any expression, not just a pure variable. For instance: Triangle_Area def triangle_area(base:float, height:float) -&gt; float: return base * height / 2 # b * h / 2 is evaluated and returned print(triangle_area(3, 6)) print(triangle_area(5, 5))  "},{"title":"None​","type":1,"pageTitle":"Functions","url":"/main/lectures/function-basics/Jared#none","content":"Some functions, like print(), return nothing. Or at least in essence return nothing. However, because the mechanics of python demand they technically return something, they instead return a special object: None, of type NoneType. This thing represents nothing. A function the returns None represents a function that &quot;has no return&quot;. Below are examples of cases where a function returns nothing. Note that while the type is technically NoneType, we still use -&gt; None to indicate no return. The first example case is a function that has no return at all. A practical example of such a function is a function that takes in information and prints it in an aesthetically pleasing manner. No_Return def no_return() -&gt; None: print(&quot;I do not return, thus I return nothing (None)&quot;) ret = no_return() # ret = None print(&quot;no_return() returned: &quot; + str(ret))  The second example case is a function that has just return with nothing after it. There are cases where the return of the function is not important, but you want to use return when ending the flow of execution. We haven't gotten to branching, but something like &quot;if the arguments are illegal in some way, return/abort immediately&quot;. Return_Nothing def return_nothing() -&gt; None: print(&quot;I return nothing, thus I return nothing (None)&quot;) return ret = return_nothing() # ret = None print(&quot;return_nothing() returned: &quot; + str(ret))  The third example case is a function that explicitly has return None in it. This is equivalent to the above, but there may be a case where emphasising that None is being returned makes sense. Return_None def return_none() -&gt; None: print(&quot;I return None, thus I return nothing (None)&quot;) return None ret = return_none() # ret = None print(&quot;return_none() returned: &quot; + str(ret))  The fourth example is mechanically a subset of the third, a function that returns some expression that evaluates to None. I can't offhandedly think of a case where I would want to do this, but the world is big. Maybe a case of returning the result of a helper function, which may itself return None or not, depending on its own success. Return_Eval_None def return_eval_none() -&gt; None: return print(&quot;I return the None returned by print(), thus I return nothing (None)&quot;) ret = return_eval_none() # ret = None print(&quot;return_eval_none() returned: &quot; + str(ret))  "},{"title":"Default Parameters​","type":1,"pageTitle":"Functions","url":"/main/lectures/function-basics/Jared#default-parameters","content":"Normally, if a function has, say, two parameters, then when calling (using) said function, you need to specify exactly that many values. For instance: for the triangle_area() function from earlier,triangle_area(3, 1) would be legal, whereas triangle_area(3) and triangle_area(3, 1, 4) would not. But there is a way in python to have functions with optional parameters that have a default values. So we can make a function for computing the surface area of cube, that optionally takes a length, otherwise, assumes that length is 1. The only real change, is to the signature. A length to surface area function might have the signature: cube_surface_area(length:float) -&gt; float  But we want for cube_surface_area(3) and cube_surface_area()to be legal, with the latter effectively being cube_surface_area(1). We can make that parameter optional with a default by adding =followed by a default value after the parameter name and type: cube_surface_area(length:float=1) -&gt; float  From there it can be used in the body (code) of the function like any other parameter: Cube_Surface_Area def cube_surface_area(length:float=1) -&gt; float: return 6 * length ** 2 print(cube_surface_area(5)) print(cube_surface_area(3)) print(cube_surface_area())  "},{"title":"Variable Scope​","type":1,"pageTitle":"Functions","url":"/main/lectures/function-basics/Jared#variable-scope","content":"Variables can have one of two levels of scope (where they are &quot;visible&quot;): Global: They are visible (can be references from) everywhere.Local: They are visible (can be references from) only within a specific call of a function, and once that function call ends, they are gone. A variable's scope depends on where it is defined via x = [something]. For each level, global and local (not within and within a function), the first time an x = [something] occurs, x is defined to be that something. Print_Global_Locally def print_num() -&gt; None: print(num) num = 2 # defined gloabally print_num() # print(num) # no local num, look-up global num, prints 2  Print_Local_Globally def make_num() -&gt; None: num = 2 make_num() # num = 2 # makes local num # # deleted when function ends print(num) # error, no global num to print  When a variable is used within a function, the function first looks locally, and then globally. So if there is a local x and a global x, then we say the local one will shadow (make effectively invisible to the function) the global one. Shadow_Global def set_num() -&gt; None: num = 3 print(num) num = 5 # global num = 5 set_num() # num = 3 # local num = 3, shadows global # print(num) # looks local first, sees local num, prints 3 print(num) # looks global, prints 5  "},{"title":"Lec 23 GUIs","type":0,"sectionRef":"#","url":"/main/lectures/GUIs","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#assignment-updates","content":"Stuff due soon: HW7 Due 5/15Capstone Project Presentations 5/16 and 5/17 "},{"title":"Slides​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#slides","content":"Section 1, 6Section 2, 3, 4, 5 Download Powerpoint "},{"title":"Resources​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#resources","content":"TKinter DocumentationTKinter TutorialDownload gui.py This code is a simple GUI that displays a label and a button using TKinter Download event.py This code has a button that triggers an event when clicked Download stopwatch.py This code is a stopwatch that counts up when you click the start button Download stopwatch_lap.py This code is a stopwatch that counts up when you click the start button. It also has a lap button that records the current time and displays it in a list "},{"title":"Notes​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#notes","content":""},{"title":"Topics​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#topics","content":"GUIsEventsTKinter "},{"title":"GUIs​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#guis","content":"GUI = Graphical User Interface A GUI is a program that has a window with buttons, text boxes, etc.Example: A web browser is a GUI "},{"title":"TKinter​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#tkinter","content":"TKinter is a Python library for creating GUIsWe can use TKinter to create a GUI We can create a windowWe can add buttons to the windowWe can add text boxes to the windowWe can add other widgets to the window How do we do this? First, we need to import the TKinter libraryThen, we need to create a windowThen, we need to add widgets to the windowFinally, we need to start the main loop The main loop is a loop that runs forever Example: from tkinter import Tk, Label, Button # Create the main window: 400x250 pixels, titled 'My App' window = Tk() window.title(&quot;My App&quot;) window.geometry(&quot;400x250&quot;) button = Button( text=&quot;Click Me!&quot;, # Text to display on the button width=25, # Width height=5, # Height bg=&quot;blue&quot;, # Button color fg=&quot;yellow&quot;, # Text color ) # adds the button to the window button.place(x=180, y=100) label = Label( text=&quot;Hello World!&quot;, # Text to display font=(&quot;Arial&quot;, 24, &quot;bold&quot;) # Font (font, size, style) ) # Adds the label to the window label.place(x=180, y=50) # Starts the GUI window.mainloop()  "},{"title":"Events​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#events","content":"On a GUI, when you click a button, something happens Currently, we write code that immediately executesHow do we write code that executes when something happens? We can do this with events An event is something that happens Clicking a button is an eventPressing a key is an event We can write code that executes when an event happens The code that executes when an event happens is called an event handlerExamples: Code that executes when a button is clickedCode that executes when a key is pressed How do we do this? First, we need an way to create an event Example: A button that can be clicked Then, we need to write code that executes when the event happens This is the event handlerExample: A print statement that prints 'Button clicked' Example: from tkinter import Tk, Button # Create the main window: 400x250 pixels, titled 'A Button', white background ws = Tk() ws.geometry('400x250') ws.title('A Button') ws.config(bg='#ffffff') # A function that prints 'Button clicked' to the console def button_clicked(): print('Button clicked') # Create a button that calls the button_clicked function when clicked # In this case, the event of clicking the button is handled by the # button_clicked function btn = Button(ws, text='Click Me!', command=button_clicked) # Place the button in the main window btn.place(x=180, y=100) # Starts the GUI and listens for events ws.mainloop()  "},{"title":"Stopwatch​","type":1,"pageTitle":"Lec 23 GUIs","url":"/main/lectures/GUIs#stopwatch","content":"We can use events to create a stopwatch A stopwatch is a program that counts the number of seconds that have passedIt has a start button, a stop button, and a reset buttonWhen the start button is clicked, the stopwatch starts countingWhen the stop button is clicked, the stopwatch stops countingWhen the reset button is clicked, the stopwatch resets to 0 Example: from tkinter import Tk, Label, Button class Stopwatch: &quot;&quot;&quot;A simple stopwatch GUI app.&quot;&quot;&quot; def __init__(self): # Sets the background color of the main window (to white) BACKGROUND = '#ffffff' # Create the main window: 400x250 pixels, titled 'Stopwatch' ws = Tk() ws.geometry('400x250') ws.title('Stopwatch') ws.config(bg=BACKGROUND) ws.resizable(False, False) # Lbl is the label that displays the count lbl = Label(ws, text=&quot;00:00&quot;, fg=&quot;black&quot;, bg=BACKGROUND, font=&quot;Verdana 40 bold&quot;) # start_btn is the button that starts the stopwatch start_btn = Button(ws, text='Start', width=15, command=self.StartTimer) # stop_btn is the button that stops the stopwatch stop_btn = Button(ws, text='Stop', width=15, state='disabled', command=self.StopTimer) # reset_btn is the button that resets the stopwatch reset_btn = Button(ws, text='Reset', width=15, state='disabled', command=self.ResetTimer) # Moves the buttons and label to the correct position lbl.place(x=120, y=60) start_btn.place(x=30, y=200) stop_btn.place(x=150, y=200) reset_btn.place(x=270, y=200) # Count keeps track of the time elapsed self.count = 0 # Running keeps track of if the stopwatch is running self.running = None # Elements in the GUI self.ws = ws self.lbl = lbl self.start_btn = start_btn self.stop_btn = stop_btn self.reset_btn = reset_btn # Starts the GUI ws.mainloop() def Count(self): &quot;&quot;&quot;Adds one second to the count and updates the label. Runs every second.&quot;&quot;&quot; # If the stopwatch is not running, don't do anything if self.running is None: return # Updates the count and label self.count += 1 secs = int(self.count % 60) mins = int(self.count // 60) self.lbl['text'] = f'{mins:02}:{secs:02}' # Sets an event to call Count again after 1 second self.running = self.ws.after(1000, self.Count) def StartTimer(self): &quot;&quot;&quot;Starts the stopwatch.&quot;&quot;&quot; # Creates an event to call Count after 1 second self.running = self.ws.after(1000, self.Count) # Enables and disables the correct buttons self.start_btn['state'] = 'disabled' self.stop_btn['state'] = 'normal' self.reset_btn['state'] = 'normal' def StopTimer(self): &quot;&quot;&quot;Stops the stopwatch. Does not reset the count.&quot;&quot;&quot; # Cancels the event calling Count self.running = self.ws.after_cancel(self.running) # Enables and disables the correct buttons self.start_btn['state'] = 'normal' self.stop_btn['state'] = 'disabled' self.reset_btn['state'] = 'normal' def ResetTimer(self): &quot;&quot;&quot;Resets the stopwatch. Also stops the stopwatch.&quot;&quot;&quot; # Cancels the event calling Count and resets the count self.running = None self.count = 0 # Resets the label and enables/disables the correct buttons self.lbl['text'] = '00:00' self.start_btn['state'] = 'normal' self.stop_btn['state'] = 'disabled' self.reset_btn['state'] = 'disabled' # Creates the stopwatch Stopwatch()  "},{"title":"Events and GUIs","type":0,"sectionRef":"#","url":"/main/lectures/GUIs/Jared","content":"","keywords":""},{"title":"Events​","type":1,"pageTitle":"Events and GUIs","url":"/main/lectures/GUIs/Jared#events","content":"Consider the following snippet of code. Run it, interact with it a bit, and feel how it responds/reacts to you. while True: inp = input(&quot;&gt;&gt;&gt; &quot;) if inp == &quot;quit&quot;: break print(f&quot;Text: {inp}\\n&quot;)  When we, not as programmers, but as casual users, interact with programs; there is this abstract view of that interaction as &quot;us doing something, and the program reacting/responding&quot;. For example: In that above program: we enter some text, and then it is repeated back to us.In video games: we press buttons on a controller, the character moves.My writing this in a text-editor: I press a butting on my keyboard, a letter appears in my text editor.We swipe a mouse or a finger across a track pad, a cursor moves. There are so many cases where a computer/program waits for us to do something, we do something, and the computer/program responds/reacts. We talk about the &quot;doing something&quot; as an eventWe talk about the reacting as handling the event,And we talk about the process of doing this over-and-over as an event loop. And this outlook of &quot;we do a thing, the computer/program reacts&quot; is the view we want to have in mind when trying to think about graphic user interfaces(GUIs). "},{"title":"GUIs​","type":1,"pageTitle":"Events and GUIs","url":"/main/lectures/GUIs/Jared#guis","content":"A graphic user interface (GUI) is a more aesthetically pleasing (graphic) presentation of the program for the user to interact with (an interface). After all, when we use programs in our everyday life, we don't do it through a terminal, we have some sort of GUI presented to us. GUIs are essential for a more user-friendly presentation of the program, but they are something of a dragon for us to wrestle with and to get to a pleasing state. We'll look at a sometimes-built-in Python module for making primitive GUIs, tkinter, to get the of what making a GUI can look like. We'll give our GUI some simple functionality, bearing in mind the notion that ultimately we want the user to be able to do something/trigger an event (e.g., click a button in the GUI), and the program to react to/handle that event (e.g., increase a counter). "},{"title":"tkinter module​","type":1,"pageTitle":"Events and GUIs","url":"/main/lectures/GUIs/Jared#tkinter-module","content":"We'll be working with Python's tkinter module. So let's start where we always should, with the smallest possible working example. GUIs have a notion of windows, a displayed region presenting information and functionality for the program. The front-end we like to say (as opposed to the back-end or guts of the program/app). So the most minimal GUI would be an empty window. Code for that will be: from tkinter import Tk window = Tk() window.mainloop()  This code imports the Tk class, which is then used to make a window. It then calls the mainloop() method, which displays/pops-up the window. There is a lot that can be done to customise the window (far more than I know, see official documentation or deeper guides). But for our purposes, we'll just give it a title and set the size. from tkinter import Tk window = Tk() window.title(&quot;My App&quot;) window.geometry(&quot;640x480&quot;) window.mainloop()  The title() method sets the title, note the &quot;My App&quot; name on the title bar. The geometry(&quot;640x480&quot;) method call sets the size of the window (excluding the title bar). It seems to take in a string of the form &quot;WIDTH_IN_PIXELSxHEGHT_IN_PIXELS&quot;.Pixels are a sort of &quot;smallest element of an image&quot;. "},{"title":"Labels​","type":1,"pageTitle":"Events and GUIs","url":"/main/lectures/GUIs/Jared#labels","content":"Next step, let's display some information. For the sake of making small working examples, let's go for a &quot;Hello, World!&quot; in GUI land. In tkinter world, labels seem to be the text-based entity. So we can make and place a label: from tkinter import Tk, Label window = Tk() window.title(&quot;My App&quot;) window.geometry(&quot;640x480&quot;) label = Label(text=&quot;Hello World!&quot;, font=(&quot;Helvetica&quot;, 64, &quot;bold&quot;)) label.place(x=320, y=100, anchor=&quot;center&quot;) window.mainloop()  The label constructor can take many things, but we use: text, the text we want displayedfont, information about the font of the text being displayed That defines the label, but we still need to place it in our window. This is done with the place() method. The coordinate system needs some explanation. In the world of graphics, it is common to see the upper-left corner be considered (0,0)(0,0)(0,0) (the origin). This intuition comes from what it would look like if you printed a 2D n-by-m list: lst[0][0] would be in upper-leftlst[0][m-1] would be in upper-rightlst[n-1][0] would be in lower-leftlst[n-1][m-1] would be in lower-right So placing at x=320, y=100 is placing at 320 pixels from the left, and 100 pixels down from the top. And this is where the anchor (in this case the centre) of the label is placed (the default anchor is upper-left corner of a rectangle around the text). "},{"title":"Buttons​","type":1,"pageTitle":"Events and GUIs","url":"/main/lectures/GUIs/Jared#buttons","content":"Finally, we can start trying to make this application something the user can interact with. We'll start by adding a button, the basics of which parallel adding the label. The eventual goal of the button will be to increase a counter. So we'll create something to track that counter (I'll explain why a dictionary later), and change the label accordingly. from tkinter import Tk, Label, Button window = Tk() window.title(&quot;My App&quot;) window.geometry(&quot;640x480&quot;) state = {&quot;count&quot;: 0} label = Label(text=f&quot;Count: {state['count']}&quot;, font=(&quot;Helvetica&quot;, 64, &quot;bold&quot;)) label.place(x=320, y=100, anchor=&quot;center&quot;) button = Button(text=&quot;Increase Count&quot;, font=(&quot;Helvetica&quot;, 32)) button.place(x=320, y=300, anchor=&quot;center&quot;) window.mainloop()  Now, The button exists and is clickable, but it doesn't actually do anything. Considering the event-based worldview, clicking the button is an event, and what we need to do is set an event handler for that event. We do this by defining a function that is to be run when the button is clicked and then specifying that function as the event handler in the Button() constructor. from tkinter import Tk, Label, Button window = Tk() window.title(&quot;My App&quot;) window.geometry(&quot;640x480&quot;) state = {&quot;count&quot;: 0} label = Label(text=f&quot;Count: {state['count']}&quot;, font=(&quot;Helvetica&quot;, 64, &quot;bold&quot;)) label.place(x=320, y=100, anchor=&quot;center&quot;) def increase_count(): state['count'] += 1 label[&quot;text&quot;] = f&quot;Count: {state['count']}&quot; button = Button(text=&quot;Increase Count&quot;, font=(&quot;Helvetica&quot;, 32), command=increase_count) button.place(x=320, y=300, anchor=&quot;center&quot;) window.mainloop()  The reason that a state dictionary was used was so that fields of it (e.g., count) could be edited in the increase_count() function without risk of shadowing the variable. But there it is, a sort of minimal GUI application, that can handle events from a user and can display information to that user. "},{"title":"Lec 19 Inheritance and Overloading","type":0,"sectionRef":"#","url":"/main/lectures/Inheritance_Overloading","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 19 Inheritance and Overloading","url":"/main/lectures/Inheritance_Overloading#assignment-updates","content":"Stuff due soon: HW6 Due Wednesday (Files)Participation due ThursdayQuiz due ThursdayLab on FridayCapstone Proposal Due Friday "},{"title":"Slides​","type":1,"pageTitle":"Lec 19 Inheritance and Overloading","url":"/main/lectures/Inheritance_Overloading#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Activities​","type":1,"pageTitle":"Lec 19 Inheritance and Overloading","url":"/main/lectures/Inheritance_Overloading#activities","content":""},{"title":"Animal Classes Code:​","type":1,"pageTitle":"Lec 19 Inheritance and Overloading","url":"/main/lectures/Inheritance_Overloading#animal-classes-code","content":"Download: Animals.py Animals.py class Animal: def __init__(self, age, height): self.age = age self.height = height def eat(self): print(&quot;I am eating&quot;) def sleep(self): print(&quot;ZzzZzzzZzz&quot;) class Dog(Animal): def __init__(self, age, height, breed) -&gt; None: super().__init__(age, height) self.breed = breed def bark(self): print(&quot;Woof!&quot;)  "},{"title":"Overloading Code:​","type":1,"pageTitle":"Lec 19 Inheritance and Overloading","url":"/main/lectures/Inheritance_Overloading#overloading-code","content":"Download: Overloading.py Overloading.py class Currency: def __init__(self, dollars, cents): self.dollars = dollars self.cents = cents def __str__(self): return f&quot;${self.dollars}.{self.cents}&quot; def __add__(self, other): dollars = self.dollars + other.dollars cents = self.cents + other.cents if cents &gt;= 100: dollars += 1 cents -= 100 return Currency(dollars, cents) currency_1 = Currency(5, 50) # $5.50 currency_2 = Currency(1, 75) # $1.75 total = currency_1 + currency_2 print(total) # $7.25  "},{"title":"Lec 01 Course Introduction","type":0,"sectionRef":"#","url":"/main/lectures/introduction","content":"","keywords":""},{"title":"Reading / Participation​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#reading--participation","content":"Read Chapter 1 Introduction to Programming in CICS 110 - Foundations of Programming on zyBooks (note, you will first need to purchase the book)Complete Participation 1 in zyBooks "},{"title":"Slides​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Additional Resources​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#additional-resources","content":"Learn Python with Socratica (Socratica)Hello World in Python (Socratica) "},{"title":"Exploring Code Activity​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#exploring-code-activity","content":""},{"title":"Guess the Number​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#guess-the-number","content":"Try to guess the hidden number. The number changes every minute. Guess_the_number from datetime import datetime now = datetime.now() cur_time = now.strftime(&quot;%I:%M %p&quot;) num = ((now.hour * 60 + now.minute)*17 + 27) % 100 print(&quot;Try to guess the number between 0 and 100&quot;) print(&quot;The number changes every minute&quot;) print(f&quot;This is the number for: {cur_time}&quot;) guess = int(input(&quot;Enter a number: &quot;)) if guess == num: print(&quot;You guessed it!&quot;) elif guess &gt; num: print(&quot;Too high&quot;) else: print(&quot;Too low&quot;)  "},{"title":"Spirograph​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#spirograph","content":"This piece of code generates a Spirograph. a spirograph is a drawing that is formed by placing a pen in a gear, and then rolling that gear around inside a larger gear. The pen traces out a curve that is the shape of the gear teeth.  Spirograph from turtle import * from math import pi, sin, cos, lcm R = 100 # Radius of the outer (larger) gear r = 60 # Radius of the inner (smaller) gear d = 100 steps = 100 # Number of steps to take (increase for more detail) d_theta = (1 / steps) * 2 * pi * lcm(R, r) / R theta = 0 hideturtle() color(&quot;blue&quot;) penup() goto(R - r + d, 0) pendown() for i in range(steps): theta += d_theta x = (R - r) * cos(theta) + d * cos(theta * (R - r) / r) y = (R - r) * sin(theta) - d * sin(theta * (R - r) / r) goto(x, y)  "},{"title":"Cafe Wall Illusion​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#cafe-wall-illusion","content":"The Cafe Wall illusion has lines that look like they are slanted, but they are actually straight. Take a look! Cafe_Wall_Illusion from turtle import * from math import sin def move(x,y): penup() goto(x,y) setheading(0) pendown() def fill_rect(width, height, color): fillcolor(color) for fun in [begin_fill, end_fill]: fun() for dist in 2 * [width,height]: forward(dist) left(90) def fill_row(x, y, width, height, offset, rects): move(x,y) forward(width - offset) fill_rect(width, height, &quot;black&quot;) for _ in range(rects-1): forward(2 * width) fill_rect(width, height, &quot;black&quot;) forward(width + offset) hideturtle() speed(11) color(&quot;grey&quot;) pensize(1) xmin = -250 xmax = 250 ymin = -250 ymax = 250 rows = 25 cols = 10 move(xmin,ymin) fill_rect(xmax-xmin,ymax-ymin,&quot;white&quot;) for i in range(rows): dx = (xmax-xmin) / (2*cols) dy = (ymax-ymin) / rows y0 = ymin + i * dy offset = dx / 2 + (dx / 5) * sin((10 / cols) * i) fill_row(xmin, y0, dx, dy, offset, cols) done()  "},{"title":"Koch Snowflake​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#koch-snowflake","content":"The Koch Snowflake is a fractal that is formed by starting with an equilateral triangle, and then repeatedly replacing the middle of each side with a smaller equilateral triangle. Try playing with the length and depth! Koch_Snowflake from turtle import * from math import sin def koch_forward(distance, depth): if depth == 0: forward(distance) else: koch_forward(distance/3, depth-1) right(60) koch_forward(distance/3, depth-1) left(120) koch_forward(distance/3, depth-1) right(60) koch_forward(distance/3, depth-1) # Play with these! length = 250 # Length of a side depth = 4 # Level of recursion hideturtle() speed(8) color('blue', 'white') penup() goto(- length / 2, - 3**(1/2) * length / 6) pendown() begin_fill() for _ in range(3): koch_forward(length, depth) left(120) end_fill() done()  "},{"title":"Lec 22 Lambdas","type":0,"sectionRef":"#","url":"/main/lectures/Lambdas","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 22 Lambdas","url":"/main/lectures/Lambdas#assignment-updates","content":"Stuff due soon: HW7 Due 5/15Capstone Project Presentations 5/16 and 5/17 "},{"title":"Slides​","type":1,"pageTitle":"Lec 22 Lambdas","url":"/main/lectures/Lambdas#slides","content":"Section 1, 6Section 2, 3, 4, 5 Download Powerpoint "},{"title":"Notes​","type":1,"pageTitle":"Lec 22 Lambdas","url":"/main/lectures/Lambdas#notes","content":""},{"title":"Topics​","type":1,"pageTitle":"Lec 22 Lambdas","url":"/main/lectures/Lambdas#topics","content":"LambdasMap (top level)Filter (top level) "},{"title":"Map​","type":1,"pageTitle":"Lec 22 Lambdas","url":"/main/lectures/Lambdas#map","content":"What we know: To map over a collection is to apply a function to each element in the collectionThe result of the map is a new collection of the same size as the originalThe new collection is the result of applying the function to each element in the original collectionExample: (Applies square function to each element in the list) def square(x): return x * x my_list = [1, 2, 3, 4, 5] map_result = [] for num in my_list: map_result.append(square(num)) This is kindof bulky, and we can shrink it with a list comprehension: def square(x): return x * x my_list = [1, 2, 3, 4, 5] map_result = [square(num) for num in my_list] Another way to write this is to use the map() function map() takes two arguments: a function and a collectionExample: def square(x): return x * x my_list = [1, 2, 3, 4, 5] map_result = map(square, my_list) It returns a map object, to get a list we need to cast it to a list def square(x): return x * x my_list = [1, 2, 3, 4, 5] map_result = list(map(square, my_list))  "},{"title":"Lambdas​","type":1,"pageTitle":"Lec 22 Lambdas","url":"/main/lectures/Lambdas#lambdas","content":"The Map function takes a function as its first argument We currently have to define a function and then pass it inBut, is there a way to define a function and pass it in without having to define it above?Yes, we can use a lambda function A lambda function is an anonymous function anonymous = It is a function without a nameIt is a function that is defined inlineExample: my_list = [1, 2, 3, 4, 5] map_result = list(map(lambda x: x * x, my_list)) How do you write it? First, you write the keyword lambdaSecond, you write the arguments: lambda x, y, z: (followed by a colon)Finally, you write the body of the function: lambda x, y, z: x + y + z The body of the function is a single expressionThe result of the expression is the return value of the function Example: (lambda function that takes two arguments and returns their sum) lambda x, y: x + y Activity: Write a lambda function that takes a number and returns it doubled Answer: lambda x: x * 2 Why use a lambda function? It's more readable (sometimes)Can be defined inline (no need to define it above) Activity: Use map() and a lambda to map each number in a list to that number plus 1 Answer: list(map(lambda x: x + 1, my_list)) "},{"title":"Filter​","type":1,"pageTitle":"Lec 22 Lambdas","url":"/main/lectures/Lambdas#filter","content":"Like map, filter is a top level function It takes a function and a collectionIt returns a new collectionThe new collection is the result of applying the function to each element in the original collection. If the function returns True, the element is included in the new collection. If the function returns False, the element is not included in the new collection Example: (Filters out all even numbers) my_list = [1, 2, 3, 4, 5] filter_result = list(filter(lambda x: x % 2 == 1, my_list))  NOTE: Filter returns a filter object (like map), so we need to cast it to a listActivity: Use filter() and a lambda to filter out all numbers greater than 3 Answer: list(filter(lambda x: x &lt;= 3, my_list)) "},{"title":"Layering Map and Filter​","type":1,"pageTitle":"Lec 22 Lambdas","url":"/main/lectures/Lambdas#layering-map-and-filter","content":"We can layer map and filter to do more complex operationsExample: (Filters out all even numbers and squares the remaining numbers) my_list = [1, 2, 3, 4, 5] res = list(map(lambda x: x * x, filter(lambda x: x % 2 == 1, my_list)))  This can get disgusting... so we can use list comprehensions insteadExample: (Filters out all even numbers and squares the remaining numbers) my_list = [1, 2, 3, 4, 5] res = [x * x for x in my_list if x % 2 == 1]  Depending on the situation, one may be more readable than the otherActivity: Given a list of numbers, get all numbers greater than 3 and make them negative Answer: [x * -1 for x in my_list if x &gt; 3]Answer: list(map(lambda x: x * -1, filter(lambda x: x &gt; 3, my_list)))Answer: my_list = [1, 2, 3, 4, 5] res = [] for num in my_list: if num &gt; 3: res.append(num * -1) All of these are valid, but some are more readable than others. Pick whichever one you like best! (but be careful of readability) "},{"title":"Lec 06 Lists, Tuples, Sets","type":0,"sectionRef":"#","url":"/main/lectures/lists-tuples-strings","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 06 Lists, Tuples, Sets","url":"/main/lectures/lists-tuples-strings#assignment-updates","content":"Stuff due this week: Participation 3 Due Thursday 3/2Quiz 4: Due Thursday 3/2HW 2: Due Friday 3/3Lab 4: Due Friday 3/3 Stuff due next week: (Presumably) Participation 4 Due Thursday 3/9(Presumably) Quiz 5: Due Thursday 3/9HW 3: Due Friday 3/10Lab 5: Due Friday 3/10 "},{"title":"Slides​","type":1,"pageTitle":"Lec 06 Lists, Tuples, Sets","url":"/main/lectures/lists-tuples-strings#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"The Syllabus, and Me, but Mostly the Syllabus","type":0,"sectionRef":"#","url":"/main/lectures/introduction/Jared","content":"","keywords":""},{"title":"Who am I?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#who-am-i","content":"My name is Jared Yeager. I'm a computer science graduate student here at UMass, so any level of formality from &quot;Jared&quot; to &quot;Professor Yeager&quot; is fine by me (although since I don't have a PhD, I'm not sure I can claim the &quot;Professor&quot; title). Formality and hierarchy based on age starts to blur and melt down a bit as you get older. I have TA-ed computer science classes for several semesters, but this is my first time TO-ing and first time with CICS 110. Aside: Asking Questions This is my first time teaching a truly introductory class. It has also been almost a decade since I first took a programming class. This is all to say, I don't remember clearly what it is like to be in your shoes. There may be some things that have become natural to me that I don't realise are unnatural to you. So please, ask questions. Asking questions and making sure to understand the answer well enough that you could explain it your past self is a really powerful learning technique. "},{"title":"Who are .. We?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#who-are--we","content":"We have a big team here, so check them out Mentioning anyone specifically other than Tim Richards, our Course Overmind, would be playing favourites. "},{"title":"What is this Class?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#what-is-this-class","content":"CICS 110: Introduction to Programming (I think). If that's not the name, then maybe it should be, because that's what we're teaching. The goal of the class is to teach you enough about the basic/fundamental mechanics of programming that you are prepared for future classes; andif you come upon some problem in the future that writing a small program could help with, you have the knowledge to try and do that. Aside: Concepts, not Syntax I want to emphasise that this class is an introduction to programming. We use python, but many of the concepts we learn about (e.g. variables, branching, looping) exist in almost every mainstream language. Your goal should be to internalise those concepts themselves. If you need to look up the syntax for a specific language, that's fine. As you see more languages, you'll find that specific syntax of a given language may be hard to remember. But knowing the concepts helps you look up whatever gaps you need to fill. "},{"title":"Syllabus​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#syllabus","content":"caution The syllabus is somewhat under construction. The full Syllabus is available here, but some specifics "},{"title":"Assignment Types​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#assignment-types","content":"Homework (40%): These are roughly weekly to bi-weekly programming exercises.Due by the end of WednesdaysWeekly Quizzes (10%): These are online quizzes on Moodle. They are untimed and can be attempted as many times as you like.Due by the end of ThursdaysLabs (20%): Activities to be done in lab/discussion section that further explore a topic or introduce something that might be useful to know. Due by the end of FridayszyBooks (10%): The online textbook has some exercises in it that count toward participation grade.[TODO: NEED DUE DATES]Capstone Project (20%): A more open ended final project.Due the last day of class All homework assignments and labs (except for the first lab) can be worked on in groups of up to 4. When submitting the assignment, only one person in the group should submit and they should note the people they worked with. There is a way to select partners on Gradescope (our auto-grader submission platform). "},{"title":"Tools​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#tools","content":"This Website, Itself: We post announcements, lectures, HW assignments, and labs here.Moodle: Links to various other resources reside here, but the big thing is that the weekly quizzes are here.Gradescope: Our auto-grader of choice. This is where you submit all homework assignments and labs for grading.Echo360: Lectures are recorded and posted here. Links to respective lecturers on MoodlePiazza: This is a website for students to ask questions on.zyBooks: This an interactive textbook used for this class. "},{"title":"Grading​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#grading","content":"One of our goals in this course is focussing on learning as much as possible. To that end, the grading system is simplified into a 5-point scale as much as possible: 4: Exceeding Standards, Consistently exceeds expectations for skills and understanding3: Meeting Standards, Consistently meets expectations for skills and understanding2: Approaching Standards, Meets some expectations for skills and understanding1: Below Standards, Meets few expectations for skills and understanding0: No Submissions, Did not submit assignment Aside: Learning vs Grades When you take a class, you have two goals: Learn the material.Get a good grade. Learning the material is necessary to be able to do things with the material in the future. Grades are what people use as a metric of how well someone knows the material. They are related, but they are not the same thing. Given how fundamental the material in this course is, we want people to be able to dedicate their time and energy to actually learning the material; not have it siphoned away by the extra concerns imposed by optimising grades. So we've simplified the grading scale to hopefully have less of a nagging effect of the sub-conscious, and we've made it so that assignments can be retried until understanding is achieved. However, this puts a burden of trust/responsibility on you. There will be cases where it is easy enough to stumble upon a solution.Even is you happen upon a solution, if you don't understand why it works, you should still ask. Learning and understanding should be the goals. It would probably be reasonably easy to cheat in this class. But because this material is so foundational, if you do things without really understanding the solutions, then you are setting yourself up for pain down the line. Getting stuck, then getting unstuck, and understanding what the issue was enough to explain it to your past self, is one of the best ways of really learning something. Try not to cheat yourself out of that experience. "},{"title":"Late Submissions and Token System​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#late-submissions-and-token-system","content":"caution The token system is undergoing some renovations. Tokens are asymmetric time condensed into currency by modern science: You start with 3.You get one for every [TODO: clarify what assignment types qualify] submitted early/on-time. You can hold a total of 5.You can spend 1 token for one day of extension for [TODO: clarify what]. This only works on [TODO: clarify what]You can buy a maximum of 3 days of extension for an assignmentYou must fill out this form to use/spend tokens Remaining token and the end of the semester  "},{"title":"Programming in this Class​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#programming-in-this-class","content":"Aside: What is Programming Imagine we have some task we want accomplished, we have our own human languages that we can articulate that in (e.g., &quot;go forward, turn left at the next light ...&quot;). Computers similarly, have a language of instructions that they understand (e.g., &quot;83 c0 11&quot; (&quot;add eax, 17&quot;)). Human language is too vague for computers to understand. And computer language is ... I mean, look at it. Programming languages are a middle ground. They possess the rigour necessary for a computer to understand them, but also possess enough of the trappings of human languages to be a little more intuitive to us. Programming is thus the act of coming up with instructions for a task and translating those instructions from a human language to programming language. This translated set of instructions is what we call a program. Once that is done, the computer is able to translate (or compile) the program the rest of the way to its own language. "},{"title":"Python​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#python","content":"The programming language we choose to use for this class is called Python. It is &quot;scripting language&quot;, meaning you can start coding with less overhead.It has a lot of build-in features that are very useful.It has a lot of useful libraries that have been developed. "},{"title":"VSCode​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#vscode","content":"VSCode is our editor of choice. It is wildly used and has a number of useful extensions. "},{"title":"What is a program?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#what-is-a-program","content":"A sequence of instructions to accomplish some task. These instructions are very sequential, done one-after-another, and often the order is very important. This bears a resemblance to things like recipes, instructions on how to drive somewhere, or instructions on how to build something (lego sets, Ikea furniture, etc.). You can see how a recipe below can have a natural correspondence to something program-like. The step-by-step nature being the key detail. The difference is that the program needs very explicit form and information. A recipe: 1. Mix flower, salt, sugar, and yeast 2. Add water and stir together 3. Knead dough for 5-10 minutes 4. Put it in a warm place 5. Bake at 180 degrees for 30 minutes 6. Woohoo!!  A pseudo-program: 1. mix(&quot;flower&quot;, &quot;salt&quot;, &quot;sugar&quot;, &quot;yeast&quot;) 2. add(&quot;water&quot;) 3. stir() 4. knead(random.randint(5,10)) 5. move_to_warm_place() 6. bake(180, 30) 7. print(&quot;Woohoo!!&quot;)  "},{"title":"What is a computer?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#what-is-a-computer","content":"That's an almost philosophical question. But for the sake of this class, let us say that a computer running a program has 5 parts: Processor: The part of the computer that computes. The CPU (central processing unit), generally.Instructions: This is what tells the computer what to compute. This is our code.Memory: This is the metaphoric scratch paper that the computer tracks it's work on. RAM (random access memory) is a classic example.Input: Anything we give the computer: clicking on a button, typing on a keyboard, entering text when prompted, etc.Output: Anything the computer gives us: displays on a monitor, sounds, text it prints to a terminal, etc. For example, a game console running a video-game: Processor: CPU and GPU (graphics processing unit), I suppose.Instructions: The game's code.Memory: RAM.Input: Our button presses on a controller.Output: The displayed game and sound. "},{"title":"Hello, World​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#hello-world","content":"Let's take a look at that model withcertain famous program: Hello_World print(&quot;Hello, World&quot;)  Run this program to see what it does (click the green button in the upper right). note You do not need to understand the mechanics of what is happening at this point. Merely observing Hello, World is displayed by running this is sufficient to apply the model. So what's happing with each component of the model for a computer running this program? The processor is still the CPU that is processing the lines of code.The instructions are just print(&quot;Hello, World&quot;).The output is the printed Hello, World.The input ... well, there is no input used here.The memory ... well, it's used in really technical ways, but not really too relevant here. As it turns out, not every part of of this model absolutely has to be used. "},{"title":"Hello, You​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#hello-you","content":"Let's make it just a little more interesting: Hello_You # Receives your name from the input, # Then stores it in the memory (with the label 'your_name') your_name = input(&quot;Enter your name&quot;) # The processor adds &quot;Hello &quot; in front of your name # Finally, the processor sends the result to the output print(&quot;Hello, &quot; + your_name)  First of all, these lines starting with # are called comments, the computer ignores them. They exist for the use of humans reading the code. Run this program to see what it does. note You do not need to understand the mechanics of what is happening at this point either. Merely observing you are asked to input something and that that something shows up in the output is sufficient to apply the model. So what's happing with each component of the model for a computer running this program? The processor is still the CPU that is processing the lines of code.The instructions are those lines of code.The input is whatever we type in when prompted.The memory (is RAM and) is used to remember what you input, so that it can be used in the output.The output is the greeting you get. "},{"title":"Playing With Code​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#playing-with-code","content":"Some examples of code to play around with, to see what kind of cool things can be done. More are here Spirographs A pencil in a gear in a gear makes for some crazy doodles. Spirograph ######################################################## ### Play with these values to see how things change! ### R = 100 # radius of big circle r = 60 # radius of little circle d = 100 # distance from little circle center to pen steps = 100 # more steps for smoother curve draw_speed = 5 # higher numbers are faster ######################################################## from turtle import * from math import pi, sin, cos, lcm d_theta = (1 / steps) * 2 * pi * lcm(R, r) / R theta = 0 hideturtle() speed(draw_speed) color(&quot;blue&quot;) penup() goto(R - r + d, 0) pendown() for i in range(steps): theta += d_theta x = (R - r) * cos(theta) + d * cos(theta * (R - r) / r) y = (R - r) * sin(theta) - d * sin(theta * (R - r) / r) goto(x, y) done()  Koch Snowflake A snowflake with infinite detail, to bad we can only ever approach it. Koch ######################################################## ### Play with these values to see how things change! ### length = 250 # Length of a side depth = 3 # Level of recursion draw_speed = 5 # higher numbers are faster ######################################################## from turtle import * from math import sin def koch_forward(distance, depth): if depth == 0: forward(distance) else: koch_forward(distance/3, depth-1) right(60) koch_forward(distance/3, depth-1) left(120) koch_forward(distance/3, depth-1) right(60) koch_forward(distance/3, depth-1) hideturtle() speed(draw_speed) color('blue', 'white') penup() goto(- length / 2, - 3**(1/2) * length / 6) pendown() begin_fill() for _ in range(3): koch_forward(length, depth) left(120) end_fill() done()   caution From here on is post-lecture content, or notes about the lecture but not part of the lecture itself.  "},{"title":"Making and Running a Python File​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#making-and-running-a-python-file","content":"With any luck, when demonstrating the programs for the last section in class, I showed myself making the program. I'll record the procedure here for reference (it should also be in thedocumentation for the first lab) Note that this is the first lab, so don't feel obligated to do this now. This is also all assuming Python and VSCode are installed. Which again, is the first lab. "},{"title":"Make a folder​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#make-a-folder","content":"First step is to make a folder for the file to live in. Open your computer's file manage (e.g. Finder on Mac and File Explorer on Windows). Make a folder somewhere of you choosing. For example: There is likely some sort of Documents folder on your machine. within that I might have/make a school folder, and within that a CICS110 folder, and within that a labs folder, and within that would make a folder named 01-hello-world. Everyone has their own system, so do what makes sense to you. "},{"title":"Open that Folder in VSCode​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#open-that-folder-in-vscode","content":"We need to open that folder in our editor to do stuff in it (you can also make files directly, but I'm not demoing that approach specifically) Launch VSCode. (This of course assumes Python and VSCode are installed.) Select File &gt; Open or File &gt; Open Folder, both seem to work. This notation means, &quot;within the File menu, select Open&quot;. This menu is likely in the upper left area of the application or of your entire screen (depending on your operating system). "},{"title":"Make a File​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#make-a-file","content":"Select File &gt; New File .... VSCode will ask for a name for the file, I'll use the name hello.py. "},{"title":"Type code​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#type-code","content":"VSCode probably opened that file when you made it, but you can also explicitly open it for editing by clicking on its name in the Explorer within VSCode on the left. Type the line print(&quot;Hello, World!&quot;), and save. VSCode will have a dot next to the file's name if it is unsaved. You can also enable auto-saving somewhere, I believe. "},{"title":"Run the Code​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#run-the-code","content":"If you have the Python extension (technically an extension pack) by Microsoft for VSCode (you would need to get this, see the VSCode installation guide), there should be a play arrow/triangle in the upper right somewhere. If you click that, VSCode will open a terminal and run the code. You can also open the Terminal yourself via the menu Terminal &gt; New Terminal. You can then give the run command yourself by typing python3 [FILENAME] in the terminal and hitting enter/return. So in this case it would be python3 hello.py(the extension is part of the name, as far as the terminal is concerned). "},{"title":"Lingering Thoughts​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#lingering-thoughts","content":"These are just some lingering thoughts I had that didn't fit very well anywhere. Aside: Difficulty One question I always have (though seldom explicitly ask) when I take a new class is &quot;how hard is this class&quot;? Sitting now in the instructor's seat I realise how difficult a question that is to answer. In my experience, I have encountered 3 types of difficulty: Calculation difficulty: Where you have long and complicated calculations you have to do. A lot grunt work. Very easy to make careless mistakes. This is what I think of in higher level applied maths, physics, or engineering.Definition/memory difficulty: Where there is a lot information to try and absorb at once. I've had math classes with too many definitions to track/juggle. This is also what beats me up in history (lots of information) or foreign languages (lots of vocabulary).Intuition difficulty: Where figuring out how to think about things is the challenge. This it what gets me in the theoretical math and computer science classes. So how does this class rank in those? Calculation difficulty: It shouldn't be bad here. In fact, a not uncommon use for programming is to make these sorts or things easier. Have the robots do the long, easy-to-mess-up type of work.Definition/memory difficulty: I think this will be an issue earlier on, but should hopefully ease up as we build a solid foundation.Intuition difficulty: This is where I would worry. From the overhead of getting more comfortable navigating a computer to taking the thoughts in your head and expressing them as a program. This is where I think the challenge in this class will be. But it's also I think the coolest to overcome, because when something deeply alien to your mind starts to make a bit of intuitive sense, there can be very satisfying &quot;I get it!&quot; and a rewarding sense of progress. Aside: Languages When I first learned some programming, I thought that the similarities between learning programming languages and foreign languages were tenuous at best. But now I think it can be instructive to consider the similarities. As you get more familiar with a foreign language, you find yourself doing a little less translation, and a little more &quot;native-thinking&quot;. Foreign languages have their own internal logic. The way that you express something has some nuance literal translation can't quite capture. You conceptualise things differently, in a way that makes sense in that new language, but that is really hard to articulate. Programming languages are similar in that regard. There are a lot of cognates, to be sure. But getting comfortable with programming also means developing that different way of thinking. Thinking about problems and tasks in a logic-flow way. We'll try to practice this more explicitly with flowcharts. But ultimately, I think practice, making mistakes, and solving problems will be crucial to the process. "},{"title":"Inheritance and Dunder Methods","type":0,"sectionRef":"#","url":"/main/lectures/Inheritance_Overloading/Jared","content":"","keywords":""},{"title":"Inheritance​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#inheritance","content":"Earlier, we made a Dog class for demonstration purposes. Now imagine that we have a Cat class, and a Snake class. All of these are different in some ways, and do slightly different things. For our demo-ing purposes: A dog will bark()A cat will meow()A snake will hiss() But there are also some similarities. For our demo-ing purposes, we will consider all of these as pets, moreover: They will all have namesThey will all be able to sleep() And so the idea is that we can have a Pet class, that does this shared stuff: initialising with a name, and sleep()ing. And we can then have Dog, Cat, and Snake classes that extend Pet. We would also say these are sub-classes of Pet, or that the Pet is the super-classor parent class of these three. These three classes will inherit Pet's fields and methods, and can establish their own on top of that. And later, we will have them possibly override Pet's methods. Another example of a potential inheritance relationship, that you may encounter in the homework: "},{"title":"Sub-Classing​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#sub-classing","content":"Alrighty, so how do we do this in code? Well, we say that Dog is a sub-class of Petby declaring it with class Dog(Pet):, instead of class Dog:. That's it, check it out: Inherit_Subclass class Pet: def __init__(self, name): self.name = name def sleep(self): print(f&quot;Zzzzz ({self.name} is sleeping)&quot;) class Dog(Pet): def bark(self): print(&quot;Woof!&quot;) inu = Dog(&quot;Inu&quot;) print(f&quot;Is Inu a Pet? {isinstance(inu, Pet)}&quot;) print(f&quot;Is Inu a Dog? {isinstance(inu, Dog)}&quot;) print() print(f&quot;{inu.name}:&quot;) inu.bark() inu.sleep()  There is a class Pet with an initialised name and sleep() method; and a sub-class thereof named Dog, with a bark() method. Dog inherits from Pet, including the initialiser method, so is initialised with a name. An instance of Dog is also technically an instance of Pet, and so can sleep() (as Pets can) and bark() (as Dogs can). Another example, but with two subclasses of Pet: Inherit_Subclasses class Pet: def __init__(self, name): self.name = name def sleep(self): print(f&quot;Zzzzz ({self.name} is sleeping)&quot;) class Cat(Pet): def meow(self): print(&quot;Meow!&quot;) class Snake(Pet): def hiss(self): print(&quot;Hiss!&quot;) neko = Cat(&quot;Neko&quot;) hebi = Snake(&quot;Hebi&quot;) print(f&quot;{neko.name}:&quot;) neko.meow() neko.sleep() print() print(f&quot;{hebi.name}:&quot;) hebi.hiss() hebi.sleep()  "},{"title":"Overriding Methods​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#overriding-methods","content":"Sometimes, we do want a sub-class to behave differently from it's parent. Maybe we want it to expand on the functionality of the parent, or maybe we want to override it all together. Let's say we go a bit nuts in out Pet example, and get a pet Jellyfish. Now, jellyfish are not exactly know for &quot;sleeping&quot;, per se (it sort of becomes a semantic quibble about what one means by &quot;sleep&quot;). So let's have the Jellyfish's sleep() method be different. How do we do this? By defining it like normal! The methods we inherit from the parent class are defaults, but we can override them by specifying something else. Override class Pet: def __init__(self, name): self.name = name def sleep(self): print(f&quot;Zzzzz ({self.name} is sleeping)&quot;) class Jellyfish(Pet): def sleep(self): print(f&quot;{self.name} is just floating&quot;) umi = Jellyfish(&quot;Umi&quot;) umi.sleep()  And so notice how when we have an instance of Jellyfish sleep(), it is Jellyfish's sleep(), not Pet's sleep(). "},{"title":"super()​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#super","content":"(This is going to be a little in the realms of &quot;just trust me&quot; on the syntax.) What if, within a sub-class, we want to expand upon and even use a parent's version of a method. For instance, say we want to change our dog initialiser to take in a name anda breed. We don't want to re-do the work that the Pet initialiser does to set the name, in fact, we want to do exactly that and then set the breed. There is a way to make use of Pet's __init__() within Dog's __init__(), but it's a little weird. There is this function called super(). An argument-less call to super() will secretly grab self, and effectively returns self as an instance of the super-class. So let's see some code, and unpack what it does. Super_Pet class Pet: def __init__(self, name): self.name = name def sleep(self): print(f&quot;Zzzzz ({self.name} is sleeping)&quot;) class Dog(Pet): def __init__(self, name, breed): # We use super() to consider self as a Pet here super().__init__(name) self.breed = breed def print_info(self): print(f&quot;{self.name} is a {self.breed}.&quot;) spot = Dog(&quot;Spot&quot;, &quot;Golden Retriever&quot;) inu = Dog(&quot;Inu&quot;, &quot;Shiba Inu&quot;) spot.print_info() inu.print_info()  So, let's look at the call from the line spot = Dog(&quot;Spot&quot;, &quot;Golden Retriever&quot;). This runs Dog's __init__() with self as spot-to-be,name as &quot;Spot&quot;, and breed as &quot;Golden Retriever&quot;. super() will return self (spot-to-be), but as a Pet. So super().__init__(name) will call Pet's __init__() withself as spot-to-be-as-a-Pet and name as &quot;Spot&quot;, which sets the name field. We then return from that call and set the breed field, finishing the initialisation. I highly recommend stepping through this example onpythontutor to help visualise what is happening. Below is another example of the overriding in a way that invokes the super-version of the method. Super_Shape class Trapezoid: def __init__(self, top, bottom, sides): self.top = top self.bottom = bottom self.sides = sides def perimeter(self): return self.top + self.bottom + 2*self.sides class Rectangle(Trapezoid): def __init__(self, width, height): super().__init__(width, width, height) trap = Trapezoid(2, 3, 1) print(f&quot;Trapezoid perimeter: {trap.perimeter()}&quot;) rect = Rectangle(2, 1) print(f&quot;Rectangle perimeter: {rect.perimeter()}&quot;)  "},{"title":"Example: Board Games​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#example-board-games","content":"When demonstrating new concepts for the first time we tend to use smaller examples, but they may be not be reflective of something you might actually find yourself doing. This example is hopefully more plausible. The idea is that we want to make a bunch of different games that are played on/with some sort of 2D grid/board. So we have a parent class GridGame to capture some shared behaviour: Having a board fieldInitialising a board of a specified sizeUpdating the boardPrinting the board We then extend it to make a TicTacToeGame(which just needs to invoke the super-constructor to make it a 3 by 3 board). We then extend it to make a Connect4Game, which overloads the constructor and the update_board() method, so that updating only needs to take in a column (&quot;gravity&quot; determines the row). Board_Games class GridGame: def __init__(self, height, width): self.board = [[&quot; &quot; for col in range(width)] for row in range(height)] self.width = width self.height = height def update_board(self, row, col, player): self.board[row][col] = player # Just trust me (I'm making it dense to not eat up too much space) def print_board(self): sep = &quot;---&quot;.join(list((self.width+1)*&quot;+&quot;)) rows = [&quot;| &quot;+&quot; | &quot;.join(row)+&quot; |&quot; for row in self.board] for i in range(2*self.height+1): print(rows[(i-1)//2] if i % 2 == 1 else sep) class TicTacToeGame(GridGame): def __init__(self): super().__init__(3, 3) class Connect4Game(GridGame): def __init__(self): super().__init__(6, 7) def update_board(self, col ,player): for row in range(self.height-1,-1,-1): if self.board[row][col] == &quot; &quot;: super().update_board(row, col, player) return print(&quot;Generic 3 row, 2 column game:&quot;) game = GridGame(3, 2) game.update_board(1, 1, &quot;A&quot;) game.print_board() print() print(&quot;Tic-Tac-Toe game:&quot;) ttt = TicTacToeGame() ttt.update_board(1, 1, &quot;X&quot;) ttt.print_board() print() print(&quot;Connect 4 game:&quot;) con4 = Connect4Game() con4.update_board(3, &quot;X&quot;) con4.update_board(3, &quot;O&quot;) con4.update_board(4, &quot;X&quot;) con4.print_board()  "},{"title":"Dunder Methods​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#dunder-methods","content":"There are a lot of special method names with their own significance and effects, like __init__(). Most of these names start and end with &quot;double underscores&quot; and have thus earned the moniker &quot;dunder&quot; methods. We will look at the dunder method that governs string conversion, and the dunder methods that govern operators (like +). "},{"title":"String Conversion​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#string-conversion","content":"By default, converting a class to a string (and thus printing) produces a string of the form &quot;&lt;CLASS_NAME object at MEMORY_ADDRESS&gt;&quot;. Here is a Pair class, and how it prints by default (the web-python seems to forgo the memory address part, but you can see the idea): Pair_Default class Pair: def __init__(self, x, y): self.x = x self.y = y point = Pair(2, 5) print(f&quot;string conv : {str(point)}&quot;) print(f&quot;direct print : {point}&quot;)  This is not especially informative to us. We can override this default behaviour by implementing the __str__() method. This method only takes in self, and returns the desired string representation. Here is how we might make a Pair of x and y print as (x, y): Pair_Pretty class Pair: def __init__(self, x, y): self.x = x self.y = y def __str__(self): return f&quot;({self.x}, {self.y})&quot; point = Pair(2, 5) print(f&quot;string conv : {str(point)}&quot;) print(f&quot;direct print : {point}&quot;)  "},{"title":"Operators​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#operators","content":"Finally, consider how + on numbers returns a new number based on addition, yet + on strings returns a new string based on concatenation. We refer to the this &quot;doing different things based on different types of inputs&quot; as overloading. And we can overload + to do something on any of our classes by implementing the__add__() method. This method takes two arguments, self and some other. Importantly, self represents the operand on the left andother represents the operand on the right(this will matter for subtraction later). The return must be a new Pair, representing the sum &quot;self + other&quot; (akin to how &quot;Hello&quot; + &quot;World&quot; would return a new string &quot;HelloWorld&quot;). So here is how we could overload + on Pairs to do point-wise addition: Pair_Add class Pair: def __init__(self, x, y): self.x = x self.y = y def __add__(self, other): return Pair(self.x + other.x, self.y + other.y) def __str__(self): return f&quot;({self.x}, {self.y})&quot; a = Pair(2, 5) b = Pair(-1, 3) print(f&quot; a : {a}&quot;) print(f&quot; b : {b}&quot;) print(f&quot;a+b : {a+b}&quot;)  There are plenty of dunder methods for operators, here are just a few: __neg__(self), for negation, i.e., -a__add__(self, other), for addition, i.e., a + b__sub__(self, other), for subtraction, i.e., a - b__mul__(self, other), for multiplication, i.e., a * b__truediv__(self, other), for division, i.e., a / b And here is code for all of those implemented as point-wise operations on Pairs: Pair_Ops class Pair: def __init__(self, x, y): self.x = x self.y = y def __neg__(self): return Pair(-self.x, -self.y) def __add__(self, other): return Pair(self.x + other.x, self.y + other.y) def __sub__(self, other): return Pair(self.x - other.x, self.y - other.y) def __mul__(self, other): return Pair(self.x * other.x, self.y * other.y) def __truediv__(self, other): return Pair(self.x / other.x, self.y / other.y) def __str__(self): return f&quot;({self.x}, {self.y})&quot; a = Pair(2, 5) b = Pair(-1, 3) print(&quot;*** Base ***&quot;) print(f&quot; a : {a}&quot;) print(f&quot; b : {b}&quot;) print(&quot;*** Neg ***&quot;) print(f&quot; -a : {-a}&quot;) print(f&quot; -b : {-b}&quot;) print(&quot;*** Add ***&quot;) print(f&quot;a+b : {a+b}&quot;) print(f&quot;b+a : {b+a}&quot;) print(&quot;*** Sub ***&quot;) print(f&quot;a-b : {a-b}&quot;) print(f&quot;b-a : {b-a}&quot;) print(&quot;*** Mul ***&quot;) print(f&quot;a*b : {a*b}&quot;) print(f&quot;b*a : {b*a}&quot;) print(&quot;*** Div ***&quot;) print(f&quot;a/b : {a/b}&quot;) print(f&quot;b/a : {b/a}&quot;)  "},{"title":"More Reading​","type":1,"pageTitle":"Inheritance and Dunder Methods","url":"/main/lectures/Inheritance_Overloading/Jared#more-reading","content":"When I was bringing myself up to speed on these dunder methods, I found the following references useful (some for learning, some for referencing): A tutorial on dunder methodsGeneral python documentationList of numeric dunder methods in python documentation "},{"title":"Lec 12 Looping Patterns","type":0,"sectionRef":"#","url":"/main/lectures/looping-patterns","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 12 Looping Patterns","url":"/main/lectures/looping-patterns#assignment-updates","content":"Stuff due this week: Participation 6 due ThursdayQuiz 6 due ThursdayLab on FridayHW 4 due Wednesday "},{"title":"Slides​","type":1,"pageTitle":"Lec 12 Looping Patterns","url":"/main/lectures/looping-patterns#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Code for Activities​","type":1,"pageTitle":"Lec 12 Looping Patterns","url":"/main/lectures/looping-patterns#code-for-activities","content":"For the final activity: Foods food_dict = [ {'name': 'hamburger', 'restaurant': 'The Grill', 'price': 10.99}, {'name': 'Chicken and Fries Basket', 'restaurant': 'The Grill', 'price': 8.99}, {'name': 'Burrito', 'restaurant': 'Tamales', 'price': 9.99}, {'name': 'Salad', 'restaurant': 'Tamales', 'price': 6.99}, {'name': 'Sushi', 'restaurant': 'Wasabi', 'price': 12.99}, {'name': 'Ham and Cheese Sandwich', 'restaurant': 'Deli Delish', 'price': 5.99}, {'name': 'Turkey and Cheese Sandwich', 'restaurant': 'Deli Delish', 'price': 5.99}, {'name': 'Roast Beef Sandwich', 'restaurant': 'Deli Delish', 'price': 5.99}, {'name': 'Cookie', 'restaurant': 'Yum Bakery', 'price': 1.99} ]  "},{"title":"Lec 14 Making Modules","type":0,"sectionRef":"#","url":"/main/lectures/make_modules_mutation","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 14 Making Modules","url":"/main/lectures/make_modules_mutation#assignment-updates","content":"Stuff due soon: HW5 due April 12th (next Wednesday)Participation 7 due ThursdayQuiz 8 due ThursdayLab on Friday "},{"title":"Slides​","type":1,"pageTitle":"Lec 14 Making Modules","url":"/main/lectures/make_modules_mutation#slides","content":"Section 1, 2, 3, 4, 5, 6 Download Powerpoint "},{"title":"Activities​","type":1,"pageTitle":"Lec 14 Making Modules","url":"/main/lectures/make_modules_mutation#activities","content":""},{"title":"Starter code for the date_printing module​","type":1,"pageTitle":"Lec 14 Making Modules","url":"/main/lectures/make_modules_mutation#starter-code-for-the-date_printing-module","content":"Download: date_printing.py date__printing.py import datetime formats = [&quot;nice&quot;, &quot;slashes&quot;] def get_date_nice(date: datetime.date) -&gt; str: year = date.year month = date.strftime(&quot;%B&quot;) day = date.day return f&quot;{month} {day}, {year}&quot; def get_with_slashes(date: datetime.date) -&gt; str: year = date.year month = date.month day = date.day return f&quot;{month}/{day}/{year}&quot; def print_date(date: datetime.date, format: str) -&gt; None: if format == &quot;nice&quot;: print(get_date_nice(date)) elif format == &quot;slashes&quot;: print(get_with_slashes(date)) else: raise ValueError(&quot;Unknown format&quot;)  "},{"title":"Map, Filter, and Lambda Functions","type":0,"sectionRef":"#","url":"/main/lectures/Lambdas/Jared","content":"","keywords":""},{"title":"Map and Filter​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#map-and-filter","content":""},{"title":"Going Meta (Higher-Order Functions)​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#going-meta-higher-order-functions","content":"info This sub-section is actually outside the scope of what you really need to know, but it is what underlies our ability to have the map() and filter() functions at all. I don't feel comfortable not addressing the elephant in the room that we will be standing on for the rest of the lecture. Consider a couple of different mapping examples: Converting a list of strings to intsConverting a list of ints to stringsSquare rooting a list of numbersSquaring a list of numbers String to IntInt to StringSquare RootSquare String_to_Int l = [&quot;3&quot;,&quot;1&quot;,&quot;4&quot;,&quot;1&quot;,&quot;5&quot;,&quot;9&quot;,&quot;2&quot;] new_l = [] for x in l: new_l.append(int(x)) print(new_l)  In all of these, the core mapping as always of the form: new_list = [] for element in COLLECTION: new_list.append(MAP_FUNCTION(element))  And in that view, these mappings are all the same except for our choices of COLLECTION, the collection we want to transform, andMAP_FUNCTION, the transformation in question. If you ever find yourself thinking &quot;all of these things are the same except for ...&quot; The you probably want to extract the similarities into a function and have those differences be the parameters. You might think there is a catch here, in that one of our two parameters-to-be,MAP_FUNCTION, is a function. But, in Python, we can totally just pass functions to functions. We call functions that take in (or return) functions higher-order functions, and we say &quot;Python supports higher-order functions&quot;. And so we can make this general mapping function: Meta_Map from math import sqrt def my_map(fun, itr): # map() is taken, as we will soon see new_list = [] for element in itr: new_list.append(fun(element)) return new_list def square(x): return x ** 2 ints = my_map(int, [&quot;3&quot;,&quot;1&quot;,&quot;4&quot;,&quot;1&quot;,&quot;5&quot;,&quot;9&quot;,&quot;2&quot;]) strs = my_map(str, [3,1,4,1,5,9,2,6]) sqrts = my_map(sqrt, [3,1,4,1,5,9,2,6]) squares = my_map(square, [3,1,4,1,5,9,2,6]) print(ints) print(strs) print(sqrts) print(squares)  Notice how I needed to make a function for square in order to be able to pass it in, we'll come back to this later. "},{"title":"Map​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#map","content":"We've just re-invented the wheel. Python already has a function, map(), that takes in a function for the transformation and a collection to map the function over. map() returns a special map object, which can be converted to a list or other collection type in the usual manner. Map to_nums = map(int, [&quot;3&quot;,&quot;1&quot;,&quot;4&quot;,&quot;1&quot;,&quot;5&quot;,&quot;9&quot;,&quot;2&quot;]) print(to_nums) print(list(to_nums))  This is generalised higher-order mapping function, so great for applying functions to a whole collection. Map_ from math import sqrt def square(x): return x ** 2 ints = map(int, [&quot;3&quot;,&quot;1&quot;,&quot;4&quot;,&quot;1&quot;,&quot;5&quot;,&quot;9&quot;,&quot;2&quot;]) strs = map(str, [3,1,4,1,5,9,2,6]) sqrts = map(sqrt, [3,1,4,1,5,9,2,6]) squares = map(square, [3,1,4,1,5,9,2,6]) print(list(ints)) print(list(strs)) print(list(sqrts)) print(list(squares))  "},{"title":"Filter​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#filter","content":"Analogously to before, the core portion of a filtering operation looks like: new_list = [] for element in COLLECTION: if CONDITION(element): new_list.append(element)  We can see the only variables are: COLLECTION, the collection we want to filter, andCONDITION, a function that checks if we want to keep an element or not. So we could imagine a sort of &quot;general filter&quot; function. Meta_Filter def my_filter(cond, itr): # filter() is taken, as you may imagine new_list = [] for element in itr: if cond(element): new_list.append(element) return new_list def is_even(x): return x % 2 == 0 def is_odd(x): return x % 2 == 1 l = [3,1,4,1,5,9,2,6] evens = my_filter(is_even, l) odds = my_filter(is_odd, l) print(evens) print(odds)  But like before, Python has a function, filter(), that takes in a function for the condition we want and a collection to filter based on that condition being true.filter() returns a special filter object, which can be converted to a list or other collection type in the usual manner. Filter def is_even(x): return x % 2 == 0 def is_odd(x): return x % 2 == 1 l = [3,1,4,1,5,9,2,6] evens = filter(is_even, l) odds = filter(is_odd, l) print(list(evens)) print(list(odds))  "},{"title":"Lambdas​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#lambdas","content":"Remember how in order to map squaring across a list I needed to make a square() function to give to the map() function? Square_Fun def square(x): return x ** 2 squares = map(square, [3,1,4,1,5,9,2,6]) print(list(squares))  That's kind of annoying, or at least I don't like that. Well, conveniently enough for us, python has machinery for creating nameless, purely expression-based functions on the fly. These functions are known as lambda functions. (The name comes from lambda calculus, a very elegant, function-based model of computation.) The python syntax for making such a function is: lambda COMMA_SEPARATED_VARIABLES: EXPRESSION_FOR_RETURN  The pieces are: The keyword lambda0 or more variable names for parameters separated by commasA colon (:)An expression, that may use the parameters, for computing a return. Some things to note: There is no return keyword, yet the thing to the right of the colon is always returnedThe function can only have an expression, no control flow stuff As an example, lambda x, y: 2*x + y would be a nameless function that takes in two variables, and returns twice the first plus the second. And so we can do the map square from before as: Square_Fun_Lambda squares = map(lambda x: x**2, [3,1,4,1,5,9,2,6]) print(list(squares))  Here are some more examples with filtering, where the lambda function is used to invoke the methods: Filter_Lambda l = [&quot;Hello&quot;, &quot;bye&quot;, &quot;3.14159&quot;, &quot;2178&quot;, &quot;foo&quot;, &quot;42&quot;] numbers = filter(lambda s: s.isdigit(), l) words = filter(lambda s: s.isalpha(), l) lowers = filter(lambda s: s.islower(), l) print(list(numbers)) print(list(words)) print(list(lowers))   caution Material from here on was not part of the lecture, but is stuff that I think is necessary to complete the story.  "},{"title":"When to Use What​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#when-to-use-what","content":"We've seen that we can accomplish mapping and filtering both with comprehensions and with the map() and filter() functions (including with lambda functions if need be). There is no &quot;right way&quot; to do things, but I want to offer my thinking about where it makes sense to me to use each of these. "},{"title":"map() and filter()​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#map-and-filter-1","content":"If we have a specific named function that we wish to map or filter with, then I lean toward map() and filter() over comprehensions, for example, mapping int() to convert a bunch of strings to ints, as below. Direct_Map_VS l = [&quot;3&quot;,&quot;1&quot;,&quot;4&quot;,&quot;1&quot;,&quot;5&quot;,&quot;9&quot;,&quot;2&quot;] print([int(x) for x in l]) print(list(map(int, l)))  If we want to map something and then filter the results (other way around is a different story), a comprehension isn't really a natural way to do that (you need a weird nested thing), so map() and filter() are more natural to me. Consider an example where we convert a bunch of strings to ints or Nones (on error), and then filter out the things we couldn't convert to ints. Map_Then_Filter_VS def safe_int(s): try: return int(s) except: return None l = [&quot;314&quot;, &quot;Hello&quot;, &quot;foo&quot;, &quot;42&quot;, &quot;17.5&quot;, &quot;2718&quot;, &quot;bar&quot;] print([x for x in [safe_int(s) for s in l] if x is not None]) print(list(filter(lambda x: x is not None, map(safe_int, l))))  Extra: Well, Actually ... That's assuming what we've taught you. However, I would actually abuse the walrus operator (:=, mid-expression assignment) and the order in which things are evaluated to get a more viable comprehension. Map_Then_Filter_Walrus def safe_int(s): try: return int(s) except: return None l = [&quot;314&quot;, &quot;Hello&quot;, &quot;foo&quot;, &quot;42&quot;, &quot;17.5&quot;, &quot;2718&quot;, &quot;bar&quot;] print([x for s in l if (x := safe_int(s)) is not None]) print([x for x in [safe_int(s) for s in l] if x is not None]) print(list(filter(lambda x: x is not None, map(safe_int, l))))  "},{"title":"Comprehensions​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#comprehensions","content":"Where mapping and filtering are more abstractly concerned, comprehensions are my default. If I need to make a lambda function in order to use map() or filter(), I'll probably just do a comprehension. Such as the squaring from before. Square_VS l = [3,1,4,1,5,9,2,6] print([x**2 for x in l]) print(list(map(lambda x: x**2, l)))  If we want some sort of nesting, either of the loops generating/mapping the collection(s) or of the resultant collection, I find comprehensions more natural to use. Two examples below: Making a 1D collection of 2D points based on nested looping (only really doable with comprehensions, I think)Making a 2D collection of 2D points based on nested mapping Nested_Mapping_VS # 1D list can only really be done this way with comprehensions print([(i,j) for i in range(3) for j in range(3)]) # 2D grid is grosser to do with lambdas print([[(i,j) for j in range(3)] for i in range(3)]) print(list(map(lambda i: list(map(lambda j: (i,j), range(3))), range(3))))  Comprehensions are also much more natural in the case where you want to filterand then map. For instance: getting all even numbers and then dividing those by two. Filter_Then_Map_VS l = [3,1,4,1,5,9,2,6] print([x//2 for x in l if x % 2 == 0]) print(list(map(lambda x: x//2, filter(lambda x: x % 2 == 0, l))))  "},{"title":"Lambdas​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#lambdas-1","content":"You may have noticed that my take is effectively: if we want to use map() or filter() and need a lambda function, we might as well use a comprehension. So then where do lambdas fit in? Well, uh, the entire next optional section, but ... basically any other time you want to give a function a pure-expression function that isn't worth making a more permanent function. Basically any time you want to avoid defining a more permanent function. It just so happens that in Python mapping and filtering are already really well covered by comprehensions. But as an example, if I had a function that computed an approximate definite integral (approximate bounded area under a curve), I would pass in functions for things like x2x^2x2 or x3+xx^3 + xx3+x as lambda functions. integral def approx_integral(f, x_min, x_max, rects): width = (x_max - x_min) / rects return sum([width*f(x_min+i*width) for i in range(rects)]) print(approx_integral(lambda x: x, 0, 1, 250)) print(approx_integral(lambda x: x**2, 0, 1, 250)) print(approx_integral(lambda x: x**3 + x, 0, 1, 250))  "},{"title":"Reduce​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#reduce","content":"We've talked now in two lectures about mapping and filtering, but there is a third common idiom often spoken of in the same context: reducing. Often we find ourselves wanting to take every element in a collection and aggregate them together in some way. This is called reducing. Some examples include: summation (adding every element in a collection together)multiplying every element in a collection togethercounting how many elements are in a collectiongetting the minimal or maximal element in a collection Some more exotic example include: even sorting can be done by reducingeven mapping and filtering can be done by reducing Now that we have lambda functions, we can do mapping, filtering, and reducing (comprehensions only have machinery for mapping and filtering) "},{"title":"Iterative Form​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#iterative-form","content":"Let's run with adding and multiplying together everything in our list as a pair of examples. Iteratively, we might do these: Sum_Itr l = [3,1,4,1,5,9,2,6] total = 0 for x in l: total += x print(total)  Prod_Itr l = [3,1,4,1,5,9,2,6] total = 1 for x in l: total *= x print(total)  The core reduction is always of the form: accumulator = INITIAL_VALUE for element in COLLECTION: accumulator = ACC_FUNCTION(accumulator, element)  We can see the variables are: INITIAL_VALUE, the initial value our accumulator is set to,COLLECTION, the collection we want to reduce, andACC_FUNCTION, a function that folds an element of the collection into the accumulation. Thus, a general function based on these is quite imaginable. "},{"title":"Python Function​","type":1,"pageTitle":"Map, Filter, and Lambda Functions","url":"/main/lectures/Lambdas/Jared#python-function","content":"Lo and behold, the built-in module functools has a reduce() function. reduce() takes in ACC_FUNCTION, COLLECTION, and an optional INITIAL_VALUE, in that order. If the initial value is not provided, the first element of the collection is used as the initial value, and all subsequent elements folded in.If there is only one element (COLLECTION is empty and INITIAL_VALUE specified or COLLECTIONhas one element and INITIAL_VALUE is unspecified), then reduce() returns that one element. (Thus I like to set INITIAL_VALUE as a default if possible.)If there are no elements (COLLECTION is empty and INITIAL_VALUE is unspecified), then an error occurs. So our summation and product from earlier become: Sum_Reduce from functools import reduce l = [3,1,4,1,5,9,2,6] total = reduce(lambda x, y: x + y, l, 0) print(total)  Prod_Reduce from functools import reduce l = [3,1,4,1,5,9,2,6] prod = reduce(lambda x, y: x * y, l, 1) print(prod)  Let's just get exotic with some more examples. Factorial is just a specific product (1 to n), right? Factorial_Reduce from functools import reduce def factorial(n): return reduce(lambda x, y: x * y, range(1,n+1), 1) for i in range(10): print(f&quot;{i}! = {factorial(i)}&quot;)  Here's an example of computing the minimum and maximum, this is a case where we don't really have of a good default to start with. Note that ternary operators are kosher in lambda functions. Min_Max_Reduce from functools import reduce l = [3,1,4,1,5,9,2,6] minimum = reduce(lambda x, y: x if x &lt; y else y, l) maximum = reduce(lambda x, y: x if x &gt; y else y, l) print(minimum) print(maximum)  Counting is an example of a reduction problem where the actual elements of the collection don't matter. The underscore (_) is basically a &quot;I'm not even naming this variable&quot; character. Count_Reduce from functools import reduce l = [3,1,4,1,5,9,2,6] count = reduce(lambda n, _: n + 1, l, 0) print(count)  Finally, as promised, mapping and filtering. The thing being aggregated is a now a list, with the initial value being the empty list. Map_Reduce from functools import reduce def my_map(f, lst): return reduce(lambda l, e: l + [f(e)], lst, []) l = [3,1,4,1,5,9,2,6] squares_map = map(lambda x: x ** 2, l) squares_red = my_map(lambda x: x ** 2, l) print(list(squares_map)) print(squares_red)  Filter_Reduce from functools import reduce def my_filter(cond, lst): return reduce(lambda l, e: l + ([e] if cond(e) else []), lst, []) l = [3,1,4,1,5,9,2,6] evens_filt = filter(lambda x: x % 2 == 0, l) evens_red = my_filter(lambda x: x % 2 == 0, l) print(list(evens_filt)) print(evens_red)  "},{"title":"Ternary Operator and Comprehensions","type":0,"sectionRef":"#","url":"/main/lectures/looping-patterns/Jared","content":"","keywords":""},{"title":"Syntax Sugar​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#syntax-sugar","content":"What is syntax sugar? Syntax sugar is my crippling addiction. It is syntax that allows you to express certain common tasks in a denser/more concise form. Sufficient mastery of syntax sugar can allow one to convert some tasks from a multi-line nested looping/branching statement, to a one-line eldritch monstrosity. Doing this gives me a kind of rush that I can't describe and continually crave. It has made me what some would call a &quot;degenerate&quot;, a &quot;monster&quot;, or a &quot;psychopath&quot;. But I don't care. There is beauty in the horror and horror in the beauty. And I am beholden to the madness that emanates therefrom. "},{"title":"Ternary Operators​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#ternary-operators","content":""},{"title":"Setting: Conditional Assignment​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#setting-conditional-assignment","content":"There are cases where you want to set a value based on a condition. A basic mathematical example is the &quot;indicator function&quot;, which takes in an element xxx and a set AAA, and returns 1 if xxx is in AAA and 0 if not. Just isolating the check and variable assignment (not making this into a python function), we could accomplish the indicator checking like so: Indicator x = 0 # you can change this value around A = {1,2,3,4,5} if x in A: indicator_x_A = 1 else: indicator_x_A = 0 print(f&quot;indicator function of x and A: {indicator_x_A}&quot;)  "},{"title":"Syntax Sugar: Ternary Operator​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#syntax-sugar-ternary-operator","content":"This &quot;if condition is true then this value, else this other value&quot; structure shows up quite frequently. The syntax sugar for this is: value_t if condition else value_f. We call this the ternary operator, I guess because there are 3 operands (value_t, condition, and value_f). The way to read this is that if condition is/evaluate to true, the ternary expression evaluates to value_t, if condition is/evaluate to false, it evaluates to value_f. Behold the earlier example using this: Indicator_Ternary x = 0 y = 3 A = {1,2,3,4,5} indicator_x_A = 1 if x in A else 0 indicator_y_A = 1 if y in A else 0 print(f&quot;indicator function of x and A: {indicator_x_A}&quot;) print(f&quot;indicator function of y and A: {indicator_y_A}&quot;)  A 4-line if-else statement has become a 1-line ternary operator. "},{"title":"Mapping and Comprehensions​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#mapping-and-comprehensions","content":""},{"title":"Setting: Mapping​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#setting-mapping","content":"Often we find ourselves wanting to performs some operation, function, or transformation on every element in a collection. We call this mapping a operation/function/transformation over the collection, and it is a very frequent thing to do. For example, say I wanted a list of the first 10 square numbers. This could be done by taking a list of the numbers 1 to 10, and squaring all of them. That &quot;squaring all of them&quot; is a on operation (squaring) being performed on all elements in the collection. That is mapping. Code for that could look like: Squares_Iteration squares = [] for i in range(1, 11): squares.append(i ** 2) print(squares)  Abstractly: I am mapping the squaring over the range, and storing the result. "},{"title":"Syntax Sugar: Comprehensions​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#syntax-sugar-comprehensions","content":"We can get that list squares in 3 fairly straightforward lines,but we can do better. Comprehensions are a way to create a collection based on iterating over some other collection. The syntax sugar for list comprehensions is: [expression for var_name in collection]. Every element in collection is iterated over and assigned to var_name in turn (the for for var_name in collection is exactly like a for loop).expression may make use of the variable named var_name, and is evaluated for each element in collection. And the results are bundled together in a list. Behold the earlier example using this: List_Comprehension squares = [i ** 2 for i in range (1, 11)] print(squares)  Note the congruences with the earlier less-sugary version. The [] are necessary to note we are making a list.The for i in range(1, 11) is exactly the same.The .append(i ** 2) becomes the i ** 2 at the front in the comprehension. "},{"title":"Filtering and Comprehensions​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#filtering-and-comprehensions","content":""},{"title":"Setting: Filtering​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#setting-filtering","content":"Often we find ourselves wanting to select only the elements of a collection that satisfy some property. We call this filtering the collection based on some property/criteria, and it is also a very frequent thing to do. For example, say I have a list of numbers and wanted only the even numbers in that list. I could use a conditional to add only the elements I want to my list of evens, like so: Evens_Iteration nums = list(range(10,55,3)) print(f&quot;nums : {nums}&quot;) evens = [] for i in nums: if i % 2 == 0: evens.append(i) print(f&quot;evens: {evens}&quot;)  "},{"title":"Syntax Sugar: More Comprehensions​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#syntax-sugar-more-comprehensions","content":"We can get that list evens in 4 fairly straightforward lines, but again, we can do better. Comprehensions also have built in filtering. This gives us more general list comprehensions of the from:[expression for var_name in collection if condition]. This is just like before, except now expression is only considered for elements where condition is true (condition may make use of var_name). Behold the earlier example using this: Evens_Comprehension nums = list(range(10,55,3)) print(f&quot;nums : {nums}&quot;) evens = [i for i in nums if i % 2 == 0] print(f&quot;evens: {evens}&quot;)  Note the congruences with the earlier less-sugary version. The [] for the list.The for i in nums is exactly the same.The if i % 2 == 0 is exactly the same.The .append(i) becomes the i at the front in the comprehension. The nesting out-to-in of the for loop and if statement becomes the exact same statements written left-to-right, with the expression brought to the front (and surrounded by square brackets to indicate this is to be a list). Another example, where the expression part is non-trivial. We could get all halves of even numbers in a list. Divide_Evens nums = list(range(10,55,3)) print(f&quot;nums : {nums}&quot;) # Iterative Approach halves_iter = [] for i in nums: if i % 2 == 0: halves_iter.append(i // 2) print(f&quot;halves_iter: {halves_iter}&quot;) # Comprehension halves_comp = [i//2 for i in nums if i % 2 == 0] print(f&quot;halves_comp: {halves_comp}&quot;)  Again, notice how the looping+branching portion is just flattened (out-&gt;in to left-&gt;right), with the expression for the new element being brought to the front of the comprehension. And one more, maybe for a given number, we want to get all factors of that number (all numbers that divide it). Factors num = 60 # play with this value print(f&quot;number: {num}&quot;) # Iterative Approach factors_iter = [] for i in range(1,num): if num % i == 0: factors_iter.append(i) print(f&quot;factors_iter: {factors_iter}&quot;) # Comprehension factors_comp = [i for i in range(1,num) if num % i == 0] print(f&quot;factors_comp: {factors_comp}&quot;)   caution Material from here on was not part of the lecture, but I'm not done with the madness yet. I must corrupt more, I must twist more.I must write unintelligible code!!!  "},{"title":"More Comprehension Types​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#more-comprehension-types","content":"For showing off the comprehension syntax, it is sufficient to only talk about list comprehensions. But there are other structure this exists for. There are also set comprehensions, which are much the same except for {} on the outside. Set_Comprehension squares = {i ** 2 for i in range (1, 11)} print(squares)  There are also dictionary comprehensions, which are much the same except for {} on the outside and the expressionneeds be of the form key:value. Dictionary_Comprehension squares = {i:i ** 2 for i in range (1, 11)} print(squares)  There is not exactly tuple comprehension, but you can do something that feels like it. Tuple_Comprehension squares = tuple(i ** 2 for i in range (1, 11)) print(squares)  in practice, you are generally going to do list comprehension and not bootleg tuple comprehension. Extra: What About Just Parentheses? You might be wondering why wrapping the i ** 2 for i in range (1, 11)in parentheses isn't tuple comprehension. The answer is basically that that syntax is already used for something calledgenerators, which I am not going to get into. If you were curious, searches for &quot;generators&quot;, &quot;yield&quot;, and &quot;generator comprehension&quot; would probably get you that stuff. And in fact, I think that bootleg tuple comprehension from earlier is technically just casting a generator to a tuple. Generator_Comprehension squares = (i ** 2 for i in range (1, 11)) print(squares) squares = tuple(squares) print(squares)  "},{"title":"Chaining​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#chaining","content":""},{"title":"Ternary Operators​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#ternary-operators-1","content":"You can chain ternary operators, sort of like an if-elif-else statement. And seeing the intuition for that comes from transforming an if-elif-else statement. Imagine, as a motivating example, you have a number num, and want to get its sign (-1 for negative numbers, 0 for 0, and 1 for positive numbers). You could do this with an if-elif-else. if num &gt; 0: sign = 1 elif num &lt; 0: sign = -1 else: sign = 0  The if-elif-else is equivalent to an if-else with another if-else in the outer else block. It looks worse now, but we can start introducing ternary operators. if num &gt; 0: sign = 1 else: if num &lt; 0: sign = -1 else: sign = 0  We can transform the inner if-else into a ternary operator. if num &gt; 0: sign = 1 else: sign = -1 if num &lt; 0 else 0  And by taking -1 if num &lt; 0 else 0 as its own expression, we can replace the outer if-else with a ternary operator. sign = 1 if num &gt; 0 else -1 if num &lt; 0 else 0  This reduces a 6-line if-elif-else to a 1-line ternary operator chain. Runnable code below: Sign def sign(num): return 1 if num &gt; 0 else -1 if num &lt; 0 else 0 print(f&quot;sign(12) : {sign(12):&gt;2d}&quot;) print(f&quot;sign(4) : {sign(4):&gt;2d}&quot;) print(f&quot;sign(0) : {sign(0):&gt;2d}&quot;) print(f&quot;sign(-2) : {sign(-2):&gt;2d}&quot;) print(f&quot;sign(-7) : {sign(-7):&gt;2d}&quot;)  "},{"title":"Comprehensions​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#comprehensions","content":"This idea that the comprehension is just &quot;the flattened-out for-if structure with the final expression brought to the front&quot; generalises to arbitrary for loop nesting. Consider this iterative approach to flattening a list of lists (making a list out of all the inner-list elements): Flatten_Iteration ll = [[1,2,3], [4,5], [6,7,8,9]] # Iterative Approach flat_iter = [] for l in ll: for i in l: flat_iter.append(i) print(flat_iter)  Those nested for loops can both be used in a comprehension, with the outer loop going before the inner. Flatten_Comprehension ll = [[1,2,3], [4,5], [6,7,8,9]] # Comprehension flat_comp = [i for l in ll for i in l] print(flat_comp)  Outer-to-inner in iteration land becomes left-to-right in comprehension land, with the expression being brought to the front. Another example of this, imagine you wanted to get all integer 2D coordinates that lie within some circle of a given radius centred at the origin. Circle r = 3 # Iterative Approach points_iter = [] for x in range(-r, r+1): for y in range(-r, r+1): if x ** 2 + y ** 2 &lt;= r ** 2: points_iter.append((x,y)) print(points_iter) # Comprehension points_comp = [(x,y) for x in range(-r, r+1) for y in range(-r, r+1) if x ** 2 + y ** 2 &lt;= r ** 2] print(points_comp)  Outer-to-inner to left-to-right, expression brought to the front. "},{"title":"Apotheosis (More Exotic Examples)​","type":1,"pageTitle":"Ternary Operator and Comprehensions","url":"/main/lectures/looping-patterns/Jared#apotheosis-more-exotic-examples","content":"Combining all these things can allow you to do some incredibly complex tasks in remarkably dense code. When fundamentals are cemented and you start incorporating these sorts of things, you find yourself spending more time thinking &quot;how am I going to write this code&quot; than writing code. But when a something you've spent the time to schemingly craft works, it feels really good. I'll have some examples of more complicated things here as I think of them. In the following I have a list of adjectives and nouns, and I want to get all combinations, with the correct article too. For instance, &quot;red&quot; and &quot;house&quot; would produce &quot;a red house&quot;. Adj_Noun adjs = [&quot;red&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;enormous&quot;, &quot;small&quot;, &quot;awful&quot;, &quot;scary&quot;] nouns = [&quot;fruit&quot;, &quot;house&quot;, &quot;snake&quot;, &quot;fate&quot;] adj_nouns = {f&quot;{'an' if adj[0] in 'aeiou' else 'a'} {adj} {noun}&quot; for adj in adjs for noun in nouns} print(&quot;\\n&quot;.join(adj_nouns))  There are chained for loops and an f-string expression with a ternary inside. For densities sake, I'm doing &quot;\\n&quot;.join() for prints instead of a for loop. In the following, instead of a list of factors for a number like earlier, I want a dictionary with numbers as keys and sets of factors as values. Factors_Dict nums = [12, 25, 50, 60, 100] factor_dict = {num:{i for i in range(1,num) if num % i == 0} for num in nums} print(&quot;\\n&quot;.join([f&quot;{num:&gt;3d}: {factors}&quot; for num,factors in factor_dict.items()]))  There is a set comprehension inside the dictionary comprehension (since the value is a set of factors). As for the print: I could have have done a for loop like a sane person, but I can also do .join() on a list comprehension. This print list comprehension also leverages destructuring for convenience. The following was code I made to display a circle based on the points in said circle. I chose to cut off the most extreme points (so displaying from −(r−1)-(r-1)−(r−1) to (r−1)(r-1)(r−1) inclusive). Print_Circle r = 20 points = [(x,y) for x in range(-r, r+1) for y in range(-r, r+1) if x ** 2 + y ** 2 &lt;= r ** 2] print(&quot;\\n&quot;.join([&quot; &quot;.join([(&quot;•&quot; if (x,y) in points else &quot; &quot;) for x in range(-r+1, r)]) for y in range(r-1, -r, -1)]))  There is a .join() on a list comprehension, whose expression is itself a .join() on a list comprehension, whose expression is a ternary operator. "},{"title":"Lec 20 Pip Pandas Plotly","type":0,"sectionRef":"#","url":"/main/lectures/Pip_Pandas_Plotly","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#assignment-updates","content":"Stuff due soon: HW7 Due 5/15Capstone Project Presentations 5/16 and 5/17Quiz due Thursday "},{"title":"Slides​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#slides","content":"Section 1, 2, 3, 4, 5, 6 Download Powerpoint "},{"title":"Resources​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#resources","content":""},{"title":"StudentsPerformance.csv Download:​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#studentsperformancecsv-download","content":"Download: StudentsPerformance.csv "},{"title":"Notes:​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#notes","content":""},{"title":"Pip​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#pip","content":"Pip is a package manager for Python A package manager is a tool that automates the process of installing, updating, and removing packagesA package is a collection of code files that are bundled together (e.g., a library or module) Pip is included with Python 3.4 and above To check if you have pip installed, open a terminal and type pip --versionMay need to type pip3 --version (if you have both Python 2 and 3 installed). If this is the case, you will need to use pip3 instead of pip for the rest commands To install a package, open a terminal and type pip install &lt;package name&gt; This will download the package from the Python Package Index (PyPI) and install it on your computerTo search for a package, go to https://pypi.org/ and type the name of the package in the search bar It will show you the package name, a short description, the latest version, and the command to install it To see a list of all installed packages, type pip list. It may be a long list, but it's alphabetical so you can scroll through it to find the package you're looking forLet's install pandas and plotly: pip install pandas plotly "},{"title":"Pandas​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#pandas","content":"Panda is a data analysis library for data structured in tables (like csv files!) It has a lot of built-in functions for manipulating and analyzing dataOfficial documentation: https://pandas.pydata.org/pandas-docs/stable/ To use pandas, we need to import it into our Python script import pandas as pdThe as pd part is optional, but it's a common convention to use pd as the alias for pandas Pandas has two main data structures: Series and DataFrame A Series is a one-dimensional array of indexed dataA DataFrame is a two-dimensional array of indexed data It's like a table in a spreadsheetEach row is a record (or observation)Each column is a variable (or feature) Let's load a csv file into a DataFrame On the website is a csv file called StudentsPerformance.csv It contains data about students' test scores (Info about the file)Download the file and save it in the same folder as your Python script To load the csv file into a DataFrame, use the read_csv() function df = pd.read_csv('StudentsPerformance.csv') (after importing pandas)The df variable is a DataFrame object (it's a table of data) To see the first 5 rows of the DataFrame, use the head() function print(df.head()) (or df.head(12) to see the first 12 rows) Now, let's analyze the data To start, let's describe the data print(df.describe())This will give us some basic statistics about the dataWe can see the count, mean, standard deviation, min, max, and the quartiles for each column The 25% is a value such that 25% of the data is less than that value. This is also called the first quartile (Q1). We can get a single column from the DataFrame using the column name print(df['math score'])This will print the math score columnWe can also get multiple columns by passing in a list of column names print(df[['math score', 'reading score']]) To get the mean of a column, use the mean() function WARNING: This will only work on numeric columns (can't get the mean of a column of strings)print(df['math score'].mean())This will print the mean of the math score columnWe can also get the mean of multiple columns print(df[['math score', 'reading score']].mean()) Other methods include: median(), mode(), min(), max(), std(), var(), sum(), count() Feel free to try them out or look them up online We can also filter the rows We can get all the rows where the math score is greater than 90 greater_than_90_df = df[df['math score'] &gt; 90]This says: Get all rows where the math score column is greater than 90 We can get get all rows where gender if female female_df = df[df['gender'] == &quot;female&quot;]This says: Get all rows where the gender column's value is equal to the string female "},{"title":"Plotly​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#plotly","content":"Finally, let's visualize the data using Plotly Express Plotly is a data visualization libraryIt has a lot of built-in functions for creating charts and graphsOfficial documentation: https://plot.ly/python/ (it's a bit confusing, but it has a lot of examples) To use Plotly, we need to import it into our Python script import plotly.express as pxThe as px part is optional, but it's a common convention to use px as the alias for plotly.express Plotly creates charts and graphs using DataFrame objects This is why we needed to use pandas to load the csv file into a DataFrame Let's create a histogram chart of the math scores Plotly has a function called histogram() that creates a histogram chart It takes: data_frame: The DataFrame object (with the data to plot)x: The column name for the x-axis Example: fig = px.histogram(data_frame=df, x='math score')This will create a histogram chart of the math scores After creating the chart, we need to display it To display the chart, use the show() function Example: fig.show() It will open a new tab in your browser to display the chart. This will take a few seconds to load. Full Example: import pandas as pd import plotly.express as px # Load the data df = pd.read_csv('StudentsPerformance.csv') # Create the chart fig = px.histogram(data_frame=df, x='math score') # Show the chart fig.show() We can do the same thing for the reading scores and writing scores: fig = px.histogram(data_frame=df, x='reading score')fig = px.histogram(data_frame=df, x='writing score') We can use different colors to represent different gender's scores Add the keyword parameter color=&quot;gender&quot; to the px.histogram() function to set the colors based on the values of the gender column There are 2 values (&quot;male&quot; and &quot;female&quot;) so there will be 2 colorsWhen displaying the chart, it will also show a legend with the colors and the values they representClicking the color in the legend will hide/show the data for that value "},{"title":"Conclusion​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#conclusion","content":"Pip: A package manager for Python. Let's you install, update, and remove packages (e.g., libraries and modules) Pandas: A data analysis library for data structured in tables (like csv files!). It has a lot of built-in functions for manipulating and analyzing data. Plotly: A data visualization library. It has a lot of built-in functions for creating charts and graphs. You can now use pandas to load csv files into DataFrames and analyze the data. You can also use plotly to create charts and graphs of the data. "},{"title":"StudentPerformance.csv Notes​","type":1,"pageTitle":"Lec 20 Pip Pandas Plotly","url":"/main/lectures/Pip_Pandas_Plotly#studentperformancecsv-notes","content":"Download: StudentsPerformance.csv This is a csv file containing data about students' test scores Source: https://www.kaggle.com/datasets/whenamancodes/students-performance-in-examsThis is from Kaggle, a website for data science and machine learning. It has a lot of datasets that you can use for practiceI think this dataset was generated (not real data) based on the discussion(s) associated with the dataset The file contains the following columns (Be aware that some column names have spaces in them): gender (String): &quot;male&quot; or &quot;female&quot; based on the student's genderrace/ethnicity (String): A string containing the words &quot;group&quot; and a letter (e.g., &quot;group A&quot;, &quot;group B&quot;, etc.) They correspond to different race/ethnicity groups parental level of education (String): The student's parent's level of education (e.g., &quot;some high school&quot;, &quot;bachelor's degree&quot;, &quot;associate's degree&quot;, etc.)lunch (String): Whether the student gets free/reduced lunch or not. &quot;standard&quot; means they don't get free/reduced lunch, &quot;free/reduced&quot; means they do get free/reduced lunch.test preparation course (String): Whether the student completed a test preparation course or not. &quot;none&quot; means they didn't complete a test preparation course, &quot;completed&quot; means they did complete a test preparation course.math score (Integer): The student's math score (out of 100) on an examreading score (Integer): The student's reading score (out of 100) on an examwriting score (Integer): The student's writing score (out of 100) on an exam "},{"title":"Lists, Tuples, and Strings","type":0,"sectionRef":"#","url":"/main/lectures/lists-tuples-strings/Jared","content":"","keywords":""},{"title":"Lists, Tuples, ... and Strings​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#lists-tuples--and-strings","content":"We have covered various types (int, float, str, bool) up to now. And we have used variables to store and access objects of these types. But there is a weakness in our ability to hold information. We don't have a good way to hold, say, 100 ints. And wanting to take an average of 100 numbers is not an unreasonable goal. We now turn our focus to some of the many collection types or collections in python. These are types that exist to store a bunch of information. Within those are sequence types, types that store a bunch of information in some order. "},{"title":"Lists​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#lists","content":"One such sequence type is lists. You can make a lists explicitly with an opening square bracket/brace ([), followed by comma-separated elements (values or variables), followed by a closing square bracket/brace (]). For example: Make_List list_1 = [3, 1, 4, 1, 5] list_2 = [&quot;a&quot;, 1, 1.0, True] # can contain a mix of types list_3 = [] # can be empty print(list_1) # [3, 1, 4, 1, 5] print(list_2) # ['a', 1, 1.0, True] print(list_3) # []  Once you have a list, you'll want to be able to access elements of it. This is done with the list, followed by [, followed by an index to access, followed by ].Note: indexing starts at 0.So the first element in the list has index 0, second has index 1, ..., last element has index length-1 (where length is the length of this list, generally obtained via the len() function). Index_List l = [3, 1, 4, 1, 5] print(l) # [3, 1, 4, 1, 5] print(l[0]) # 3 print(l[1]) # 1 print(l[len(l)-1]) # 5  Finally, you can change the element at a given in index of the list. Edit_List l = [3, 1, 4, 1, 5] print(l) # [3, 1, 4, 1, 5] l[0] = 5 # 3 -&gt; 5 l[len(l)-1] = 3 # 5 -&gt; 3 print(l) # [5, 1, 4, 1, 3]  "},{"title":"Tuples​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#tuples","content":"Tuples are much the same as lists mechanically. But there are some differences. Most visibly, they are created with pair of parentheses ((, and )), not square brackets. Make_Tuple tup_1 = (3, 1, 4, 1, 5) tup_2 = (&quot;a&quot;, 1, 1.0, True) # can contain a mix of types tup_3 = (0,) # singletons need a comma tup_4 = () # can be empty print(tup_1) # (3, 1, 4, 1, 5) print(tup_2) # ('a', 1, 1.0, True) print(tup_3) # (0,) print(tup_4) # ()  Indexing is exactly the same. Index_Tuple t = (3, 1, 4, 1, 5) print(t) # (3, 1, 4, 1, 5) print(t[0]) # 3 print(t[1]) # 1 print(t[len(t)-1]) # 5  However, you can not change the elements of a tuple. We say a tuple is immutable, whereas a list is mutable: Edit_Tuple t = (3, 1, 4, 1, 5) print(t) # (3, 1, 4, 1, 5) t[0] = 5 # Error  "},{"title":"Strings​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#strings","content":"Plot twist: string are also a kind of sequence type. Or at least enough so that they support indexing. That said, when you index into a string you just get a string of length 1. Index_String s = &quot;Hello, World!&quot; print(s[2]) # &quot;l&quot; print(s[4]) # &quot;o&quot; print(s[10]) # &quot;l&quot;  Like tuples however, they are immutable (you can not edit them). s = &quot;Hello, World!&quot; print(s[12]) # &quot;!&quot; s[12] = &quot;?&quot; # Error  "},{"title":"When to use What​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#when-to-use-what","content":"Strings are for text, pretty clear. You want text? Strings. But lists vs tuples? The mechanical difference is just that lists are mutable and tuples aren't. In terms of actual use: I tend to think of tuples as bundling associated information together into a bigger whole, almost making a new &quot;type&quot; out of &quot;sub-types&quot;. For instance, bundling an x-coordinate and a y-coordinate to get a 2D point. Lists to me are more for working with bulk, many of the same type of thing. If I need to store a long list of numbers to later get some stats about, I'd generally use a list. But maybe that's just me. I tend to just default to lists in general, partly because they are more flexible, but partly because they are more like &quot;arrays&quot; in other languages and so feel more &quot;canonical&quot; to me. "},{"title":"Methods​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#methods","content":""},{"title":"What Are Methods?​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#what-are-methods","content":"Methods are a weird kind of function associated with certain types. For example lists have an append() method, but only lists can use it. And you need some variable/object of the relevant type to use a method. For example, again, append(element) is a method for lists. So if you have a list l, you can invoke the append() method like so: l.append(3)(this will append the element 3 to the end of list l). We've seen the dot . before in a different context. My intuition is that foo.bar Is saying something like &quot;get the bar attribute/variable/function/whatever from foo&quot;: math.sqrt() is &quot;get the sqrt() function from the math module (library)&quot;.math.pi is &quot;get the pi constant from the math module (library)&quot;.l.append() is &quot;get the append() method from l&quot;. And if l is list, it has an append method associated with it. You might see this method written as list.append() indocumentation "},{"title":"List Methods​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#list-methods","content":"Here are a few usefullist methods: list.append(x): appends x to the end of the list.list.insert(i, x): inserts x at index i, for i between 0 and list length (inclusive).list.pop(i): removes and returns the element at index i, if i is unspecified defaults to last element in the list.list.remove(x): removes the first occurrence of x in the list. List_Methods ones = [True, 1.0] # [True, 1.0] ones.append(&quot;one&quot;) # [True, 1.0, &quot;one&quot;] ones.remove(1.0) # [True, &quot;one&quot;] ones.insert(0, 1) # [1, True, &quot;one&quot;] ones.pop(1) # [1, &quot;one&quot;] print(ones) # [1, &quot;one&quot;]  Notice that the ones used to invoke these method changes as a result of them. "},{"title":"String Methods​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#string-methods","content":"Here are a few usefulstring methods: str.lower(): returns a lower-case copy of the string.str.upper(): returns a upper-case copy of the string.str.replace(old, new): returns a copy of the string with all occurrences of substring old replaced by new. String_Methods Hi = &quot;Hello, World!&quot; hi = Hi.lower() HI = Hi.upper() H1 = Hi.replace(&quot;o&quot;, &quot;0&quot;).replace(&quot;l&quot;, &quot;1&quot;).replace(&quot;e&quot;, &quot;3&quot;) # Chaining! print(Hi) # Hello, World! print(hi) # hello, world! print(HI) # HELLO, WORLD! print(H1) # H3110, W0r1d!  Notice that the Hi used to invoke these method was unchanged. This behaviour is remarkably different from lists. Methods can change the thing used to call them, but they may not. For immutable types, a new copy must be returned. For mutable types, I would heuristically expect the invoking instance to be mutated, but that isn't guaranteed. The only real way to know is to read the documentation, or better yet, play around and test them in a REPL or some-such. This is a subtlety that is easy to get tripped up on, so I want to hang on it a bit more. We can consider methods from the black-box function perspective, where the invoking instance (such as Hi in Hi.upper()) can be viewed either as input or as being baked in (i.e., Hi.upper() is a distinct function for each value of Hi). Extra: Which is it? caution This is peaking behind the curtain quite a bit prematurely. We will come back to this point in the fullness of time (i.e., when we get to classes). Since we are applying a model, on some level it really is just a matter of perspective. But, as a fun technical detail, list.append() and str.upper() are the base functions.[True, 1.0].append() and &quot;Hello, World!&quot;.upper()are functions based on them with the invoking instance built in. True_Functions print(list.append) print(str.upper) print() print([True, 1.0].append) print(&quot;Hello, World!&quot;.upper) These base/type-level functions can be used directly, by providing what would be the invoking instance as the first argument. Calling_True_Functions ones = [True, 1.0] list.append(ones, &quot;one&quot;) print(ones) # [True, 1.0, &quot;one&quot;] Hi = &quot;Hello, World!&quot; hi = str.upper(Hi) print(hi) # HELLO, WORLD!  Extra: Currying caution This is about mathematics far outside the scope of this course. This whole concept of making a new functions by baking in an argument is related to the mathematical idea of currying functions. This starts getting into lambda calculus and other very alien looking things, but the idea isn't too crazy with some examples. If I had the function f(x,y)=2x2+xy+3y2f(x,y) = 2x^2 + xy + 3y^2f(x,y)=2x2+xy+3y2, I could say letfx(y)=2x2+xy+3y2f_x(y) = 2x^2 + xy + 3y^2fx​(y)=2x2+xy+3y2 be a family of functions for all possible values ofxxx. Now I can have functions f1(y)=2+y+3y2f_1(y) = 2 + y + 3y^2f1​(y)=2+y+3y2 andfπ(y)=2π2+πy+3y2f_{\\pi}(y) = 2\\pi^2 + \\pi y + 3y^2fπ​(y)=2π2+πy+3y2 that have &quot;baked in&quot; specific values for xxx. We are talking about this same idea, just with programming functions instead.list.append(ones, &quot;one&quot;) is analogous to using f(x,y)f(x, y)f(x,y),ones.append(&quot;one&quot;) is analogous to using fx(y)f_x(y)fx​(y). Compare the following in this framework. [True, 1.0].append(&quot;one&quot;): Function: [True, 1.0].append()(or list.append(), depending on perspective).Input: &quot;one&quot; (and maybe also [True, 1.0], depending on respective perspective).Side Effect: the list object in memory originally with value [True, 1.0]becomes [True, 1.0, &quot;one&quot;](and so without some variable to reference the list, it would be lost).Output: None. &quot;Hello, World!&quot;.upper(): Function: &quot;Hello, World!&quot;.upper()(or str.upper(), depending on perspective).Input: none (or maybe &quot;Hello, World!&quot;, depending on respective perspective).Side Effect: none.Output: &quot;HELLO, WORLD!&quot;. Updated_VS_New ones = [True, 1.0] on3s = ones.append(&quot;one&quot;) print(ones) # [True, 1.0, &quot;one&quot;] print(on3s) # None print() Hi = &quot;Hello, World!&quot; hi = Hi.upper() print(Hi) # Hello, World! print(hi) # HELLO, WORLD!  For my part, I prefer the methods that return a new object, as that is closer to the more pure mathematical intuition of functions. Moreover, you can readily chain such methods together, such as the .replace() chain in the string methods example.  caution Material from here on was not part of the lecture, but is stuff I think is quite useful to know about.  "},{"title":"Operators​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#operators","content":"Remember how + and * work on strings? Well they do the same thing to lists and tuples: Repeat_And_Concatenate print(&quot;Foo&quot; + &quot;Bar&quot;) # FooBar print(3 * &quot;Foo&quot;) # FooFooFoo print([1,5] + [3,7,9]) # [1, 5, 3, 7, 9] print(5 * [0]) # [0, 0, 0, 0, 0] print((1,2,3) + (8,9)) # (1, 2, 3, 8, 9) print(2 * (&quot;a&quot;,&quot;b&quot;)) # ('a', 'b', 'a', 'b')  "},{"title":"Unpacking/Destructuring​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#unpackingdestructuring","content":"Imagine you had a reasonably-short tuple that you know you wanted to work with all of its elements, like adding together two points in 2D space: 2D_Add # Assume these were set in the past somewhere point1 = (3,1) point2 = (4,1) # ... # Now we want to add them point_add = (point1[0]+point2[0], point1[1]+point2[1]) print(point_add) # (7, 2)  You might find using the tuple name and indices repeatedly bothersome or unclear, especially if, say, point1[0] showed up multiple times in a calculation. You could use helper variables to diminish that to some extent. 2D_Add_Variables # Assume these were set in the past somewhere point1 = (3,1) point2 = (4,1) # ... # Now we want to add them a = point1[0] b = point1[1] x = point2[0] y = point2[1] point_add = (a+x, b+y) print(point_add) # (7, 2)  I find this more visually clear, especially if those variables are used multiple times each, but the initial assignment isn't the nicest. Python has special machinery to do this a little more nicely though. 2D_Add_Unpacking # Assume these were set in the past somewhere point1 = (3,1) point2 = (4,1) # ... # Now we want to add them a, b = point1 # (a, b) = (3, 1) x, y = point2 # (x, y) = (4, 1) point_add = (a+x, b+y) print(point_add) # (7, 2)  This is known as unpacking or destructuring. The tuple (3, 1) is unpacked into the variables a and b for more convenient access. "},{"title":"Discarding​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#discarding","content":"What if we want to unpack a tuple for convenience, but we don't need all the elements, and don't want to make up variable names for the ones we don't need. For instance: computing the width (x-distance) between two points. We only care about the first elements in the tuple. We can use an underscore (_) instead of a variable name if we don't care about tracking that value and don't want to make up a name. Width_Unpacking # Assume these were set in the past somewhere point1 = (3,1) point2 = (4,1) # ... # Now we want to get the x-distance a, _ = point1 # (a, _) = (3, 1) # a = 3 x, _ = point2 # (x, _) = (4, 1) # x = 4 width = abs(a - x) print(width) # 1  "},{"title":"Negative Indexing​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#negative-indexing","content":"You may want the last element in a list/tuple/string, or the second-last, etc. This can be done by taking the length of the list minus 1. Last_Element l = [0,1,2,3,4] # 5 elements, indices 0 to 4 (inclusive) length = len(l) # 5 print(l[length-1]) # prints 4  You could also write l[len(l)-1]. This is ... kind of gross. It turns out there is shortcut for this: l[-1]. Negative_Indices l = [0,1,2,3,4] print(l[len(l)-1]) # 4 print(l[-1]) # 4 print(l[len(l)-2]) # 3 print(l[-2]) # 3 print(l[len(l)-3]) # 2 print(l[-3]) # 2  You get the idea. A negative index is basically &quot;index 'length of list minus this number'&quot;. "},{"title":"Slicing​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#slicing","content":"You can do way more than just indexing, you can extract sub-lists/tuples/strings called slices. For a list (or tuple or string) l, you can get the element at an index index via l[index]. There is a generalised indexing form though: l[from:to:step]. This gets you a sub-list/tuple/string based on the indices from from (inclusive) toto (exclusive) in increments of step. In fact, any of these three can be left blank (as long as the :s are still there).step defaults to 1.from and to default to the limits of the list (step may be negative, so from could be the end of the list when unspecified). This really is best seen with examples. Slicing l = [0,1,2,3,4,5,6,7,8,9] t = (0,1,2,3,4,5,6,7,8,9) s = &quot;0123456789&quot; print(l[3:7]) # [3, 4, 5, 6] print(t[:4]) # (0, 1, 2, 3) print(s[6:]) # 6789 print(l[-3:]) # [7, 8, 9] print(t[:-8]) # (0, 1) print(s[-8:-2]) # 234567 print(l[1:-1:2]) # [1, 3, 5, 7] print(t[9:1:-2]) # (9, 7, 5, 3) print(s[-1:-9:-2]) # 9753 print(l[1::3]) # [1, 4, 7] print(t[:9:3]) # (0, 3, 6) print(s[::2]) # 02468  And yes, you can assign to a slice. Slice_Assignment l = [0,1,2,3,4,5] print(l) # [0,1,2,3,4,5] l[::2] = l[1::2] print(l) # [1,1,3,3,5,5] l = l[::-1] print(l) # [5,5,3,3,1,1]  "},{"title":"Conversions​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#conversions","content":"Like int(), float(), str(), etc; there are list() and tuple() functions. So we can (sort of) use str(), list(), and tuple() to convert between these sequence types. "},{"title":"To List/Tuple​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#to-listtuple","content":"Converting to lists and tuples from any of the others works how you might hope, direct conversion between tuples and lists, strings becoming list/tuples of the one-letter strings. To_List t = (3,1,4,1,5) s = &quot;92653&quot; lt = list(t) # [3, 1, 4, 1, 5] ls = list(s) # ['9', '2', '6', '5', '3'] print(lt) print(ls)  To_Tuple l = [3,1,4,1,5] s = &quot;92653&quot; tl = tuple(l) # (3, 1, 4, 1, 5) ts = tuple(s) # ('9', '2', '6', '5', '3') print(tl) print(ts)  "},{"title":"To String​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#to-string","content":"Converting to strings just puts the list/tuple in string form, it does not make a string out of the elements in the list. To_String l = [3,1,4,1,5] t = (&quot;3&quot;,&quot;1&quot;,&quot;4&quot;,&quot;1&quot;,&quot;5&quot;) sl = str(l) # &quot;[3, 1, 4, 1, 5]&quot; st = str(t) # &quot;('3', '1', '4', '1', '5')&quot; print(sl) print(st)  If you want to convert a list/tuple of strings intro a string by effectively concatenating everything in the list/tuple together, you probably want to use the str.join() method. The invoking string should be whatever you want to appear between each element of the list/tuple, the glue, so to speak. For pure concatenation this is &quot;&quot;, but you can get pretty exotic with it. This can be a very powerful tool for printing lists of things with nice formatting. Join l = [&quot;3&quot;,&quot;1&quot;,&quot;4&quot;,&quot;1&quot;,&quot;5&quot;] t = (&quot;9&quot;,&quot;2&quot;,&quot;6&quot;,&quot;5&quot;,&quot;3&quot;) print(&quot;&quot;.join(l)) # &quot;31415&quot; print(&quot;&quot;.join(t)) # &quot;92653&quot; print(&quot;+&quot;.join(l)) # &quot;3+1+4+1+5&quot; print(&quot; * &quot;.join(l)) # &quot;3 * 1 * 4 * 1 * 5&quot; print(&quot;[&quot; + &quot;, &quot;.join(l) + &quot;]&quot;) # &quot;[3, 1, 4, 1, 5]&quot;  "},{"title":"Checking Containment​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#checking-containment","content":"We can check if some value is in a list/tuple/string (any collection generally) with the in keyword.value in collection evaluates to True if value is in collection and False otherwise. In print(&quot;3 in [1,2,3]:&quot;, 3 in [1,2,3]) # True print(&quot;0 in (1,2,3):&quot;, 0 in (1,2,3)) # False print(&quot;'H' in 'Hello':&quot;, 'H' in 'Hello') # True print(&quot;'h' in 'Hello':&quot;, 'h' in 'Hello') # False # For strings, in can work for sub-string print(&quot;'Hel' in 'Hello':&quot;, 'Hel' in 'Hello') # True  "},{"title":"Non-containment​","type":1,"pageTitle":"Lists, Tuples, and Strings","url":"/main/lectures/lists-tuples-strings/Jared#non-containment","content":"There are actually two ways to check if value is not in collection. Since value in collention returns a boolean, not (value in collention)would get the negation. (not value in collention is equivalent, but the parentheses are good for clarity if you don't really know the precedence of operators.) But as a more english-intuitive option, we also have value not in collection. Not_In value = 0 collection = [1,2,3] print(value in collection) # False print(not value in collection) # True print(value not in collection) # True print(not value not in collection) # False  "},{"title":"Lec 17 Recursion","type":0,"sectionRef":"#","url":"/main/lectures/Recursion","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 17 Recursion","url":"/main/lectures/Recursion#assignment-updates","content":"Stuff due soon: Participation 9 due ThursdayQuiz 10 due ThursdayLab on FridayHW6 DUE 26thCAPSTONE PROJECT RELEASED (Proposal due 28th) "},{"title":"Slides​","type":1,"pageTitle":"Lec 17 Recursion","url":"/main/lectures/Recursion#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Modules and Mutability","type":0,"sectionRef":"#","url":"/main/lectures/make_modules_mutation/Jared","content":"","keywords":""},{"title":"Built-in Modules​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#built-in-modules","content":"We already have some exposure to modules, such as the math module. Built-in Modules are just modules that come with the official python installation. These are different from module we create ourselves, which we will see later in this lecture. These are also different from modules we acquire from the great aether of the internet, which we will see later in this course. "},{"title":"Learning to Use New Modules​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#learning-to-use-new-modules","content":"There are more modules out there than we could conceivably keep track of, and more function within most modules than we could reasonably remember. A fundamental skill in programming is the ability to look up information about modules or functions that you haven't used much or at all before. When encountering a new function/module or when wanting to use one that we don't quite remember the details of, a reasonable first step is searching (via a search engine) for &quot;python [module/function name]&quot;. (Simply, when encountering a new issue, searching for &quot;python [issue/problem/question]&quot; makes a lot of sense.) The official documentationis a good reference for things you've run into before, and for getting the idea of the content of a new module. It can have a lot of written technical specifics and details that may not make enough sense yet though. When first playing with a new function, I find it really helpful to see some examples. There a number of websites I see coming up in searches that generally have examples or example-oriented explanations: geeksforgeeks.orgw3schools.comtutorialspoint.comrealpython.comprogramiz.com And finally, for more specific questions, stackoverflow.com is basically the forum I expect to run across while searching. "},{"title":"Some Common Modules​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#some-common-modules","content":"We've run into a number of built-in modules already. Here are some common modules that may have been of use so far in this course or were explored more recently in lectures/slides: math: contains a plethora of mathematical operations.string: contains collections of &quot;all letters&quot;, &quot;all digits&quot;, things like that.random: useful for random number generation or making random choices.pprint: useful for printing things in a more aesthetically pleasing manner.datetime: useful for working with dates and times and the differences between them. "},{"title":"Importing Modules​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#importing-modules","content":"We've already done some module importing. But there are actually a number of fancy import incantations we haven't seen yet. "},{"title":"import x​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#import-x","content":"We can import a module to gain access to it and all therein. The syntax for this is import module_name, where module_name is the name of the module to import. This is what we are already familiar with, but I note it for completeness. An example: Import import datetime now = datetime.datetime.now() print(f&quot;today : {now}&quot;) giga_sec = datetime.timedelta(seconds=10**9) print(f&quot;10^9 secs : {giga_sec}&quot;) future = now + giga_sec print(f&quot;1Gs from now : {future}&quot;)  "},{"title":"import x as a​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#import-x-as-a","content":"We can import a module and give it a new name. The syntax for this is import module_name as new_name, where module_name is the name of the module to import and new_name is what we rename it to. For example, datetime is kind of a long word and I'm lazy, so I'll rename it to dt: Import_As import datetime as dt now = dt.datetime.now() print(f&quot;today : {now}&quot;) giga_sec = dt.timedelta(seconds=10**9) print(f&quot;10^9 secs : {giga_sec}&quot;) future = now + giga_sec print(f&quot;1Gs from now : {future}&quot;)  "},{"title":"from x import y,z​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#from-x-import-yz","content":"We can import a specific attribute (variable, function, class, etc.) from a module. If we use this to get attribute y from module x, we can just use y in code instead of x.y. The syntax for this is from module_name import attribute_name, where module_name is the name of the module of interest and attribute_name is the attribute we want. We can also have multiple attributes separated by commas. For example, let's get the datetime and timedelta attributes from datetime directly, and avoid the need to write datetime.: From_Import from datetime import datetime,timedelta now = datetime.now() print(f&quot;today : {now}&quot;) giga_sec = timedelta(seconds=10**9) print(f&quot;10^9 secs : {giga_sec}&quot;) future = now + giga_sec print(f&quot;1Gs from now : {future}&quot;)  "},{"title":"from x import y as b,z as c​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#from-x-import-y-as-bz-as-c","content":"This allows us to import a specific attribute (variable, function, class, etc.) from a module and give it a new name. The syntax for this is from module_name import attribute_name as new_name, where module_name is the name of the module of interest,attribute_name is the attribute we want, and new_name is what we rename it to. We can also have multiple attributes and new names separated by commas. For example, to be really confusing, I'll rename datetime.datetime to dt and datetime.timedelta to td: From_Import_As from datetime import datetime as dt,timedelta as td now = dt.now() print(f&quot;today : {now}&quot;) giga_sec = td(seconds=10**9) print(f&quot;10^9 secs : {giga_sec}&quot;) future = now + giga_sec print(f&quot;1Gs from now : {future}&quot;)  "},{"title":"from x import *​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#from-x-import-","content":"I want to mention this exists, and then talk about why you probably shouldn't do it. This is basically from x import y for every y that exists. The issue with this is potential name collisions. For example, math and numpy (a big non-built-in module) both have a log() function in them. So if both from math import * and from numpy import * are done, then log() will refer to the later one loaded, obscuring the earlier one loaded. (I can't demo this particular case because the web-python uses only built-in libraries.) Moreover, you might have name collisions between variables/functions you load and variables/functions you have. I can certainly imagine having functions or variables nameddigits, match, or search, those would have collisions with functions and constants in modules I've used quite a bit. "},{"title":"Making your own Modules​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#making-your-own-modules","content":"Plot twist: You've been doing this the whole time! The python scripts you write can be treated as a module and imported into another script. Since web-python doesn't have obvious scripts, you'll have to follow along in your editor. I actually do recommend having a sandbox project that you can just go to in order to play around and test stuff. For this section, I will assume you have some project/folder with a foobar.py and amain.py inside it. Let the contents of foobar.py be: def foo(): print(&quot;Foo!&quot;) def bar(): print(&quot;Bar!&quot;) print(&quot;I'm foobar.py!&quot;)  If you ran foobar.py, you would see the output: I'm foobar.py!  However, This file, foobar.py, can be treated as a module named foobar. And so we could have the contents of main.py be: import foobar print(&quot;I'm main.py!&quot;) foobar.foo() foobar.bar()  If you ran main.py, you would see the output: I'm foobar.py! I'm main.py! Foo! Bar!  Those last three lines make sense, but what about the first? It turns out that when a module is loaded, it is basically run, so global code is executed. This load only needs to happen for the first import statement involving that module though (presumably the module is loaded and stored on the first import, with subsequent import calls only needing to set some names). So if the code for main.py were: from foobar import foo from foobar import bar print(&quot;I'm main.py!&quot;) foo() bar()  You would still only see I'm foobar.py! I'm main.py! Foo! Bar!  "},{"title":"if __name__ == \"__main__\":​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#if-__name__--__main__","content":"What if you didn't want a file/module's global code to be run when you import it? Well, the exact mechanics of why this incantation works are a little goofy and in the weeds but ... there a condition you can use that will only evaluate to True if you are the file/module being run, and not a file/module being loaded: __name__ == &quot;__main__&quot;. In the module being run __name__ is &quot;__main__&quot;. In modules being loaded, __name__ is the module's name (e.g., &quot;foobar&quot;). So if foobar.py from earlier was: def foo(): print(&quot;Foo!&quot;) def bar(): print(&quot;Bar!&quot;) if __name__ == &quot;__main__&quot;: print(&quot;I'm foobar.py!&quot;)  Running foobar.py would still produce: I'm foobar.py!  But running main.py would now produce only: I'm main.py! Foo! Bar!  "},{"title":"Mutability​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#mutability","content":"Mutability is one of those &quot;be aware of this&quot; type of issues. You are not expected to understand the intricacies of what is truly happening, But just be loosely aware of it in case some issue based on mutability arises. What do you need to know? There are types that are mutable and types that are immutable, and if you pass an object of a mutable type to a function, and change it in that function, that change may persist outside that function call. ints, for instance, are immutable. Consider (run) the following: Mut_int def mut_int(y): print(f&quot;y (in fun, before): {y}&quot;) y += 1 print(f&quot;y (in fun, after) : {y}&quot;) x = 5 print(f&quot;x (global, before): {x}&quot;) mut_int(x) print(f&quot;x (global, after) : {x}&quot;)  y is updated in the function, but that has no bearing on x outside the function. Lists, on the other hand, are mutable. Consider (run) the following: Mut_List def mut_list(lst_f): print(f&quot;lst_f (in fun, before): {lst_f}&quot;) lst_f.append(4) print(f&quot;lst_f (in fun, after) : {lst_f}&quot;) lst_g = [3, 1] print(f&quot;lst_g (global, before): {lst_g}&quot;) mut_list(lst_g) print(f&quot;lst_g (global, after) : {lst_g}&quot;)  lst_f is updated in the function, and lst_g ends up changing as well. As for why you see this difference in behaviour, the technical stuff is somewhat outside of scope for this class, so I'll include it in sections below, but a very short overview: When you pass a parameter to the function, it is the same object in memoryy += 1 didn't change the object int 5 to int 6, it set the variable y to int 6 (and so y and x no longer referred to the same object).lst_f.append(4) changed (mutated) the object list [3, 1] tolist [3, 1, 4] (lst_f and lst_g still referred to the same object, and so that change was reflected in lst_g). Stepping through these examples and code in the lecture slides in pythontutor.com may be helpful in visualising this distinction. But as for what you need to really remember right now: If you pass an object of a mutable type to a function, and change it in that function, that change may persist outside that function call. As for what types are mutable, here are the ones we already know: Mutable: list, set, dictImmutable: int, float, bool, str, tuple  caution Material from here on was not part of the lecture, but is stuff I think is helpful to note. It also has me going a bit off script and talking more a slightly different way in which I conceptualise mutability.  "},{"title":"Variables and Addresses​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#variables-and-addresses","content":"Mutability isn't actually about &quot;if we change the object, does that change persist&quot;, It's about &quot;can we truly change the object itself, or do we end up making clones/new objects&quot;. Earlier in the semester, we introduced memory diagrams, talked about objects as value-type bundles, and associated those with variable names (like x|6|int and y|&quot;Hello&quot;|str). That model has some issues. The object bundling is fine, but the issue is that multiple variable names can be associated with the same object. So we have our objects (value-type bundles). Every object exists somewhere in the vast aether-soup of memory. The location where it lives/exists is called its address. We humans also generally live at addresses, though ours are more complicated. The object addresses are just numbers, like 12345 (as opposed to 12345 Aether-Soup Lane). Variables are technically probably more like nicknames for these address than anything else. We can get the address of the object associated with a variable with the id() function. Id x = 31415 y = &quot;Hello&quot; z = False print(f&quot;x referes to the {type(x).__name__:&gt;4} {x} at address {id(x):&gt;11} Aether-Soup Lane&quot;) print(f&quot;y referes to the {type(y).__name__:&gt;4} {y} at address {id(y):&gt;11} Aether-Soup Lane&quot;) print(f&quot;z referes to the {type(z).__name__:&gt;4} {z} at address {id(z):&gt;11} Aether-Soup Lane&quot;)  (Why is the web-python giving negative addresses for ints? That makes no sense. This thing is cursed.) Here's where things get dicey. Two variables can refer to the same object, we'll see this when we pass things to function, but even simple assignment has this effect. Id_Equal x = &quot;Hello&quot; y = x print(f&quot;x referes to the {type(x).__name__:&gt;4} {x} at address {id(x):&gt;11} Aether-Soup Lane&quot;) print(f&quot;y referes to the {type(y).__name__:&gt;4} {y} at address {id(y):&gt;11} Aether-Soup Lane&quot;)  Notice, y = x doesn't copy x to y, it makes them reference theexact same object in memory. And here's where mutability comes in. If a type is immutable, then no methods or operations associated with that type will change the value of the object, so no weird issues arise. Id_Upper x = &quot;Hello&quot; y = x print(f&quot;x referes to the {type(x).__name__:&gt;4} {x} at address {id(x):&gt;11} Aether-Soup Lane&quot;) print(f&quot;y referes to the {type(y).__name__:&gt;4} {y} at address {id(y):&gt;11} Aether-Soup Lane&quot;) print(&quot;CAPITALISING&quot;) z = x.upper() # returns a new object print(f&quot;x referes to the {type(x).__name__:&gt;4} {x} at address {id(x):&gt;11} Aether-Soup Lane&quot;) print(f&quot;y referes to the {type(y).__name__:&gt;4} {y} at address {id(y):&gt;11} Aether-Soup Lane&quot;) print(f&quot;z referes to the {type(z).__name__:&gt;4} {z} at address {id(z):&gt;11} Aether-Soup Lane&quot;)  But for mutable types, some methods or operations may change the value of the object, and that will be visible to every variable referring to that object. Id_Update x = [3, 1, 4, 1, 5] y = x print(f&quot;x referes to the {type(x).__name__:&gt;4} {x} at address {id(x):&gt;11} Aether-Soup Lane&quot;) print(f&quot;y referes to the {type(y).__name__:&gt;4} {y} at address {id(y):&gt;11} Aether-Soup Lane&quot;) print(&quot;UPDATING&quot;) x[4] = 6 # changes (mutates) an existing object print(f&quot;x referes to the {type(x).__name__:&gt;4} {x} at address {id(x):&gt;11} Aether-Soup Lane&quot;) print(f&quot;y referes to the {type(y).__name__:&gt;4} {y} at address {id(y):&gt;11} Aether-Soup Lane&quot;)  "},{"title":"Variables and Passing​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#variables-and-passing","content":"When we start passing things to functions, this issue arises again and feels even more obscured. The parameter of the function and the variable passed in both reference the same object. Passing_Id def print_text(text): print(f&quot;print_text's text : (lives at {id(text)}): {text}&quot;) word = &quot;Hello!&quot; print(f&quot;global word, before: (lives at {id(word)}): {word}&quot;) print_text(word) print(f&quot;global word, after : (lives at {id(word)}): {word}&quot;)  And so if a mutable type is passed to a function, and we update the value of the object passed in, this change is visible outside the function. Passing_Updating def print_num(nums): print(f&quot;print_num's nums, before: (lives at {id(nums)}): {nums}&quot;) # This updates the object nums[4] = 6 print(f&quot;print_num's nums, after : (lives at {id(nums)}): {nums}&quot;) num_list = [3, 1, 4, 1, 5] print(f&quot;global num_list, before: (lives at {id(num_list)}): {num_list}&quot;) print_num(num_list) print(f&quot;global num_list, after : (lives at {id(num_list)}): {num_list}&quot;)  "},{"title":"Mutating Operations​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#mutating-operations","content":"As a final complicating factor, even if a type is mutable, not every operation, method, or action associated with it will mutate it. Compare the two below, which actually behave remarkably differently. Passing_Append def print_num(nums): print(f&quot;print_num's nums, before: (lives at {id(nums)}): {nums}&quot;) # This updates the object nums += [9] print(f&quot;print_num's nums, after : (lives at {id(nums)}): {nums}&quot;) num_list = [3, 1, 4, 1, 5] print(f&quot;global num_list, before: (lives at {id(num_list)}): {num_list}&quot;) print_num(num_list) print(f&quot;global num_list, after : (lives at {id(num_list)}): {num_list}&quot;)  Passing_Add def print_num(nums): print(f&quot;print_num's nums, before: (lives at {id(nums)}): {nums}&quot;) # This creates a new object from the existing two nums = nums + [9] print(f&quot;print_num's nums, after : (lives at {id(nums)}): {nums}&quot;) num_list = [3, 1, 4, 1, 5] print(f&quot;global num_list, before: (lives at {id(num_list)}): {num_list}&quot;) print_num(num_list) print(f&quot;global num_list, after : (lives at {id(num_list)}): {num_list}&quot;)  So if you want to get really granular, you just need to be careful around the use of mutating operations/methods. "},{"title":"Copying the Avoid This​","type":1,"pageTitle":"Modules and Mutability","url":"/main/lectures/make_modules_mutation/Jared#copying-the-avoid-this","content":"Alright, so what if you want to pass a mutable type, and mutate it in a function, but not have that alter things outside the function. Well, you can always pass a copy to the function. There is, in fact, a module for that: the copy module. In particular, copy.deepcopy() should ensure you have a deep enough copy to avoid this issue. Passing_Copy import copy def print_num(nums): print(f&quot;print_num's nums, before: (lives at {id(nums)}): {nums}&quot;) nums += [9] print(f&quot;print_num's nums, after : (lives at {id(nums)}): {nums}&quot;) num_list = [3, 1, 4, 1, 5] print(f&quot;global num_list, before: (lives at {id(num_list)}): {num_list}&quot;) print_num(copy.deepcopy(num_list)) print(f&quot;global num_list, after : (lives at {id(num_list)}): {num_list}&quot;)  That's it. You could also have the copying done inside the function if you wanted to. That actually might make more sense since you could forget about the need to do it once the function is done. Making_Copy import copy def print_num(nums): nums = copy.deepcopy(nums) print(f&quot;print_num's nums, before: (lives at {id(nums)}): {nums}&quot;) nums += [9] print(f&quot;print_num's nums, after : (lives at {id(nums)}): {nums}&quot;) num_list = [3, 1, 4, 1, 5] print(f&quot;global num_list, before: (lives at {id(num_list)}): {num_list}&quot;) print_num(num_list) print(f&quot;global num_list, after : (lives at {id(num_list)}): {num_list}&quot;)  "},{"title":"Lec 11 Sets and Dictionaries","type":0,"sectionRef":"#","url":"/main/lectures/sets-dicts","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 11 Sets and Dictionaries","url":"/main/lectures/sets-dicts#assignment-updates","content":"Stuff due this week: Participation 6 due ThursdayQuiz 6 due ThursdayLab on FridayHW 4 due Wednesday "},{"title":"Slides​","type":1,"pageTitle":"Lec 11 Sets and Dictionaries","url":"/main/lectures/sets-dicts#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Lec 03 Variables & Assignment","type":0,"sectionRef":"#","url":"/main/lectures/vars-and-assignment","content":"","keywords":""},{"title":"Due this week​","type":1,"pageTitle":"Lec 03 Variables & Assignment","url":"/main/lectures/vars-and-assignment#due-this-week","content":"ZyBooks 1 Due Thursday (2/16) Covers Week 1 material Quiz Due Thursday (2/16) 9 Questions, Unlimited Attempts Lab Due Friday (2/17) "},{"title":"Slides​","type":1,"pageTitle":"Lec 03 Variables & Assignment","url":"/main/lectures/vars-and-assignment#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Additional Resources​","type":1,"pageTitle":"Lec 03 Variables & Assignment","url":"/main/lectures/vars-and-assignment#additional-resources","content":"Arithmetic in Python (Socratica) "},{"title":"Variables","type":0,"sectionRef":"#","url":"/main/lectures/vars-and-assignment/Jared","content":"","keywords":""},{"title":"Assignment Workflow​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#assignment-workflow","content":"Caveat that this is but one approach. In the fullness of time, everyone develops their own preferred workflows and ways of doing things. But for the purposes of getting started, here is one workflow. "},{"title":"Making a Folder​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#making-a-folder","content":"A lot of IDEs (Integrated Development Environments, fancy word for editors) have a sort of built-in assumption that you are working on the project level, where the project may have multiple files. So often, the IDE is working in/opening the project folder. And so we a need a folder on our computer to do work in. Open your computer's file manage (e.g. Finder on Mac and File Explorer on Windows). Navigate to where you want to make this new folder. For example: There is usually a Documents folder on computers, within that I might have/make a school folder, and within that a CICS110 folder, and within that a HW folder. Secondary click (right click on mouse, two-finger click on most trackpads, etc) in the finder where you want to folder to be to bring up a menu. Select either New Folder or New &gt; Folder depending on your operating system. Give the new folder a name, 1-variables, for instance. (You can secondary click on the folder to to bring up a menu that should have a Rename option, if need be.) "},{"title":"Opening a Folder​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#opening-a-folder","content":"We need to open that folder in our editor to do stuff in it (you can also make files directly, but I'm not demoing that approach specifically). Launch VSCode. Select File &gt; Open Folder. This notation means, click the File menu and then select Open Folder from the dropdown. This menu is likely in the upper-left area of the application or of your entire screen (depending on your operating system). "},{"title":"Making a File​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#making-a-file","content":"Select File &gt; New File .... VSCode will ask for a name for the file, give it a name ending in .py, e.g., hello.py. You need to specify that .py extension. "},{"title":"Running a File​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#running-a-file","content":"Finally, if you installed the extension packet from theVSCode installation guide, then there should be a play-button-like triangle in the upper-right of the python file. Simply click that button and VSCode will open a terminal and run the file for you. Extra: Running the File via Terminal You can deliberately open a terminal in VSCode via the menuTerminal &gt; New Terminal. In the terminal, typing python3 followed by a file name will run that file, e.g., python3 hello.py. "},{"title":"Parts of a Program​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#parts-of-a-program","content":"A program can be considered in terms of the information is is keeping track of, and what it is doing with or based on that information. The information, or data, or objects, correspond with the memory part of out model of a computer running a program. What it does with that, or the logic, corresponds to the instructions part of out model of a computer running a program. This lecture (like the last) focusses on the data/objects portion. "},{"title":"Variables​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#variables-1","content":"Variables are a way to store and track information/objects. Some people find the analogy of labeled boxes helpful, where objects are put into boxes labeled by the variable name, and can then be referenced by that variable name. For instance: Variables x = 2 y = 1.5 z = x + y print(&quot;z:&quot;, z)  So what does each line here do? x = 2 assigns the int 2 to the variable x.y = 1.5 assigns the float 1.5 to the variable y.z = x + y first evaluate x + y, which is 2 + 1.5, which is 3.5 (a float); and then stores that in z.print(&quot;z:&quot;, z) prints &quot;z:&quot; and the value of z, which is 3.5. Importantly, variables can be overwritten. Take the following: Variables_Overwrite x = 2 y = 1.5 z = x + y print(&quot;z:&quot;, z) x = -3 print(&quot;x:&quot;, x) print(&quot;z:&quot;, z)  So what does each line here do? The first 4 lines are the same as before. x is the int 2.x is the float 1.5.z is the float 3.5, which is printed. x is then set to the int -3.x, which is now -3, is printed (so -3 is printed).z, which is still 3.5, is printed (so 3.5 is printed). "},{"title":"Legal Names​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#legal-names","content":"There are some important rules to remember about variable names: Names must be composed of only letters, numbers, and underscores _.Names may not begin with a number (must start with a letter or _).Names are case-sensitive. E.g., Foo and foo are different variables. Examples of legal variables names: Foofoof00_foofoo_bar_42 Examples of illegal variables names: 314_Foofoo! "},{"title":"Good Names​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#good-names","content":"Just because a name is legal doesn't mean it is &quot;good&quot;. You would ideally like variables' names to articulate something about how they are used. For example, say I have a program that takes in a number representing temperature in degrees Fahrenheit and converts it to degrees Celsius. I could reasonable name that input variablefahrenheit, Fahrenheit, degrees_F, or even F. If I named it foo, potatoes_per_cubic_yoctogram, or a, that would be profoundly unhelpful to anyone subsequently viewing that code, my future self included. The goal is to try to have that name make sense for the context it is in. "},{"title":"Memory Diagrams​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#memory-diagrams","content":"Trying to develop a sort of visual intuition for what is going in in your computer can be incredibly powerful. Many issues I have run into can be better understood with a good picture involving rectangles and arrows. Ultimately, you want to develop your own version of things that makes sense to you. You can see the canonical representation of memory diagrams for this class in the slides. I'll do something a little different here based on my understanding, and the limits of what is more feasible with my knowledge of the website. We can view memory as the computer's &quot;scratch paper&quot;, where it tracks all the objects/data. Variables are more like nicknames assigned to objects to make it easier to reference or talk about them later. We can walk through the earlier code example tracking the state of memory as we go. x = 2y = 1.5z = x + yx = -3 The first line of code is x = 2. This creates an object for the int 2, and then assigns x as a nickname to track that object. "},{"title":"The input() Function​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#the-input-function","content":"The function stuff is going to be a bit fuzzy for now, we'll go into it more soon. For a high-level understanding, it is best to look at the mathematical analogue. Say we had the function f(x)=2x2+1f(x) = 2x^2 +1f(x)=2x2+1. If I said y=f(5)y = f(5)y=f(5), then since f(5)f(5)f(5) would evaluate to 2(5)2+1=512(5)^2 + 1 = 512(5)2+1=51, we would have y=51y = 51y=51. Similarly, in programming, functions take in arguments, evaluate to something (called a return), and the results can be saved/captured in a variable. The input() function is a bit weird even as function go, but is very important. Its purpose is to get input from the user(i.e. whoever is running the code, generally us in this case). The input() function may optionally take in a string argument, which is used as text to display when prompting the user. We specify such a thing by putting it between the parentheses (again, like a function in math). The input() function evaluates to, or &quot;outputs&quot;, or &quot;returns&quot;, whatever the user typed in, as a string. Take for example this program (that perhaps looks familiar): Hello_You your_name = input(&quot;Please enter your name: &quot;) print(&quot;Hello, &quot; + your_name)  Go ahead and run it on the website. Then run it VSCode. Notice the different ways you can be prompted for input. The website pops up a dialogue box, but the need to enter input into the terminal is less obvious: $ python3 hello.py Please enter your name: Jared Hello, Jared  I typed in that &quot;Jared&quot; and hit the return/enter key. Now see what it looks like without specifying the prompt for the input function. Hello_You_Quite your_name = input() print(&quot;Hello, &quot; + your_name)  The website still pops up a dialogue box, but there is no indication (other than the terminal not prompting for another command) of the need to enter text into the terminal: $ python3 hello.py Jared Hello, Jared  "},{"title":"Looking Back​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#looking-back","content":"We haven't explored functions yet, but with just the idea of functions as black boxes taking arguments and giving returns, we now have all the pieces to understand this program: your_name = input(&quot;Please enter your name: &quot;) print(&quot;Hello, &quot; + your_name)  The first line is your_name = input(&quot;Please enter your name: &quot;): &quot;Please enter your name: &quot; is a string, we pass that the the function input().input(&quot;Please enter your name: &quot;) then uses that string as a prompt to solicit input from the user, and returns that input.your_name = input(&quot;Please enter your name: &quot;) captures that returned input, and stores it in the variable your_name.So if I entered Jared as the input, then your_name would hold &quot;Jared&quot;. The second line is print(&quot;Hello, &quot; + your_name): Again, your_name contains the string &quot;Jared&quot; in this step-through example.The expression &quot;Hello, &quot; + your_name evaluates to &quot;Hello, Jared&quot;.print(&quot;Hello, &quot; + your_name) then prints Hello, Jared to the terminal. "},{"title":"Recursion","type":0,"sectionRef":"#","url":"/main/lectures/Recursion/Jared","content":"","keywords":""},{"title":"Acts of Mad Science​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#acts-of-mad-science","content":"Programming is a lot like trying to solve a puzzle, where we have all these tools/techniques as possible pieces to the puzzle. In order to really explore the full power of a given tool, and see all the kinds of places it can fit in to the broader puzzle, it is necessary to experiment and try pushing the limits of what we can do with something. Trying to guess how things might behave in a weird case, and make experiments to test that hypothesis (stepping through them in the debugger or pythontutor) can be enlightening. This helps us both see what the tool is capable of, but also improve our understanding of the mechanics of it. In this case, let's look at functions. What are some thing we know about them: We can define/make them.We can call them.They can take in arguments.They can return something (or None). And what have we told you about variable scope: Variables are local or global in scope.Assigning to a variable in a function's scope creates a local variable.Referencing a variable in a function's scope first looks locally then globally. So just looking at those function rules, we can experiment with weird combinations or interactions, try to see what is possible beyond the beaten path.None of the following examples you need to remember or understand, but interrogating them until they make sense might grant a deeper understand of a core programming concept We could ask: Given rule 1 and rule 1, can we define a function within a function definition? Def_Fun_In_Fun def foo(): def bar(): print(&quot;bar&quot;) print(&quot;foo&quot;) bar() foo()  Yes, it appears that we can. As a side effect, we get many questions about how this interacts with the concept of scope (something I spent a solid amount of time exploring in pythontutor myself). It turns out that those scope rules we presented you are ... a simplification (though they are correct for 1 level of definition, and the spirit of them provides guidance for deeper levels). But look at all the questions and exploration that comes out of just that example. We could ask: Given rule 1 and rule 2, can we call a function inside another function? Fun_Call_In_Fun def foo(): print(&quot;foo&quot;) def bar(): foo() print(&quot;bar&quot;) bar()  Yes, and we actually do that quite frequently (and also did in the prior example). We could ask: Given rule 1 and rule 2, can we call a function inside another function, if the function we are calling hasn't been defined yet? Fun_Call_In_Fun_Rev def bar(): foo() # foo is not defined when bar is defined print(&quot;bar&quot;) # what if bar() was here def foo(): print(&quot;foo&quot;) bar()  Understanding this would force us to cement some understanding of scoping rules.foo() is not called when bar() is defined (a function is not run when it is defined). When bar() is called (and run), foo() has been defined globally, so the foo() within the bar() call can be found (when the code looks globally). If the global bar() call was before foo() was defined, this would not work. We could ask: If a function can call a function that has not yet been defined, can a function ... call itself? (Run this one locally in a sandbox project so that you can kill it with control-c) def foo(): print(&quot;foo&quot;) foo() foo()  So, uh, yeah, you totally can! Seems like a dangerous power though, so let's figure out how to do that safely. Extra: Baba is You If you like this idea of experimenting with a set of tools/abilities you are given to try and learn what they really do and pushing them to their limits in contrived ways, then I can't recommend enough the puzzle video-game Baba is You. "},{"title":"Recursion​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#recursion-1","content":"Recursion is a technique wherein a function calls itself. There are some cases where this is a surprisingly natural to do. Take for example, the definition of factorial: 0!=10! = 10!=1 and n!=n∗(n−1)!n! = n*(n-1)!n!=n∗(n−1)!That is a recursive definition. Factorial is defined in terms of itself. And we'll use the factorial as a motivating example. But we can't just have a function call itself recklessly. As that earlier example showed, if function calls itself, which then calls itself, which then calls itself, ad infinitum, there is a risk of infinite recursion. So we want to avoid that. So when thinking about recursion, we need to separately consider two types of cases: bases cases, and inductive/recursive cases. It is also especially prudent to consider illegal cases. "},{"title":"Base Case(s)​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#base-cases","content":"Base Cases are the cases where the function has a specific return. In the factorial case, this is 0, since 0!=10! = 10!=1 is the sort of &quot;fixed solution&quot;. Because our function returns on these cases, we have no risk of infinite recursion from them. A function with just that that base case looks like this: Factorial_Base def factorial(n): # 0! = 1 if n == 0: return 1 print(f&quot;factorial(0) : {factorial(0)}&quot;) # None  "},{"title":"Inductive/Recursive Cases​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#inductiverecursive-cases","content":"Inductive/Recursive Cases are the spicy cases, where our function calls itself in some way. It is extremely important that the function call itself with adifferent argument than it received, in particular, it should call itself only on arguments that arecloser to a base case in some way. In the factorial case, our recursive case is all the whole numbers nnn such that n&gt;0n &gt; 0n&gt;0. And note that factorial of nnn depends on factorial of n−1n-1n−1, and n−1n - 1n−1 is closer to 000than nnn is. If the function only calls itself on inputs that approach a base case, then we say it is well founded, and it will not have an issue of infinite recursion. For instance: the n=3n = 3n=3 case will depend on n−1=2n-1 = 2n−1=2, which will depend on (n−1)−1=1(n-1)-1 = 1(n−1)−1=1, which will depend on ((n−1)−1)−1=0((n-1)-1)-1 = 0((n−1)−1)−1=0, which is a base case. A properly defined recursion should always eventually reach a base case. Sticking that recursive case in gets us this: Factorial_Recur def factorial(n): # 0! = 1 if n == 0: return 1 # n! = n * (n-1)! return n * factorial(n-1) print(f&quot;factorial(0) : {factorial(0)}&quot;) # 1 print(f&quot;factorial(1) : {factorial(1)}&quot;) # 1 print(f&quot;factorial(5) : {factorial(5)}&quot;) # 120  (You could use if-else if you preferred, but because of the return in the base case, it is not necessary.) "},{"title":"Illegal Cases​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#illegal-cases","content":"Illegal cases are the cases where our inputs are something that the function shouldn't be run on. In the factorial case, negative numbers, fractions, non-numbers, etc. would all be illegal cases. To properly guard our function, we should weed these cases out. Because if we have our function deal with these cases via an error/abort, then there is no risk of infinite recursion from these cases (since the function terminates on that call). The risk of an illegal input triggering an infinite recursion is the only reason I feel compelled to specifically flag these cases. (After all, almost any function runs the risk of illegal inputs, but they generally trigger errors, not infinite looping like in recursion.) In code, guarding against illegal inputs for factorial could look like: Factorial_Illegal def factorial(n): # Weed out illegal arguements if type(n) != int or n &lt; 0: print(f&quot;Illegal argument: {n}&quot;); return # or raise TypeError or ValueError # 0! = 1 if n == 0: return 1 # n! = n * (n-1)! return n * factorial(n-1) print(f&quot;factorial(-1) : {factorial(-1)}&quot;) # None print(f&quot;factorial(2.3) : {factorial(2.3)}&quot;) # None print(f&quot;factorial('A') : {factorial('A')}&quot;) # None  (You could use if-elif-else if you preferred, but because of the return in the illegal and base cases, it is not necessary.) "},{"title":"What is Necessary​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#what-is-necessary","content":"All of these are necessary to ensure safe recursion for any function call. But if you can be confident that the function has no risk of receiving illegal inputs, then only the base case and inductive cases are truly necessary. If you miss the base case, you will either get infinite recursion or an error/wrong result if you reduce to an error case: Factorial_Sans_Base def factorial(n): if type(n) != int or n &lt; 0: print(f&quot;Illegal argument: {n}&quot;); return # or raise TypeError or ValueError return n * factorial(n-1) print(f&quot;factorial(5) : {factorial(5)}&quot;) # Error from 0 * None  If you miss the recursive case, well, you'll get a ton of wrong results: Factorial_Sans_Recur def factorial(n): if type(n) != int or n &lt; 0: print(f&quot;Illegal argument: {n}&quot;); return # or raise TypeError or ValueError if n == 0: return 1 print(f&quot;factorial(1) : {factorial(1)}&quot;) # None (should be 1) print(f&quot;factorial(5) : {factorial(5)}&quot;) # None (should be 120)  But more importantly, if your recursion isn't well founded, you will get infinite recursion. def factorial(n): if type(n) != int or n &lt; 0: print(f&quot;Illegal argument: {n}&quot;); return # or raise TypeError or ValueError if n == 0: return 1 return n * factorial(n) # Oops print(f&quot;factorial(1) : {factorial(1)}&quot;) # Runs Forever/Stack Overflow Error print(f&quot;factorial(5) : {factorial(5)}&quot;) # Runs Forever/Stack Overflow Error  If you miss the illegal cases, you may be safe if the function is never called with illegal input, but that absolute insurance is gone: def factorial(n): if n == 0: return 1 return n * factorial(n-1) print(f&quot;factorial(-1) : {factorial(-1)}&quot;) # Runs Forever/Stack Overflow Error  You need these: Base case(s)Well founded recursive case(s) You should really address: Illegal case(s) "},{"title":"More Examples​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#more-examples","content":"Let's look at some more examples. "},{"title":"Fibonacci​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#fibonacci","content":"The Fibonacci sequence is a famous example of recursion despite ...*sigh* table that thought for now. Let FnF_nFn​ denote the nnnth Fibonacci number, the sequence is defined as below: F0=0F_0 = 0F0​=0F1=1F_1 = 1F1​=1Fn=Fn−1+Fn−2F_n = F_{n-1} + F_{n-2}Fn​=Fn−1​+Fn−2​, for n≥2n\\ge 2n≥2 Our bases cases are thus n=0n = 0n=0 and n=1n = 1n=1, which should yield 000 and 111 respectively. Our recursive case is the n≥2n \\ge 2n≥2 case, where we recur on n−1n-1n−1 and n−2n-2n−2, and add those together. Our recursive case is well-founded because for every nnn such thatn≥2n\\ge 2n≥2, n−1n-1n−1 and n−2n-2n−2 are both closer to 000 and 111 than nnn is. And putting this into code looks like (I'm leaving out the error checking for simplicity): Fibonacci_Recursion def fib(n): if n == 0: return 0 if n == 1: return 1 return fib(n-1) + fib(n-2) for i in range(10): print(f&quot;fib({i}) : {fib(i)}&quot;)  Extra: That Tabled Thought This ... is a terrible thing to do. Consider what a sort &quot;call tree&quot; (not that you have any reason to know what to is) for fib(5) looks like: fib(5) = 5 |-- fib(4) = 3 | |-- fib(3) = 2 | | |-- fib(2) = 1 | | | | -- fib(1) = 1 | | | | -- fib(0) = 0 | | |-- fib(1) = 1 | |-- fib(2) = 1 | | | -- fib(1) = 1 | | | -- fib(0) = 0 |-- fib(3) = 2 |-- fib(2) = 1 | | -- fib(1) = 1 | | -- fib(0) = 0 |-- fib(1) = 1 It turns out all the redundant calls lead to exponential blowup in the number of function calls necessary for this approach. So for fin(n) it takes &quot;on the order of&quot;2n2^n2n steps for this function to compute that. Quite horrendous at scale. There is a whole programming technique called dynamic programmingwhile is about turning these kinds of recursions into iterative approaches that effective cache/save the results of previous function calls. Applying that technique her could lead to something like: Fibonacci_Iteration def fib(n): # fib_list effectively stores/caches what would be # the function returns for each possible call. # So calls are replaced with lookups, # and calculations only done the first time. fib_list = [0,1] while len(fib_list) &lt;= n: fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list[n] for i in range(10): print(f&quot;fib({i}) : {fib(i)}&quot;) So for fin(n) this now takes &quot;on the order of&quot; nnn steps. As a bonus, there is actually a constant timeway to calculate the fibonacci sequence. Fibonacci_Constant rt5 = 5 ** (1/2) φ = (1 + rt5) / 2 ψ = (1 - rt5) / 2 def fib(n): return round((φ**n - ψ**n) / rt5) for i in range(10): print(f&quot;fib({i}) : {fib(i)}&quot;)  "},{"title":"3n+13n+13n+1 Sequence​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#3n1-sequence","content":"Consider a sequence of number based on these rules: You start at some positive number (our input).You stop when the sequence gets to 1.For even nnn, the next number is 12n\\frac{1}{2}n21​nFor odd nnn (s.t. n&gt;1n &gt; 1n&gt;1), the next number is 3n+13n+13n+1 A lot of sequence generations can be recursive. Here, generating a sequence starting at nnn can become nnnfollowed by generating the sequence starting at the number after nnn. Where each time we are getting &quot;closer to the end of the sequence&quot;. Our base case is when the sequence ends, which is when n=1n = 1n=1. The return for n=1n = 1n=1 should be [1] (the entire sequence starting at 1). Our recursive case is when n≥2n \\ge 2n≥2. Recurring on the next number in the sequence (n//2 if n%2==0 else 3*n+1) would get us the entire sequence after nnn. If we stick nnn on the front of that, we're done. Is this well founded? Well ... nobody knows! But since this a famous mathematical problem that nobody has found a non-terminating-at-1 instance of, it's probably safe to use this on most inputs you would want to. But, if you wanted to be proper, you probably shouldn't do this. And putting this into code looks like: Collatz def collatz_seq(n): if n == 1: return [1] return [n] + collatz_seq(n//2 if n%2==0 else 3*n+1) for i in range(1,10): print(f&quot;collatz_seq({i}) : {collatz_seq(i)}&quot;)  "},{"title":"Sum Arbitrarily Nested Lists​","type":1,"pageTitle":"Recursion","url":"/main/lectures/Recursion/Jared#sum-arbitrarily-nested-lists","content":"The previous examples could all reasonably be solved with an iterative approach. But sometimes a structure is annoying enough that a recursive approach ends up working out more nicely. For instance, imagine that we a had a list, whose elements are either ints or lists, whose elements are either ints or lists, whose elements are either ints or ... you get the idea. Some weird nested int list data structure, like [1,[2,[3,[4,5],6],7],8,[[9]]]. And maybe we want the sum of all these numbers. That ... is not pleasant to do iteratively. You may find this example rather contrived. And it is. But it isomorphic/structurally equivalent to a quite common structure:a tree(albeit with values only at the leaves). So the structure of it is not so far afield from something that may exist. So we want a nested list summation function. How could a nested list summation function on &quot;other inputs&quot; help us write a nested list summation function? If we mapped such a function over our input nested list, we would have a list of numbers, which normal sum() can take care of. For example, [1,[2,[3,[4,5],6],7],8,[[9]]] would become [1,27,8,9], which can then be summed to 45. And when we recur, we are &quot;reducing how deep we need to go&quot;. Our base case is, &quot;when we have no deeper we can go&quot;. This is when we don't even have a list, just an int. At which point the sum is the solitary int. Our recursive case is otherwise, when we have a list. We can recur on each element of the list to get its sum, getting us a list of ints that we can then sum together. Our recursion here is well founded because by iterating over each element of the list, we are iterating on things with a smaller maximum depth, which brings us closer to the non-list base case. And putting this into code looks like: Sum def nested_list_sum(nested_list): # If it's not a nested list if type(nested_list) != list: return nested_list # Recur on each element sum_list = [nested_list_sum(l) for l in nested_list] return sum(sum_list) nested_list = [1,[2,[3,[4,5],6],7],8,[[9]]] print(f&quot;Sum: {nested_list_sum(nested_list)}&quot;) # 45  "},{"title":"Lec 21 Web APIs","type":0,"sectionRef":"#","url":"/main/lectures/Web_APIs","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#assignment-updates","content":"Stuff due soon: HW7 Due 5/15Capstone Project Presentations 5/16 and 5/17Quiz due Thursday "},{"title":"Slides​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#slides","content":"Section 1, 2, 3, 4, 5, 6 Download Powerpoint "},{"title":"Notes​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#notes","content":""},{"title":"APIs​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#apis","content":"What is an API? Application Programming Interface: A set of functions exposed by a service that allows you to interact with the serviceAllows you to interact with a service without having to know how the service worksExample: Google Maps API Allows you to get directions, find places, etc.You don't need to know how Google Maps works to use itYou just need to know how to use the API What is a Web API An API that can be accessed through a URLURL = The address of a website: https://www.google.com/ How do you use an API? You make a request to the APIThe API returns a responseThe response contains the data you requested Web APIs APIs that are exposed over the internetYou make a request to a URLThe response is returned in a format like JSON (python dictionary) usuallyExample: Google Maps API You make a request to a URLThe response is returned in JSON formatYou can then parse the JSON and use the data Example: https://catfact.ninja/#/Facts/getRandomFact This is an API that returns a random cat factClick the &quot;Try it out&quot; button to get a random cat fact! "},{"title":"JSON​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#json","content":"The cat fact API returns a response in JSON formatWhat is JSON JSON = JavaScript Object NotationIt's basically a python dictionary "},{"title":"URLlib​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#urllib","content":"How do we make a request to an API?One way: urllib urllib is a builtin python library that allows you to make requests to URLs Example: import urllib.request url = &quot;https://catfact.ninja/fact&quot; response = urllib.request.urlopen(url) print(response.read())  This returns a response in bytes (notice the b at the front): b'{&quot;fact&quot;:&quot;Cats have individual preferences for scratching surfaces and angles. Some are horizontal scratchers while others exercise their claws vertically.&quot;,&quot;length&quot;:145}'  We can decode it to a string, and then parse it as JSON using the json library: import urllib.request import json url = &quot;https://catfact.ninja/fact&quot; response = urllib.request.urlopen(url) response_string = response.read().decode('utf-8') response_dict = json.loads(response_string) print(response_dict)  This prints: {'fact': 'Cats have individual preferences for scratching surfaces and angles. Some are horizontal scratchers while others exercise their claws vertically.', 'length': 145}  "},{"title":"Requests​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#requests","content":"Urlib is a little bit clunkyThere is a better library called requests requests is a third party library that you need to installYou can install it with pip install requests (or pip3 install requests) New Code: import requests url = &quot;https://catfact.ninja/fact&quot; response = requests.get(url) response_dict = response.json() print(response_dict)  This prints: {'fact': 'Cats have individual preferences for scratching surfaces and angles. Some are horizontal scratchers while others exercise their claws vertically.', 'length': 145}  Didn't have to decode the response to a stringDidn't have to parse the string as JSONrequests does all of this for us "},{"title":"Activity​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#activity","content":"boredapi is an API that returns a random activity https://www.boredapi.com/ is the websitehttps://www.boredapi.com/documentation is the documentation Try to use either urllib or requests to make a request to the boredapi! "},{"title":"API Keys​","type":1,"pageTitle":"Lec 21 Web APIs","url":"/main/lectures/Web_APIs#api-keys","content":"Not covered in class, but here if anyone is curious Some APIs require an API key An API key is a unique identifier that is used to authenticate you when you make a request to an APIIt is used to track your usage of the API, and to prevent abuse. Also, it allows the API to charge you if it is a paid API If an API requires an API key, you will need to register for one You will need to go to the API's website and register for an API keyYou will then need to pass the API key in the request Example: https://openweathermap.org/apiWe won't cover this in class, but ask chatGPT if you want to know more "},{"title":"Lec 09 While Loops","type":0,"sectionRef":"#","url":"/main/lectures/while-loops","content":"","keywords":""},{"title":"Reflection Form​","type":1,"pageTitle":"Lec 09 While Loops","url":"/main/lectures/while-loops#reflection-form","content":"Please fill out this reflection form: click here The form is anonymous and will be used to help us improve the course. Please be honest and provide constructive feedback if possible. We will immediately take action on any feedback provided to improve the course. "},{"title":"Assignment Updates​","type":1,"pageTitle":"Lec 09 While Loops","url":"/main/lectures/while-loops#assignment-updates","content":"Stuff due this week: Participation 5 due Thursday All (or almost all) of the participation HWs are up now (10 in total) Quiz 6 due ThursdayHW4 Due Next Wednesday (3/29) BranchingHas been available since last lab day Lab on Friday "},{"title":"Slides​","type":1,"pageTitle":"Lec 09 While Loops","url":"/main/lectures/while-loops#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Code For Activities​","type":1,"pageTitle":"Lec 09 While Loops","url":"/main/lectures/while-loops#code-for-activities","content":"Coin Flip Example Code: coin_flip.pyInfinite Loop Example: infinite.pyBreak/Continue Example: hi_bot.py "},{"title":"Sets and Dictionaries","type":0,"sectionRef":"#","url":"/main/lectures/sets-dicts/Jared","content":"","keywords":""},{"title":"What Are Sets and Dictionaries​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#what-are-sets-and-dictionaries","content":"We have already learned about some collection types: lists, tuples, and strings. These notably all have some sort of canonical ordering for their elements. Today we will be considering some un-ordered collection types. "},{"title":"Sets​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#sets","content":"Sets are a pure collection of unique elements. Any given value is either in the set or not. Sets can be declared with squiggly brackets ({}) with comma-separated values. Empty sets must be created with the set() function ({} alone makes an empty dictionary). Make_Set empty_set = set() non_empty_set = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;durian&quot;} print(empty_set) print(non_empty_set)  They are un-ordered, and un-indexable. Attempts to index a set will lead to an error. Index_Set fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;durian&quot;} print(fruits[0]) # Throws Error  The real thing you would do with a set is check membership. In_Set fruits = {&quot;apple&quot;, &quot;banana&quot;, 314, &quot;cherry&quot;, &quot;durian&quot;, 3.14} print(&quot;apple&quot; in fruits) # True print(&quot;pineapple&quot; in fruits) # False  "},{"title":"Dictionaries​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#dictionaries","content":"Dictionaries are almost a generalisation of a lists in a way. Lists are a collection of indexed elements, the indices are 0 to length minus 1 (inclusive). These indices impose a natural ordering on the elements in the list. Dictionaries replace indices with arbitrary unique keys, and these keys map to values(as opposed to indices mapping to elements.). Using keys to index into the dictionary is what forces them to need to be unique. These keys can be anything, and so there is no clear ordering. This is really useful if you want to track categorical information about something. So a dictionary with information about person maybe has &quot;age&quot;, &quot;height&quot;, &quot;hair colour&quot;as keys, for instance. Dictionaries can be declared with squiggly brackets ({}) with comma-separated key:value pairs. Empty dictionaries can be created with via {}. Make_Dict empty_dict = {} non_empty_dict = {&quot;apple&quot;: &quot;pie&quot;, 3: 14, 3.14: &quot;pie&quot;} print(empty_dict) print(non_empty_dict)  Indexing for a dictionary is visually the same as a list,dictionary[key] will give you the value associated with that key. Index_Dict Jared = {&quot;age&quot;: 26, &quot;job&quot;: &quot;TO&quot;, &quot;height&quot;: (6, 1), &quot;hobby&quot;: &quot;origami&quot;} print(f&quot;Jared: {Jared}&quot;) print(f&quot;Jared['age']: {Jared['age']}&quot;) # 26 print(f&quot;Jared['job']: {Jared['job']}&quot;) # TO print(f&quot;Jared['height']: {Jared['height']}&quot;) # (6, 1) print(f&quot;Jared['hobby']: {Jared['hobby']}&quot;) # origami print(f&quot;Jared['name']: {Jared['name']}&quot;) # Error!  If the key does not exist on an access attempt, and error occurs (setting is fine though). This can be used to retrieve values (as above), update values for a given key, and make new keys and set the associated value. Edit_Dict Jared = {&quot;age&quot;: 26, &quot;job&quot;: &quot;TO&quot;, &quot;height&quot;: (6, 1), &quot;hobby&quot;: &quot;origami&quot;} # I haven't done origami in a while, should update that Jared[&quot;hobby&quot;] = &quot;video games&quot; print(f&quot;Jared: {Jared}&quot;) # I suppose my NAME is probably relevant, should add that Jared[&quot;first name&quot;] = &quot;Jared&quot; Jared[&quot;last name&quot;] = &quot;Yeager&quot; print(f&quot;Jared: {Jared}&quot;)  Finally, in. Checks if a key is a key in the dictionary. In_Dict Jared = {&quot;age&quot;: 26, &quot;job&quot;: &quot;TO&quot;, &quot;height&quot;: (6, 1), &quot;hobby&quot;: &quot;origami&quot;} print(&quot;age&quot; in Jared) # True print(26 in Jared) # False print((&quot;age&quot;, 26) in Jared) # False  "},{"title":"Useful Methods​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#useful-methods","content":"Naturally, the official documentation has the full list of methods for all of these types. I want to flag a few that might be useful now so they you know such things exist. You don't need to memorise these, knowing they exist in order to be able to look them up in the future is the real goal. Official documentation: stringslistssetsdictionaries Non-official documentation: stringsliststuplessetsdictionaries "},{"title":"Sets​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#sets-1","content":"Some general methods: .add(x): adds x to the set.discard(x): removes x from the set (the .remove(x) method does the same, but throws an error if x is not in the set).pop() removes and returns a random element from the set Set_Add fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;} print(f&quot;before: {fruits}&quot;) fruits.add(&quot;grape&quot;) print(f&quot;after : {fruits}&quot;)  Set_Discard fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;} print(f&quot;before: {fruits}&quot;) fruits.discard(&quot;banana&quot;) print(f&quot;after : {fruits}&quot;)  Set_Pop fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;} print(f&quot;before: {fruits}&quot;) fruit = fruits.pop() print(f&quot;after : {fruits}&quot;) print(f&quot;popped: {fruit}&quot;)  Some methods for common set operations: .intersection(s) returns a set of elements both in the invoking set and s.union(s) returns a set of elements in either the invoking set or s.difference(s) returns a set of elements in the invoking set but not in s.symmetric_difference(s) returns a set of elements in either the invoking set or s, but not both Set_Ops fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;} colours = {&quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;} print(f&quot;inter : {fruits.intersection(colours)}&quot;) print(f&quot;union : {fruits.union(colours)}&quot;) print(f&quot;diff : {fruits.difference(colours)}&quot;) print(f&quot;sym diff: {fruits.symmetric_difference(colours)}&quot;)  "},{"title":"Dictionaries​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#dictionaries-1","content":"Some general methods: .update(d): adds key-value pair from dictionary-like object (iterable with key-value pairs) d to the dictionary.pop(k) removes and key-value pair for key k and returns the associated value Dict_Update fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;banana&quot;: &quot;yellow&quot;, &quot;cherry&quot;: &quot;red&quot;} print(fruit_colours) # Update with a dict fruit_colours.update({&quot;apple&quot;: &quot;green&quot;, &quot;orange&quot;: &quot;orange&quot;}) print(fruit_colours) # Update with a list of key-value tuples fruit_colours.update([(&quot;apple&quot;, &quot;yellow&quot;), (&quot;grape&quot;, &quot;purple&quot;)]) print(fruit_colours)  Dict_Pop fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;banana&quot;: &quot;yellow&quot;, &quot;cherry&quot;: &quot;red&quot;} print(f&quot;before: {fruit_colours}&quot;) fruit_color = fruit_colours.pop(&quot;apple&quot;) print(f&quot;after : {fruit_colours}&quot;) print(f&quot;popped: {fruit_color}&quot;)  Some methods for extracting all keys/values of a dictionary: .keys(): returns an iterable of the keys.values(): returns an iterable of the values.items(): returns an iterable of key-value tuples Dict_Keys fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;banana&quot;: &quot;yellow&quot;, &quot;cherry&quot;: &quot;red&quot;} print(f&quot;dict: {fruit_colours}&quot;) print(f&quot;keys: {fruit_colours.keys()}&quot;)  Dict_Values fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;banana&quot;: &quot;yellow&quot;, &quot;cherry&quot;: &quot;red&quot;} print(f&quot;dict : {fruit_colours}&quot;) print(f&quot;values: {fruit_colours.values()}&quot;)  Dict_Items fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;banana&quot;: &quot;yellow&quot;, &quot;cherry&quot;: &quot;red&quot;} print(f&quot;dict : {fruit_colours}&quot;) print(f&quot;items: {fruit_colours.items()}&quot;)  "},{"title":"Conversions​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#conversions","content":""},{"title":"To Sets​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#to-sets","content":"Conversion from strings, lists, and tuples to sets is a lot like conversions to lists/tuples, except duplicates will be lost (since sets are collections of unique elements). To_Set str_to_set = set(&quot;Hello, World&quot;) print(str_to_set) list_to_set = set([3, 1, 4, 1, 5]) print(list_to_set) tuple_to_set = set([9, 2, 6, 5, 3, 5]) print(tuple_to_set)  "},{"title":"From Sets​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#from-sets","content":"Converting from a set to a list/tuple basically just creates an ordering, but you really have no guarantees about that ordering. From_Set_List_Tuple fruits = {&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;} set_to_list = list(fruits) print(set_to_list) set_to_tuple = tuple(fruits) print(set_to_tuple)  You can directly convert to a string, but like with list/tuples to strings, it will just be the printable form. You can use the string .join() method like with list/tuples, but no ordering guarantees. From_Set_String fruits = {&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;} set_to_string = str(fruits) print(set_to_string) # Only works if all keys are strings set_to_string = &quot; &quot;.join(fruits) print(set_to_string)  "},{"title":"From Dicts​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#from-dicts","content":"Converting from a dict to almost anything else is like the values don't exist. Iteration is done purely over the keys for dicts. From_Dict fruits = {&quot;apple&quot;: &quot;red&quot;, &quot;orange&quot;: &quot;orange&quot;, &quot;banana&quot;: &quot;yellow&quot;} dict_to_set = set(fruits) print(dict_to_set) dict_to_list = list(fruits) print(dict_to_list) dict_to_tuple = tuple(fruits) print(dict_to_tuple) dict_to_string = str(fruits) print(dict_to_string) # Only works if all keys are strings dict_to_string = &quot; &quot;.join(fruits) print(dict_to_string)  If you explicitly want the key-value pairs, you may want to convert the iterable returned by the .items() method. From_Dict_Items fruits = {&quot;apple&quot;: &quot;red&quot;, &quot;orange&quot;: &quot;orange&quot;, &quot;banana&quot;: &quot;yellow&quot;} fruit_kv_pairs = fruits.items() dict_to_set = set(fruit_kv_pairs) print(dict_to_set) dict_to_list = list(fruit_kv_pairs) print(dict_to_list) dict_to_tuple = tuple(fruit_kv_pairs) print(dict_to_tuple) dict_to_string = str(fruit_kv_pairs) print(dict_to_string) # dict_items is an iterable of tuples (not strings), so .join() fails dict_to_string = &quot; &quot;.join(fruit_kv_pairs) print(dict_to_string)  "},{"title":"To Dicts​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#to-dicts","content":"Converting to a dictionary basically requires a set/list/tuple of key-value pairs (stings can't be element-wise paired like this). To_Dict fruits = {&quot;apple&quot;: &quot;red&quot;, &quot;orange&quot;: &quot;orange&quot;, &quot;banana&quot;: &quot;yellow&quot;} set_to_dict = dict({('apple', 'red'), ('banana', 'yellow'), ('orange', 'orange')}) print(set_to_dict) list_to_dict = dict([('apple', 'red'), ('banana', 'yellow'), ('orange', 'orange')]) print(list_to_dict) tuple_to_dict = dict((('apple', 'red'), ('banana', 'yellow'), ('orange', 'orange'))) print(tuple_to_dict)  Extra: Zips You might imagine a case where you have a collection of keys and a collection of values, and want to turn them into a dictionary. You would first need to bundle the key and value elements together into pairs before dict() can work. This is exactly what zip() does. To_Dict_Zip_List_Tuple k = [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;] v = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;] lists_to_dict = dict(zip(k, v)) print(lists_to_dict) k = (&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;) v = (&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;) tuples_to_dict = dict(zip(k, v)) print(tuples_to_dict) You don't have guarantees about the order in which elements of the set get zipped, and zipping string will give pairing of letters, but both of these work mechanically. To_Dict_Zip_Set_String k = {&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;} v = {&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;} sets_to_dict = dict(zip(k, v)) print(sets_to_dict) k = &quot;abcde&quot; v = &quot;12345&quot; strings_to_dict = dict(zip(k, v)) print(strings_to_dict) You can also zip two different collections together. To_Dict_Zip_Mix k = &quot;abcd&quot; v = [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;durian&quot;] mix_to_dict = dict(zip(k, v)) print(mix_to_dict)  "},{"title":"For Loops​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#for-loops","content":"Both sets and dictionaries are iterables, as so we can use for loops over them. &quot;For every element in this set ...&quot; seems like a reasonable thing to do/say. For_Set fruits = {&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;} for fruit in fruits: print(f&quot;{fruit}s are fruits&quot;)  The default iteration over dictionaries is over their keys. For_Dict_Key fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;orange&quot;: &quot;orange&quot;, &quot;banana&quot;: &quot;yellow&quot;} # &quot;for fruit in fruit_colours.keys()&quot; would do the same thing for fruit in fruit_colours: print(f&quot;{fruit}s may be {fruit_colours[fruit]}&quot;)  But it may be totally reasonable use the .items() method in order to iterate over key-value pairs. For_Dict_Key_Value fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;orange&quot;: &quot;orange&quot;, &quot;banana&quot;: &quot;yellow&quot;} for (fruit,colour) in fruit_colours.items(): print(f&quot;{fruit}s may be {colour}&quot;)  And maybe in some cases you don't care about the keys at all, you could use the .values() method to iterate over the values alone. For_Dict_Value fruit_colours = {&quot;apple&quot;: &quot;red&quot;, &quot;orange&quot;: &quot;orange&quot;, &quot;banana&quot;: &quot;yellow&quot;} for colour in fruit_colours.values(): print(f&quot;I forget what fruits may be {colour}&quot;)  "},{"title":"Deletion (del)​","type":1,"pageTitle":"Sets and Dictionaries","url":"/main/lectures/sets-dicts/Jared#deletion-del","content":"There is a key word, del, that allows you to delete values and effectively un-assign variables. Del_Var x = 31415 print(f&quot;x: {x}&quot;) del x print(f&quot;x: {x}&quot;) # Error, because x has no value  This can be used to delete an entire collection. Del_Collection d = {0: 3, 1: 1, 2: 4, 3: 1, 4: 5} print(f&quot;d: {d}&quot;) del d print(f&quot;d: {d}&quot;) # Error, because d has no value  However, it can also be used to delete elements from amutable and indexable collection (e.i., lists and dicts). Del_Elem list_var = [3,1,4,1,5] dict_var = {&quot;a&quot;: &quot;apple&quot;, &quot;b&quot;: &quot;banana&quot;, &quot;c&quot;: &quot;cherry&quot;} print(f&quot;list: {list_var}&quot;) print(f&quot;dict: {dict_var}&quot;) del list_var[2] del dict_var[&quot;b&quot;] print(f&quot;list: {list_var}&quot;) print(f&quot;dict: {dict_var}&quot;)  You can also delete entire slices in this way. Del_Slice l = [3,1,4,1,5] print(f&quot;l: {l}&quot;) del l[1::2] print(f&quot;l: {l}&quot;)  "},{"title":"Looping (While)","type":0,"sectionRef":"#","url":"/main/lectures/while-loops/Jared","content":"","keywords":""},{"title":"Repeating Actions​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#repeating-actions","content":"There are times where we would like to repeat an action, or variations of an action, multiple times. Imagine, for instance, counting down until a rocket blasts off: &quot;10 ... 9 ... ... 1 ... Blast Off!&quot;. There is a sort of mental counter, starting at 10, that we repeatedly say out loud and then decrease, until it is 0, at which point we say &quot;Blast off!&quot;. We could certainly represent this in code for fixed 10 with brute force, but if we wanted the countdown to start from some arbitrary number, we'd be out of luck. We lack the ability to do any sort of &quot;conditional repetition&quot;. So lets fix that, and in the process, acquire that last bit of core programming machinery we are missing. "},{"title":"Control Flow Diagrams​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#control-flow-diagrams","content":"But first, what does that repetition look like in terms of our control flow diagrams? The countdown example can be represented as below: That's right, we totally can have arrows that point to previous steps. And when that happens, we get a loop. We can even read that loop as saying &quot;while count is not 0, say (print) count value and decrease count&quot;. "},{"title":"While​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#while","content":"Which brings us to the while loop. The most basic while loop statement is of the form: while condition: code more_code  We have the keyword while, some boolean condition (variable/expression), a :, and some indented block of code (can be multiple lines). The more_code is not part of the while loop, just some context around it. If condition is/evaluates to True, then the flow of execution will enter the while block and code will be executed; then the condition will be checked again, and if it again is/evaluates to True,code will be executed again. This will repeat until condition is/evaluates to False. If condition is/evaluates to False, either the first time it is checked or sometime after code was executed, then the flow of execution will skip over the while block and more_code will be executed. As an example, here is code for the countdown scenario: While count = 10 while count != 0: print(f&quot;{count}...&quot;) count -= 1 # equivalent to count = count - 1 print(&quot;Blastoff!&quot;)  Compare this to the control flow diagram from earlier: The logical flow based on the decision and the flow of the looping is the same. "},{"title":"Break​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#break","content":"There is still a snag. You can see a fairly clear correspondence between while loops and control flow diagrams when the loop starts on the diamond: the diamond becomes the condition for the while loop, and the commands on the loop become the code block. But what if the loop doesn't start on the condition? Consider reading in a bunch of numbers until you see the word &quot;done&quot;, and then adding all the previous numbers together. A control flow diagram for that might look like: For while loops, the condition which determines the looping needs to be the first thing. So this can not be directly translated. "},{"title":"Shifting the Loop​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#shifting-the-loop","content":"We can tackle this with our existing machinery. First consider the looping part in isolation: As just a pure loop, we can see that control-flow wise this is equivalent to the same loop with the starting point shifted: But putting that back into the original context is a little trickier. The key difference in context is that there is an original &quot;Get input&quot;. But after that, the core loop is the same. We can consider that initial &quot;Get input&quot; as a one-off, and have our core loop start with the diamond. That gets us the following: And that control flow diagram can be fairly directly translated into code: While_Offset nums = [] inp = input(&quot;Please enter a number or 'done'&quot;) while inp.lower() != &quot;done&quot;: num = int(inp) nums.append(num) inp = input(&quot;Please enter a number or 'done'&quot;) total = sum(nums) print(f&quot;Sum of {nums}: {total}&quot;)  "},{"title":"Breaking Out of the Loop​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#breaking-out-of-the-loop","content":"(You can probably imagine what I'm about to say.) But that's kind of gross, and we have machinery for this! Alright, it's not super gross. But, writing the same line of code for the same task in multiple separate locations is kind of a &quot;code smell&quot;. It is a sign that we can probably do better. So let's go back to the original diagram: It turns out that there is a special command, break, that breaks us out of whatever loop we are in. So if we see &quot;done&quot;, we can just break. But what is the loop condition? What's interesting is that the &quot;is done&quot; check that controls the loop would actually now be in an if statement inside the loop. And if we are considering the loop to start at &quot;Get input&quot;, then we never have a condition there that could end to loop. In other word, from the while loop's perspective, we always loop (maybe trigging a break inside). And so we get this: Break nums = [] while True: # make an &quot;infinite&quot; loop inp = input(&quot;Please enter a number or 'done'&quot;) if inp.lower() == &quot;done&quot;: break num = int(inp) nums.append(num) total = sum(nums) print(f&quot;Sum of {nums}: {total}&quot;)  "},{"title":"Nesting​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#nesting","content":"Note: break only breaks you out of the most immediate loop that you are in. If we use break in a loop within a loop, we only break out of the inner loop. Consider the example below: Break_Nested x = 0 while x &lt;= 3: y = 0 while y &lt;= 5: print(f&quot;(x, y, x + y) = ({x}, {y}, {x + y})&quot;) if x + y &gt;= 3: print(&quot;Breaking!&quot;) break y += 1 # y = y + 1 x += 1 # x = x + 1  If you run this you will see that break triggers multiple times, indicating that it isn't breaking control flow out of both loops, just the inner one. If it helps, a control flow diagram for this code could be: "},{"title":"Continue​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#continue","content":"There is one more special command for loops, continue.continue has you skip the rest of the commands in the loop and immediately begin the next iteration. This can be useful if a run of the loop is borked and you need to start over, such as if an illegal input is encountered. So let's add exactly that to the summation example, making it so that if the the input would not become a number, we scold the user and go right back to asking for a number. Here's the new control flow diagram: And here's the updated code that implements that control flow diagram using continue: Continue # Eh, probably good enough. # not empty and (all numbers or (negative sign and all number thereafter)) def is_convertable_to_int(s): return s != &quot;&quot; and (s.isnumeric() or (s[0] == &quot;-&quot; and s[1:].isnumeric())) nums = [] while True: # make a loop without a termination condition inp = input(&quot;Please enter a number or 'done'&quot;) if inp.lower() == &quot;done&quot;: break if not is_convertable_to_int(inp): print(f&quot;'{inp}' is not a number.&quot;) continue num = int(inp) nums.append(num) total = sum(nums) print(f&quot;Sum of {nums}: {total}&quot;)  We could have equivalently used an if-else, checking for the affirmative instead of the negative even, as a reminder that there are almost always multiple ways to do things:  if is_convertable_to_int(inp): num = int(inp) nums.append(num) else: print(f&quot;'{inp}' is not a number.&quot;)  "},{"title":"Nesting​","type":1,"pageTitle":"Looping (While)","url":"/main/lectures/while-loops/Jared#nesting-1","content":"And yes, for nested loops, continue (like break) only starts the next iteration of the inner-most loop. Continue_Nested x = 0 while x &lt; 3: x += 1 # x ranges from 1 to 3 y = 0 while y &lt; 3: y += 1 # y ranges from 1 to 3 if x == y: print(&quot;Skipping!&quot;) continue print(f&quot;(x, y) = ({x}, {y})&quot;)  If you run this you will see that continue does not reset y to 0, so it is only moving to the next iteration of the inner loop. If it helps, a control flow diagram for this code could be: "}]