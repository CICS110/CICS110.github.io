[{"title":"Homework 1 is Live","type":0,"sectionRef":"#","url":"/blog/hw-1-live","content":"Alrighty! Homework 1 is live. I'm going to sleep.","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Welcome students to our course on introductory programming! Whether you are brand new to programming or have some experience under your belt, we are excited to have you join us on this journey. In this course, you will learn the fundamental concepts and skills needed to become a successful programmer. You'll start by learning how to write simple programs in a programming language, and then gradually build up your knowledge and abilities as you progress through the course. Along the way, you'll also have the opportunity to apply what you've learned by completing interactive exercises and projects. We know that learning to program can be challenging at times, but we are here to support you every step of the way. Our experienced instructors will be available to answer any questions you may have, and your fellow students will also be a valuable resource as you work through the material. We are excited to see what you will accomplish and where your newfound programming skills will take you. Let's get started!","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"/main","content":"Welcome Welcome to the world of computational thinking and computer programming! This course is designed to provide you with a solid foundation in the basics of programming, regardless of a specific programming language, although we use Python to demonstrate concepts and techniques. This course will cover the key concepts and elements of programming that you need to know to get started in the field of computing. 5 Key Concepts of Programming: Overview of the fundamental concepts of computer programming, including syntax, variables, data types, and control structures.Explanation of the problem-solving process in programming, including the use of algorithms and implementation of solutions.Discussion of the importance of debugging, testing, and code quality in software development.Overview of the software development life cycle, including design, coding, testing, and maintenance.Explanation of how programming concepts and skills can be applied to a variety of real-world scenarios, regardless of the programming language used. Programming is all about using a set of instructions to tell a computer what to do. The basic building blocks of programming include syntax, variables, data types, and control structures. Syntax refers to the specific set of rules for writing code in a particular programming language. Variables are used to store and manipulate data in your programs. Data types determine the type of data that can be stored in a variable, such as numbers, text, or Boolean values. Control structures are used to control the flow of a program and include constructs such as loops, if statements, and switch statements. Programming is not just about writing code, it's also about solving problems. In order to write effective code, you need to be able to identify a problem and then create a solution for it. This solution is often implemented as an algorithm, which is a step-by-step set of instructions for solving a problem. You will use algorithms in your code to control the flow of a program and make decisions based on the data you are processing. As you begin to write more complex programs, you will encounter bugs and errors. Debugging is the process of identifying and fixing these bugs to ensure your code is working as intended. Testing is an essential part of the software development process and involves checking your code for both correctness and performance. Code quality refers to the overall readability, maintainability, and efficiency of your code. It is important to strive for high-quality code, as this makes it easier to debug and maintain your programs over time. The software development life cycle is the process of creating and maintaining software applications. It includes the following phases: design, coding, testing, and maintenance. The design phase involves creating a plan for what your application should do and how it should work. The coding phase involves writing the code for your application. The testing phase involves verifying that your code works as intended. The maintenance phase involves fixing bugs, adding new features, and keeping your application up to date. Programming skills are in high demand and can be applied to a wide range of real-world scenarios, including website development, data analysis, automation, and more. By understanding the basic concepts of programming, you will have the skills and knowledge you need to develop software applications and solve problems in any number of fields. Whether you are interested in creating mobile apps, building websites, or automating tasks, programming is a valuable and versatile skill that can open doors to many exciting career opportunities. note The course material, including all assignments and labs, is openly available from the start of the course. Our goal is to be transparent and open about the material in the course, giving you the opportunity to plan ahead and make the most of your time. This open access allows you to see what is coming up in future lectures, readings, assignments, and labs, so you can stay organized and focused. By providing you with this level of visibility, we aim to make the course as accessible and user-friendly as possible. This approach is in line with our commitment to creating a supportive and inclusive learning environment that empowers you to achieve your goals as a programmer.","keywords":""},{"title":"Assignments","type":0,"sectionRef":"#","url":"/main/assignments","content":"","keywords":""},{"title":"Deadlines​","type":1,"pageTitle":"Assignments","url":"/main/assignments#deadlines","content":"Each assignment below provides you a suggested time to begin the assignment (B) and the deadline for the assignment (D). All assignments are due by 11:59 PM on the day/date specified. If you decide to spend tokens for late days, you must fill out the late day submission form (coming soon). You may use tokens only for the assignments specified below. "},{"title":"Participation​","type":1,"pageTitle":"Assignments","url":"/main/assignments#participation","content":"The participation assignments can be found in the book used for this course. The book is titled CICS 110 - Foundations of Programming and can be found on the zyBooks website after you purchase it (see Moodle for information on how to purchase the book). The zyBook will automatically record your scores as you complete each of the exercises. 🔥 You do not earn and cannot use tokens for this assignment type. 🔥 Participation 1 (B: Mo 2/6, D: Th 2/16) "},{"title":"Quizzes​","type":1,"pageTitle":"Assignments","url":"/main/assignments#quizzes","content":"This course assigns weekly quizzes. They can be found on Moodle and are to be completed by the assigned due date. Your score for your latest attempt will be recorded in Moodle. 🔥 You do not earn and cannot use tokens for this assignment type. 🔥 Quiz 1 Orientation (B: Mo 2/6, D: Th 2/9)Quiz 2 Week 1 (B: Th 2/9, D: Th 2/16) "},{"title":"Homework​","type":1,"pageTitle":"Assignments","url":"/main/assignments#homework","content":"✨ 🪙 You can earn and use tokens for this assignment type. 🪙 ✨ No assigned work yet "},{"title":"Labs​","type":1,"pageTitle":"Assignments","url":"/main/assignments#labs","content":"Lab assignments are started during the lab sections. You have until 11:59 PM on the day the lab is suggested to be started. You must submit labs to Gradescope. 🔥 🪙 You can use, but not earn, tokens for this assignment type. 🪙 🔥 Lab 01 Getting Started (B: Fr 2/10, D: Fr 2/10)Lab 02 String Formatting (B: Fr 2/17, D: Fr 2/17) "},{"title":"Capstone Project​","type":1,"pageTitle":"Assignments","url":"/main/assignments#capstone-project","content":"🔥 You do not earn and cannot use tokens for this assignment type. 🔥 No assigned work yet "},{"title":"Guides","type":0,"sectionRef":"#","url":"/main/guides","content":"Guides Welcome to the guides section of the course website! In this section, you will find a wealth of information and resources to help you get started and succeed in your course. Whether you are a beginner or have prior experience, our goal is to provide you with the support and guidance you need to succeed. To get started, you will find guides for installing Python and setting up Visual Studio Code (VSCode), two essential tools for programming. If you ever get stuck, our guide on &quot;Getting Unstuck&quot; will provide you with practical tips and strategies for overcoming common challenges. You will also find information on common errors and how to avoid them, as well as a guide on how to use Piazza, an online platform for connecting with your instructors and classmates and getting help with your coursework. We are committed to helping you succeed in your computational thinking and computer programming course, and these guides are a key part of that support. Whether you are looking to install your first Python environment, troubleshoot an error, or get help with a course assignment, these guides are designed to provide you with the information and resources you need to achieve your goals. We hope you find them helpful and wish you the best of luck in your programming journey!","keywords":""},{"title":"Common Errors","type":0,"sectionRef":"#","url":"/main/guides/common-errors","content":"","keywords":""},{"title":"NameError​","type":1,"pageTitle":"Common Errors","url":"/main/guides/common-errors#nameerror","content":"NameError occurs when we attempt to reference a variable name that has not been declared. This usually occurs because We're referencing a variable that doesn't exist yetWe're referencing a variable that does exist, but we misspelled a reference somewhere Remember that python runs line by line, top to bottom (once we start writing our own functions this isn't strictly true), so a variable has to be declared above where you first attempt to use it. In rare cases, a variable can get deleted or &quot;garbage collected&quot; before it is called, and this error can occur, but this is extremely rare in Python specifically. This case is more common in almost any other language, like C or Java, where variables declared inside a loop are deleted/garbage collected once the loop finishes. For example for i in range(3): print(i) print(i)  will print 0\\n1\\n2\\n3\\n. In C, the equivalent code for (int i; i &lt; 3; i++) { printf(&quot;%d\\n&quot;, i); } printf(&quot;%d\\n&quot;, i);  will not even compile, because i is deleted, or &quot;garbage collected&quot;, after the loop finished. Keep this in mind in the future if you switch to another language. "},{"title":"IndexError​","type":1,"pageTitle":"Common Errors","url":"/main/guides/common-errors#indexerror","content":"IndexError means we are trying to access an element of an indexed collection, like a String or list, but that index is outside the range of the collection. For example, if I have the String 'test', e is the 2nd character at index 1. However, if I try to access index 4, that would mean accessing the 5th character of the String, which doesn't exist. Therefore attempting to access index 4 will result in an IndexError: &gt;&gt;&gt; 'test'[4] Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; IndexError: string index out of range  "},{"title":"EOFError​","type":1,"pageTitle":"Common Errors","url":"/main/guides/common-errors#eoferror","content":"EOF stands for &quot;end of file&quot;. If the Python interpreter unexpectedly reads through the end of a file, it returns an EOFError. This typically happens in one of two ways: The Python interpreter hits the end of your Python source file unexpectedly. This can happen if you write a loop with no content in it (more recent python versions return an IndentationError, but zyBooks will often return EOFError. If you'd like to know why, make a Piazza post asking about it :D)Your Python tries to read more input than it is given. For example, say your python code checks the first 5 lines of a file. If the file has 4 lines total, Python tries to read the 5th line and sees the EOF character. This is unexpected behavior, so it returns an EOFError. "},{"title":"Variables and Expressions","type":0,"sectionRef":"#","url":"/main/assignments/variables-expressions","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognise Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#about","content":"This purpose of this homework is to practice variable assignment and expressions. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#learning-objectives","content":"Learn to use the input() functionPractice using variables to store informationPractice basic expressions "},{"title":"Estimated Size​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#estimated-size","content":"11 small files: Each will have 1 to 4 calls to input()Each will have 1 to 3 print() statements.Each will have some reasonably short computations. "},{"title":"Preamble​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#preamble","content":"The input() and print() function will be integral to this assignment. input() prompts the user for input, and returns that as a string. The input() function optionally takes a string to use as flavor text when prompting the user. So the command s = input(&quot;Enter Input: &quot;) would print outEnter Input: to terminal, wait for the user to type in something and hit return/enter, and then store the text the user entered as a string in the variable s. print() takes in pretty much anything, and prints it to the terminal. So print(&quot;Received: &quot; + s) (assuming s is a string). Would print Received: followed by the contents of s. If you wanted to print a number n, print(n) will work. If you wanted to print a number n with some flavor-text in front, print(&quot;n: &quot; + str(n)) will work (note the use of a string concatenation expression as an argument to print()). You do not need to know or use this, but:A final note, if you want some flavor text but find the concatenation bothersome: there is something called f-Strings.f&quot;n: {n}&quot; would be the same as &quot;n: &quot; + str(n). You have that f outside the quotation marks, and then you can place expression within the {} within the string to have those expressions resolved and filled in when the string is used. "},{"title":"Assignment​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#assignment","content":""},{"title":"0. Setup​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#0-setup","content":"Make a folder on your computer and open it in VSCode. Remember that for every file you need to have comments indicating the author(s) at the, for example: # Authors : Jared Yeager, Tim Richards # Emails : jyeager@cs.umass.edu, richards@cs.umass.edu # Spire IDs : 31415926, 27182818  The # Author/# Authors, # Email/# Emails, and # Spire ID/# Spire IDs are the only really necesary formating detail. Some copying and pasting will save you some sanity. Apologies for the tedium. In the future (once we have functions), you'll probably only need to make one file per assignment. "},{"title":"1. Implement echo.py (1 point)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#1-implement-echopy-1-point","content":"Whenever playing with something new, in this case input() and print() (and variables), it is helpful to make a minimal working use-case as a sanity-check. This program will get input from the user, and print that input back out exactly as is. Running a correct implementation of this program could look like: $ python3 echo.py Enter input: Hello, World! Hello, World!  You may use whatever prompt you like, all that matters that the last line perfectly echo the input typed by the user (what is returned by the input() function). The specific prompt, if any, the you provide to the input() function is up to your discretion. Hints The commands to accomplish this are pretty much given in the Preamble section, except you don't want the &quot;Received: &quot; part. Testing Run it, play with it. That's pretty much true for all of these. "},{"title":"2. Implement aba.py (1 point)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#2-implement-abapy-1-point","content":"New program. This one should read in two inputs from the user. It should then print the first, concatenated with/followed by the second, concatenated with/followed by the first again. So if input 1 was &quot;a&quot; and input 2 was &quot;b&quot;, then &quot;aba&quot; would be printed. Running a correct implementation of this program could look like: $ python3 aba.py Enter first string: on Enter second string: i onion  Hints We learned about an operator for concatenating/combining strings. "},{"title":"3. Implement round.py (1 point)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#3-implement-roundpy-1-point","content":"Time for some numbers. This program will ask for input that may be a whole or decimal number. It will then print that number rounded to the nearest int (there is round() function that takes a float and return the nearest int). Running a correct implementation of this program could look like: $ python3 round.py Enter a number: 3.14159265358979323 3.141592653589793 rounds to 3  The last number of the last line must be the solution, you may add flavor text or have no flavor text at all (you could just print the rounded number). Hints Note that input() will return a string. That will then need to be turned into (cast/converted to) a number.int() will cause an error if the number is formatted like a decimal number, which only leaves one numeric type option... Then, you can round(). "},{"title":"4. Implement liters.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#4-implement-literspy-2-points","content":"This program will ask for input that should represent a whole number (an int) of liters. It should then convert that to cubic centimeters and print the converted value. There are 1000 cubic centimetres per liter. Running a correct implementation of this program could look like: $ python3 liters.py Enter a number: 314 314 litres is 314000 cubic centimetres  (Or you could infer the conversion factor from the example...) Like before, the last number of the last line must be the solution. The output should be a whole number. "},{"title":"5. Implement miles.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#5-implement-milespy-2-points","content":"This program will ask for input that should represent a whole number (an int) of miles. It should then convert that to yards and to feet and print the converted values on seperate lines. There are 1760 yards per mile and 3 feet per yard. Running a correct implementation of this program could look like: $ python3 miles.py Enter a number: 314 314 miles is: 552640 yards 1657920 feet  Formatting details: The last number on the second-to-last line must be the number of yards, as a whole number.The last number on the last line must be the number of feet, as a whole number.No other lines of text or additional formatting is necessary "},{"title":"6. Implement kilos.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#6-implement-kilospy-2-points","content":"This program will ask for input that should represent a whole or decimal number (a float) of kilograms. It should then convert that to pounds and print the converted value. For the purposes of this assignment, there are 2.205 pounds per kilogram. Running a correct implementation of this program could look like: $ python3 kilos.py Enter a number: 314.15 314.15 kilograms is 692.701 pounds  The last number on the last line must be the conversion, no other lines of text or additional formatting is necessary. "},{"title":"7. Implement temp.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#7-implement-temppy-2-points","content":"This program will ask for input that should represent a whole or decimal number (a float) temperature in degrees Fahrenheit. It should then convert that to Celsius and Kelvin. For the purposes of this assignment: Converting the temperature from Fahrenheit to Celcius can be done by subtracting 32 from the temperature in Fahrenheit and then multiplying the result by 5 / 9.Converting the temperature from Celcius to Kelvin can be done by adding 273.15 to the temperature in Celcius. Running a correct implementation of this program could look like: $ python3 temp.py Enter temperature in Fahrenheit: 31.41 31.41 degrees Fahrenheit is equivalent to: -0.3277777777777777 degrees Celsius 272.8222222222222 degrees Kelvin  Formatting details: The last number on the second-to-last line must be the Celcius conversion.The last number on the last line must be the Kelvin conversion.No other lines of text or additional formatting is necessary Extra If you'd like, f-String allow for formatting options that can round floats to a number of decimal places (e.g. f&quot;{num:.3f}&quot;). This can make the output look nicer. I believe the tolerance for this test is being within .02, so you can safely truncate or round to the nearest thousandth or hundredth. "},{"title":"8. Implement cube.py (2 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#8-implement-cubepy-2-points","content":"This program will ask for input that is a whole number (an int) representing the length of the side of a cube. It should then compute the volume and surface area of the cube, and print the computed values on seperate lines. For a given length: The volume is the length cubedThe surface area is 6 times the length squared (6 sides) Running a correct implementation of this program could look like: $ python3 cube.py Enter the length of the cube: 5 A cube with length 5 has: Volume of 125 Surface area of 150  Formatting details: The last number on the second-to-last line must be the volume as a whole number.The last number on the last line must be the surface area as a whole number.No other lines of text or additional formatting is necessary "},{"title":"9. Implement seconds.py (3 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#9-implement-secondspy-3-points","content":"This program will ask for input that is a whole number (an int) representing a number of seconds. It will then convert that to a total number of days, hours, minutes, and seconds such that hours &lt; 24, minutes &lt; 60, and seconds &lt; 60. Running a correct implementation of this program could look like: $ python3 seconds.py Enter a number of seconds: 314159 314159 seconds can be broken up into: 3 days, 15 hours, 15 minutes, and 59 seconds.  Formatting details: The last number on the forth-to-last line must be the number of days involved.The last number on the third-to-last line must be the remaining number of hours involved.The last number on the second-to-last line must be the remaining number of minutes involved.The last number on the last line must be the remaining number of seconds involved.No other lines of text or additional formatting is necessary Hints This is the integer/floor division and remainder/module operatior challenge. "},{"title":"10. Implement quadratic.py (3 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#10-implement-quadraticpy-3-points","content":"This program will ask for input that is a whole number (an int) representing the a b and c in the standard form of a quadratic equation a x^2 + b x + c = 0. It will then solve for the roots (x such that the equation equals 0) and print them on seperate lines. There is a quadratic equation that gives the roots: x=−b±b2−4ac2ax = \\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}x=2a−b±b2−4ac​​ Running a correct implementation of this program could look like: $ python3 quadratic.py Enter a: 1 Enter b: -2 Enter c: 1 1 * x^2 + -2 * x + 1 has roots: 1.0 1.0  Formatting details: While the answers are designed to always be whole numbers, you may safely print them out as floats. (If you want to convert to an int, I suggest using round() and not int() due to how int() simply truncates.)The roots may be in any order, they just need to be on separate lines.If there is 1 root with a multiplicity of 2, you should still print 2 lines, they will just both have the same root.The numbers on the last two lines must be the roots.Nothing beyond 2 lines with numbers is necessary, flourish as you please. Hints If you use import math you will have access to math.sqrt(), but n ** (1/2) actually works just fine. "},{"title":"11. Implement weave.py (3 points)​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#11-implement-weavepy-3-points","content":"This program requests 4 inputs in order: A string, referred to as A hereA whole number, referred to as m hereA string, referred to as B hereA whole number, referred to as n here It will then print an &quot;interweaving&quot; of m copies of A with n copies of B. So the final result will end up looking something like either ABABAAA or ABABBBB depending on m and n. Running a correct implementation of this program could look like: $ python3 weave.py Enter first string: on Enter first number: 2 Enter second string: i Enter second number: 1 onion  last line needs to be exactly the interweaving. Hints We haven't used string-int multiplication yet. You can think of the resultant string as AB a bunch of times followed by A a bunch of times or B a bunch of times. This in turn can be AB n1 times, followed by A n2 times, followed by B n3 times; where n2 or n3 ends up being 0. As for how many times to do both, that depends on the lesser of the two numbers, which there is a mathematical function to obtain. "},{"title":"Grading Scale​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#grading-scale","content":"This assignment is roughly partitioned into 3 phases: 3 Initial exercises worth 1 point each: echo.py, aba.py, round.py5 Middle exercises worth 2 points each: liters.py, miles.py, kilos.py, temp.py, cube.py3 Final exercises worth 3 points each: seconds.py, quadratic.py, weave.py Below are how many points translate to what level on the 5-point scale. "},{"title":"1: Below Standards: 0-3 points​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#1-below-standards-0-3-points","content":"This is the number of points gained by completing only the initial exercises. "},{"title":"2: Approaching Standards: 4-12 points​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#2-approaching-standards-4-12-points","content":"This is the number of points gained by completing the initial exercises and only some of the middle batch of exercises. "},{"title":"3: Meeting Standards: 13-19 points​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#3-meeting-standards-13-19-points","content":"This is the number of points gained by completing all the initial and middle exercises, but not all of the final exercises. "},{"title":"4: Exceeding Standards: 20-22 points​","type":1,"pageTitle":"Variables and Expressions","url":"/main/assignments/variables-expressions#4-exceeding-standards-20-22-points","content":"This is the number of points gained by completing basically all the exercises (and specifically completing all the final exercises). "},{"title":"Guide to Exams","type":0,"sectionRef":"#","url":"/main/guides/exams","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Guide to Exams","url":"/main/guides/exams#overview","content":"In-class exams will be held during the lab session. Lab attendance is required to complete the exam. All exams are hosted on Moonami/Moodle, and you will need a laptop to take the exam. Midterm exams are 50 minutes long, but you are allowed to leave once you are finished. It is your responsibility to ensure your device is working when the exam starts, you don't want to spend the first 10 minutes connecting to the internet! "},{"title":"Requirements​","type":1,"pageTitle":"Guide to Exams","url":"/main/guides/exams#requirements","content":"To take the exam, you must attend the lab session you are enrolled in. If you cannot make the lab time you have enrolled in, it is your responsibility to reach out to your Instructor at least a week ahead of time to make accommodations. It is your responsibility to Bring your own laptop and uCard.Ensure your laptop is charged when you arrive at the exam. If you laptop does not hold a charge, you are responsible for bringing a charger, but we cannot guarantee you will be able to sit near a functioning outlet. Ensure your laptop is connects to Eduroam, and gets a connection in lab room. If you do not own a laptop, your laptop is not working, or your laptop is out for repairs: Borrow a friends laptop for the lab period.Use the library's laptop borrowing program. There are a limited number of laptops, but we rarely see them run out. Go to the Learning Commons Desk in the lower level of the W.E.B. Du Bois Library to check on their availability. Laptops are 3 day loans for free. There is a $10/day late return fee up to $50.Use another internet connected device. A phone is not advisable, but a tablet should suffice. "},{"title":"Preparing for the Exam​","type":1,"pageTitle":"Guide to Exams","url":"/main/guides/exams#preparing-for-the-exam","content":"One week prior to every exam, an announcement will be made detailing Exam Coverage: the zyBook chapters and lectures that the exam questions testExam Structure: the types of questions you can expect, maybe with an estimate of how many of each You will be able to freely navigate between the questions during the exam. The Supplemental Instructor (SI) for the course will usually host an exam review session the week of the exam. They will have not seen the exam, but are prepared to help you study for the exam. "},{"title":"Taking the Exam​","type":1,"pageTitle":"Guide to Exams","url":"/main/guides/exams#taking-the-exam","content":"Before you start the exam, we ask that you close all other tabs and windows. This includes, but is not limited to VSCode/other editorszyBooksPiazzaOnline resources Once you have completed the exam, you will be asked to show course staff your uCard. Staff will make sure you have submitted your exam, and check you out. "},{"title":"Academic Honesty​","type":1,"pageTitle":"Guide to Exams","url":"/main/guides/exams#academic-honesty","content":"During the exam, the expectation is that you do not leave the exam window. You should not need to tab out during the exam. Use of your laptop or a secondary device during the exam to view textbooklabsonline materialsinstant messages or email are all academic honesty violations, and may lead to you getting a zero on the exam or in the course. Do not do it. It is not worth it. "},{"title":"Installing Python","type":0,"sectionRef":"#","url":"/main/guides/installing-python","content":"Installing Python A set of guides that walk through installing Python 📄️ Windows This guide will help you install Python on Windows. If you are using a different operating system, please see the Installing Python for a different guide. 📄️ MacOS This guide will help you install Python on macOS. Python on macOS can get messy. If you run into any issues while running the instructions detailed below, please post to Piazza. 📄️ Linux Installing python on linux depends slightly on your distribution, but your distribution's default package manager should have python as an installation option.","keywords":""},{"title":"Installing Python on Linux","type":0,"sectionRef":"#","url":"/main/guides/installing-python/linux","content":"Installing Python on Linux Installing python on linux depends slightly on your distribution, but your distribution's default package manager should have python as an installation option. For example, Ubuntu's package manager is apt, so you can install python by running sudo apt update sudo apt install python3.11 If you are not familiar with your distribution's package manager, you can google &quot;install python distribution name&quot; to find the commands you need to run. Alternatively, you can install and build python from source, which you can find here: https://www.python.org/downloads/source/. You can find more information here.","keywords":""},{"title":"Installing Python on macOS","type":0,"sectionRef":"#","url":"/main/guides/installing-python/macos","content":"","keywords":""},{"title":"(Optional) Update macOS​","type":1,"pageTitle":"Installing Python on macOS","url":"/main/guides/installing-python/macos#optional-update-macos","content":"Prior to macOS 12.3, macOS came with Python 2.7. This version is nearly 13 years old and not suitable for development. Therefore, Apple removed it from macOS in 12.3. If possible, you can update your computer to any version of macOS after 12.2, and the installer will delete Python. This is not necessary, but if your machine is new enough that 12.3+ is supported and you don't have any concerns about it effecting your battery health, it is easier if you update your computer. "},{"title":"Verify you don't already have python3 installed​","type":1,"pageTitle":"Installing Python on macOS","url":"/main/guides/installing-python/macos#verify-you-dont-already-have-python3-installed","content":"Open Finder &gt; Applications &gt; TerminalRun python3 --version. You should get something along the lines of zsh: command not found: python3. Otherwise, you have python3 installed. If you have python installed from the developer website, you are all set. If you have python3 installed through Homebrew, we recommend you install and use python from the developer website. To tell the difference, run whereis python3 in Terminal. If you get /usr/bin/python3, you're all set. Otherwise, we recommend you follow the below installation directions. "},{"title":"Installing​","type":1,"pageTitle":"Installing Python on macOS","url":"/main/guides/installing-python/macos#installing","content":"Go to https://www.python.org/downloads/You should see &quot;Download the latest version for macOS&quot;, followed by a button labeled Download Python 3.x. Click the button to start the download. If the website does not automatically detect you are running macOS, select macOS under &quot;Looking for Python with a different OS?&quot;.  Once the download is finished, run the .pkg to run the installer. Run through the installer, and click Install.Open Finder &gt; Applications &gt; Python 3.x.Right-click on Update Shell Profile.command, and click open. This will run a process in Terminal that lets you run python3 from your command line.Restart Terminal, type python3, and press Enter. At this point, you should see something like the following screen:  To exit, type quit() and press Enter. "},{"title":"Installing Python on Windows","type":0,"sectionRef":"#","url":"/main/guides/installing-python/windows","content":"","keywords":""},{"title":"Make sure you don't already have Python​","type":1,"pageTitle":"Installing Python on Windows","url":"/main/guides/installing-python/windows#make-sure-you-dont-already-have-python","content":"Open the start menu and search for &quot;cmd&quot; (or &quot;command prompt&quot;)Type python --version and press enter. If you get a message saying &quot;python is not recognized as an internal or external command&quot;, you do not have Python installed. If you get a message saying &quot;Python 3.6.1&quot; (or any other set of numbers), you already have Python installed. "},{"title":"Installing Python​","type":1,"pageTitle":"Installing Python on Windows","url":"/main/guides/installing-python/windows#installing-python","content":"Go to the Microsoft store websitehttps://apps.microsoft.com/store/detail/python-311/9NRWMJP3717K?hl=en-us&amp;gl=us Click the &quot;Get in Store App&quot; button (should open the microsoft store app) Click the &quot;Get&quot; button. This will download and install Python. When it is done installing, follow the steps above to verify that you have Python installed successfully. "},{"title":"For if things go wrong​","type":1,"pageTitle":"Installing Python on Windows","url":"/main/guides/installing-python/windows#for-if-things-go-wrong","content":"Other methods of installing Python on Windows are available, but are not recommended. Contact an instructor if you have trouble installing Python using the method above. Or, try one of the following methods. caution These methods are not ideal, they have more risk of not working. If you have trouble installing Python using the method above, try one of the following methods. Try these at your own risk (though they should still work fine) Download the latest version of Python from the Python website. Make sure to select the &quot;Add Python to PATH&quot; option when installing.Install Python using Chocolatey. This is a package manager for Windows. You can install Chocolatey by following the instructions on their website. Once you have Chocolatey installed, you can install Python by running choco install python in the command prompt.Install Python using Scoop. This is another package manager for Windows. You can install Scoop by following the instructions on their website. Once you have Scoop installed, you can install Python by running scoop install python in the command prompt. "},{"title":"Getting Unstuck","type":0,"sectionRef":"#","url":"/main/guides/getting-unstuck","content":"","keywords":""},{"title":"How to start​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#how-to-start","content":"Sometimes the hardest part of coding, especially when we're learning a language for the first time, is figuring out where to even start. There are two main steps to writing successful code: Developing an algorithm to solve the problemFiguring out how to code our algorithm "},{"title":"Example​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#example","content":"Let's say I give you three numbers, and ask you which of the three is the smallest. For example, I give you the numbers [3,7,1], and you need to determine somehow that 1 is the smallest. First, we develop an algorithm: Compare the first two numbers, and keep the smaller of the two. Compare the two remaining numbers, and tell me the smaller of the two.  With our [3,7,1] example, we first compare 3 and 7. 3 is smaller, so we throw out 7. Then we compare 3 and 1, and say &quot;1 is smallest.&quot; Now that we've developed an algorithm, we just have to translate our algorithm into Python code. The easiest way to do this is to take the algorithm you've written, and put it in your source file as comments: # 1. Compare the first two numbers, and keep the smaller of the two. # 2. Compare the two remaining numbers, and tell me the smaller of the two.  and then writing our code in between the comments: # 1. Compare the first two numbers, and keep the smaller of the two. smaller = min(number1, number2) # 2. Compare the two remaining numbers, and tell me the smaller of the two. our_min = min(smaller, number3) print(f'{our_min} is smallest.')  "},{"title":"Asking for help​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#asking-for-help","content":"If you are stuck with how to start, Identify which step you are having trouble with. Are you having trouble figuring out how to solve the problem, or are you stuck on how to translate your algorithm into source code. Formulate a specific question about what you need help withMake a Piazza post, or ask for help in Office Hours Step 2 is by far the most helpful for us. If you say &quot;I am stuck on Todo 2&quot;, we have to essentially walk you through this process to figure out how to help you. Questions we'd love to answer are I'm having trouble with developing an algorithm to solve Todo 2, specifically with x.I know how to solve Todo 3, but I'm having trouble converting this step of my algorithm into Python code. "},{"title":"Stuck in the Middle​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#stuck-in-the-middle","content":"If you get stuck in the middle of coding a section, there are often two things that can be causing the block: You aren't sure what the next step in your algorithm is You aren't sure how to convert the next step of your algorithm into code If you're finding yourself stuck because you don't know the next step in your algorithm, take a break from coding and try to write out your entire algorithm. Psuedocode and control-flow diagrams are both very useful in outlining your full algorithm. In either case, if you're still stuck, see the Asking for Help section above. Another reason you can get stuck in the middle of a section is that you have come up with a solution, but are stuck on how to write an efficient or &quot;clean&quot; solution. Our suggestion here is that you either Finish your current implementation, and then go back and tidy up specific sections.Restart entirely. Run through your algorithm top to bottom before you start to code anything, and look for things you can fix.  The first suggestion often works better if your algorithm is solid, but you weren't quite sure the best way to implement one part of the algorithm. The second suggestion is better for cleaning up an inefficient algorithm. tip This is not something that goes away! Even as advanced programmers, we will get halfway through coding a section, and think Well, I know how I can finish this function, but it's going to end up really messy. Do I restart, or will this be manageable to tidy up later? This is a balancing act that you will get better at handling the more complicated problems you tackle. "},{"title":"Warning and Error Messages​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#warning-and-error-messages","content":"Once we're done coding, there are two main types of errors we can get, Compilation or interpretation errors: the source code we've written isn't valid PythonRuntime errors: our source code is valid, but the code performs an unexpected action while running In VSCode for Python, there is a program called the linter. The linter reads through our code, looking for syntax or style issues. How to fix a problem detected by the linter will obviously depend on the problem, but the linter broadly categorizes problems. VSCode will display issues detected by the linter by drawing a squiggly line under the problematic code segment. The color of the squiggly line will change depending on what type of problem was detected: A red underline signifies an error. The linter will produce an error if thinks there is a bug in your code. A green underline signifies a warning. Warnings mostly appear under functions names we have misspelled, under variables we declare and never use, or under variables we attempt to use before they are declared.A blue underline signifies information. In python, this usually means the code segment will run fine, but is bad practice, or is &quot;old&quot; python. In any case, if you hover over the underlined code, the error, warning, or information message will appear, often times indicating what you need to fix:  info What your linter considers an error, warning, or information will depend on what linter you install. Find more information on linter messages here. The VSCode Python extension uses Pylint by default. tip The underline colors listed above are the default colors. Your theme may change the color of the underlines. If you are red-green or green-red color deficient, I highly recommend changing your warning underline color from green to a different color. I use yellow. For a guide on how to do change your warning colors, see the Change Linter Colors guide. "},{"title":"Unexpected Errors​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#unexpected-errors","content":"Although the linter will detect many errors, there are some errors that the linter will not detect (at least by default). For example, say we have the following code: example.py text = input(&quot;What would you like to type?\\n&quot;) third_character = text[2] print(third_character)  First, we get some input string, and store it in text. Then, we get the character at index 2 of text (the third character), and store it in third_character. Finally, we print third_character out. As written, this code will result in zero messages from the linter. However, this doesn't mean nothing can go wrong. What if I just say Hi? There's only two characters, so happens when we try to access the third character? In Python, we will get the following message back: Traceback (most recent call last): File &quot;/path/to/example.py&quot;, line 2, in &lt;module&gt; third_character = text[2] ~~~~^^^ IndexError: string index out of range  This is an error message. This is essentially Python's way of saying, &quot;Something unexpected just happened, here's the problem we identified and what we were doing when it happened.&quot; More specifically this is what's called a traceback: Python has &quot;traced back&quot; it's steps to figure out: What happened?Where are we? What file are we in, and on what line? Are we in a function call?What steps did we take to get here? Did we make multiple nested function calls? If so, what function calls did we make? The first line of the error message should always read Traceback (most recent call last):  This line identifies an error occurred, and tells us that, if the error lists multiple function calls, the most recent function call is listed last (in other words, the problem happened in the last line listed). Next we have a series of code snippets of the form  File &quot;/path/to/example.py&quot;, line 2, in &lt;module&gt; third_character = text[2] ~~~~^^^  Each of these snippets lists The snippet itself, in this case third_character = text[2]Where the code lives, File &quot;/path/to/example.py&quot;, and on what line, line 2If the snippet is in a function, denoted as in function_name, or not in a function, denoted as in &lt;module&gt;. Code not written in a function is sometimes called &quot;top-level&quot; code. In this instance, the error message also tells us that the error is specifically in the attempt to access text[2], and not in the assignment of text[2] to third_character. In this case, we'd say that &quot;line 2 throws an error&quot;, or &quot;accessing text[2] throws an error.&quot; Finally, the error message will list the name of the specific error that occurred. In this case, we have IndexError: string index out of range  which indicates that we're attempted to access the element of text at an index that doesn't exist. See the Common Errors guide for tips on how to approach various specific errors. "},{"title":"More complicated errors​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#more-complicated-errors","content":"With more complicated code, your error might have multiple successive snippets listed. For example, if we make a function call, and then the error occurs inside the function call, like in: print-name.py def print_name(name): print('My name is ' + my_name) print_name('John')  Python will print out the location of each nested function call made, then the location of the code snippet where the problem happened. In this instance we get the following error message: Traceback (most recent call last): File &quot;/path/to/print-name.py&quot;, line 4, in &lt;module&gt; print_name('John') File &quot;/path/to/print-name.py&quot;, line 2, in print_name print('My name is ' + my_name) ^^^^^^^ NameError: name 'my_name' is not defined  There are two snippets: first the function call print_name('John'), which is listed as in &lt;module&gt; since it's &quot;top-level&quot; code, and then inside the function call we have print('My name is ' + my_name), which is in a call to the print_name function, so it is listed as in print_name. This gives us a sense of what the function call stack looked like at the time of the error, since each successive snippet is a nested function call, with the last line being where the error occurred. "},{"title":"Conditional Errors​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#conditional-errors","content":"It's possible that you sometimes get an error when you run your program, but not always. In our first example, giving an input of 3 characters or more will not cause an error, because there would be a third character to access. However, sometimes our program will return an error, like when we input Hi. If you only get an error sometimes, but not always, you should figure out Is the error always in the same place?Is it always the same error message?Is the code snippet using some sort of user input? Probably the most common error to get sometimes, but not always, is an IndexError, especially if you're accessing an index of user input. Say we're assuming that a user is going to give us a four digit binary number, and we want to check if the one's digit is less than 6. A bad way to check this would be number = input(&quot;What 4-digit number would you like to check?\\n&quot;) digit = int(number[3]) print(digit &lt; 6)  Why is this bad? Well, what happens if the user gives us a three digit number? number[3] will throw an IndexError. If you don't always get the same error, or the error isn't always in the same place, you likely have multiple errors. It's possible that one of them always happens, and the other only happens sometimes, but happens before we get to the error that is always there. "},{"title":"Unexpected Output​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#unexpected-output","content":"Say our code has run without any error, but the code isn't doing what we want it to. For example, your program runs successfully, but prints the wrong thing. This is where we largely get into the realm of debugging. Getting rid of error messages is also debugging, but it can be much easier to guess what might be going wrong from an error message than it is from an incorrect, but error-free output. There are four main ways of debugging: Rereading your source code and looking for bugsPutting print statements in various places to check values of variables or what parts of your code are/aren't being executedUsing the debuggerWriting unit tests "},{"title":"Manual Debugging​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#manual-debugging","content":"Rereading your source code is probably the easiest way to find small errors, so it's highly recommended in the beginning when your code is short. The main downside of this is that, if you've been coding for 2+ hours straight, it's often hard to look for errors in the code you've been staring. If you've ever written a paper and come back the next day to find lots of grammatical or spelling errors, this is the same idea. It can get hard to spot errors in code you've spent a lot of time looking at. tip Take a break before you start debugging. Seriously. If you've been coding for a couple hours straight, implementing your algorithm and getting rid of error messages, the best thing to do is take a quick, 30 minute break and come back to it, especially if you're under a time crunch. "},{"title":"Print Debugging​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#print-debugging","content":"Print debugging, sometimes referred to as &quot;caveman debugging&quot;, is the most brute force approach. It consists of just putting print statements in various parts of your code to check both what parts are/aren't running and values of variables. Print debugging is effective for small projects where you have a good idea of what is going wrong, or finding what region of your code has the problem. However, if you don't quickly find what is wrong, have a multi-file project where many things could be going wrong, or have multiple underlying problems all at one, print debugging can take a lot of time. You might spend hours changing values of print statements, commenting prints out or back in, and running your code over and over again after each change. "},{"title":"The Debugger​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#the-debugger","content":"As the name suggests, the debugger is the most powerful tool for finding bugs in your code. Like how the Python interpreter runs your code line by line, the debugger lets you step through your code's execution line-by-line. As your code runs, the debugger will show you What local variables are declared and their valuesThe state of the function call stackTerminal output as it happens The debugger lets you put break points at specific lines in your code, letting you run the program up to a certain point, and then pausing execution, giving you a snapshot in time of how your program is running. You can also set conditional breakpoints, like &quot;stop at this line only if i is 3&quot;. For this reason, the debugger is essentially a strictly stronger version of print debugging. For a tutorial on how to use the debugger in VSCode, see the debugger guide. "},{"title":"Print Debugging vs the Debugger​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#print-debugging-vs-the-debugger","content":"When it comes to choosing between print debugging vs using the debugger, print debugging is useful if you have a good hunch about what is wrong, and just need verification where things are going wrong. For computer science and informatics students planning on taking more programming languages in the future, we highly suggest you learn to use the debugger now. In less &quot;user-friendly&quot; languages like C, debuggers are objectively more powerful than print debugging for things like picking up segmentation faults. (Aside: these are like Python errors, but instead of immediately giving you the error message and where it happens, C dumps a record of your computer's recorded working memory and says &quot;here's what went wrong!&quot;, which is a lot less fun to read. A debugger will just stop where the segfault happened, and show you what all the variables were, without you having to read through the core dump). We as programmers still use print debugging all the time. But knowing how to use a debugger is an important skill, so we recommend you learn as early as possible, especially while we're working with a &quot;user-friendly&quot; language like Python. "},{"title":"Unit Tests​","type":1,"pageTitle":"Getting Unstuck","url":"/main/guides/getting-unstuck#unit-tests","content":"Say you're writing a calculator app, and you've implemented the following underlying math functions: def add(a, b): ... def subtract(a, b): ... def multiply(a, b): ... def divide(a, b): ... def exponential(a, b): ...  You press all the buttons on your calculator, and expect it to evaluate subtract(add(3, multiply(4, 5)), divide(exponential(10, 2), 2)) and out the result of (3 + 4 * 5) - (10^2)/2 = -27. However, you're calculator gives you a result of -2. How do we know where the problem is? Is it with your calculator buttons? Do the buttons work, but the calculator has an order of operations problem? Is there a problem with one of our math functions? What we can do is we can write a set of tests for each separate function, where we pass it two inputs, and check the output is what we expect. For example, we could call add(2, 3), and then check that it returns 5. We call these tests unit tests, they're a series of tests that make sure the building blocks of our program work in isolation. The idea is that, if we know each of our functions work in isolation, then the problem is in how we call them, or in our algorithm. In Python, we often use assert for unit testing. An example of a set of unit tests for the above code would be assert add(2, 3) == 5 assert add(9, 0) == 9 assert subtract(5, 2) == 3 assert subtract(2, 9) == -7 assert multiply(5, 2) == 10 assert multiply(3, 0) == 0 assert divide(9, 1) == 9.0 assert divide(10, 2) == 5.0 assert exponential(4, 2) == 16 assert exponential(2, 5) == 32  You want your unit tests to cover all inputs. For example, here we'd want to check that our functions all work how we'd expect with positive numbers, negative numbers, floats, and any special cases like 0 for divide and exponential. Unit tests often work best in tandem with another debugging technique. For example, if all of these pass, we can assume that our math functions work, and that our problem is actually that we're using our functions improperly. So we boot up the debugger, and pin down that the problem is in the order of operations conversion section (the example I gave does (10/2)^2, not (10^2)/2). Unit test are often the bulk of your grade on programming assignments. We check that all of your functions work how we ask them to, and then once we know all your functions are working test that your project works as a whole after that. "},{"title":"How to use Piazza","type":0,"sectionRef":"#","url":"/main/guides/piazza","content":"","keywords":""},{"title":"Using Piazza​","type":1,"pageTitle":"How to use Piazza","url":"/main/guides/piazza#using-piazza","content":"To ask a question, click the New Post button in the top left corner:  You'll then be presented with the following screen:  99% of the time you'll want to pick Question. Public posts are Entire Class, private posts are Individual Student(s)/Instructor(s). If you pick the latter, typing Instructors posts to the entire staff. You can also post to just your instructor if you need to, put we're prefer you reserve this for personal matters. Then select a folder based on what your question is about, type up your question. Before you select Post My Question/Note, you can chose if you want your question to have your name shown, or be anonymous to classmates. It's up to you, but I know from personal experience it's much easier to ask questions anonymously. "},{"title":"How to ask for Help​","type":1,"pageTitle":"How to use Piazza","url":"/main/guides/piazza#how-to-ask-for-help","content":"There are three main types of questions Approach-based questions: How do I start Todo 4 in the project? Code-specific questions: Why is my code not working how I want it?Logistical questions Piazza is great for approach-based questions. We highly recommend that you make these posts public. That way other students can see the questions, as well as discuss them or even answer them. If you are shy about asking your classmates for help, you can always post anonymous! Posting publicly is also a huge help to us, since it prevents us from asking the same question over and over again. For more on code-specific questions, see the Posting Code section. For logistical questions, you can either post public or private. It's up to your discretion based on the question you want to ask. "},{"title":"Posting Code​","type":1,"pageTitle":"How to use Piazza","url":"/main/guides/piazza#posting-code","content":"A classic question that we see every semester is Why is this not working? with an image of someone's source code attached. This is an academic honesty violation, and is also usually hard for us to answer without just giving you the solution. Firstly, do not ever include your source code for an assignment in a public Piazza post.Posting your code to the entire class is code sharing, and is therefore an academic dishonesty violation per the academic honesty policy detailed in the syllabus. We take this very seriously, so please do not do it. Instead, If you have a question about zyBooks or zyLabs, please make a public post directing us to the specific section and question. We can see your submissions, and will respond to your post either with general pointers, or even with what you should look to change. Example: I've been stuck on section 2.15 of the lab. Can you give me some pointers? If you have a question about an assignment, please first submit your current code to Gradescope. Then, ask your question and include a link to your Gradescope submission at the bottom. Example: I am stuck on Todo 4, specifically the part with getting the print formatting right. Any advice? Gradescope link: link to submission Lecture code and code in the homework exercises are fine to be posted. In fact, we encourage you as students to try to respond to these! Just make sure you err on the side of leading the student in the right direction. Do not give them the answer directly (again, academic honesty is important to us). "},{"title":"Staff","type":0,"sectionRef":"#","url":"/main/guides/staff","content":"Staff This is a collection of our staff documents. These are publicly available so it's easier for our staff to access, but also for transparency reasons. 📄️ CICS 110 Staff Guide This is a guide for all-things staff for CICS 110. This page is rather long! I'd recommend using the section headers to navigate. Don't feel like you have to plow through it all in one sitting, since this serves a dual purpose as a guide and a manual (and therefore likely doesn't make for particularly fun reading D:). 🗃️ Website Meta Guides 6 items 📄️ Kobi's Design Doc Preface: I made this as a way to organize my thoughts and to help me plan out the course. This was done primarily as an exercise so I can better understand the course content. I have no notion that any of this stuff is good, but it can be used if it seems helpful.","keywords":""},{"title":"Website Meta Guides","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides","content":"Website Meta Guides A set of guides that walk through working with this website 📄️ Getting Started This guide will walk you through the process of setting up a local development environment for the website 📄️ Committing Code This is a guide on how to commit code to the repository. 📄️ Making A Guide This is a guide on how to make a guide. This guide will teach you how to make a guide for this website. 📄️ Making an Announcement This guide will show you how to make an announcement in the blog section. 📄️ Python Live Code Blocks Hello World you can run 📄️ Markdown Tutorial This website is made of markdown documents. This guide will walk you through the process of writing markdown documents for the website.","keywords":""},{"title":"Kobi's Design Doc","type":0,"sectionRef":"#","url":"/main/guides/staff/design_doc","content":"","keywords":""},{"title":"Things to ask:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#things-to-ask","content":"How much should we meet? Currently is once a week. I think twice a week would be better since we are continually creating stuff. Since we are making stuff, we often will need to discuss next steps so we stay in sync. We also need to make sure that what we create is good, and I imagine the way we do this is by meeting and sharing what we did. Meeting twice a week would allow us to have more discussion about what we are doing, and would allow us to catch mistakes or miscommunications sooner. What do people's winters look like? I have something from the 9th-11th, anyone else have things they have planned in advance? What are goals for the winter? Add to this document the results Goals for a slide template Black/White was mentioned, anything else? Should we make an Agenda before each meeting? If we want to, put all of this on it "},{"title":"Units:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#units","content":""},{"title":"1. Foundation of programming​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#1-foundation-of-programming","content":"Notes:​ Learn Modules in a Lab? I think it would be a good lab assignment to learn how to use the math or the random library. Goals:​ Introduce the course and instructorThe model of a computerComputational thinkingThe basics of python Content:​ Introduction to the course and instructorModel of a computerComputational thinking (how to read a program)Literals - ints, floats, stringsExpressions (arithmetic only: +, -, *, /, //, %, **, parenthesis) Order of operationsint vs float VariablesMethods on all literals+variables - type, idMethods on specific literal types (str, int, float) "},{"title":"2. Data types​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#2-data-types","content":"Goals:​ Sequence typesother types (dictionaries, sets but not Booleans or None)Mutability and Ordering and what this means on a lower level (memory/model of computer)Basic operations on these types Content:​ Sequence Types: Lists, Tuples, StringsIndexing, len, +, *, slicingMutability in the global frame - related to the model of a computerList and String methodsDictionaries and Sets, and their operations "},{"title":"3. Conditional Control flow​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#3-conditional-control-flow","content":"Notes:​ For all pieces of control flow, there will need to be multiple practice assignments involving going to/from diagrams. This is in addition to practice problems. Goals:​ Introduce boolean logicIntroduce if elif else statementsUnderstanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Content:​ Booleans - True, False, and, or, notComparison operators - ==, !=, &lt;, &gt;, &lt;=, &gt;=Other ways to make booleans - is, is not, in, not inIf statements - if, elif, else (nested if statements)Detecting ranges of values - if 0 &lt;= x &lt;= 10Making Control Flow Diagrams "},{"title":"4. Looping Control Flow​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#4-looping-control-flow","content":"Notes:​ For all pieces of control flow, there will need to be multiple practice assignments involving going to/from diagrams. This is in addition to practice problems. Goals:​ While and for loops (with nesting)Understanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Break and Continue and how they relate to control flow diagramsCommon Mistakes with Loops Infinite loopsForgetting to increment/decrementForgetting to change the condition List and Dictionary Comprehensions Content:​ While loops - Extension of if statements Do not go over else for while loops Break and Continue (in the context of while loops)For loops - for, range, in Do not go over else for loopsGo over break and continue in the context of for loops Comprehensions List ComprehensionsDictionary ComprehensionsTernary Operator for Comprehensions Miscellaneous Zip, Enumerate "},{"title":"5. Files and Modules​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#5-files-and-modules","content":"Goals:​ What is a module and how to import itUnderstand standard modulesIntroduce the idea of files and how they relate to the model of a computerGet students to write and read text from filesWhat are csv files, and how to read and write them using the csv module Content:​ Importing a moduleUsing more complex modules (time, os, sys)What is a fileOpening and Closing a fileReading and Writing to a filecsv module Reading and Writing to a csv fileDictReader and DictWriter "},{"title":"6. Functions​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#6-functions","content":"Goals:​ Understand that a function is a self contained piece of logic (high level)Understand that a function is a block of code that can be called multiple times (low level) and that it can save time while programmingUnderstand that a function can take in parameters and return a valueUnderstand None and how it relates to functionsBasics of recursion (base case and recursive case)Understanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Introduce Making a Module and importing itIntroduce concept of main python file Content:​ High level analogy of a functionDefining a function that receives no parameters and only prints Calling a function Defining a function that returns a value difference between print and returnReturning tuples as a way to return multiple values Unpacking tuples None What is it - a special value that represents nothingHow it relates to functions - functions that do not return anything return NoneWhy it is important - it is important to understand that functions always return somethingHow to check if a function returns None or a value is None Defining a function that receives parameters Positional parametersKeyword parameters (Not sure if needed)Default parametersVariable number of parameters (Not sure if needed) Making a module What is a moduleHow to make a moduleMain python file concept Function documentation Documenting the type of parametersDocumenting the type of return valueDocStrings in generalHow to access the documentation of a function (in vscode for example)How to read function documentation Recursion (basics only) Base caseRecursive caseControl Flow "},{"title":"7. Miscellaneous​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#7-miscellaneous","content":"Notes:​ This unit will be a catch all for anything that is not covered in the previous classesLikely 1 class period each (except classes which will be 2-3), and an associated practice assignment Goals:​ Object Oriented Programming Introduce the concept of a classWhat is a class conceptually (high level)What is a methodWhat is an attribute Event Driven Programming Not sure what this is yet. Need to discuss with Tim. If event driven programming is async...await, see next note. Otherwise I will need to research this.Note: Some languages have a built in concept of events, like js's promises. Python does not have this. But, there are libraries like asyncio, must be pip installed, that can be used for async...await keywords. Introduce the concept of a library What is a libraryPip and how to install a libraryHow to import a libraryHow to use a library Exceptions What is an exceptionHow to handle an exception (try catch)Common exceptions Content:​ Object Oriented Programming High level analogy of a class (object)Defining a classInstantiating a class and __init__ methodDefining and accessing attributesDefining and calling methodsOverriding built in methods (str, mul, etc) Event Driven Programming See notes in goals section Libraries What is a libraryPip and installing a basic library (matplotlib maybe?)Importing a libraryUsing a libraryLooking up documentation for a library Exceptions What is an exceptionHow to handle an exception (try except)Common exceptions  "},{"title":"What I'm Currently not covering​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#what-im-currently-not-covering","content":"(Unfinished, need ZyBooks chapters 7-13)​ String Arithmetic Stuff like string concatenation, string multiplication, etc. I think this would be good for an introductory Lab or assignment to get them used to looking things up Type Casting I think I might want to include this, but I forgot about it initially. It might be good for a lab, but I might just shove it in in lecture 3 or 4 f-strings Another good thing for an introductory lab or assignment. Students didn't really use this (and usually forgot about it) so I think it would be good to have them use it in a lab or assignment to practice it/ hopefully remember it. Compound Operators (zybooks 2.6) I'll cover this in the while loop section, but not when it comes in the zybooks (unit 2)This is stuff like +=, -=, etc. It seems like another thing I could mention in class, but I'll already be overwhelming them with new stuff at that point. I think it would be good for a lab or assignment, or as a trick they learn after they write z = z + 2 a bunch of times. The number representation of a character (zybooks 2.10) This seems really cool, but it would just be another thing I'm throwing at them. The biggest complaint I got last semester was that there were too many things thrown at them, and they forgot a bunch because they never used them. I think this would be good for a lab or throughout a big assignment, but not in class. named tuples (zybooks 3.3) I've never used this. My friends who work with python every day have never used this. I don't think we should include this. Can we just skip it? Binary Numbers (zybooks 3.9) I think this is too much detail for an intro class. This would never be needed in python realistically. We could expose it for a lab assignment or exercise, but if I include it in class students will just forget about it. It also doesn't really fit in with the rest of the unit, and we didn't cover it last semester. Comparison Chaining (zybooks 4.4) Just found out about this while looking at the ZyBooks. It's pretty cool, apparently you can do 5 &lt; x &lt; 10 and it will check if 5 &lt; x and x &lt; 10. I think this would be good for a lab or assignment, but it's just another forgettable detail. For in strings (zybooks 5.5) I think this is a good thing to include in a lab or assignment, but I don't think it's necessary to include in class. It's just another thing to throw at them.  "},{"title":"What I'm covering but definitely needs to be practiced​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#what-im-covering-but-definitely-needs-to-be-practiced","content":"(Unfinished, need ZyBooks chapters 7-13)​ Everything! Well not really, but here are a few things that I think need to be practiced a lot more than I can in class Basic Datatype methods (Methods on Strings, ints, floats, Sets, Lists, Dictionaries, Tuples) I think we should have a lab or assignment where students have to look up and use a bunch of string, int, and float methods. I think this would be good practice for them to get used to looking things up. Also, introducing a grid of them in a class doesn't really help them remember them.There are some basic things that will be included (indexing for example) but there are a bunch of string methods that they will only see in a grid of string methods, and they will forget about them unless they need to use them in practice. Floats vs Ints They will need practice on this. Just teaching them the difference isn't enough. They need to practice it. Lists and Modulo Modulo is useful for indexing lists so you don't index out of bounds. This would be good for an exercise Using the math and random modules I expose them to this in the first week, but then don't touch it for a while. It would be good to use them occasionally in exercises so they don't forget about them. Boolean Arithmetic I cover and, or, not and stuff, but in practice (especially for the problems they see which are introductory) they don't usually need them. We should either have the exercises require complex boolean arithmetic, or have them straight up write code that matches a boolean arithmetic expression or something. While loops All sorts of while loops with different step conditions. For loops Looping through Lists I will expose in class, but dictionaries, sets, tuples, strings, and other things will need to be practiced. Lists should also be heavily, if not the most heavily, practiced. Reinforce How Range works This is important to reinforce Comprehensions This is a really useful feature, please give them a lot of practice with this. They shouldn't just practice list comprehensions, they should practice dictionary and set comprehensions as well. But, probably not generator comprehensions since that's a weird can of worms. Enumerate and Zip I'll cover, but they are pretty useful (especially enumerate) so they should be practiced a lot. Nested Loops Needs practice before they can understand. Designing function signatures Students struggled with identifying what parameters a function should take in. They need practice with this.They should also use docstrings to document their functions so they can list the return type and parameter types.Or at least whatever this is called: (I think this is called a function signature, but the docstring is the documentation) def is_num_and_str(num: int, string: str) -&gt; bool: Expose them to function stubs (the above syntax) so they can write the function signature before they write the function body too. This will help them design the function signature. Print Vs Return Need to practice. Or, more likely, realize when they are printing and need to return  "},{"title":"Class timeline + Overview:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#class-timeline--overview","content":"Budgeting 21 classes (1 class = 75 minutes) underbudgeting so things can be moved around if needed. Note: Units 3 and 4 will need a LOT of practice work so the content can sink in. #\tUnit\tContent1\t1\tIntro + Model of Computer + Computational Thinking 2\t1\tLiterals + Hardcoded Expressions 3\t1\tVariables + Object functions + Literal Methods 4\t2\tLists/Tuples/Strings + Operations + Mutability 5\t2\tDicts/Sets + Operations + Practice 6\t3\tBooleans + if 7\t3\tif..elif..else + Control Flow 8\t3\tPractice Day: Control Flow + Debugger 9\t4\tWhile loops + Break/Continue + Control Flow 10\t4\tFor Loops + Control Flow + Practice 11\t4\tComprehensions + Enumerate/Zip + Practice 12\t5\tImporting modules + Standard Module Practice 13\t5\tWhat is a file + Opening/Closing + Writing/Reading Text 14\t5\tWhat is a csv file + csv module/DictReader + practice 15\t6\tWhat is a function + Why + Functions without parameters + None 16\t6\tFunctions with Parameters + Control Flow + Practice 17\t6\tCustom Modules + Documentation + Recursion 18\t7\tOOP philosophy + Class analogy + Class with constructor + attributes/accessing/dictionary comparison 19\t7\tMethods + Overloading + Practice 20\t7\tWhat is Pip + Installing a library + Using the library + looking up documentation 21\t7\tWhat is an Exception + Exception Vs Error + Types of Exceptions + Try/Except  "},{"title":"Labs and Assignments​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#labs-and-assignments","content":"Note: I do not know what Labs/Assignments should look like. These are just my preconceived notions of what I expect them to be (mainly so I remember to ask in a meeting if these are accurate/require any changes). "},{"title":"Assignments​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#assignments","content":"I imagine there will be weekly assignments. Each assignment will contain: 5 Exercises These will be pretty straightforward (5-15 lines of code each)They will have documentation for each exercise, and may introduce a simple concept or method on a data type. For example, there may be an exercise that introduces the string method: .toLower() which makes all letters lowercase. 2 Challenges These will be more complex (20+ lines of code, or using multiple concepts layered etc.)Will have documentation and likely will introduce a more complex methodRequire a complex control flow These should also feel (more so than the exercises) to be a meaningful task. I imagine some exercises will just be do X, without the context of why they are doing X. The challenges should have context, and should be a meaningful task. "},{"title":"Labs​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#labs","content":"Each week will have a lab unless there is an exam (do we have exams?) What I imagine a lab is: Introduces a new concept: Should be a new concept that is not directly covered in class. I want this because there are a bunch of concepts that I want to cover, but if I were to introduce them briefly in class only students will forget them. It will also make class periods more confusing to cover one-off methods or concepts, but they could totally be learned in the lab. Collaboration: Students should work in teams of 2 (3 if there is an odd number of people). According to people in 121, 4 is too many, so defiantly split to 2 groups of 2.There should be periodic times in the lab where students should check in with a TA or UCA in the lab. This is to: Make sure they are on the right trackMake sure all group members know whats going onEncourage discussion (hearing people talk also encourages discussion)  "},{"title":"Exam(s)​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#exams","content":"This is just my thoughts: We had exams in the fall. However, I'm not sure about the value of exams. The purpose of an exam, from my understanding, is to verify how much each student understands about the topic. Students will have weekly assignments, and will have a lab every week. I think that the assignments and labs will be a better indicator of how much each student understands. Students who don't understand a concept will struggle with that week's exercises, challenges, and Lab. This lack of understanding will therefore be present in the grade. Additionally, most of the exam questions we had in the fall were very pinpointed. There were many questions on specific edge cases. This is what most CS exams end up with since a question needs to be specific to have a multiple choice answer. However, this also means that grades on the exam are very dependent on the student's ability to memorize edge cases. I don't think this is not a good indicator of how much the student understands the topic. On the other hand, having a lab I think is a better environment to evaluate this. In a lab, students write a program. This program is a good indicator of how much the student understands the topic. This is because the program is a direct result of the student's understanding of the topic. If the student doesn't understand the topic, they will struggle to write the program. If they do understand the topic, they will be able to write the program. A worry that could exist with this is that we are testing the group of 2-3 student's knowledge instead of an individual student. However, I think this is a good thing. In the real world, students will be working in groups. This is a good way to prepare them for that. Additionally, if we feel that the groups are inhibiting our ability to determine how much students understand, we can just make the lab sections that would have been exams, into labs without groups.  "},{"title":"The Website​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#the-website","content":"Note: This is just my thoughts on the website (mainly so I don't forget). This just reflects my understanding of what we want on the website. So if something should be here, let me know because I probably forgot. Also, if something should not be here, let me know because there is probably a misunderstanding on my part. Schedule I wanted the office hours on the website so it was easy to view Potentially with a react calendar component I wanted the class schedule with topics for each class period So students could get an understanding of what we were going to cover Slides + In class content I wanted the slides on the website so students could view them at home Embedded PowerPoint slides or google slides Code used in class Doesn't need to be the result of live coding in class (but that would be cool)Could be prepared in advance (an answer key for in-class activities basically)Want to add functionality to run python code in the website. Doesn't look that bad and would be cool. For Me: Lookup live-brython again Assignments: Exercises + Challenges Should have the documentation on the websiteShould store the base code (if there is any) on the website Labs Should have the documentation on the websiteShould store the base code (if there is any) on the website Guides Wanted to address common issues (like how to install python) with guides on the websiteWanted to go over topics (like how to define a function) with guides on the website so it was easy for students to reference People Wanted to have a page with information on the instructors, TAs, and UCA's Picture, name, email, office hours, etc. Course Information Wanted to have a page with information on the course Course description, course goals, Unit overviews, etc. Syllabus Helpful Resources Wanted to have a page with helpful resources outside of the course Information on SI sessions, helpful youtube channels, tutoring from CICS 298A, etc. Announcements Wanted to have a page with announcements Important announcements, reminders, etc. Forms Wanted to have a page with forms Feedback form, Extension form, etc.  "},{"title":"Each Week: (Unfinished)​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#each-week-unfinished","content":" "},{"title":"Class 1:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#class-1","content":"Prior: N/A​ Goal: Introduction, Introduce the Model of a Computer, First Program Demo​ Content: Introduction - Introduce InstructorSyllabusCourse GoalsModel of a Computer Goal: Build up to understanding each line of the first programHas 5 Parts: Instructions, Memory, Input, Output, and Processor Introduce Computational Thinking Goal: Build up to understanding how to read the first programIntroduce how to read a program (top to bottom)Analogy that a program is like a recipe First Program Demo Goals: Identify how each line of the program relates to the model of a computer. Understand how to read a program. Program: Takes in user's name, stores it, and then prints out hello, {name}Students should not understand the code entirely. Specifically, they won't understand the storage of the name in memory. Tell them that we will go over the details more later, and just brush over it saying that it is storing the name in memory, and it can be referenced with the variable (think math relation).  "},{"title":"Class 2:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#class-2","content":"Prior: Students should have downloaded and installed Python​ Goal: Expressions with literals, a program to do hardcoded math​ Note: I want to do expressions before variables. I had many students that struggled to realize that variables stored the result of an evaluated expression. I want to introduce variables after expressions with the goal of having the students understand why they might want to store the outputs of lines of code. Content: Review the first program Goal: Reinforce the idea that a program is a recipe and that each line of code interacts with the model of a computerHave students identify the parts of the model of a computer that each line of code interacts with, and walk through the program line by line again Literals Goal: Introduce the idea of literals to build up to using them in hardcoded expressions Starting from a model of a computer: Introduce the idea of a literal as a value that is not stored in memoryGive examples of literals: 1,2,3 &quot;hello&quot; Don't introduce types yet (overcomplicates things and not needed for goal) Diagram of literals in memory Activity: Printing Literals Goal: Get students used to making a file and coding in it. Have them print out literals Have students make a file (have them each pick their own name)Have them print out a literal for their nameHave them print out a literal for their favorite foodHave them print out a literal for their favorite numberHave them print out a literal for their hobby (what they like to do in their free time)After they have done this, and have it working, have them show their neighbors to foster discussion and as an icebreaker Hardcoded Expressions Goal: Introduce Operators to form hardcoded math expressions Introduce operators: +, -, *, /, ** (don't do modulo or floor division yet so they can draw parallels to math)Introduce parenthesis, and how they can be used to change the order of operationsLive Code: Instructor writes out hardcoded expressions and evaluates them. Things like 1 + 2, 1 + 2 3, 1 + 2 3 / 4, etc. Closing Activity: Evaluating a complex math problem Goal: Teach students that python can be used to evaluate complex math problems Put 2-3 complex math problems on the board with 5 digit numbers and stuff like thatHave students evaluate the problems, tell them they can do it by hand, or with python (they will quickly realize it will be easier to do it with python)Have them compare their answers with a neighbor to make sure they are accurateGo over the problems and live code the solutions  "},{"title":"Class 3:​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#class-3","content":"Prior: Students should understand literals and expressions​ Goal: Introduce variables, assignment, input, then have them make write a program that stores and uses input​ Content: Review Hardcoded Math Expressions Goal: Reinforce the idea that python can be used to evaluate complex math problems Have students evaluate new problems, tell them they can do it by hand, or with python (they will quickly realize it will be easier to do it with python)Have them compare their answers with a neighbor to make sure they are accurateGo over the problems and live code the solutions Variables Goal: Introduce the idea of variables as a way to store the result of an expression. Introduce how variables are stored in memory (Model of a Computer)  "},{"title":"Concepts: (Unfinished)​","type":1,"pageTitle":"Kobi's Design Doc","url":"/main/guides/staff/design_doc#concepts-unfinished","content":"Model of a Computer​ Has 5 Parts: Instructions, Memory, Input, Output, and ProcessorStudents should be able to identify how each line of code interacts with the model of a computer Computational Thinking​ Students should be able to identify how to read a program (top to bottom) "},{"title":"Committing Code","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/adding_code_to_repo","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Committing Code","url":"/main/guides/staff/meta-guides/adding_code_to_repo#prerequisites","content":"Have a GitHub accountHave Git installed (see here for instructions on how to install Git)Have a local version of the development environment (see here for instructions on how to set it up) Warning Never commit directly to the main or gh-pages branches! This will cause the website to break. "},{"title":"Committing Code​","type":1,"pageTitle":"Committing Code","url":"/main/guides/staff/meta-guides/adding_code_to_repo#committing-code-1","content":"Make sure your changes are in a separate branch (not main) If you have already made changes, don't worry. You can still commit them to a new branch.To make a new branch (and use it), type git checkout -b &lt;branch_name&gt; in the terminal.To use an existing branch, type git checkout &lt;branch_name&gt; in the terminal. Add your changes to the staging area. To add all changes, type git add . in the terminal.To add specific changes, type git add &lt;file_path&gt; in the terminal. Commit your changes. To commit all changes, type git commit -m &quot;&lt;commit_message&gt;&quot; in the terminal.To commit specific changes, type git commit &lt;file_path&gt; -m &quot;&lt;commit_message&gt;&quot; in the terminal. Push your changes to GitHub. To push all changes, type git push in the terminal.To push specific changes, type git push &lt;file_path&gt; in the terminal. Create a pull request on GitHub. To create a pull request, go to the repository on GitHub and click the Compare &amp; pull request button.Add a title and description for the pull request.Click the Create pull request button. Merging First, a test build is created to make sure the code compiles.Second, someone must approve the pull request (this can be done by anyone).Third, the pull request is merged to main. This will automatically deploy the changes to the website. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/getting_started","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Getting Started","url":"/main/guides/staff/meta-guides/getting_started#prerequisites","content":"A computer that you can install software on "},{"title":"Steps to setup the local development environment​","type":1,"pageTitle":"Getting Started","url":"/main/guides/staff/meta-guides/getting_started#steps-to-setup-the-local-development-environment","content":"Install Node.js: https://nodejs.org/en/download/Install Yarn: Open a terminalRun npm install --global yarn Install Git: https://git-scm.com/downloadsClone the repository: Open a terminal and navigate to the directory you want to clone the repository intoRun git clone https://github.com/CICS110/CICS110.github.io.git Install dependencies: In the same terminal, navigate to the directory you cloned the repository into: cd CICS110.github.ioRun yarn install in the terminal to install the dependencies "},{"title":"Steps to run the local development environment​","type":1,"pageTitle":"Getting Started","url":"/main/guides/staff/meta-guides/getting_started#steps-to-run-the-local-development-environment","content":"Note: must have the local development environment setup first In the terminal, navigate to the directory you cloned the repository intoRun yarn start in the terminal to start the local development environment This should open a browser window with the website running locally Search Bar Will Not Work Locally In the local development environment, the search bar will not work. You can get it to work by first building it then serving the local production build: yarn build npx http-server ./build  "},{"title":"Python Live Code Blocks","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/live_python","content":"","keywords":""},{"title":"Hello World you can run​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#hello-world-you-can-run","content":"To make a runnable code block, add live_py to the code blockThe code block will have a play button in the top right corner, click it to run the codeThe code can be edited and run again on the website No need to change any source code I don't know why the subtitles are in german print('Hello World')  "},{"title":"Hello World Not Runnable​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#hello-world-not-runnable","content":"For Reference, here is a code block that is not runnable print('Hello World')  "},{"title":"Adding a title​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#adding-a-title","content":"To add a title to the code block, add title=My_Title to the code blockIf you want a space in the title, use _ or - instead of a spaceIf you want an '_' or '-' in the title, use __ or -- instead of a single one Hello-World,-with-a-title print('Hello World, with a title')  "},{"title":"Hello World \"slim\"​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#hello-world-slim","content":"The slim version is a little smallerDoesn't display the titlePlay button is inlineTo make a slim code block, add slim to the code block can't_see_me print('Hello World slim')  "},{"title":"You can use a turtle too:​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#you-can-use-a-turtle-too","content":"Can import turtle and use itCan save the drawings to a file the download button is in the top right of the turtle window turtle_example from turtle import * color('red', 'yellow') begin_fill() while True: forward(200) left(170) p = pos() if abs(p[0]) &lt; 1 and abs(p[1]) &lt; 1: break end_fill() done()  "},{"title":"Importing Default Libraries​","type":1,"pageTitle":"Python Live Code Blocks","url":"/main/guides/staff/meta-guides/live_python#importing-default-libraries","content":"Can import and use various libraries that are included by default Link to standard library: https://docs.python.org/3/library/index.html Warning: This has a large output fetching_json from urllib.request import urlopen import json # A Url that returns JSON data (without requiring authentication) url = &quot;https://pokeapi.co/api/v2/pokemon/ditto&quot; with urlopen(url) as response: body = response.read() body_parsed = json.loads(body) print(json.dumps(body_parsed, indent=2))  "},{"title":"Making A Guide","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/making_a_guide","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#prerequisites","content":"A code editor (VS Code, Atom, etc.)A local version of the development environment (see here for instructions on how to set it up)An understanding of Markdown (see here for a guide on Markdown) "},{"title":"Creating A Guide​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#creating-a-guide","content":"Create a new file in the guides folder. The file name should be the name of the guide, with the .md extension. For example, if you were making a guide on how to make a guide, you would name the file making_a_guide.md.Create a title for the guide. This is done by adding a # at the start of the file. For example, if you were making a guide on how to make a guide, you would add # Making A Guide at the start of the file.Continue to write markdown content for the guide. "},{"title":"Front Matter​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#front-matter","content":"Front matter is a set of metadata that is used to configure the guide. It is written in YAML and is placed at the top of the guide file. It allows you to configure things such as the guide's title, description, and sidebar position. "},{"title":"Example​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#example","content":"--- title: Making A Guide description: This is a guide on how to make a guide. sidebar_position: 1 ---  For the example above: The guide's title will be Making A Guide. This is used for the guide's page title and as the text in the sidebar for this guide. The guide's description will be This is a guide on how to make a guide. This is used for the guide's page description. I've only found it to be used in the search results. The guide's sidebar position will be 1. This is used to determine the order of the guides in the sidebar. The lower the number, the higher up the guide will be in the sidebar. "},{"title":"Guide Front Matter​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#guide-front-matter","content":"The following is a list of front matter that can be used for guides: title: The guide's title.description: The guide's description.sidebar_position: The guide's sidebar position. "},{"title":"Special Features​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#special-features","content":""},{"title":"Live Code Editor​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#live-code-editor","content":"If you want to add a live python code editor, see this guide: Live Code Editor "},{"title":"Linking To Other Guides​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#linking-to-other-guides","content":"You can use relative file paths to link to other guides. For example, if you had the following folder structure: guides website_guides making_a_guide.md other_guides markdown_tutorial.md  You could link to markdown_tutorial.md from making_a_guide.md by using the following syntax: [Markdown Tutorial](../other_guides/markdown_tutorial.md)  "},{"title":"JavaScript​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#javascript","content":"Expressions defined in curly braces will be evaluated as JavaScript. For example, if you had the following text {1 + 1}  It would be rendered as 1 + 1 =  2 NOTE: To trigger this functionality, somewhere in the file needs to be a JSX element. In this case, I added &lt;&gt;&lt;/&gt; to the line so that it would be rendered as a JSX element. The line looks like &lt;&gt;&lt;/&gt;1 + 1 = {1 + 1}  "},{"title":"JSX and HTML Elements​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#jsx-and-html-elements","content":"You can use JSX elements (React) in the guides too. For example, here is a button that says &quot;Click Me&quot;: Click Me! The code for the button is &lt;button onClick={() =&gt; alert('Hello!')}&gt;Click Me!&lt;/button&gt;  "},{"title":"Images​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#images","content":"You can add images to the guides. Put the image you want somewhere in the guides folder. Then, you can reference the image using the following syntax: ![Image Title](image_path)  For example, if you had the following folder structure: guides website_guides making_a_guide.md images image.png  You could add the image to the guide by using the following syntax: ![Image Title](../images/image.png)  "},{"title":"Extra Resources​","type":1,"pageTitle":"Making A Guide","url":"/main/guides/staff/meta-guides/making_a_guide#extra-resources","content":"Docusaurus Guide Teach you how to use Docusaurus (the framework that this website is built on) to make docs and guides. "},{"title":"Making an Announcement","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/making_an_announcement","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#prerequisites","content":"Have a local version of the development environment (see here for instructions on how to set it up)Have an understanding of Markdown (see here for a guide on Markdown) note Almost all of this comes from the Docusaurus documentation. If you want to learn more about how to make announcements, you should check out the documentation. "},{"title":"Creating An Announcement​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#creating-an-announcement","content":""},{"title":"Making the file​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#making-the-file","content":"Create a new file in the blog folder. The file should be named YYYY-MM-DD-announcement-title.md, where YYYY is the year, MM is the month, DD is the day, and announcement-title is the title of the announcement. For example, if you were making an announcement on January 1st, 2021, you would name the file 2021-01-01-announcement-title.md. Example Structure: blog 2021-01-01-announcement-title.md  If you think that you may want to include images in your announcement, you should create a folder with the same name as the file, but without the .md extension. For example, if you were making an announcement on January 1st, 2021, you would create a folder named 2021-01-01-announcement-title. Inside this folder, also create a file called index.md. This will be the file we will write our announcement in. Other resources, such as images, can be placed in this folder. This is only necessary if you want to include other files in the announcement. Example Structure (for an announcement with images): blog 2021-01-01-announcement-title index.md image1.png image2.png  "},{"title":"Creating the Front Matter​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#creating-the-front-matter","content":"Front matter is a set of metadata that is used to configure the announcement. It is written in YAML and is placed at the top of the announcement file. It allows you to configure things such as the announcement's title, description, and sidebar position. Example:​ --- slug: my-url title: Making an Announcement Guide is Out! authors: [Kobi, Tim] tags: [guides, hello, docusaurus] ---  For the example above: Slug​ The slug is the URL extension for the announcement. For example, if the slug is welcome2, the announcement will be located at /blog/welcome2. If the slug is not specified, it will follow the format /blog/yyyy/mm/dd/announcement-title. For example, if the announcement is named 2021-01-01-announcement-title.md, the slug will be /blog/2021/01/01/announcement-title. Title​ The title is the title of the announcement. This will be displayed at the top of the announcement. Authors​ The authors is a list of authors by their unique id (as defined in authors.yml) that wrote the announcement. This will be displayed at the top of the announcement. Authors can be added to authors.yml by following the instructions here. Tags​ The tags is a list of tags that are associated with the announcement. This will be displayed at the top of the announcement. They don't need to be defined in any other file. Clicking a tag will show all announcements with that tag. "},{"title":"Content of the Announcement​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#content-of-the-announcement","content":"The content of the announcement is written in Markdown. You can learn more about Markdown here. It also shares the same additional features as the docs pages. Finally, there is also support for truncated posts. To make a truncated post, add the following to the content of the announcement: &lt;!--truncate--&gt;  Anything below this will not be shown on the announcement page. Instead, a &quot;Read More&quot; button will be shown, which will take the user to the full announcement. "},{"title":"Adding an Author​","type":1,"pageTitle":"Making an Announcement","url":"/main/guides/staff/meta-guides/making_an_announcement#adding-an-author","content":"In the blog folder is a file called authors.yml. This file contains a list of authors that have written announcements. To add an author, add a new entry to the list. The entry should be in the following format: author-id: name: Author Name title: Author Title url: https://author-url.com image_url: https://author-image-url.com  For example: kobi: name: Kobi title: Instructor url: https://kobif.github.io/block-game/ image_url: http://images4.fanpop.com/image/user_images/2069000/Unnoticed-2069013_266_394.jpg  Author ID​ The author-id is the unique id of the author. This is used to associate the author with the announcement. This must be unique. This is also what is used in a blog post's authors field. Name​ The name is the name of the author. This is what will be displayed on the announcement. This does not need to be unique. Title​ The title is the title of the author. In our case, this is the role of the author for the course. This will be displayed on the announcement. URL​ The url is a URL that will be linked to the author's name on the announcement. This is optional. Image URL​ The image_url is a URL to an image that will be displayed next to the author's name on the announcement. This is optional. "},{"title":"Markdown Tutorial","type":0,"sectionRef":"#","url":"/main/guides/staff/meta-guides/markdown_tutorial","content":"","keywords":""},{"title":"Resources​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#resources","content":"Markdown Cheat Sheet: https://www.markdownguide.org/cheat-sheet/Basic Syntax Guide (Way better than this webpage): https://www.markdownguide.org/basic-syntax/ "},{"title":"Prerequisites​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#prerequisites","content":"An environment to write markdown documents. Some online editors to play around with: StackEdit.Dillinger  "},{"title":"Main Ideas of Markdown​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#main-ideas-of-markdown","content":"In markdown, you can write text and add formatting to it. You can also add links, images, and other elements to your text. This does not cover everything that markdown can do, but it should be enough to get you started. "},{"title":"Sections​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#sections","content":"You can create sections by using the # symbol. The more # symbols you use, the smaller the section will be. For example, # will create a large section, ## will create a medium section, and ### will create a small section. For example: # Hello World will create a large section with the text Hello World in it. ## Hello World will create a medium section with the text Hello World in it. ### Hello World will create a small section with the text Hello World in it. "},{"title":"Text Formatting​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#text-formatting","content":"You can add formatting to your text by using the following symbols: * or _ for italics** or __ for bold*** or ___ for bold and italics To use them, surround the text you want to format with the symbols. For example, *italics* will create italics, **bold** will create bold, and ***bold and italics*** will create bold and italics. "},{"title":"Links and Images​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#links-and-images","content":"You can add links and images to your text with the following syntax: [Link Text](Link URL) ![Image Text](Image URL)  To do a link, surround the text you want to be the link with [] and then put the link in (). For example, [Google](https://google.com) will create a link to google with the text Google in it. To do an image, do the same but put an ! in front. For example, ![Google Logo](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png) will create an image of the google logo with the text Google Logo in it. "},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#code-blocks","content":"There are two types of code blocks: inline and multiline. Inline code blocks are used to show code in the middle of a sentence. Multiline code blocks are used to show code on their own line. To do an inline code block, surround the code with `. For example, `print('Hello World')` will create an inline code block with the text print('Hello World') in it. To do a multiline code block, surround the code with ```. For example: ``` print('Hello World') ```  will create a multiline code block with the text print('Hello World') in it. On the line where you start the code block, you can add a language to the code block. For example, ```py will create a python code block. This will add syntax highlighting to the code block. Here is an example of a python code block: print('Hello World')  And the markdown for it: ```py print('Hello World') ```  "},{"title":"Lists​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#lists","content":"You can create lists by using the following symbols: - for unordered lists1. for ordered lists To create an unordered list, put - in front of each item in the list. For example: - Item 1 - Item 2 - Item 3  will create an unordered list with the items Item 1, Item 2, and Item 3. To create an ordered list, put {a number}. in front of each item in the list. For example: 1. Item 1 2. Item 2 3. Item 3  will create an ordered list with the items Item 1, Item 2, and Item 3. "},{"title":"Tables​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#tables","content":"You can create tables by using the following syntax: | Column 1 | Column 2 | Column 3 | | -------- | -------- | -------- | | Row 1 | Row 1 | Row 1 | | Row 2 | Row 2 | Row 2 | | Row 3 | Row 3 | Row 3 |  This will create a table with the columns Column 1, Column 2, and Column 3 and the rows Row 1, Row 2, and Row 3. "},{"title":"Horizontal Rule (Line)​","type":1,"pageTitle":"Markdown Tutorial","url":"/main/guides/staff/meta-guides/markdown_tutorial#horizontal-rule-line","content":"You can create a horizontal rule by using the following syntax: ---  This will create a horizontal rule. "},{"title":"Setting up VSCode","type":0,"sectionRef":"#","url":"/main/guides/vscode","content":"Setting up VSCode These guides serve to get your VSCode environment setup","keywords":""},{"title":"Python Debugger","type":0,"sectionRef":"#","url":"/main/guides/vscode/debugger","content":"Python Debugger This guide is a work-in-progress on how to best use the VSCode debugger. If you have installed the Python VSCode extension, then you already have the debugger installed. For a guide on how to use the debugger, see this tutorial on the Microsoft website.","keywords":""},{"title":"CICS 110 Staff Guide","type":0,"sectionRef":"#","url":"/main/guides/staff/staff-guide","content":"","keywords":""},{"title":"Communication and Organization​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#communication-and-organization","content":"If you need to be added to the staff chat, email bburns@umass.edu. Every week, Ben will send out a message detailing all assignments due that week and any unfinished grading to #logisticsMeeting notes will be sent in #logistics as well. We have a Trello board for course organization. This is mostly used for making sure slides and assignments are ready before we need them, status on graded items (grading, needs uploading, uploaded). You do not need to check the Trello, as it's mostly for my (Ben's) use in keeping us organized. However, you should be able it, and it will let you can see, at a glance, the status of everything in the course. "},{"title":"Labs​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#labs","content":"Labs are hosted every Friday. Each UCA and half TA attends 1 lab per week, and each full TA attends 2 labs. Staff assignments can be found on the Labs course information page. The labs themselves are hosted in the Labs directory. Each lab will have its own instructions on what is expected of students. Typically students will be working in groups. Your job as staff is to be actively trying to help students. Some students will really want help, but are too embarrassed or intimidated to ask. That being said, some students will not want help. Trying to force help on a student who doesn't want it can make it more difficult for them to work, and potentially make them less likely to ask for help in the future when they do need help. Even if they're doing something incorrectly just let them figure it out, maybe they ask for help at a later point. Learn students' names! This is the place they get to know you and really get familiar with the course staff. "},{"title":"Office Hours​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#office-hours","content":"Your office hours should either be in-person or over zoom. On the office hours page, please include your NameDay of week and timeRoom or zoom link "},{"title":"Logging​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#logging","content":"In the staff chat you'll find a channel named #office-hours. At some point in hour or two after you office hour, post a log to this channel that estimates how many students attended your office hour and what people asked about. An example log: 12/4, 11am - 12pm. 4 students showed up to ask about Project 4. Student A and Student B did not know how to approach todos 3 and 6. Student C was having trouble getting the enumerate in the 5th todo to add items to the set correctly. An equally valid log is 12/4, 11am - 12pm. No students attended my office hour. This is 100% fine, and will probably be the case in the first couple weeks. It's better to log that no one showed up than it is to not log, don't feel pressured to say you had students when you didn't. This is for the instructors so they know if people are coming to office hours and what students are confused about. "},{"title":"Canceling Office Hours​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#canceling-office-hours","content":"If you have to cancel your office hour, you should immediately post a note to Piazza saying your office hour is canceled. Then post to the #office-hours channel. If you miss your office hour, you should post about it in #office-hours as well, and make a Piazza post acknowledging that you missed your office hour. It's fine if you miss an office hour, just make sure you're honest and up front about it, because otherwise it might look like you're skipping. "},{"title":"Piazza​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#piazza","content":"Each UCA and TA has a day on which you are expected to monitor Piazza. You aren't expected to be monitoring at all times, you're just supposed to be paying extra attention that one day. For me, this means turning on Push Notifications on the mobile app, which I can definitely recommend, but do what ever works best for you. "},{"title":"Responsibilities​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#responsibilities","content":"You should spend up to an hour answering questions that day. If there aren't any new questions posted on your day, go back through the Unresolved section.  This will show all posts that have no student or instructor responses yet, and any posts with unresolved follow ups. Try to sift through these. Most are usually already answered by another post, outdated (e.g. asking about an assignment whose deadline has now passed), are resolved but marked unresolved, or a logistical question UCAs and TAs don't have an answer to. "},{"title":"Ask for help!​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#ask-for-help","content":"If there is a question that you can't answer, but an Instructor can, @ all instructors or a specific instructor in #general, and include a link to the post. The best example of posts in this category are things like &quot;what's on the next exam?&quot; or &quot;when's project/challenge X being posted?&quot; If questions are coming in faster than the assigned staff can handle, like before a major deadline or exam, don't be afraid to @ all UCAs asking if anyone is free to help out. "},{"title":"Grading​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#grading","content":"Grading is all done via Gradescope. Most, if not all assignments in this course are autograded. For a guide on how to manual grade (at the high level, how to design a rubric, and how to use Gradescope itself), see this guide on the UCA website. "},{"title":"Uploading to Moonami​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#uploading-to-moonami","content":""},{"title":"zyBooks​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#zybooks","content":"note Until future notice, this course has no grades in zyBooks, so this section will be expanded as needed "},{"title":"Gradescope​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#gradescope","content":""},{"title":"Exams​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#exams","content":"A detailed break down of exam structure can be found in the Guide to Exams. note In Spring 2023, CICS 110 plans to have no exams. However, this guide will remain for future semesters. "},{"title":"Before the Exam​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#before-the-exam","content":"A Google sheet needs to be created for check out. There should be subsheet for each section with all student names and emails imported. The sheet should look something like: First Name\tLast Name\tStudent Email\tStaff initialJohn\tDoe\tjdoe@umass.edu J. Random\tHacker\tjrhacker@umass.edu\tBB ...\t...\t...\t... The night before the exam, at least two UCAs should proof read the questions and report any typos or questions they find confusing. A guide of how to do this is here A staff member should get to the lab 15-20 minutes early to straighten out desks so that no two students are sitting too close. If possible, students should not sit in the back row. If it is necessary, pull the desks forward so that staff can freely walk behind the back row. "},{"title":"During the Exam​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#during-the-exam","content":"During the exam, there are three main jobs we have Answering student questionsChecking students out once they finishMonitoring for academic honesty violations At least one staff member should be at the back watching students' screens, monitoring for academic honesty violations. Another staff member should be at the front ready to check out students as they finish. Any other staff are free to walk around asking questions, or stand at the back of the room. "},{"title":"Student check out​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#student-check-out","content":"The staff member in charge of check out should have the check-out sheet open, as well as the exam responses page open. You can find the latter by going to Moodle, then the exam page, then clicking the cog on the right, and selecting Responses. The process for checking out a student is as follows Ask for the student's uCardLook the student up in Responses and verify the student has submittedFind the student in the check out sheet, and put your initials next to their email. Return their uCard and tell them they're free to leave Step 1 is so we know they're who they say they are. Step 2 is to make sure they submitted, otherwise they can leave the exam, reopen their laptop, and keep working. Step 3 is to make sure the student actually attended the lab to take the exam. "},{"title":"Proof Reading and Reporting Typos​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#proof-reading-and-reporting-typos","content":"To proof read the exam, go to the Exam on Moodle, click the cog on the right, and select Edit quiz. On each question you will a field that says (See questions), which you should open (it's way easier if you open it in a new tab). Then click the Edit dropdown, and select Preview (again, easier in a new tab). If you find a typo in a question, or find the wording confusing or ambiguous, @ the instructor who last edited the question, including the question number, the name of the version, and the typo you found/what you found confusing. Unless specified otherwise, only Instructors should be editing exam questions directly. "},{"title":"Responsibilities​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#responsibilities-1","content":""},{"title":"UCAs​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#ucas","content":"All UCAs are going to have 3.5 out of their 5 hours &quot;fixed&quot;: this is time reserved for labs, piazza, office hours, and meetings. The other hour and a half are sort of &quot;up to the UCA&quot; as to what we're expecting from you. Filling everyone's hours with tasks doesn't give us much room for flexibility, nor is it particularly engaging. It's not a good model for adapting to the challenges of various weeks. This is also a responsibility for you as a UCA to try new things. Figure out what the course needs, what students need, or even what you struggle with as a UCA and want to improve on. A guideline for UCA responsibilities is: 1 hour of attending lab1 hour of hosting an office hour1 hour of monitoring Piazza, spread throughout a single day each week30 minutes of attending a weekly all-UCA meeting1 hour 30 minutes of flexible responsibilities, which can include attending a lectureproofreading slides, homework, or quizzesanswering Piazza on busy days you aren't assigned tohelping fix autogradersreviewing similarity results for homeworks submitted to Gradescope If you're every feeling underutilized or unhappy about your responsibilities, ping Ben and I'll help you rework your responsibilities. "},{"title":"TAs​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/main/guides/staff/staff-guide#tas","content":"The TA responsibilities are a little less fun. For half TAs, you have 5 hours of fixed responsibilities between labs, office hours, piazza, and meetings. Full TAs have the same thing, but with 2 hours of labs, giving 6 hours of fixed responsibilities. In addition, each TA will be required to complete the weekly homework and weekly lab. This is not to give you busy work or to test your abilities, it's so that we have at least four people each week reading through the documentation looking for confusing instructions or explanations, finding problems with the autograder, and who are very familiar with what we are asking from our students. The hope is that each of these takes at most an hour. You should shoot to have a submission to the autograder by 5pm EST the day before the assignment is due. A guideline for TA responsibilities is: 1 or 2 hours of attending lab2 hours of hosting an office hour1 hour of monitoring Piazza, spread throughout a single day each week1 hour of attending a weekly meetingUp to 2 hours of proofreading labs and homeworks "},{"title":"Helpful VSCode Extensions","type":0,"sectionRef":"#","url":"/main/guides/vscode/extensions","content":"","keywords":""},{"title":"Themes​","type":1,"pageTitle":"Helpful VSCode Extensions","url":"/main/guides/vscode/extensions#themes","content":"Probably the most popular type of VSCode extension are themes, which let you change the visual appearance of your VSCode. There are a few themes already preinstalled. To switch your theme to a preinstalled theme, open the VSCode Command Pallet: press Ctrl+Shift+P on Windows, or ⌘+Shift+P on MacOS. Then enter &quot;Preferences: Color Theme&quot;. You can use the arrow keys to preview what each theme looks like, and select whichever you prefer. You can find a visual explorer of VSCode themes here. Below are themes that members of the CICS 110 staff use: Built-in light/dark (Kobi) Github Dark Colorblind (Beta), from the &quot;Github Theme&quot; extension (Ben)All of the &quot;Ayu&quot; themes (Ben)Dark+ Python (Manan) "},{"title":"Material Icon Theme​","type":1,"pageTitle":"Helpful VSCode Extensions","url":"/main/guides/vscode/extensions#material-icon-theme","content":"A theme I highly recommend installing is the &quot;Material Icon Theme&quot;. It's strictly better than the default, especially for differentiating between different types of text files. Just make sure you apply the theme after you install at. "},{"title":"Quality of Life Extensions​","type":1,"pageTitle":"Helpful VSCode Extensions","url":"/main/guides/vscode/extensions#quality-of-life-extensions","content":"&quot;Better Comments&quot; highlights TODOs in orange, making it easier to see what you still need to do&quot;Todo Tree&quot; also highlights TODOs, and gives you a sidebar icon that you can click to view all your TODOs in one place (you just have to make sure to write a comment like: # TODO : whatever you want to do)If you get sick of reaching for your arrow keys to move your cursor out of parenthesis or brackets, &quot;TabOut&quot; lets you press your Tab key to move the cursor past the next close parenthesis/bracket/brace. "},{"title":"Changing Linter Colors","type":0,"sectionRef":"#","url":"/main/guides/vscode/linter-colors","content":"Changing Linter Colors Open the VSCode Command Pallet: press Ctrl+Shift+P on Windows, or ⌘+Shift+P on MacOS.Enter Preferences: Open User Settings (JSON)Scroll to the end of the file, and make a new line before the last }Insert the following snippet on the newline: &quot;workbench.colorCustomizations&quot;: { &quot;editorWarning.foreground&quot;: &quot;#ffff00&quot;, // changes warning squiggle color &quot;editorError.foreground&quot;: &quot;#ff0000&quot;, // changes error squiggle color &quot;editorInfo.foreground&quot;: &quot;#3794ff&quot; // changes information squiggle color } Update the colors you would like to change info The # followed by 6 characters is the &quot;hex code&quot; of a particular color. If you want to change the underline to a particular color, search that color's hex code, and replace the appropriate hex code. For example, to change the warning's color, I googled &quot;yellow hex code&quot;, and put it in the warning line after the colon but before the comment. Delete the lines of any colors you do not wish to change For example, I just want change my warning color to yellow, and don't want to change the info and error line colors. Therefore, the last 7 lines of my settings.json looks like settings.json &quot;git.confirmSync&quot;: false, &quot;diffEditor.ignoreTrimWhitespace&quot;: false, &quot;workbench.colorCustomizations&quot;: { &quot;editorWarning.foreground&quot;: &quot;#ffff00&quot;, } } ","keywords":""},{"title":"Installation and Setup","type":0,"sectionRef":"#","url":"/main/guides/vscode/installation","content":"","keywords":""},{"title":"Installing VSCode​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#installing-vscode","content":"To install VSCode, visit the VSCode website. The webpage should detect your operating system, and the button will be the version of VSCode for your OS. Click download, run the installer, and install VSCode. "},{"title":"VSCode Interface​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#vscode-interface","content":"Once you install VSCode, you should open the application. The interface presents you with a lot, but there's a lot of stuff we can ignore for now. There is an in-depth tutorial on the VSCode interface on the VSCode website, but it is a little outdated and doesn't focus on the features we will be using. Once you launch VSCode, you'll see a window similar to the following image:  On the left edge of the image, you'll see the sidebar icons. Reading down from the top, we have the File explorerSearchVersion control (ignore for now)DebuggerExtensions The icons after the &quot;Tetris block&quot; Extensions icon are all icons for extensions I have installed. The ones useful for this course will be detailed in the extensions guide, but we can ignore these for now. "},{"title":"Opening a folder​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#opening-a-folder","content":"To use VSCode to edit code, we need to open files. When writing code for a homework or project, the best practice is often to have all your files for that project in a single folder on your computer. That way, all your files are in one place for easy access, and we can just open the folder in VSCode to edit the code, rather than opening each file individually. To open a folder, select the file explorer icon in the top left. Then click &quot;Open Folder&quot;.  Alternatively, you can press ⌘+O on Mac (that is, press the command key and the &quot;O&quot; key at the same time, O for open), or Ctrl+K, Ctrl+O on Windows (just pressing Ctrl+O only lets you open single files, not folders). This will open your computer's file manager. In this window, you should navigate to either a.) an existing folder that either contains the code your want to edit, or is where you want to put new code, or b.) navigate to where you want to create a new folder. For example, let's say I want to make a new project. I want to open a folder called demo. On my Mac, I would press ⌘+O, then navigate through my files to umass &gt; cics110 &gt; code &gt; demo, and select open in the bottom right.  "},{"title":"Creating a new Python file​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#creating-a-new-python-file","content":"Now that we have an empty folder open, we want to create a Python file to write code in. In the top left, there is a new file button, highlighted below (the first icon to the right of Demo):  If we click the new file button, VSCode will create a file, and let us type in a file name. It is important that your file name ends in .py, so your computer knows it's a python file. For example, I name my file example.py:  "},{"title":"Installing Python Extensions​","type":1,"pageTitle":"Installation and Setup","url":"/main/guides/vscode/installation#installing-python-extensions","content":"We have an empty Python file, and are able to start coding. However, VSCode has some extensions that will make our job easier. When you open a Python file for the first time, you should get a pop up in the bottom right informing you of Python extensions in the VSCode marketplace, which you should click. If not, click the Extension icon (Tetris blocks) on the left sidebar. Then enter &quot;Python&quot; in the search bar. The first result should be the Python extension, which you should install:  This extension gives you everything you need to start coding. It includes features like Syntax highlighting - colors your source code to make it easier to read what is a variable, what is a function, etc.A Python linter - a program that detects some errors, like typos, undeclared variables, or incorrect indentation, without you having to run the programA Python debugger - a powerful program that lets you step run your Python program line-by-line, and view the values of all your variables at any point in the execution.  This is a minimal install just to get you everything you need to succeed in the course. However, there are some other (optional) extensions you may find helpful, like different color themes or TODO highlighting, which we detail in the next guide. "},{"title":"Labs","type":0,"sectionRef":"#","url":"/main/information/labs","content":"Labs Section\tDate &amp; Time\tLocation\tStaff01LL-LAB(62220)\tFr 11:15AM - 12:05PM\tGoessmann Laboratory Addition, room 152\tYuefeng Peng (TA) Ben Burns (UCA) Wenhao Yang (UCA) 02LL-LAB(66937)\tFr 10:10AM - 11:00AM\tEngineering Laboratory, room 323\tErfan Entezami (TA) Rachana Reddy (UCA) Sreya Nimmagadda (UCA) 03LL-LAB(66939)\tFr 11:15AM - 12:05PM\tLederle Graduate Research Tower, room 123\tManan Talwar Cynthia Rajeshkanna (UCA) Tanush Savadi (UCA) 04LL-LAB(66941)\tFr 1:25PM - 2:15PM\tHasbrouck Laboratory Addition, room 126\tWill Lee (TA) Charvi Attri (UCA) Emerson Lewiecki (UCA) 05LL-LAB(66943)\tFr 2:30PM - 3:20PM\tGoessmann Laboratory Addition, room 151\tYuefeng Peng (TA) Dev Mehta (UCA) Kelly Deng (UCA) 06LL-LAB(66945)\tFr 2:30PM - 3:20PM\tMorrill Science Center 1, room N326\tErfan Entezami (TA) Lana Vu (UCA) Sonali Palit (UCA)","keywords":""},{"title":"Course Information","type":0,"sectionRef":"#","url":"/main/information","content":"Course Information Welcome to the course information section of the course website! Here, you will find all the information you need to get started on your journey to becoming a proficient programmer and computational thinker. Whether you are a beginner or have prior experience, this section is designed to provide you with the resources and support you need to succeed. In this section, you will find a detailed syllabus outlining the course objectives and expectations, as well as a schedule of when each topic will be covered. You will also have access to information about the staff, including their qualifications and areas of expertise. Additionally, you will find information about the labs, including lab hours and available resources. Finally, office hours and Piazza will provide you with opportunities to connect with your instructors and classmates and get help with any questions or issues you may encounter along the way. We are confident that with these resources at your disposal, you will have everything you need to thrive in your computational thinking and computer programming course. Our goal is to provide you with a supportive and engaging learning environment where you can develop your skills, explore your passions, and achieve your goals. Whether you are looking to build a foundation in programming or take your skills to the next level, we are here to help you succeed.","keywords":""},{"title":"Piazza","type":0,"sectionRef":"#","url":"/main/information/piazza","content":"Piazza Day\tStaff\tNotesMonday\tManan Talwar Sonali Palit Tuesday\tSreya Nimmagadda Wenhao Yang Wednesday\tEmerson Lewiecki Dev Mehta Cynthia Rajeshkanna\tHomeworks due Thursday\tErfan Entezami Lana Vu Yuefeng Peng\tQuizzes due Friday\tWill Lee Tanush Savadi\tLabs due Saturday\tBen Burns Charvi Attri Sunday\tBen Burns Rachana Reddy\t","keywords":""},{"title":"Office Hours","type":0,"sectionRef":"#","url":"/main/information/oh","content":"Office Hours These are all office hour times for the course. All office hours will start the second week of classes (2/13). There are no office hours before 2/13. Day\tTime\tCourse Staff\tName\tLocationMonday\t9AM-10AM\tUCA\tLana Vu\tZoom: link Monday\t12PM-1PM\tUCA\tSonali Palit\tZoom: link Monday\t1:30PM-3:30PM\tTA\tManan Talwar\tZoom: link Monday\t4PM-5PM\tUCA\tDev Mehta\tIn-person: LGRC T225 Monday\t5:30PM-6:30PM\tTA\tWill Lee\tZoom: link Tuesday\t9AM-10 AM\tTA\tErfan Entezami\tZoom: link Tuesday\t2:30PM-3:30PM\tTA\tYuefeng Peng\tIn-person: LGRC T225 Tuesday\t2:30PM-3:30PM\tInstructor\tJakob (Kobi) Falus\tIn-person: Morrill 3 room 404 Tuesday\t4PM-5PM\tInstructor\tJared Yeager\tIn-person: LGRC T223 Tuesday\t5PM-6PM\tTA\tWill Lee\tZoom: link Tuesday\t5:30PM-6:30PM\tUCA\tEmerson Lewiecki\tZoom: link Tuesday\t7PM-9PM\tInstructor\tCole Adam Reilly\tZoom: link Wednesday\t11AM-12PM\tInstructor\tEduardo Calle Ortiz\tZoom: link Wednesday\t12PM-1PM\tUCA\tTanush Savadi\tZoom: link Wednesday\t1PM-2PM\tUCA\tWenhao Yang\tIn-person: LGRC T223 Wednesday\t3PM-4PM\tUCA\tCynthia Rajeshkanna\tZoom: link Wednesday\t4PM-5PM\tUCA\tKelly Deng\tZoom: link Thursday\t11:30AM-12:30AM\tTA\tErfan Entezami\tZoom: link Thursday\t1PM-2PM\tUCA\tBen Burns\tIn-person: LGRC T223 Thursday\t2:30PM-3:30PM\tTA\tYuefeng Peng\tIn-person: LGRC T225 Thursday\t2:30PM-3:30PM\tInstructor\tJakob (Kobi) Falus\tIn-person: Morrill 3 room 404 Thursday\t4PM-5PM\tInstructor\tJared Yeager\tIn-person: LGRC T223 Thursday\t4PM-5PM\tUCA\tCharvi Attri\tZoom: link Thursday\t6PM-7PM\tUCA\tSreya Nimmagadda\tZoom: link Friday\t9AM-11AM\tInstructor\tAllison Poh\tZoom: link Friday\t3PM-4PM\tUCA\tRachana Reddy\tZoom: link","keywords":""},{"title":"Schedule","type":0,"sectionRef":"#","url":"/main/information/schedule","content":"","keywords":""},{"title":"Lecture Schedule​","type":1,"pageTitle":"Schedule","url":"/main/information/schedule#lecture-schedule","content":""},{"title":"Monday/Wednesday Sections​","type":1,"pageTitle":"Schedule","url":"/main/information/schedule#mondaywednesday-sections","content":"This lecture schedule applies to the following sections: CICS 110-01 62219), MoWe 4:00PM - 5:15PM, Lederle Grad Res Ctr rm A301CICS 110-06 66944), MoWe 2:30PM - 3:45PM, Morrill Sci. Ctr.1 rm N326  Mo 2/06 - L01 Course IntroductionWd 2/08 - L02 Arithmetic Expressions &amp; EvaluationMo 2/13 - L03 Variables and AssignmentWd 2/15 - L04 Function BasicsMo 2/20 - No Class, Presidents' DayWd 2/22 - L05 Booleans and AssertMo 2/27 - L06 Lists, Tuples, StringsWd 3/01 - L07 Dictionaries, SetsMo 3/06 - L08 Branching IntroductionWd 3/08 - L09 Branching and DebuggingMo 3/13 - No Class, Spring RecessWd 3/15 - No Class, Spring RecessMo 3/20 - L10 Exception HandlingWd 3/22 - L11 While LoopsMo 3/27 - L12 For LoopsWd 3/29 - L13 List ComprehensionsMo 4/03 - L14 Creating ModulesWd 4/05 - L15 FilesMo 4/10 - L16 CSV FilesWd 4/12 - L17 RecursionMo 4/17 - No Class, Patriot's DayWd 4/19 - L18 Classes and OOPMo 4/24 - L19 MethodsWd 4/26 - L20 Installing LibrariesMo 5/01 - L21 URLLib and APIsWd 5/03 - L22 Lambda, Map, FilterMo 5/08 - L23 Event LoopsWd 5/10 - L24 Capstone Project WorkMo 5/15 - L25 Capstone Project WorkWd 5/17 - L26 Capstone Project Share This schedule is subject to change during the semester "},{"title":"Tuesday/Thursday Sections​","type":1,"pageTitle":"Schedule","url":"/main/information/schedule#tuesdaythursday-sections","content":"This lecture schedule applies to the following sections: CICS 110-02 66936), TuTh 11:30AM - 12:45PM, Tobin Hall room 204CICS 110-03 66938), TuTh 1:00PM - 2:15PM, Morrill Sci. Ctr. III) rm 203CICS 110-04 66940), TuTh 2:30PM - 3:45PM, Morrill Sci. Ctr.1 rm N326CICS 110-05 66942), TuTh 4:00PM - 5:15PM, Goessmann Lab Addtn rm 151  Tu 2/07 - L01 Course IntroductionTh 2/09 - L02 Arithmetic Expressions &amp; EvaluationTu 2/14 - L03 Variables and AssignmentTh 2/16 - L04 Function BasicsTu 2/21 - L05 Booleans and AssertTh 2/23 - L06 Lists, Tuples, StringsTu 2/28 - L07 Dictionaries, SetsTh 3/02 - L08 Branching IntroductionTu 3/07 - L09 Branching and DebuggingTh 3/09 - Branching PracticeTu 3/14 - No Class, Spring RecessTh 3/16 - No Class, Spring RecessTu 3/21 - L10 Exceptions HandlingTh 3/23 - L11 While LoopsTu 3/28 - L12 For LoopsTh 3/30 - L13 List ComprehensionTu 4/04 - L14 Creating ModulesTh 4/06 - L15 FilesTu 4/11 - L16 CSV FilesTh 4/13 - L17 RecursionTu 4/18 - No Class, Patriot’s DayTh 4/20 - L18 Classes and OOPTu 4/25 - L19 MethodsTh 4/27 - L20 Installing LibrariesTu 5/02 - L21 URLLib and APIsTh 5/04 - L22 Lambda, Map, FilterTu 5/09 - L23 Event LoopsTh 5/11 - L24/L25 Capstone Project WorkTu 5/15 - L25/L26 Capstone Project Share This schedule is subject to change during the semester "},{"title":"Lab Schedule​","type":1,"pageTitle":"Schedule","url":"/main/information/schedule#lab-schedule","content":"Fr 2/10 - B01 Python SetupFr 2/17 - B02 String FormattingFr 2/24 - B03 AssertFr 3/03 - B04 CollectionsFr 3/10 - B05 Debugging Control FlowFr 3/24 - B06 WhileFr 3/31 - B07 ForFr 4/07 - B08 Modules &amp; FilesFr 4/14 - B09 Towers of HanoiFr 4/21 - B10 Designing ObjectsFr 4/28 - B11 Object BehaviorFr 5/05 - B12 Fetch &amp; FilterFr 5/12 - B13 Capstone Work "},{"title":"Staff","type":0,"sectionRef":"#","url":"/main/information/staff","content":"","keywords":""},{"title":"Instructors​","type":1,"pageTitle":"Staff","url":"/main/information/staff#instructors","content":"Tim Richards Tim Richards is a senior teaching faculty member at the Manning College of Information and Computer Sciences, where he teaches a variety of courses and dabbles in research. He is the course administrator for this course and is dedicated to teaching computer science and enjoys sharing his passion with students. Allison Poh Hello! I’m Allison and I’m a second year PhD student. I greatly enjoy teaching computer science and I’m very happy to be part of the 110 staff 🙂 My research interests include HCI, gamification, and learning technologies. I’m a member of the Advanced Learning Technologies Lab where I work on a system that promotes math learning through game design and embodied learning. In my free time, I enjoy running and chasing my cats around the house. Cole Adam Reilly I'm Cole. I've been with the college for about 8 years now starting as an undergrad in CS (Graphics), Math (Abstract Algebra), and Classics (Greek Archaeology). In my free time I like to woodwork. Eduardo Calle Ortiz Hi, I am Eduardo, a doctoral student in computer Science interested in AI. I am particularly interested in how AI will reframe education and any stuff related to AI and education. I am also the father of a two years old boy. I enjoy spending time with my wife and son when I am not studying. Jared Yeager My name is Jared. I was a Math and CS dual degree at UMass, now a 10th semester grad student (.....when did that happen!?) researching formal methods and theorem proving. In my free time I like to play video games. Kobi Falus Hi, I'm Kobi. I'm a Computer Science Master's student, that got my bachelor's here in Spring '22. This is my second time teaching this course, and I'm really excited to meet everyone. In my free time I like browsing Reddit/Youtube, playing board games, and talking with people. Feel free to come up and have a conversation with me! "},{"title":"TAs​","type":1,"pageTitle":"Staff","url":"/main/information/staff#tas","content":"Erfan Entezami Hi! My name is Erfan and I’m a Ph.D. student in CS at UMass. My research focuses on the intersection of machine learning and Human-computer interaction. The goal of my research is to design intelligent systems/algorithms that are able to deal with non-stationary situations. Outside of work, I enjoy reading, playing guitar, photography and hiking. Manan Talwar Hey! I am Manan. I am a graduate student in Computer Science. I recently completed my undergrad at UMass in CS and Math. My research focuses on the applications of machine learning to solve real-world problems. I am also interested in computer science education. I love binge-watching, playing the guitar, traveling, hiking and baking. Will Lee My name is Will Lee - third year Computer Science graduate student. Dad of two cats - Rebecca and Rachel Yuefeng Peng Hello! My name is Yuefeng. I am a Ph.D. student in Computer Science. My research focuses on security and privacy in machine learning. I like reading, hiking, and playing video games in my free time. "},{"title":"UCAs​","type":1,"pageTitle":"Staff","url":"/main/information/staff#ucas","content":"Ben Burns Hello! My name is Ben Burns. I am a junior Math and CS double major. This is my seventh semester as a UCA, and third with CICS 110. My research focuses on computational algorithms and topology. I love music, strategy games, and food :D Charvi Attri Hello! My name is Charvi and I am an undergrad senior studying Computer Science. I love to travel, go hiking and solve sudoku puzzles in my free time. Cynthia Rajeshkanna Hello! My name is Cynthia Rajeshkanna. I’m a freshman Computer Science major. As an aspiring entrepreneur, I like to spend my time working on ventures and exploring the intersection of entrepreneurship and technology. I also love trying new foods and learning about different cultures. Dev Mehta Hey everyone! I’m Dev Mehta and I’m an undergraduate freshman studying Computer Science and pursuing a minor in Business. In my free time I love singing, swimming and playing pool. Emerson Lewiecki Hi Everyone! My name is Emerson (I often go by Emmet as well) and I'm an undergraduate Junior studying Computer Science. I also have an interest in Biology and am pursuing a Bio minor. In my free time I like to cook, work out, and play video games. Kelly Deng Hello my name is Kelly Deng and I’m an undergrad sophomore CS major and philosophy minor. I love reading and camping in my free time. Lana Vu Hi! My name is Lana Vu and I'm a first semester sophomore CS major. I love to crochet, make jewelry, and dancing in my free time. Rachana Reddy Hi! I’m Rachana Reddy and I’m currently a undegraduate junior Computer Science Major. I love listening to music, playing piano, and doing anything outdoors like taking walks, biking, or hiking! Sonali Palit Hi! My name is Sonali Palit. I'm a sophmore and I'm majoring in Computer Science. I was a UCA for CS121 last semester. I enjoy traveling and in my free time I like to sing and listen to music. Sreya Nimmagadda Hello! My name is Sreya Nimmagadda and I am a junior Computer Science major. This is my second semester as a UCA for CICS 110. In my free time I love to paint, dance, and enjoy new foods! Tanush Savadi Hi, my name is Tanush, my friends call me Thanos (you can call me either). I am an undergraduate freshman Computer science major. I love playing video games, watching TV shows, playing and watching sports. I'm a big foodie and I am very interested in entrepreneurship! Wenhao Yang Hi! I'm Wenhao Yang. I'm a freshman majoring in Computer Science and Math. I enjoy reading, foosball, tennis, and games of all kinds. "},{"title":"Labs","type":0,"sectionRef":"#","url":"/main/labs","content":"Labs Welcome to the lab material section of the course website! Here, you will find everything you need to succeed in the hands-on component of this course. Our labs are designed to provide you with a deeper understanding of the course topics and give you the opportunity to apply your newly acquired skills to real-world problems. The labs meet weekly and cover course topics in additional detail, providing you with a hands-on and engaging learning experience. Each lab is accompanied by a coding exercise that will challenge you to use your newfound skills to solve problems. You will work in small groups, allowing you to collaborate, learn from one another, and deepen your understanding of the course material. Our goal is to provide you with a comprehensive and engaging learning experience that goes beyond the traditional lecture-based format. The lab component of our course is an essential part of that experience, giving you the opportunity to apply your newly acquired skills to real-world problems and work alongside your classmates to deepen your understanding of the course material. Whether you are a beginner or have prior experience, we are confident that you will find our lab material to be a valuable tool in your programming journey. Good luck and happy coding!","keywords":""},{"title":"Lab 03: Assert","type":0,"sectionRef":"#","url":"/main/labs/assert","content":"Lab 03: Assert Coming soon...","keywords":""},{"title":"Syllabus","type":0,"sectionRef":"#","url":"/main/information/syllabus","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#description","content":"An introduction to computer programming and problem solving using computers. This course teaches you how real-world problems can be solved computationally using programming constructs and data abstractions of a modern programming language. Concepts and techniques covered include variables, expressions, data types, objects, branching, iteration, functions, classes, and methods. We will also cover how to translate problems into a sequence of instructions, investigate the fundamental operation of a computational system and trace program execution and memory, and learn how to test and debug programs. No previous programming experience required. "},{"title":"Prerequisites​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#prerequisites","content":"R1 (or a score of 20 or higher on the math placement test Part A), or one of the following courses: MATH 101&amp;102 or MATH 104 or MATH 127 or MATH 128 or MATH 131 or MATH 132. "},{"title":"Statement of Inclusivity​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#statement-of-inclusivity","content":"The staff for this course support the UMass commitment to diversity, and welcome individuals regardless of age, background, citizenship, disability, sex, education, ethnicity, family status, gender, gender identity, geographical origin, language, military experience, political views, race, religion, sexual orientation, socioeconomic status, and work experience. In this course, each voice in the classroom has something of value to contribute. Please take care to respect the different experiences, beliefs and values expressed by students and staff involved in this course. "},{"title":"Course Goals​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#course-goals","content":"The objective of this course is to introduce the fundamentals of computing and programming using a general-purpose programming language from a modern perspective. This includes understanding the operation of a machine from a programming language perspective and what it means to execute a whole program as well as its individual parts, how to solve problems using constructs that a programming language provides such as variables, data types, objects, branching, iteration, functions, and classes, and how to write programs that receive data from various sources, process that data, and produce output in various forms. "},{"title":"Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#learning-outcomes","content":"At the completion of this course you will be able to: Read and write programs to solve non-trivial programs using the Python programming language.Describe fundamental units of computation and program structure.Translate real-world problems into computational solutions.Solve problems using a general-purpose programming language and the tools it provides such as variables, data types, objects, branching, iteration, functions/methods, and classes.Design and implement whole programs and functions to solve computational problems using top-down and bottom-up techniques.Describe application programming interfaces (API) and use APIs available from existing objects and libraries to solve problems.Translate data from and into various formats that are in computer memory, a graphical interface, a file, from a remote API on the web, or other data resources.Use console-based or graphical interfaces to learn about input/output to move data into and out of a program.Use modules and classes to organize data and functions.Explain the notion of a machine and how it relates to the execution of a general-purpose programming language.Explain how programs and their data are represented in a computer and build mental models and use diagrams of program and function execution and data stored in memory.Use basic debugging techniques such as “print debugging” and assert statements to determine the cause of logical programming errors and show the correctness of a program and its implementation.Describe programs using proper documentation techniques to communicate implementation details at various levels of granularity. "},{"title":"Course Format​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#course-format","content":""},{"title":"Lecture​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#lecture","content":"Lecture will begin with a brief review of what was covered in the previous lecture followed by a presentation of new material. This presentation may include slides as well as code demonstrations that you will have access to as part of the course material. This will often be followed by an exercise that will help solidify your understanding of the material. "},{"title":"Labs​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#labs","content":"Lab will have an associated assignment that you are required to complete. You are expected to complete these activities during the lab working with others taking the course. Course staff will be available to answer questions and help guide you through the assignment. "},{"title":"How to Succeed​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#how-to-succeed","content":"Your success in this class is important to us. We all learn differently and bring different strengths and needs to the class. If there are aspects of the course that prevent you from learning or make you feel excluded, please let us know as soon as possible. Together we’ll develop strategies to meet both your needs and the requirements of the course. There are also a range of resources on campus, including: Academic CalendarLearning Resource CenterCenter for Counseling and Psychological Health (CCPH)English as a Second Language (ESL) Program "},{"title":"Course Material​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#course-material","content":""},{"title":"Textbook​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#textbook","content":"The following textbook is required: Programming in Python 3, an interactive textbook from zyBooks designed specifically for this course. The information you need to subscribe to this book can be found on the course LMS (e.g., Moodle). Here are some additional textbook recommendations freely available online. You may consider looking at these as supplemental material: Automate the Boring Stuff with Python, Al Sweigert, https://automatetheboringstuff.comA Byte of Python, https://www.gitbook.com/book/swaroopch/byte-of-python/detailsDive into Python, Mark Pilgrim, http://getpython3.com/diveintopython3Learn python the hard way, Zed Shaw, http://learnpythonthehardway.org/bookPython Practice Book, Anad Chitpothu, http://anandology.com/python-practice-book "},{"title":"Laptop Computer​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#laptop-computer","content":"It is highly recommended that you have a laptop computer. We will be writing code both in and out of class, so a portable computer capable of installing software (not a Chromebook) is valuable for this class. Most in-class programming activities will be group-based, so if you do not own a laptop, you can easily work with another student in class. "},{"title":"Software Platforms and Tools​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#software-platforms-and-tools","content":""},{"title":"Moodle​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#moodle","content":"We will use the Moodle Learning Management System (LMS) as the primary hub for course content. You will be able to access readings, lecture material, assignments, and any other important material pertaining to this course. We may use Moodle to submit some assignments. You will be able to access your latest grades and comments for assignments using the Moodle Gradebook. "},{"title":"zyBooks​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#zybooks","content":"The textbook for this course is available from zyBooks. Not only is zyBooks the book for the course, but it also includes visual and interactive content that increases your understanding of the material. It provides participatory content, challenge exercises, and a Python programming environment built right into the book! "},{"title":"Gradescope​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#gradescope","content":"We use Gradescope for automatically grading programming projects. Gradescope allows us to provide fast and accurate feedback on your work. Before the deadline you can submit as many times as you need, so submit early and often to ensure you have something in before the deadline. Become familiar with Gradescope and verify that your submission has been properly uploaded before the deadline. Use OneDrive, DropBox, Google Drive, or some other backup software to ensure that your work is not lost in the event of a computer failure. The Gradescope autograder will provide you with some limited feedback on your submissions: does it compile, does it pass automated tests, what your score is, etc. The autograder does not provide detailed feedback. We will help you get familiar with Gradescope as the course progresses. "},{"title":"VSCode​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#vscode","content":"We use the VSCode Development Environment for developing, debugging, and testing programming projects. This is free software and you will be given installation instructions and training in its use. There are many excellent Python integrated development environments (IDE), editors, and tools that exist, however, we recommend VSCode as it is easy to learn, and we will be using it in class for code demonstrations. You can read more about VSCode here and we encourage you to try out the “Getting Started with Python in VSCode” as preparation for the class. "},{"title":"Python​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#python","content":"We will be using the Python programming language in this course. It is an excellent language to learn about programming and computational thinking. It is also used extensively in the software engineering, data science domain, and many additional areas of computing. You will be required to download and install Python on your own computer. You will be using Python and VSCode to complete many programming tasks as part of your studies in this class. The current Python version used in this course is 3.10.6. "},{"title":"Echo360​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#echo360","content":"All lectures will be recorded and posted to the Echo360 platform. Echo360 is a plug-in tool that integrates personal and classroom video capture, student engagement tools, and analytic tools to maximize student participation and engagement for both campus-based and online courses. A link to Echo360 will be available in the course LMS. "},{"title":"Communication​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#communication","content":""},{"title":"Email​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#email","content":"Email should not be used. Please post privately to Instructors on Piazza. In the unlikely event that you are unable to post to Piazza, please send an email to the instructor teaching your course section. "},{"title":"Piazza​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#piazza","content":"We will be using Piazza for all other communication. This online discussion forum should be your first choice for asking questions. You should check the discussion forum before asking your question to see if the same question has already been posted. We will not answer questions that have already been answered in the discussion forum. Think before you post. We expect you to do a reasonable amount of thinking to try to solve your problems before posting for help. Make sure you are articulate and clear with your post (i.e., think before you post). You should post questions related to assignments early rather than wait until the last minute. Questions that are posted very near an assignment deadline may not be answered. Course staff are expected to answer questions Monday through Friday. Do not expect prompt answers on Saturday, Sunday, and scheduled holidays and breaks. Please post with respect and kindness. Posts that are disrespectful, crude, inappropriate, or mean will not be tolerated and will be reported and result in your immediate removal from the course and a failure for the course. "},{"title":"Attendance​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#attendance","content":"We expect you to attend lectures and labs on a regular basis. If you are absent or miss deadlines for health reasons or other extenuating circumstances, you will be able to view the lectures online as they will all be recorded on echo360. If you do miss class or lab and there is an assignment to complete you must notify us as soon as possible and, if you seek excusal from an assignment or require an extension, to provide written documentation. "},{"title":"Assessment and Grading​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#assessment-and-grading","content":"The final grade for this course is broken down into the following categories and weights: 10% Participation10% Quizzes20% Labs40% Homework20% Capstone Project The numerical cutoff for final course letter grade assignment will be made after all grading is completed. As a rough guide, expect to require at least a 93 to get an A, a 90 to get an A-, an 87 to get a B+, an 83 to get a B, an 80 to get a B-, etc. Individual grade items are not curved, so you should not get stressed about means, standard deviations, etc. related to scores you receive. What matters is your weighted average; we do not give favorable (or unfair) treatment by raising or lowering individual students’ letter grades. There are no opportunities for extra credit in this course; please do not ask. You are responsible for monitoring your grades. Grades will be available through Moodle and you should check them regularly and review any provided feedback. If you encounter any issues with your grades, you will have one week past the first posting of a particular assignment’s grade to Moodle to contact the course staff so that we can investigate. "},{"title":"Grading Categories​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#grading-categories","content":"This course uses a standards-based grading system. Our goal is to shift focus from grades to learning. Educational researchers developed a five-point scale to more clearly assess what a student knows and can do, which we will follow for all activities in this course: 4: Exceeding Standards, Consistently exceeds expectations for skills and understanding 3: Meeting Standards, Consistently meets expectations for skills and understanding2: Approaching Standards, Meets some expectations for skills and understanding1: Below Standards, Meets few expectations for skills and understanding0: No Submissions, Did not submit assignment What is standards-based grading? Why the shift from traditional grades? We believe that grades should communicate, as clearly as possible, what students know and can do. We also seek to create a growth mindset environment that encourages students to take risks and to embrace mistakes as learning opportunities. Standards-based grading and the corresponding five-point scale are set up to support these two values by clarifying learning goals and assessing students on their progress towards meeting those goals, rather than prioritizing completion of tasks and assignments over learning. This allows for more meaningful student learning and teacher feedback, and moves away from an approach in which students are seeking to earn points rather than practicing to meet the learning goal. What does this look like in practice? Students will receive assignment and final grades on the 0-4 scale: students will not receive letter grades (A, B, C, D) on assignments or fine-grained percentages. We will map our scale to letter grades for submission the the University at the end of the semester. Grades are clearer to students: Teachers and students engage in conversation about what 4/3/2/1/0 work looks like, so students understand what is expected and what they are learning. Grades are more useful and meaningful: When students get clear grades and feedback on a five point scale, they can monitor their progress and set goals for their learning. Teachers can also provide more specific feedback on how to improve from a “3” to a “4”. "},{"title":"Grading Scale​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#grading-scale","content":"For assignments that do give you a more granular number of points, we will try to articulate in the assignment description/instructions how many points map to what level on the 5-point scale. Those thresholds will be based on things like completing a set number of exercises or completing the more straight-forward exercises, for instance. "},{"title":"Participation​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#participation","content":"You will be assigned participation exercises to complete as part of the reading. These exercises exist inside of our online textbook, zyBooks, and you are expected to complete them by the assigned due date. You may not request an extension to the due date for these assignments. "},{"title":"Quizzes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#quizzes","content":"There will be a weekly quiz that focuses on the material covered prior to the release of each quiz. These quizzes are cumulative. You are able to take the quiz as many times as necessary to achieve a 100%. Quizzes contain multiple choice style questions covering material from lecture, the reading, and possibly labs and assignments. You may not request an extension to the due date for these assignments. "},{"title":"Labs​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#labs-1","content":"Lab assignments are low-stakes exercises that are designed to allow you to practice your understanding of the material covered in the book and during lecture in the presence of the course staff in a collaborative setting. You will need to bring a laptop if you have one or work with another student. If you do not have a laptop, please notify the course staff so we can make arrangements for you to work with another student. "},{"title":"Homework Assignments​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#homework-assignments","content":"Homework assignments require you to solve computational problems using the Python programming language. You will be presented with a number of different challenges that will require you to understand the problem, this how to solve that problem computationally, and implement an algorithm using Python to solve that problem. You will have a homework approximately every week. "},{"title":"Capstone Project​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#capstone-project","content":"You will be required to design and implement a Python program to solve a problem of your choice. The capstone project will be assigned and submitted toward the end of the semester. You will have the freedom to use any aspect of Python you learned in this course in your solution. On the last day of class we will have a poster session where you will have the opportunity to showcase your project to other students as well as see projects produced by others. "},{"title":"Late and Early Submissions​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#late-and-early-submissions","content":""},{"title":"Lateness General Guidelines​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#lateness-general-guidelines","content":"Lateness is defined as any assignment that is outside of the stated due date requirements. We allow assignments to be submitted three days “late” after the posted due date. However, penalties might be applied (see Submission Currency below). After the three days we will not accept a submission from any assessment component. It is your responsibility for maintaining your own schedule and being prompt with your submissions. We expect that you become familiar with the course submission software and verify that your submission has been properly uploaded. We will not accept late submissions due to lack of checking on this. We assume: You are an adult and have the ability to check and verify your work has been received properly.You are capable of using GitHub, DropBox, Google Drive, or some other backup software to ensure that your work is not lost in the event of a computer failure.You have a back-up plan in place in the event that your computer fails or your internet connection is unavailable. Make sure you have a plan B and C if your computer crashes or your internet is unavailable. This is your responsibility.To ensure that you submit projects on time you should begin them early and not wait until the last minute to submit. You will be able to submit multiple times so submit early and often to ensure you have something in before the deadline. If there are extenuating circumstances beyond your control that prevent you from completing an assignment by the posted deadline you must contact the instructor immediately using the appropriate communication channel (see Communication below). "},{"title":"Submission Currency 💵​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#submission-currency-","content":"To add some flexibility to submission deadlines, we will be using a form of “currency” in this course to earn “tokens” for submissions that are made before the day an assignment is due. If you submit an assignment on or before the deadline you will receive a token. You may then use a token to buy a late day allowing you to submit an assignment past the deadline. If you submit an assignment late and you run out of tokens, you may borrow tokens putting you in the negative. To get out of the hole you will need to submit subsequent assignments on time or early to earn tokens back and pay your debt! If you complete the course with leftover tokens it will be applied to your final grade and increase your overall grade for the course. If you complete the course with negative tokens it will be applied to your final grade and decrease your overall grade for the course. ✨ Caveat: you will only earn a token if your submission is at least Meeting Standards. Anything below is not considered to be token-level quality. ✨ "},{"title":"Token Rules​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#token-rules","content":"You start the semester with 3 tokens.A submission before or on a due date earns you 1 token.You can optionally apply a token for each day late up to 3 days.You can decide not to use tokens for late days. We reduce your assignment score by 1 for each day late (e.g., -1).After 3 days late an assignment and/or tokens will not be accepted.You can hold a maximum of 5 tokens at any time.You can earn tokens from homeworks only.You can apply tokens to homeworks and labs. "},{"title":"Submissions, Gradescope, and Token Application​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#submissions-gradescope-and-token-application","content":"The submission you choose to activate on gradescope is the submission we use. If your active submission is after the due date, and you do not report that your want to use tokens by submitting the token application form, we apply the late policy of -1 to your assignment submission per late day. You must submit a token application form to apply tokens to an assignment. The token application form is available on Moodle. "},{"title":"Examples​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#examples","content":"At the start of the semester Mia submits the first assignment two days early and receives a token increasing their purse to 4.In the middle of the semester Pat is late by 2 days. Pat decides to use 2 tokens from their purse. This is not bad since Pat hasn’t missed an assignment. Pat has 1 token remaining.At the end of the semester Jorge has 3 tokens and their grade is a B+. The tokens are applied and their final their final grade ends up as an A. Jorge is happy. 😃At the end of the semester Tanya has -2 tokens and their grade is an A-. The tokens are applied and their final grade is an B+. Tanya is unhappy 😔, but understands. You are ultimately responsible for maintaining your token count. We will do our best to calculate the number of tokens you have for each assignment. However, it may take a few days to do so. "},{"title":"Group Submissions​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#group-submissions","content":"When an assignment is submitted as a group, all group members earn a token if submitted before or on the date the assignment is due. If the assignment is submitted late, each group member can decide if they want to use tokens to pay for the late days or get marked down on the individual assignment. "},{"title":"Incompletes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#incompletes","content":"Typically, a course is completed after the last class, final exam, and/or final project or assignment. In rare cases, extenuating circumstances may prevent a student from completing a course by that time. As part of the University Regulations, we may issue an Incomplete (INC) for a course, rather than a course grade, if a student submits a request to the instructor(s). The criteria for granting an INC request are determined by the course instructors. The following is an excerpt from Section VI D in the Academic Regulations: “Students who are unable to complete course requirements within the allotted time because of severe medical or personal problems may request a grade of Incomplete from the instructor of the course. Normally, incomplete grades are warranted only if a student is passing the course at the time of the request and if the course requirements can be completed by the end of the following semester. Instructors who turn in a grade of &quot;INC&quot; are required to leave a written record of the following information with the departmental office of the academic department under which the course is offered: (1) the percentage of work completed, (2) the grade earned by the student on the completed work, (3) a description of the work that remains to be completed, (4) a description of the method by which the student is to complete the unfinished work, and (5) the date by which the work is to be completed. In the case of an independent study where the entire grade is determined by one paper or project, the instructor should leave with the department information pertaining to the paper or project, which will complete the course. To avoid subsequent misunderstanding, it is recommended that the student also be provided with a copy of this information.” "},{"title":"Criteria​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#criteria","content":"The incomplete criterion for this course requires that you have: At least 60% of the course must be completed with a passing grade.A valid reason for requesting an INC that relates to a severe medical or personal problem "},{"title":"Requests​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#requests","content":"Towards the end of the semester a notification will be posted about incomplete requests. You will follow the instructions provided to submit an incomplete request. After we review the request, we will make one of the following determinations: We approve the request upon which you will be notified by email and a separate incomplete agreement document will be sent to you to read through and sign no more than 48 hours after receiving the incomplete agreement document. This document will include what remains to be completed for the course and a deadline. After you sign and return this document, we will open extensions for the missing work. After the course has ended, we do not provide any additional help or support regarding the specifics of the course material. You are expected to complete the work using the material and online platforms that were available to you when the course was active. We deny the request and submit a grade based on your performance at the end of the course. "},{"title":"Course Support​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#course-support","content":""},{"title":"Office Hours​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#office-hours","content":"Office hours are times when we provide real-time access to the instructor, TAs, and UCAs. You do not need an appointment to attend office hours, attendance is optional, and all questions you have about the course are welcome. These sessions will be held at different times during the week. Office hours will be posted on the course website. Office hours will be held both in person and on Zoom. "},{"title":"Accommodations​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#accommodations","content":"The University of Massachusetts Amherst is committed to providing an equal educational opportunity for all students. If you have a documented physical, psychological, or learning disability on file with Disability Services (DS), you may be eligible for reasonable academic accommodations to help you succeed in this course. If you have a documented disability that requires an accommodation, please notify your instructor as soon as possible so that we may make appropriate arrangements. For further information, please visit Disability Services (https://www.umass.edu/disability). "},{"title":"Title IX​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#title-ix","content":"If you have been the victim of sexual violence, gender discrimination, or sexual harassment, the university can provide you with a variety of support resources and accommodations. UMass is committed to providing these resources with minimal impact and costs to survivors on a case-by-case basis. Resources are available to survivors with or without them filing a complaint. No upfront costs are charged to any currently enrolled students for University Health Services or the Center for Counseling and Psychological Health, and no fees exist for services in the Dean of Students Office, the Center for Women and Community, Student Legal Services, or by live-in residential staff. "},{"title":"General Education Requirements​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#general-education-requirements","content":""},{"title":"Statement​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#statement","content":"CICS 110 is a 4-credit General Education course that satisfies the R2 (Analytic Reasoning) general education requirements for graduation. The General Education Program at the University of Massachusetts Amherst offers students a unique opportunity to develop critical thinking, communication, and learning skills that will benefit them for a lifetime. For more information about the General Education Program, please visit the GenEd webpage. "},{"title":"General Education Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#general-education-learning-outcomes","content":"The General Education Program has four common objectives that pervade all designations. INFO 190S satisfies the following General Education objectives: Content: Students will know fundamental questions, ideas, and methods of analysis in computing. In particular, students will learn how to problem solve using a modern programming language, apply programming and problem solving to real world problems. Critical Thinking: Students will apply and demonstrate creative, analytical, quantitative, &amp; critical thinking through inquiry, problem solving, &amp; synthesis. Students will use critical thinking skills to solve problems from a computational perspective. As part of the problem-solving process students will use logical reasoning to create algorithms and data structures to develop programs that put their solutions into action. Furthermore, students will investigate aspects of performance and comparisons of equivalent algorithms to draw conclusions on efficiency. Lastly, students will explore and ask questions about real world problems and apply various forms of data analysis to answer these questions. Communication: Students will develop their writing skills through various assignments that require an articulation of their solution. They will also practice their oral communication by demonstrating their work (i.e., explaining an algorithm or technique) through a recorded video that will be part of assignment submissions. Connections: Students will connect the material in this course to real world problems such as using programming techniques to predict population size in the future and how that relates to pollution as well as many other issues that exist today. The goal of this course is to intentionally provide a connection between the concepts that are covered and how it impacts the world. This course is not only about learning how to program, it is about how to code to answer questions and to push forward and investigate how to construct solutions to solve problems. "},{"title":"R2 Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#r2-learning-outcomes","content":"This course will satisfy the R2 learning outcomes. In particular, it will advance student’s formal reasoning skills beyond the basic competency level by having them solve programming challenges on a weekly basis using a programming language. This will also increase a student’s sophistication as a consumer of numerical information as they must have a fundamental understanding of how a computer represents information (numerical or otherwise) in a discrete environment. Clearly, computer literacy is established in this context and naturally the limits of formal methods and the abuse of numerical arguments will be covered as part of developing programs and solving problems in general. "},{"title":"Time Management​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#time-management","content":"The university suggests that students spend 3-4 hours of time on a class per credit hour. This is a 4-credit course, so you should plan to spend 12-16 hours a week on this course. In a typical week you will: Attend 2 75-minute lectures (unless there is a holiday or class is canceled for any reason)Attend 1 50-minute lab (unless there is a holiday of lab is canceled for any reason)Complete participation exercises if some are due that week.Optionally attend office hours.Complete a lab assignment if one is due that week.Complete a homework assignment if one is due that week.Complete a quiz if one is due that week. "},{"title":"Code of conduct​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#code-of-conduct","content":"The course staff are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, shape, race, ethnicity, age, religion, nationality, or other similar characteristics.Please be kind and courteous. There’s no need to be mean or rude.Respect that people have differences of opinion and that differing approaches to problems in this course may each carry a trade-off and numerous costs. There isn’t always a single right answer to complicated questions.Please keep unstructured critique to a minimum. Criticism should be constructive.We will informally warn you, once, if you insult, demean or harass anyone. That is not welcome behavior. After that we will report your behavior to the Dean of Students office. We interpret the term “harassment” as including the definition in the Citizen Code of Conduct under “Unacceptable Behavior”; if you have any lack of clarity about what might be included in that concept, please read their definition and then ask us for clarification. We don’t tolerate behavior that excludes people in socially marginalized groups.Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a member of this class, please contact a member of the course staff immediately (or if you do not feel safe doing so, you should contact the Chair of the Faculty of CICS). Whether you’ve been at UMass for years or are a newcomer, we care about making this course a safe place for you and we’ve got your back.Likewise, any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome. "},{"title":"Collaboration Policy​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#collaboration-policy","content":"Group Work Encouragement: Students are encouraged to work in groups to facilitate learning, knowledge sharing, and skill development. Group work will be a regular part of the course and students are expected to actively participate in it. Group work is allowed on all assignments in this course. You are allowed to submit an assignment as a group of up to 4 collaborators.Individual Submissions: Although group work is encouraged, each student is required to submit their own individual work based on the group collaboration. This is to ensure that each student is held accountable for their own learning and understanding of the course material.Group Responsibilities: All group members are expected to contribute equally to the group discussions and work and should be prepared to share their knowledge and skills with their peers. Group members should also be respectful of each other's opinions and work styles.Conflict Resolution: In the event of a conflict within the group, students are encouraged to communicate and resolve the issue amongst themselves. If the conflict cannot be resolved, the instructor will mediate.Credit Allocation: Credit for group work will be allocated based on each student's individual contribution to the assignment. Students will assess their own contributions to submitted assignments and determine their grades accordingly.Cheating: Cheating, including plagiarism, is not tolerated and will result in a failing grade for the assignment. All work submitted must be original and should accurately reflect the student's own understanding of the course material.Communication: Regular communication between group members is essential for successful collaboration. Students are encouraged to use online tools, such as email or group chat platforms, to stay in touch and communicate effectively. By following this collaboration policy, students will be able to work collectively while still being held accountable for their individual learning and understanding of the course material. "},{"title":"AI Assistants​","type":1,"pageTitle":"Syllabus","url":"/main/information/syllabus#ai-assistants","content":"As students of the Manning College of Information and Computer Sciences, it's important to understand the judicious use of AI technologies like ChatGPT in your homework assignments and projects. While these tools can be a valuable resource in your learning journey, it's essential to use them in a responsible and ethical manner. In this course, we allow the use of AI technologies like ChatGPT as a means of learning and improving your understanding of the subject matter. However, it's important to remember that the work you submit must be original and created by you, the student. Submitting work that is not your own constitutes academic dishonesty and is a violation of the code of conduct in this course. The use of AI technologies like ChatGPT should be seen as a tool for assistance, not a substitute for your own efforts. While it's tempting to rely solely on these tools to complete your assignments and projects, doing so will not help you develop the critical thinking and problem-solving skills that are essential for success in computer science. In conclusion, while we encourage the use of AI technologies like ChatGPT in your learning journey, it's important to use them responsibly and ethically. The work you submit must be original and created by you, and the use of these tools should be seen as a means of assistance, not a substitute for your own efforts. By doing so, you'll be able to make the most of these tools and develop the skills and knowledge you need to succeed in computer science. "},{"title":"Lab 13: Capstone Work","type":0,"sectionRef":"#","url":"/main/labs/capstone-work","content":"Lab 13: Capstone Work Coming soon...","keywords":""},{"title":"Lab 04: Collections","type":0,"sectionRef":"#","url":"/main/labs/collections","content":"Lab 04: Collections Coming soon...","keywords":""},{"title":"Lab 05: Debugging Control Flow","type":0,"sectionRef":"#","url":"/main/labs/debugging-control-flow","content":"Lab 05: Debugging Control Flow Coming soon...","keywords":""},{"title":"Lab 12: Fetch & Filter","type":0,"sectionRef":"#","url":"/main/labs/fetch-filter","content":"Lab 12: Fetch &amp; Filter Coming soon...","keywords":""},{"title":"Lab 10: Designing Objects","type":0,"sectionRef":"#","url":"/main/labs/designing-objects","content":"Lab 10: Designing Objects Coming soon...","keywords":""},{"title":"Lab 07: For","type":0,"sectionRef":"#","url":"/main/labs/for","content":"Lab 07: For Coming soon...","keywords":""},{"title":"Lab 08: Modules & Files","type":0,"sectionRef":"#","url":"/main/labs/modules-files","content":"Lab 08: Modules &amp; Files Coming soon...","keywords":""},{"title":"Lab 11: Object Behavior","type":0,"sectionRef":"#","url":"/main/labs/object-behavior","content":"Lab 11: Object Behavior Coming soon...","keywords":""},{"title":"Lab 02: String Formatting","type":0,"sectionRef":"#","url":"/main/labs/string-formatting","content":"Lab 02: String Formatting Coming soon...","keywords":""},{"title":"Getting Started with Python","type":0,"sectionRef":"#","url":"/main/labs/python-setup","content":"","keywords":""},{"title":"General Information​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#general-information","content":"Submitting to the Auto-Grader For auto-grading homework assignments in the course, we use Gradescope. General Submission Info​ When submitting files to Gradescope, you need to submit all the files you want graded at once. You can do this in several ways: Select all files you want to submit and drag and drop them in the submission area when prompted.Browse your files when prompted by Gradescope and select all files you want to submit.Directly compress all the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it.Compress a folder containing the files you want to submit into a zip file (zip file name does not matter), and submit that zip file via drag-and-drop or browsing for it. Gradecope will look for files with specific names, and those names are case-sensitive. So if in the instructions we ask for a file named hello.py, then Gradescope will not recognise Hello.py, hello.txt, or hello.py.txt. Group Submissions​ When a group of people is submitting an assignment, only one person should submit the solution. They should then add the other members to that submission. On the Gradescope page for a submission there should be a &quot;+ Add Group Member&quot; button by the name in the upper-right. This is important because if multiple people submit, our similarity checker will see identical submissions and flag that. Unlimited attempts​ You have unlimited attempts for our auto-graded assignments. This means that you should submit early and often in order to be confident that code you are writing as you go passes all of our tests. Academic Honesty All work that is completed in this assignment is your own group's. You may talk to other students about the problems you are to solve, however, you may not share code in any way, except with your partner(s). What you submit must be your own group's work. You may not use any code that is posted on the internet. If you are not sure it is in your best interest to contact the course staff. We will be using software that will compare your code to other students in the course as well as online resources. It is very easy for us to detect similar submissions and will result in a failure for the exercise or possibly a failure for the course. Please, do not do this. It is important to be academically honest and submit your work only. Please review the UMass Academic Honesty Policy and Procedures so you are aware of what this means. Copying partial or whole solutions, obtained from other students or elsewhere, is academic dishonesty. Do not share your code with your classmates, and do not use your classmates' code. If you are confused about what constitutes academic dishonesty you should re-read the course policies. We assume you have read the course policies in detail and by submitting this project you have provided your virtual signature in agreement with these policies. "},{"title":"About​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#about","content":"Almost as a tradition, the first program someone learning to write code is likely to write is some variation of a Hello World program. So that's what you're doing! The real &quot;assignment&quot; here is more about installing things, setting up a programming envoronment, learning about the autograder, et cetera. "},{"title":"Learning Objectives​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#learning-objectives","content":"Install PythonSet up Integrated Development Environment (IDE)Write first program in pythonBecome more familiar with Gradescope "},{"title":"Estimated Size​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#estimated-size","content":"One file, with one line of code and three lines of comments. "},{"title":"Assignment​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#assignment","content":"We're going to really break this one up into pieces. For this--and only this--assignment, you must work alone. You are totally welcome to talk to people nearby, everyone just needs to make their own submissions We want everyone to have everything installed and in working order, and to know the the Gradescope process looks like. "},{"title":"0.1. Install Python​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#01-install-python","content":"Follow the relevant guide on the website to install Python. "},{"title":"0.2. Set up VSCode​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#02-set-up-vscode","content":"Follow these guides on the website to install and set of the editor, VSCode. "},{"title":"1. Make a file named hello.py​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#1-make-a-file-named-hellopy","content":"Now the actual assignment can begin. Make a folder for this assignment somewhere of your choosing. Open that folder in VSCode (Open VSCode and select File &gt; Open Folder, navigate to that folder you made and select it). Make a new file named hello.py (select File &gt; New File, and name it when prompted). "},{"title":"2. Add author information to hello.py​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#2-add-author-information-to-hellopy","content":"We want you to put your name, UMass email, and who you worked with at the top of all assignments so that we know who wrote each file (when working in groups) and to help us connect each student with their email on Gradescope (sometimes non-UMass emails are used, and it's difficult to find the UMass one in that case) That can be done with comments. Comments are lines that are ignored by the computer. You start a comment (in python) with the # character. Anything on that line after that character is ignored. So specifically, we want: # Author or # Authors to be the start of the first line of the file.# Email or # Emails to be the start of the second line of the file.# Spire ID or # Spire IDs to be the start of third line of the file.each of the above followed by the relevant information. For example, the first three lines of a file may look like this: # Author: Jared Yeager # Email: jyeager@cs.umass.edu # Spire ID: 31415926  Note: this is expected of every file going forward. "},{"title":"3. Add print() statement to hello.py​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#3-add-print-statement-to-hellopy","content":"Finally, the actual code. After the comments from earlier add the line print(&quot;Hello, World!&quot;)  print(), as you may have guessed, is a command that prints the input (to the terminal). The input is surrounded by parentheses. The quotes around the input, &quot;Hello, World!&quot;, indicate it is text (a string, more technically). Note: When showing code in general, we will use a mono-spaced font. When talking about &quot;commands&quot; like print(), we will have the () afterward to denote that it is a command. (Technically, these are called &quot;functions&quot;, but that lecture is next week.) Testing While we have autograded tests for you, we don't want to encourage dependence on the autograder. We want to try and impart testing and debugging skills so that you are equipped in any circumstance. To that end, we will have testing recommendations/suggestions where we can, so that you can test your code. In this case, running the code and making sure &quot;Hello, World!&quot; is printed is the natural thing to do. Running code and making sure it does what you expect is the essence of testing. (Finding out where it first deviates from what you expect is the essence of debugging) To run the code, open the built-in terminal (select Terminal &gt; New Terminal) and type in python3 hello.py in the terminal. You should now see: $ python3 hello.py Hello, World! This $ sign notation is not literal, it represents lines you entered input on. "},{"title":"4. Submit hello.py to Gradescope​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#4-submit-hellopy-to-gradescope","content":"Log in to Gradescope, select the relevant assignment, and submit hello.py Gradescope has a guide on submittingassignments like this. Note: in general, you will submit all .py files for a relevant assignment at once. "},{"title":"Extra Details​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#extra-details","content":"There will be some times where we like to provide extra details or information--stuff that may not be covered in the course itself or that will be covered later. None of this is necessary to know at this point. "},{"title":"The Code​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#the-code","content":"It's all well and good to have you write print(&quot;Hello, World!&quot;), but what do the pieces of this mean? print() is a &quot;function&quot;. We will learn more about functions next week. But for some intuition: you can think of them as commands; you can think of them as ways to invoke re-usable, named snippets of code; or you can think of them as black boxes that take inputs (like functions in math), spit out outputs (like functions in math), and have side effect (un-like function in math). In this last view, print() takes in something to print, returns nothing, and has the side-effect of printing the input. &quot;Hello, World!&quot; is a &quot;string&quot;. We should have already learned about them (but in case not...). But for some intuition: there is a notion of numbers and text as different &quot;types&quot;, strings are the text-like type. To indicate something is text, we wrap it in quotation mark. Note: these are straight quotation marks. &quot;text&quot; will work, 'text' will also work; the following will not work: `text`, “text”, and ‘text’. No back-ticks, nothing that curls. And so print(&quot;Hello, World!&quot;) passes the string (text) &quot;Hello, World!&quot; to the function print(), which prints it. "},{"title":"The Terminal​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#the-terminal","content":"What is the terminal? The terminal is an interface to out computers that allows us to give it commands through text, which it will make a program to accomplish. It also allows us to give those programs input, and for those programs to give us output. It is a tool for us to run and interact with programs. "},{"title":"Running the Code​","type":1,"pageTitle":"Getting Started with Python","url":"/main/labs/python-setup#running-the-code","content":"What does the terminal command python3 hello.py mean? The python3 part is a command that says &quot;run the python 3 interpreter&quot;. The hello.py part is giving the file hello.py to the python 3 interpreter to, well, interpret. The command can be read as &quot;run python3 with input hello.py. "},{"title":"Lab 09: Towers of Hanoi","type":0,"sectionRef":"#","url":"/main/labs/towers-of-hanoi","content":"Lab 09: Towers of Hanoi Coming soon...","keywords":""},{"title":"Lab 06: While","type":0,"sectionRef":"#","url":"/main/labs/while","content":"Lab 06: While Coming soon...","keywords":""},{"title":"Lectures","type":0,"sectionRef":"#","url":"/main/lectures","content":"Lectures Welcome to the lecture material section of the course website! Here, you will find all the information and resources you need to succeed in your course. Whether you are just starting out or have prior experience, our goal is to provide you with the tools and support you need to achieve your goals. In this section, you will find slides from each lecture, as well as example code and other relevant resources. Our lecture material is designed to provide you with a comprehensive and engaging learning experience, and we have included links to additional resources that you can use to expand your knowledge and develop your skills. Whether you are looking to reinforce what you have learned in class or explore new topics, this section has you covered. We are committed to providing you with the support and resources you need to succeed in your computational thinking and computer programming course. Our lecture material is an essential part of that support, and we have worked hard to ensure that it is both comprehensive and accessible. Whether you are a beginner or have prior experience, we are confident that you will find our lecture material to be a valuable tool in your programming journey. Good luck and happy coding!","keywords":""},{"title":"Lec 02 Arithmetic Expressions","type":0,"sectionRef":"#","url":"/main/lectures/arith-exprs","content":"","keywords":""},{"title":"Reading / Participation​","type":1,"pageTitle":"Lec 02 Arithmetic Expressions","url":"/main/lectures/arith-exprs#reading--participation","content":"Read Chapter 1 Introduction to Programming in CICS 110 - Foundations of Programming on zyBooks (note, you will first need to purchase the book)Complete Participation 1 in zyBooks "},{"title":"Slides​","type":1,"pageTitle":"Lec 02 Arithmetic Expressions","url":"/main/lectures/arith-exprs#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Additional Resources​","type":1,"pageTitle":"Lec 02 Arithmetic Expressions","url":"/main/lectures/arith-exprs#additional-resources","content":"Numbers in Python (Socratica)Python Strings (Socratica) "},{"title":"Lec 05 Booleans & Assert","type":0,"sectionRef":"#","url":"/main/lectures/booleans-and-assert","content":"Lec 05 Booleans &amp; Assert Coming soon...","keywords":""},{"title":"Lec 09 Branching & Debugging","type":0,"sectionRef":"#","url":"/main/lectures/branching-debugging","content":"Lec 09 Branching &amp; Debugging Coming soon...","keywords":""},{"title":"Lec 08 Branching Introduction","type":0,"sectionRef":"#","url":"/main/lectures/branching-intro","content":"Lec 08 Branching Introduction Coming soon...","keywords":""},{"title":"Types and Operations","type":0,"sectionRef":"#","url":"/main/lectures/arith-exprs/Jared","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#assignment-updates","content":"Short week 1 tasks: Quiz 1: Due Thursday 2/9Sign up for Piazza: Due Friday 2/10Sign up for Gradescope: Due Friday 2/10Sign up for Zybooks: Due Friday 2/10 Lab this week is meeting your TA and making sure all the relevant software is installed. "},{"title":"replit​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#replit","content":"For this lecture, it will be convenient to have replit open. replit is quite cool. On the left-hand side, you can type python code and run it with the big, green &quot;Run&quot; button. Go ahead and try it with print(&quot;Hello, World&quot;). But we will be using the right-hand side today. On the right hand side you can put code/expressions (e.g. arithmetic) one line at a time, they will be evaluated, and the results will be displayed. The distinction is subtle. It may by more useful to think of the right-hand side a &quot;python calculator&quot; of sorts. Extra: REPLs This calculator-like thing is more formally know as aread-eval-print loop (REPL) It reads an expression from the user, evaluates it, prints the result, and repeats (loops). Extra: Python's built-in REPL replit's python REPL is presumably a wrapper around python's built-in REPL. If you are in a terminal or powershell and python 3 is installed, then you can start up the built-in REPL with the command python3(if you have installed python, it is almost surely python 3). That's it, just python3 with no file name after it. To get out of the REPL, you can use the exit() function, or you can hit control-d (it might be something else on Windows). "},{"title":"Types​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#types","content":"We as humans understand the difference between numbers and words. Even within numbers, we have whole numbers, fractions, and decimals. Computers formalise this with a notion of types. All data has some type associated with it. Everything is something, maybe a number, maybe text, and later on, maybe weirder things. There are 3 types we care about at the moment: Integers (int): these are the whole numbers of python, e.g.: 0,1,6,-7.Floating point numbers (float): these are the decimal numbers of python, e.g.: 0.0,-1.67,4e23.Strings (str): these are the &quot;text&quot; type of python. e.g.: &quot;Hello, World!&quot;. When we want to make a string out of verbatim text in code, we surround it with quotation marks so that the computer knows it is text, not code. We may use &quot; or '. Note, these are both straight quotes. Curvy quotes like “, ”, ‘, and ’ do not work. Extra: Infinity and NaN There are some special floats to mention exist: Infinity (prints as inf): hard to deliberately make show up, but anything more than 1.8e308 or so is too big and thus &quot;infinite&quot;. Why that specific number is much longer story.Negative Infinity (prints as -inf): Much like inf, but negative.Not a Number (prints as nan): Sometimes when you do illegal math you get an error (such as dividing by 0). Sometimes, like with 1.8e308 - 1.8e308 (inf - inf) you get &quot;Not a Number&quot; Extra: Escape Sequences Sometime, you want to something a little fancy in your strings. Maybe you want a tab, maybe a newline, or maybe you want a quotation mark. To do these things, we need what are called escape sequences. These are sequences of characters starting with a special escape character. The escape character, \\ (backslash) in python, tells the computer that what comes next is not verbatim, but rather a special sequence telling it to do something else. So for a new line, you can use &quot;\\n&quot;, for tabs, &quot;\\t&quot;. &gt;&gt;&gt; print(&quot;Escapable Whitespace:\\n\\tNewlines\\n\\tTabs&quot;) Escapable Whitespace: Newlines Tabs For quotation marks, you don't need to escape if the marks around the entire string differ from what you are trying to display. E.g., &quot;'&quot; and '&quot;' work how you might hope. You do need an escape if they match though, e.g., &quot;\\&quot;&quot; and '\\''. &gt;&gt;&gt; print(&quot;The ' in a \\&quot;...\\&quot;-style string doesn't need quotes&quot;) The ' in a &quot;...&quot;-style string doesn't need quotes &gt;&gt;&gt; print('Don\\'t forget to escape apostrophes in a \\'...\\'-style string') Don't forget to escape apostrophes in a '...'-style string Finally, if you want a backslash itself to show up in a string, \\\\. &gt;&gt;&gt; print(&quot;Some Escape Sequences:\\n\\tNewline: \\\\n\\n\\tTab: \\\\t\\n\\tQuote (\\&quot;): \\\\\\&quot;\\n\\tBackslash (\\\\): \\\\\\\\&quot;) Some Escape Sequences: Newline: \\n Tab: \\t Quote (&quot;): \\&quot; Backslash (\\): \\\\  "},{"title":"Learning Something's Type​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#learning-somethings-type","content":"If you want to know what something's type is, you can use the type() function. This takes in anything and return the type, e.g., in the REPL (the first line is what I typed in, which is what the &gt;&gt;&gt; represents): &gt;&gt;&gt; type(&quot;Hello, World!&quot;) &lt;class 'str'&gt;  Ignore the class thing. We are being told is a string (str) "},{"title":"Arithmetic Operations​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#arithmetic-operations","content":"We have a notion of expressions in the computer science world. The formal definitions can be a tad complex, by they are effectivelythings that evaluate to something. For instance, the expression 7 + 3 * 2 evaluates to 13. You are hopefully familiar with operations (as in &quot;order of operations&quot;) in the math sense. If we have the expression 7 + 8, we call 7 and 8operands, and + the operator. The basic arithmetic operators in python: +: Addition-: Subtraction*: Multiplication/: Division**: Exponentiation There are two more arithmetic operators in python. They both have to do with the concept of whole number division with a remainder. So for instance, while you could say 17 divided by 5 is 3.4, you could also say 17 divided by 5 is 3 with a remainder of 2 (because 5 * 3 + 2 = 17). The first approach is captured in python by /, the second with the following: //: Integer Division/Floor Divisions. 17 // 5 would give 3, the whole number of times to operator on the right can be taken out of the operator on the left.%: Modulo/Remainder. 17 % 5 would give 2, what remains of the operator on the left after the operator on the right is taken out of it as many times as possible. These both also work on floats in python. &gt;&gt;&gt; 18.5 // 5.1 3.0 &gt;&gt;&gt; 18.5 % 5.1 3.200000000000001  (As a bonus, you can even see the imperfection in the float's ability to represent 3.2) "},{"title":"Order of Operations​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#order-of-operations","content":"With any luck, the phrase &quot;order of operation&quot; or &quot;PEMDAS&quot; is ingrained deep in your memory. If not, the idea is that in longer arithmetic expressions, some operations are done before others. The order: (): Expressions in Parentheses have highest priority.** : Exponentiation is the tightest binding operator.*,/,//,%: Multiplication, Division, and the like come next.+, -: Addition and Subtraction are last. Some examples of results by using parentheses to change the order of evaluation: &gt;&gt;&gt; 5 ** 4 * 3 + 2 1877 &gt;&gt;&gt; 5 ** 4 * (3 + 2) 3125 &gt;&gt;&gt; 5 ** (4 * 3) + 2 244140627 &gt;&gt;&gt; 5 ** (4 * 3 + 2) 6103515625 &gt;&gt;&gt; 5 ** (4 * (3 + 2)) 95367431640625  And within a level of precedence, the order of evaluation goes from left to right. A demonstrated below: &gt;&gt;&gt; 2 - 3 + 4 3 &gt;&gt;&gt; (2 - 3) + 4 3 &gt;&gt;&gt; 2 - (3 + 4) -5  "},{"title":"Operands' and Result's Types​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#operands-and-results-types","content":"Since ints and floats are both numbers, python lets you have operations with both in them: &gt;&gt;&gt; 2 * 3.1415 6.283  The type of the result depends on the type of the operands (and if the operation is division or not). &gt;&gt;&gt; type(1 + 1) &lt;class 'int'&gt; &gt;&gt;&gt; type(1 + 1.0) &lt;class 'float'&gt; &gt;&gt;&gt; type(1.0 + 1) &lt;class 'float'&gt; &gt;&gt;&gt; type(1.0 + 1.0) &lt;class 'float'&gt; &gt;&gt;&gt; type(1 / 1) &lt;class 'float'&gt;  If either operand is a float, or the operation is /, the result will be a float. Otherwise (If both operands are both ints and the operation is not /), it will be an int. "},{"title":"String Operations​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#string-operations","content":"We can work with more than numbers in python though. We also have text, aka strings (str). Turns out, there are some handy operations we can perform on strings: +: Concatenation. Combines 2 strings together, e.g., &quot;Hello&quot; + &quot; &quot; + &quot;World&quot;evaluates to &quot;Hello World&quot;.*: Repeat. This takes, as operands, a string and and an integer, in either order, and repeats the string that many times. E.g., 5 * &quot;ha&quot; evaluates to &quot;hahahahaha&quot;. "},{"title":"Converting Types (Casting)​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#converting-types-casting","content":"Finally, we can convert between these types if we so desire (this is sometimes called casting). For example, if we have the string &quot;125&quot;, we may want to convert it to the integer 125. Conversion function are conveniently named after their types: int(): attempts to convert something to an int. E.g., int(&quot;125&quot;) evaluates to 125.float(): attempts to convert something to an floatE.g., float(&quot;125&quot;) evaluates to 125.0.str(): attempts to convert something to an str. E.g., str(-0.12) evaluates to &quot;-0.12&quot;. I say &quot;attempts&quot;, because some things are illegal and will fail: &gt;&gt;&gt; int(&quot;3.14&quot;) Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; ValueError: invalid literal for int() with base 10: '3.14'  Finally, a warning about converting floats to ints, the int() function truncates (chops off) the decimal part. You may find it more appropriate to use the round() function. &gt;&gt;&gt; int(126.9999999999) 126 &gt;&gt;&gt; round(126.9999999999) 127  Extra: Floor and Ceiling This truncating, or rounding down, is also called flooring (hence &quot;floor divisions&quot;, in fact). It can also be deliberately done with math.floor() in themath Module The notion of rounding up is captured by the ceiling (math.ceil()) function. Extra: It's Technically not Conversion This is material we will get to later. For each type (technically class), there is a special function, who's name matches the name of the type (class), called a constructor. Constructors construct an object of that type (class). They may also take in inputs to inform that construction. So int(5.6) isn't technically &quot;converting&quot; the float 5.6 to an int, but rather, creating a new int based on the float 5.6. It's a subtle distinction, and for all intents are purposes is effectively conversion, but I like to include technically correct information where possible. "},{"title":"math Module​","type":1,"pageTitle":"Types and Operations","url":"/main/lectures/arith-exprs/Jared#math-module","content":"If you want even more mathematical functions and features, there is the math module. A module is effectively a collection of functions and/or constants that aren't included by default. The term library is also frequently used for this concept. To load (or import or include) the math module, use the command import math(import &lt;module_name&gt; for modules more broadly). You can use this command in the REPL. There are useful function and constants in the module, like sqrt() and pi, but in order to use them (at least with this import method), we must refer to them as math.sqrt() or math.pi. &gt;&gt;&gt; math.sqrt(math.pi) 1.7724538509055159  A full list of the function available to in the math module can be found in the official documentation.  caution From here on is post-lecture content, or notes about the lecture but not part of the lecture itself.  Instructor's Outline This is an outline I had in the replit when demonstrating things. ############################ ### Instructor's Outline ### ############################ # types: # int (whole numbers) # float (decimal point numbers) # string (text) # type() function # Familiar Math Operations: # Addition: + # Subtraction: - # Multiplication: * # Division: / # Exponentiation: ** # order of operations # types in vs types out # 1. floats dominate # 2. division outputs floats # String Operations: # Concatination: + # Repeat: * # Casting # int(), float(), str() # use round() for float -&gt; int # Less-Familiar Math Operations: # Floor Division: // # Modulo: % # Math Library (import math) # math.pi # math.sqrt() # https://docs.python.org/3/library/math.html  "},{"title":"Lec 26 Capstone Showcase","type":0,"sectionRef":"#","url":"/main/lectures/capstone-project","content":"Lec 26 Capstone Showcase Coming soon...","keywords":""},{"title":"Lec 25 Capstone Project Work","type":0,"sectionRef":"#","url":"/main/lectures/capstone-work-2","content":"Lec 25 Capstone Project Work Coming soon...","keywords":""},{"title":"Lec 24 Capstone Project Work","type":0,"sectionRef":"#","url":"/main/lectures/capstone-work-1","content":"Lec 24 Capstone Project Work Coming soon...","keywords":""},{"title":"Lec 18 Classes and OOP","type":0,"sectionRef":"#","url":"/main/lectures/classes-and-oop","content":"Lec 18 Classes and OOP Coming soon...","keywords":""},{"title":"Lec 14 Creating Modules","type":0,"sectionRef":"#","url":"/main/lectures/creating-modules","content":"Lec 14 Creating Modules Coming soon...","keywords":""},{"title":"Lec 16 CSV Files","type":0,"sectionRef":"#","url":"/main/lectures/csv-files","content":"Lec 16 CSV Files Coming soon...","keywords":""},{"title":"Lec 23 Event Loops","type":0,"sectionRef":"#","url":"/main/lectures/event-loops","content":"Lec 23 Event Loops Coming soon...","keywords":""},{"title":"Lec 07 Dictionaries, Sets","type":0,"sectionRef":"#","url":"/main/lectures/dictionaries-sets","content":"Lec 07 Dictionaries, Sets Coming soon...","keywords":""},{"title":"Lec 10 Exceptions","type":0,"sectionRef":"#","url":"/main/lectures/exceptions","content":"Lec 10 Exceptions Coming soon...","keywords":""},{"title":"Lec 15 Files","type":0,"sectionRef":"#","url":"/main/lectures/files","content":"Lec 15 Files Coming soon...","keywords":""},{"title":"Lec 04 Function Basics","type":0,"sectionRef":"#","url":"/main/lectures/function-basics","content":"","keywords":""},{"title":"Due this week​","type":1,"pageTitle":"Lec 04 Function Basics","url":"/main/lectures/function-basics#due-this-week","content":"ZyBooks 1 Due Thursday (2/16) Covers Week 1 material Quiz Due Thursday (2/16) 9 Questions, Unlimited Attempts Lab Due Friday (2/17) "},{"title":"Slides​","type":1,"pageTitle":"Lec 04 Function Basics","url":"/main/lectures/function-basics#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Additional Resources​","type":1,"pageTitle":"Lec 04 Function Basics","url":"/main/lectures/function-basics#additional-resources","content":"Arithmetic in Python (Socratica) "},{"title":"Lec 12 For Loops","type":0,"sectionRef":"#","url":"/main/lectures/for","content":"Lec 12 For Loops Coming soon...","keywords":""},{"title":"Lec 01 Course Introduction","type":0,"sectionRef":"#","url":"/main/lectures/introduction","content":"","keywords":""},{"title":"Reading / Participation​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#reading--participation","content":"Read Chapter 1 Introduction to Programming in CICS 110 - Foundations of Programming on zyBooks (note, you will first need to purchase the book)Complete Participation 1 in zyBooks "},{"title":"Slides​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Additional Resources​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#additional-resources","content":"Learn Python with Socratica (Socratica)Hello World in Python (Socratica) "},{"title":"Exploring Code Activity​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#exploring-code-activity","content":""},{"title":"Guess the Number​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#guess-the-number","content":"Try to guess the hidden number. The number changes every minute. Guess_the_number from datetime import datetime now = datetime.now() cur_time = now.strftime(&quot;%I:%M %p&quot;) num = ((now.hour * 60 + now.minute)*17 + 27) % 100 print(&quot;Try to guess the number between 0 and 100&quot;) print(&quot;The number changes every minute&quot;) print(f&quot;This is the number for: {cur_time}&quot;) guess = int(input(&quot;Enter a number: &quot;)) if guess == num: print(&quot;You guessed it!&quot;) elif guess &gt; num: print(&quot;Too high&quot;) else: print(&quot;Too low&quot;)  "},{"title":"Spirograph​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#spirograph","content":"This piece of code generates a Spirograph. a spirograph is a drawing that is formed by placing a pen in a gear, and then rolling that gear around inside a larger gear. The pen traces out a curve that is the shape of the gear teeth.  Spirograph from turtle import * from math import pi, sin, cos, lcm R = 100 # Radius of the outer (larger) gear r = 60 # Radius of the inner (smaller) gear d = 100 steps = 100 # Number of steps to take (increase for more detail) d_theta = (1 / steps) * 2 * pi * lcm(R, r) / R theta = 0 hideturtle() color(&quot;blue&quot;) penup() goto(R - r + d, 0) pendown() for i in range(steps): theta += d_theta x = (R - r) * cos(theta) + d * cos(theta * (R - r) / r) y = (R - r) * sin(theta) - d * sin(theta * (R - r) / r) goto(x, y)  "},{"title":"Cafe Wall Illusion​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#cafe-wall-illusion","content":"The Cafe Wall illusion has lines that look like they are slanted, but they are actually straight. Take a look! Cafe_Wall_Illusion from turtle import * from math import sin def move(x,y): penup() goto(x,y) setheading(0) pendown() def fill_rect(width, height, color): fillcolor(color) for fun in [begin_fill, end_fill]: fun() for dist in 2 * [width,height]: forward(dist) left(90) def fill_row(x, y, width, height, offset, rects): move(x,y) forward(width - offset) fill_rect(width, height, &quot;black&quot;) for _ in range(rects-1): forward(2 * width) fill_rect(width, height, &quot;black&quot;) forward(width + offset) hideturtle() speed(11) color(&quot;grey&quot;) pensize(1) xmin = -250 xmax = 250 ymin = -250 ymax = 250 rows = 25 cols = 10 move(xmin,ymin) fill_rect(xmax-xmin,ymax-ymin,&quot;white&quot;) for i in range(rows): dx = (xmax-xmin) / (2*cols) dy = (ymax-ymin) / rows y0 = ymin + i * dy offset = dx / 2 + (dx / 5) * sin((10 / cols) * i) fill_row(xmin, y0, dx, dy, offset, cols) done()  "},{"title":"Koch Snowflake​","type":1,"pageTitle":"Lec 01 Course Introduction","url":"/main/lectures/introduction#koch-snowflake","content":"The Koch Snowflake is a fractal that is formed by starting with an equilateral triangle, and then repeatedly replacing the middle of each side with a smaller equilateral triangle. Try playing with the length and depth! Koch_Snowflake from turtle import * from math import sin def koch_forward(distance, depth): if depth == 0: forward(distance) else: koch_forward(distance/3, depth-1) right(60) koch_forward(distance/3, depth-1) left(120) koch_forward(distance/3, depth-1) right(60) koch_forward(distance/3, depth-1) # Play with these! length = 250 # Length of a side depth = 4 # Level of recursion hideturtle() speed(8) color('blue', 'white') penup() goto(- length / 2, - 3**(1/2) * length / 6) pendown() begin_fill() for _ in range(3): koch_forward(length, depth) left(120) end_fill() done()  "},{"title":"Lec 22 Lambda, Map, Filter","type":0,"sectionRef":"#","url":"/main/lectures/lambda-map-filter","content":"Lec 22 Lambda, Map, Filter Coming soon...","keywords":""},{"title":"Lec 20 Installing Libraries","type":0,"sectionRef":"#","url":"/main/lectures/libraries","content":"Lec 20 Installing Libraries Coming soon...","keywords":""},{"title":"Lec 13 List Comprehensions","type":0,"sectionRef":"#","url":"/main/lectures/list-comps","content":"Lec 13 List Comprehensions Coming soon...","keywords":""},{"title":"Lec 06 Lists, Tuples, Sets","type":0,"sectionRef":"#","url":"/main/lectures/lists-tuples-strings","content":"Lec 06 Lists, Tuples, Sets Coming soon...","keywords":""},{"title":"Lec 19 Methods","type":0,"sectionRef":"#","url":"/main/lectures/methods","content":"Lec 19 Methods Coming soon...","keywords":""},{"title":"The Syllabus, and Me, but Mostly the Syllabus","type":0,"sectionRef":"#","url":"/main/lectures/introduction/Jared","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#assignment-updates","content":"Short week 1 tasks: Quiz 1: Due Thursday 2/9Sign up for Piazza: Due Friday 2/10Sign up for Gradescope: Due Friday 2/10Sign up for Zybooks: Due Friday 2/10 Lab this week is meeting your TA and making sure all the relevant software is installed. "},{"title":"Who am I?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#who-am-i","content":"My name is Jared Yeager. I'm a computer science graduate student here at UMass, so any level of formality from &quot;Jared&quot; to &quot;Professor Yeager&quot; is fine by me (although since I don't have a PhD, I'm not sure I can claim the &quot;Professor&quot; title). Formality and hierarchy based on age starts to blur and melt down a bit as you get older. I have TA-ed computer science classes for several semesters, but this is my first time TO-ing and first time with CICS 110. Aside: Asking Questions This is my first time teaching a truly introductory class. It has also been almost a decade since I first took a programming class. This is all to say, I don't remember clearly what it is like to be in your shoes. There may be some things that have become natural to me that I don't realise are unnatural to you. So please, ask questions. Asking questions and making sure to understand the answer well enough that you could explain it your past self is a really powerful technique for learning. "},{"title":"Who are .. We?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#who-are--we","content":"We have a big team here, so check them out Mentioning anyone specifically other them Tim Richards, our Course Overmind, would be playing favourites. "},{"title":"What is this Class?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#what-is-this-class","content":"CICS 110: Introduction to Programming (I think). If that's not the name, then maybe it should be, because that's what we're teaching. The goal of the class is to teach you enough about the basic/fundamental mechanics of programming that you are prepared for future classes; andif you come upon some problem in the future that writing a small program could help with, you have the knowledge to try and do that. Aside: Concepts, not Syntax I want to emphasise that this class is an introduction to programming. We use python, but many of the concepts we learn about (e.g. variables, branching, looping) exist in almost every mainstream language. Your goal should be to internalise those concepts themselves. If you need to look up the syntax for a specific language, that's fine. As you see more languages, you'll find that specific syntax of a given language may be hard to remember. But knowing the concepts helps you look up whatever gaps you need to fill. "},{"title":"Syllabus​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#syllabus","content":"caution The syllabus is somewhat under construction. The full Syllabus is available here, but some specifics "},{"title":"Assignment Types​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#assignment-types","content":"Homework (40%): These are roughly weekly to bi-weekly programming exercises.Due by the end of WednesdaysWeekly Quizzes (10%): These are online quizzes on Moodle. They are untimed and can be attempted as many times as you like.Due by the end of ThursdaysLabs (20%): Activities to be done in lab/discussion section that further explore a topic or introduce something that might be useful to know. Due by the end of FridayszyBooks (10%): The online textbook has some exercises in it that count toward participation grade.[TODO: NEED DUE DATES]Capstone Project (20%): A more open ended final project.Due the last day of class All homework assignments and labs (except for the first lab) can be worked on in groups of up to 4. When submitting the assignment, only one person in the group should submit and they should note the people they worked with. There is a way to select partners on Gradescope (our auto-grader submission platform). "},{"title":"Tools​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#tools","content":"This Website, Itself: We post announcements, lectures, HW assignments, and labs here.Moodle: Links to various other resources reside here, but the big thing is that the weekly quizzes are here.Gradescope: Our auto-grader of choice. This is where you submit all homework assignments and labs for grading.Echo360: Lectures are recorded and posted here. Links to respective lecturers on MoodlePiazza: This is a website for students to ask questions on.zyBooks: This an interactive textbook used for this class. "},{"title":"Grading​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#grading","content":"One of our goals in this course is focussing on learning as much as possible. To that end, the grading system is simplified into a 5-point scale as much as possible: 4: Exceeding Standards, Consistently exceeds expectations for skills and understanding3: Meeting Standards, Consistently meets expectations for skills and understanding2: Approaching Standards, Meets some expectations for skills and understanding1: Below Standards, Meets few expectations for skills and understanding0: No Submissions, Did not submit assignment Aside: Learning vs Grades When you take a class, you have two goals: Learn the material.Get a good grade. Learning the material is necessary to be able to do things with the material in the future. Grades are what people use as a metric of how well someone knows the material. They are related, but they are not the same thing. Given how fundamental the material in this course is, we want people to be able to dedicate their time and energy to actually learning the material; not have it siphoned away by the extra concerns imposed by optimising grades. So we've simplified the grading scale to hopefully have less of a nagging effect of the sub-conscious, and we've made it so that assignments can be retried until understanding is achieved. However, this puts a burden of trust/responsibility on you. There will be cases where it is easy enough to stumble upon a solution.Even is you happen upon a solution, if you don't understand why it works, you should still ask. Learning and understanding should be the goals. It would probably be reasonably easy to cheat in this class. But because this material is so foundational, if you do things without really understanding the solutions, then you are setting yourself up for pain down the line. Getting stuck, then getting unstuck, and understanding what the issue was enough to explain it to your past self, is one of the best ways of really learning something. Try not to cheat yourself out of that experience. "},{"title":"Late Submissions and Token System​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#late-submissions-and-token-system","content":"caution The token system is undergoing some renovations. Tokens are asymmetric time condensed into currency by modern science: You start with 3.You get one for every [TODO: clarify what assignment types qualify] submitted early/on-time. You can hold a total of 5.You can spend 1 token for one day of extension for [TODO: clarify what]. This only works on [TODO: clarify what]You can buy a maximum of 3 days of extension for an assignmentYou must fill out this form to use/spend tokens Remaining token and the end of the semester  "},{"title":"Programming in this Class​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#programming-in-this-class","content":"Aside: What is Programming [TODO: add diagram] Imagine we have some task we want accomplished, we have our own human languages that we can articulate that in. Computers similarly, have a language of instructions that they understand. A programming language is in between these. We translate the problem from our understanding/language to a programming language (programming). The computer then translates that into it's own language (compilation/interpretation). "},{"title":"Python​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#python","content":"The programming language we choose to use for this class is called Python. It is &quot;scripting language&quot;, meaning you can start coding with less overhead.It has a lot of build-in features that are very useful.It has a lot of useful libraries that have been developed. "},{"title":"VSCode​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#vscode","content":"VSCode is our editor of choice. It is wildly used and has a number of useful extensions. "},{"title":"What is a program?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#what-is-a-program","content":"A sequence of instruction. Not unlike a recipe, or step-by-step instructions on how to drive somewhere, or step-by-step instructions on how to build something (e.g., legos, Ikea furniture). You can see how a recipe below can have a natural correspondence to something program-like. The step-by-step nature of being the key detail. The difference is in that the program needs very explicit details. A recipe: 1. Mix flower, salt, sugar, and yeast 2. Add water and stir together 3. Knead dough for 5-10 minutes 4. Put it in a warm place 5. Bake at 180 degrees for 30 minutes 6. Woohoo!!  A psuedo-program: 1. mix(&quot;flower&quot;, &quot;salt&quot;, &quot;sugar&quot;, &quot;yeast&quot;) 2. add(&quot;water&quot;) 3. stir() 4. knead(random.randint(5,10)) 5. move_to_warm_place() 6. bake(180, 30) 7. print(&quot;Woohoo!!&quot;)  "},{"title":"What is a computer?​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#what-is-a-computer","content":"That's an almost philosophical question. But for the sake of this class, let us say that a computer running a program has 5 parts: Processor: The part of the computer that computes. The CPU (central processing unit), generally.Instructions: This is what tells the computer what to compute. This is our code.Memory: This is that metaphoric scratch paper that the computer tracks it's work on. RAM (random access memory) is a classic example.Input: Anything we give the computer: clicking on a button, typing on a keyboard, entering text when prompted, etc.Output: Anything the computer gives us: displays on a monitor, sounds, text it prints to a terminal, etc. [TODO: steal Kobi's diagrams] For example, a game console running a video-game: Processor: CPU and GPU (graphics processing unit), I suppose.Instructions: The game's code.Memory: RAM.Input: Our button presses on a controller.Output: The displayed game and sound. "},{"title":"Hello, World​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#hello-world","content":"Let's take a look at that model withcertain famous program: Hello_World print(&quot;Hello, World&quot;)  Run this program to see what it does (click the green button in the upper right). note You do not need to understand the mechanics of what is happening at this point. Merely observing Hello, World is displayed by running this is sufficient to apply the model. So what's happing with each component of the model for a computer running this program? The processor is still the CPU and in processing the lines of code.The instructions are just print(&quot;Hello, World&quot;).The output is the printed Hello, World.The input ... well, there is no input used here.The memory ... well, it's used in really technical ways, but not really too relevant here. As it turns out, not every part of of this model absolutely has to be used. "},{"title":"Hello, You​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#hello-you","content":"Let's make it just a little more interesting: Hello_You # Receives your name from the input, # Then stores it in the memory (with the label 'your_name') your_name = input() # The processor adds &quot;Hello &quot; in front of your name # Finally, the processor sends the result to the output print(&quot;Hello, &quot; + your_name)  First of all, these lines starting with # are called comments, the computer ignores them. They exist for the use of humans reading the code. Run this program to see what it does. note You do not need to understand the mechanics of what is happening at this point either. Merely observing you are asked to input something and that that something shows up in the output is sufficient to apply the model. So what's happing with each component of the model for a computer running this program? The processor is still the CPU and in processing the lines of code.The instructions are those lines of code.The input is whatever we type in when prompted.The memory (is RAM and) is used to remember what you input, so that it can be used in the output.The output is the greeting you get. "},{"title":"Playing With Code​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#playing-with-code","content":"Some examples of code to play around with, to see what kind of cool things can be done. More are here Spirographs A pencil in a gear in a gear makes for some crazy doodles. Spirograph ######################################################## ### Play with these values to see how things change! ### R = 100 # radius of big circle r = 60 # radius of little circle d = 100 # distance from little circle center to pen steps = 100 # more steps for smoother curve draw_speed = 5 # higher numbers are faster ######################################################## from turtle import * from math import pi, sin, cos, lcm d_theta = (1 / steps) * 2 * pi * lcm(R, r) / R theta = 0 hideturtle() speed(draw_speed) color(&quot;blue&quot;) penup() goto(R - r + d, 0) pendown() for i in range(steps): theta += d_theta x = (R - r) * cos(theta) + d * cos(theta * (R - r) / r) y = (R - r) * sin(theta) - d * sin(theta * (R - r) / r) goto(x, y) done()  Koch Snowflake A snowflake with infinite detail, to bad we can only ever approach it. Koch ######################################################## ### Play with these values to see how things change! ### length = 250 # Length of a side depth = 3 # Level of recursion draw_speed = 5 # higher numbers are faster ######################################################## from turtle import * from math import sin def koch_forward(distance, depth): if depth == 0: forward(distance) else: koch_forward(distance/3, depth-1) right(60) koch_forward(distance/3, depth-1) left(120) koch_forward(distance/3, depth-1) right(60) koch_forward(distance/3, depth-1) hideturtle() speed(draw_speed) color('blue', 'white') penup() goto(- length / 2, - 3**(1/2) * length / 6) pendown() begin_fill() for _ in range(3): koch_forward(length, depth) left(120) end_fill() done()   caution From here on is post-lecture content, or notes about the lecture but not part of the lecture itself.  "},{"title":"Making and Running a Python File​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#making-and-running-a-python-file","content":"(This is post-lecture content, or notes about the lecture but not part of the lecture itself.) With any luck, when demonstrating the programs for the last section in class, I showed myself making the program. I'll record the procedure here for reference (it should also be in thedocumentation for the first lab) Note that this is the first lab, so don't feel obligated to do this now. This is also all assuming Python and VSCode are installed. Which again, is the first lab. "},{"title":"Make a folder​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#make-a-folder","content":"First step is to make a folder for the file to live in. Open your computer's file manage (e.g. Finder on Mac and File Explorer on Windows). Make a folder somewhere of you choosing. For example: I might have/make a school folder, and within that a CICS110 folder, and within that a labs folder, and within that would make a folder named 01-hello-world. Everyone has their own system, so do what makes sense to you. "},{"title":"Open that Folder in VSCode​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#open-that-folder-in-vscode","content":"We need to open that folder in out editor to do stuff in it (you can also make files directly, but I'm not demoing that approach specifically) Launch VSCode. (This of course assumes Python and VSCode are installed) Select File &gt; Open or File &gt; Open Folder, both seem to work. This notation means, &quot;within the File menu, select Open. This menu is likely in the upper left area of the application or you entire screen (depending on you operating system). [TODO: Include picture, maybe] "},{"title":"Make a File​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#make-a-file","content":"Select File &gt; New File .... VSCode will ask for a name for the file, I'll use the name hello.py. "},{"title":"Type code​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#type-code","content":"VSCode probably opened that file when you made it, but you can also explicitly open it for editing by clicking on its name in the Explorer within VSCode on the left. Type the line print(&quot;Hello, World!&quot;), and save. VSCode will have a dot next to the file's name if it is unsaved. You can also enable auto-saving somewhere, I believe. "},{"title":"Run the Code​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#run-the-code","content":"If you have the Python extension (technically an extension pack) by Microsoft for VSCode (you would need to get this, see the VSCode installation guide), there should be a play arrow/triangle in the upper right somewhere. If you click that, VSCode will open a terminal and run the code. You can also open the Terminal yourself via the menu Terminal &gt; New Terminal. You can then give the run command yourself by typing python3 [FILENAME] in the terminal and hitting enter/return, so in this case python3 hello.py(the extension is part of the name, as far as the terminal is concerned). "},{"title":"Lingering Thoughts​","type":1,"pageTitle":"The Syllabus, and Me, but Mostly the Syllabus","url":"/main/lectures/introduction/Jared#lingering-thoughts","content":"These are just some lingering thoughts I had. Aside: Difficulty One question I always have (though seldom explicitly ask) when I take a new class is &quot;how hard is this class&quot;? Sitting now in the instructor's seat I realise how difficult a question that is answer. In my experience, I have encountered 3 bucked of difficulty: Calculation difficulty: Where you have long and complicated calculations you have to do. A lot grunt work. Very easy to make careless mistakes. This is what I think of in higher level applied maths, physics, engineering.Definition/memory difficulty: Where there is a lot information to try and absorb at once. I've had math classes with too many definitions to track/juggle. This is also what beats me up in history (lots of information) or foreign languages (lots of vocabulary).Intuition difficulty: Where figuring out how to think about things is the challenge. This it what get me in the theoretical math and computer science classes. So how does this class rank in those? Calculation difficulty: It shouldn't be bad here. In fact, a not uncommon use for programming is to make these sorts or things easier. Have the robots do the long, easy-to-mess-up type of work.Definition/memory difficulty: I think will be an issue earlier on, but should hopefully ease up as we build a solid foundation.Intuition difficulty: This is where I would worry. From the overhead of getting more comfortable navigating a computer to taking the thoughts in your head and expressing them as a program. This is where I think the challenge in this class will be. But it's also I think the coolest to overcome, because when something deeply alien to you mind start to a bit of intuitive sense, there can be very satisfying &quot;I got it!&quot; and a rewarding sense of progress. Aside: Languages When I first learned some programming, I thought that the similarities between learning programming languages and foreign languages were tenuous at best. But now I think it can be instructive to consider the similarities. As you get more familiar with a foreign language, you find yourself doing a little less translation, and a little more &quot;native-thinking&quot;. Foreign languages have their own internal logic. The way that you express something has some nuance literal translation can't quite capture. You conceptualise things differently, in a way that makes sense in that new language, but that is really hard to articulate. Programming languages are similar in that regard. There are a lot of cognates, to be sure. But getting comfortable with programming also means developing that different way of thinking. Thinking about problems and tasks in a logic-flow way. We'll try to practice this more explicitly with flowcharts. But ultimately, I think practice, making mistakes, and solving problems is probably critical to the process. "},{"title":"Lec 17 Recursion","type":0,"sectionRef":"#","url":"/main/lectures/recursion","content":"Lec 17 Recursion Coming soon...","keywords":""},{"title":"Lec 21 URLLib and APIs","type":0,"sectionRef":"#","url":"/main/lectures/urllib-apis","content":"Lec 21 URLLib and APIs Coming soon...","keywords":""},{"title":"Lec 03 Variables & Assignment","type":0,"sectionRef":"#","url":"/main/lectures/vars-and-assignment","content":"","keywords":""},{"title":"Due this week​","type":1,"pageTitle":"Lec 03 Variables & Assignment","url":"/main/lectures/vars-and-assignment#due-this-week","content":"ZyBooks 1 Due Thursday (2/16) Covers Week 1 material Quiz Due Thursday (2/16) 9 Questions, Unlimited Attempts Lab Due Friday (2/17) "},{"title":"Slides​","type":1,"pageTitle":"Lec 03 Variables & Assignment","url":"/main/lectures/vars-and-assignment#slides","content":"Section 2, 3, 4, 5Section 1, 6 Download Powerpoint "},{"title":"Additional Resources​","type":1,"pageTitle":"Lec 03 Variables & Assignment","url":"/main/lectures/vars-and-assignment#additional-resources","content":"Arithmetic in Python (Socratica) "},{"title":"Lec 11 While Loops","type":0,"sectionRef":"#","url":"/main/lectures/while","content":"Lec 11 While Loops Coming soon...","keywords":""},{"title":"Variables","type":0,"sectionRef":"#","url":"/main/lectures/vars-and-assignment/Jared","content":"","keywords":""},{"title":"Assignment Updates​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#assignment-updates","content":"Stuff due this week: Reading 1: Due Thursday 2/16Quiz 2: Due Thursday 2/16Lab 2: Due Friday 2/17 Stuff due next week: HW 1: Due Wednesday 2/22Quiz 3: Due Thursday 2/23Lab 3: Due Friday 2/23[TODO: Reading? Presumably Thursday.] "},{"title":"Assignment Workflow​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#assignment-workflow","content":"Caveat that this is but one approach. In the fullness of time, everyone develops their own preferred workflows and ways of doing things. But for the purposes of getting started, here is one workflow. "},{"title":"Making a Folder​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#making-a-folder","content":"A lot of IDEs (Integrated Development Environments, fancy work for editors) have a sort of built-in assumption that you are working on the project level, where the project may have multiple files. So often, the IDE is working in/opening the project folder. And so we a need a folder on our computer to do work in. Open your computer's file manage (e.g. Finder on Mac and File Explorer on Windows). Navigate to where you want to make this new folder. For example: I might have/make a school folder, and within that a CICS110 folder, and within that a HW folder. Secondary click (right click on mouse, two-finger click on most trackpads, etc) in the finder where you want to folder to be to bring up a menu. Select either New Folder or New &gt; Folder depending on your operating system. Give the new folder a name, 1-variables, for instance. (You can secondary click on the folder to to bring up a menu that should have a Rename option, if need be.) "},{"title":"Opening a Folder​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#opening-a-folder","content":"We need to open that folder in our editor to do stuff in it (you can also make files directly, but I'm not demoing that approach specifically). Launch VSCode. Select File &gt; Open Folder. This notation means, click the File menu and then select Open Folder from the dropdown. This menu is likely in the upper-left area of the application or you entire screen (depending on your operating system). "},{"title":"Making a File​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#making-a-file","content":"Select File &gt; New File .... VSCode will ask for a name for the file, give it a name ending in .py, e.g., hello.py. You need to specify that .py extension. "},{"title":"Running a File​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#running-a-file","content":"Finally, if you installed the extension packet from theVSCode installation guide, then there should be a play-button-like triangle in the upper-right of the python file. Simply click that button and VSCode will open a terminal and run the file for you. Extra: Running the File via Terminal You can deliberately open a terminal in VSCode via the menuTerminal &gt; New Terminal. In the terminal, typing python3 followed by a file name will run that file, e.g., python3 hello.py. "},{"title":"Parts of a Program​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#parts-of-a-program","content":"A program can be considered in terms of the information is is keeping track of, and what it is doing with or based on that information. The information, or data, or objects, correspond with the memory part of out model of a computer running a program. What it does with that, or the logic, corresponds to the instructions part of out model of a computer running a program. This lecture (and last) focusses on the data/objects portion. "},{"title":"Proto Memory Diagrams​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#proto-memory-diagrams","content":"[TODO: I really need to figure out diagrams. I just don't have tiiiiiiiiiiime. Maybe once spring break hits.] "},{"title":"Variables​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#variables-1","content":"Variables are a way to store and track information. Some people find the analogy of labeled boxes helpful, where objects are put into boxes labeled by the variable name, and can then be referenced by that variable name. For instance: Variables x = 2 y = 1.5 z = x + y print(z)  So what does each line here do? x = 2 assigns the int 2 to the variable x.y = 1.5 assigns the float 1.5 to the variable y.z = x + y first evaluate x + y, which is 2 + 1.5, which is 3.5 (a float); and then stores that in z.print(z) prints z, which 3.5. Importantly, variables can be overwritten. Take the following: Variables_Overwrite x = 2 y = 1.5 z = x + y print(z) x = -3 print(x) print(z)  So what does each line here do? The first 4 lines are the same as before. x is the int 2.x is the float 1.5.z is the float 3.5, which is printed. x is set to the int -3.x, which is now -3, is printed (so -3 is printed).z, which is still 3.5, is printed (so 3.5 is printed). "},{"title":"Legal Names​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#legal-names","content":"There are some important rules to remember about variable names: Names must be composed of only letters, numbers, and underscores _.Names may not begin with a number (must start with letter or _).Names are case-sensitive. E.g., Foo and foo are different variables. Examples of legal variables names: Foofoof00_foofoo_bar_42 Examples of illegal variables names: 314_Foofoo! "},{"title":"Good Names​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#good-names","content":"Just because a name is legal doesn't mean is is &quot;good&quot;. You would ideally like variables names to articulate something about how they are used. For example, say I have a program that takes in a number representing temperature in degrees Fahrenheit and converts it to degrees Celsius. I could reasonable name that input variablefahrenheit, Fahrenheit, degrees_F, or even F. If I named it foo, potatoes_per_cubic_yoctogram, of a, that would be profoundly unhelpful to anyone subsequently viewing that code, my future self included. The goal is to try to have that name make sense for the context it is in. "},{"title":"Memory Diagrams​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#memory-diagrams","content":"This is a diagram, go look at the slides for now. [TODO: Figure out how to import multi-image diagrams] "},{"title":"The input() Function​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#the-input-function","content":"The input() function gets input from the user(i.e. whoever is running the code, generally us in this case). The input() function may optionally take in a string, which is used as text to display when prompting the user. The output, or return, of the input() function is whatever the user typed in, as a string. Take for example this program (that perhaps looks familiar): Hello_You your_name = input(&quot;Please enter your name: &quot;) print(&quot;Hello, &quot; + your_name)  Go ahead and run it on the website. Then run it VSCode. Notice the different ways you can be prompted for input. The website pops up a dialogue box, but the need to enter input into the terminal is less obvious: $ python3 hello.py Please enter your name: Jared Hello, Jared  I typed in that &quot;Jared&quot; and hit the return/enter key. Now see what it looks like without specifying the prompt for the input function. Hello_You_Quite your_name = input() print(&quot;Hello, &quot; + your_name)  The website still pops up a dialogue box, but there is no indication (other than the terminal not prompting for another command) of the need to enter text into the terminal: $ python3 hello.py Jared Hello, Jared  "},{"title":"Looking Back​","type":1,"pageTitle":"Variables","url":"/main/lectures/vars-and-assignment/Jared#looking-back","content":"We haven't explored functions yet, but with just the idea of function as black boxes taking inputs and giving outputs, we now have all the pieces to understand this program: your_name = input(&quot;Please enter your name: &quot;) print(&quot;Hello, &quot; + your_name)  The first line is your_name = input(&quot;Please enter your name: &quot;): &quot;Please enter your name: &quot; is a string, we pass that the the function input().input(&quot;Please enter your name: &quot;) then uses that string as a prompt to solicit input from the user, and returns that input.your_name = input(&quot;Please enter your name: &quot;) captures that returned input, and stores it in the variable your_name.So if I entered Jared as the input, then your_name would hold &quot;Jared&quot;. The second line is print(&quot;Hello, &quot; + your_name): Again, your_name contains the string &quot;Jared&quot; in this step-through example.The expression &quot;Hello, &quot; + your_name evaluates to &quot;Hello, Jared&quot;.print(&quot;Hello, &quot; + your_name) then prints Hello, Jared to the terminal.  caution From here on is post-lecture content, or notes about the lecture but not part of the lecture itself.  Instructor's Outline This is an outline I had in the replit when demonstrating things. ############################ ### Instructor's Outline ### ############################ # Making a Folder # Open Finder/File Navigater # Navigate to desired location # Could just use desktop # Seconary Click -&gt; New Folder # Opening Folder # Launch VSCode (or equivalent) # Navigate to folder you made # Makeing a File # File -&gt; New File # Give it a name ending in .py # Run Script # (Make sure extension is installed) # Click the Triangle in the upper-right # Return to slides # input() Function # Solicits input from user # Can take in nothing or a string # Optional string is printed when soliciting input # Returns whatever user typed in (as a string) # Example: Hello, You # Example: Repeat n times # Return to slides  "}]