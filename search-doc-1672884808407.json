[{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":""},{"title":"Test","type":0,"sectionRef":"#","url":"/about","content":"Test aaaaaaa","keywords":""},{"title":"tt","type":0,"sectionRef":"#","url":"/assignments","content":"tt","keywords":""},{"title":"Welcome!","type":0,"sectionRef":"#","url":"/guides","content":"Welcome! Welcome to the guides section of the CICS 110 website. These guides exist to provide you with a reference for the topics we cover in class. If you have any questions about the guides, please contact an instructor. The guides can be found in the sidebar on the left.","keywords":""},{"title":"Guide to Exams","type":0,"sectionRef":"#","url":"/guides/exams","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#overview","content":"In-class exams will be held during the lab session. Lab attendance is required to complete the exam. All exams are hosted on Moonami/Moodle, and you will need a laptop to take the exam. Midterm exams are 50 minutes long, but you are allowed to leave once you are finished. It is your responsibility to ensure your device is working when the exam starts, you don't want to spend the first 10 minutes connecting to the internet! "},{"title":"Requirements​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#requirements","content":"To take the exam, you must attend the lab session you are enrolled in. If you cannot make the lab time you have enrolled in, it is your responsibility to reach out to your Instructor at least a week ahead of time to make accommodations. It is your responsibility to Bring your own laptop and uCard.Ensure your laptop is charged when you arrive at the exam. If you laptop does not hold a charge, you are responsible for bringing a charger, but we cannot guarantee you will be able to sit near a functioning outlet. Ensure your laptop is connects to Eduroam, and gets a connection in lab room. If you do not own a laptop, your laptop is not working, or your laptop is out for repairs: Borrow a friends laptop for the lab period.Use the library's laptop borrowing program. There are a limited number of laptops, but we rarely see them run out. Go to the Learning Commons Desk in the lower level of the W.E.B. Du Bois Library to check on their availability. Laptops are 3 day loans for free. There is a $10/day late return fee up to $50.Use another internet connected device. A phone is not advisable, but a tablet should suffice. "},{"title":"Preparing for the Exam​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#preparing-for-the-exam","content":"One week prior to every exam, an announcement will be made detailing Exam Coverage: the zyBook chapters and lectures that the exam questions testExam Structure: the types of questions you can expect, maybe with an estimate of how many of each You will be able to freely navigate between the questions during the exam. The Supplemental Instructor (SI) for the course will usually host an exam review session the week of the exam. They will have not seen the exam, but are prepared to help you study for the exam. "},{"title":"Taking the Exam​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#taking-the-exam","content":"Before you start the exam, we ask that you close all other tabs and windows. This includes, but is not limited to VSCode/other editorszyBooksPiazzaOnline resources Once you have completed the exam, you will be asked to show course staff your uCard. Staff will make sure you have submitted your exam, and check you out. "},{"title":"Academic Honesty​","type":1,"pageTitle":"Guide to Exams","url":"/guides/exams#academic-honesty","content":"During the exam, the expectation is that you do not leave the exam window. You should not need to tab out during the exam. Use of your laptop or a secondary device during the exam to view textbooklabsonline materialsinstant messages or email are all academic honesty violations, and may lead to you getting a zero on the exam or in the course. Do not do it. It is not worth it. "},{"title":"How to use Piazza","type":0,"sectionRef":"#","url":"/guides/how-to-piazza","content":"","keywords":""},{"title":"Using Piazza​","type":1,"pageTitle":"How to use Piazza","url":"/guides/how-to-piazza#using-piazza","content":"To ask a question, click the New Post button in the top left corner:  You'll then be presented with the following screen:  99% of the time you'll want to pick Question. Public posts are Entire Class, private posts are Individual Student(s)/Instructor(s). If you pick the latter, typing Instructors posts to the entire staff. You can also post to just your instructor if you need to, put we're prefer you reserve this for personal matters. Then select a folder based on what your question is about, type up your question. Before you select Post My Question/Note, you can chose if you want your question to have your name shown, or be anonymous to classmates. It's up to you, but I know from personal experience it's much easier to ask questions anonymously. "},{"title":"How to ask for Help​","type":1,"pageTitle":"How to use Piazza","url":"/guides/how-to-piazza#how-to-ask-for-help","content":"There are three main types of questions Approach-based questions: How do I start Todo 4 in the project? Code-specific questions: Why is my code not working how I want it?Logistical questions Piazza is great for approach-based questions. We highly recommend that you make these posts public. That way other students can see the questions, as well as discuss them or even answer them. If you are shy about asking your classmates for help, you can always post anonymous! Posting publicly is also a huge help to us, since it prevents us from asking the same question over and over again. For more on code-specific questions, see the Posting Code section. For logistical questions, you can either post public or private. It's up to your discretion based on the question you want to ask. "},{"title":"Posting Code​","type":1,"pageTitle":"How to use Piazza","url":"/guides/how-to-piazza#posting-code","content":"A classic question that we see every semester is Why is this not working? with an image of someone's source code attached. This is an academic honesty violation, and is also usually hard for us to answer without just giving you the solution. Firstly, do not ever include your source code for an assignment in a public Piazza post.Posting your code to the entire class is code sharing, and is therefore an academic dishonesty violation per the academic honesty policy detailed in the syllabus. We take this very seriously, so please do not do it. Instead, If you have a question about zyBooks or zyLabs, please make a public post directing us to the specific section and question. We can see your submissions, and will respond to your post either with general pointers, or even with what you should look to change. Example: I've been stuck on section 2.15 of the lab. Can you give me some pointers? If you have a question about an assignment, please first submit your current code to Gradescope. Then, ask your question and include a link to your Gradescope submission at the bottom. Example: I am stuck on Todo 4, specifically the part with getting the print formatting right. Any advice? Gradescope link: link to submission Lecture code and code in the homework exercises are fine to be posted. In fact, we encourage you as students to try to respond to these! Just make sure you err on the side of leading the student in the right direction. Do not give them the answer directly (again, academic honesty is important to us). "},{"title":"Kobi's Everything Doc for CICS 110","type":0,"sectionRef":"#","url":"/guides/design_doc","content":"","keywords":""},{"title":"Things to ask:​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#things-to-ask","content":"How much should we meet? Currently is once a week. I think twice a week would be better since we are continually creating stuff. Since we are making stuff, we often will need to discuss next steps so we stay in sync. We also need to make sure that what we create is good, and I imagine the way we do this is by meeting and sharing what we did. Meeting twice a week would allow us to have more discussion about what we are doing, and would allow us to catch mistakes or miscommunications sooner. What do people's winters look like? I have something from the 9th-11th, anyone else have things they have planned in advance? What are goals for the winter? Add to this document the results Goals for a slide template Black/White was mentioned, anything else? Should we make an Agenda before each meeting? If we want to, put all of this on it "},{"title":"Units:​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#units","content":""},{"title":"1. Foundation of programming​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#1-foundation-of-programming","content":"Notes:​ Learn Modules in a Lab? I think it would be a good lab assignment to learn how to use the math or the random library. Goals:​ Introduce the course and instructorThe model of a computerComputational thinkingThe basics of python Content:​ Introduction to the course and instructorModel of a computerComputational thinking (how to read a program)Literals - ints, floats, stringsExpressions (arithmetic only: +, -, *, /, //, %, **, parenthesis) Order of operationsint vs float VariablesMethods on all literals+variables - type, idMethods on specific literal types (str, int, float) "},{"title":"2. Data types​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#2-data-types","content":"Goals:​ Sequence typesother types (dictionaries, sets but not Booleans or None)Mutability and Ordering and what this means on a lower level (memory/model of computer)Basic operations on these types Content:​ Sequence Types: Lists, Tuples, StringsIndexing, len, +, *, slicingMutability in the global frame - related to the model of a computerList and String methodsDictionaries and Sets, and their operations "},{"title":"3. Conditional Control flow​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#3-conditional-control-flow","content":"Notes:​ For all pieces of control flow, there will need to be multiple practice assignments involving going to/from diagrams. This is in addition to practice problems. Goals:​ Introduce boolean logicIntroduce if elif else statementsUnderstanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Content:​ Booleans - True, False, and, or, notComparison operators - ==, !=, &lt;, &gt;, &lt;=, &gt;=Other ways to make booleans - is, is not, in, not inIf statements - if, elif, else (nested if statements)Detecting ranges of values - if 0 &lt;= x &lt;= 10Making Control Flow Diagrams "},{"title":"4. Looping Control Flow​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#4-looping-control-flow","content":"Notes:​ For all pieces of control flow, there will need to be multiple practice assignments involving going to/from diagrams. This is in addition to practice problems. Goals:​ While and for loops (with nesting)Understanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Break and Continue and how they relate to control flow diagramsCommon Mistakes with Loops Infinite loopsForgetting to increment/decrementForgetting to change the condition List and Dictionary Comprehensions Content:​ While loops - Extension of if statements Do not go over else for while loops Break and Continue (in the context of while loops)For loops - for, range, in Do not go over else for loopsGo over break and continue in the context of for loops Comprehensions List ComprehensionsDictionary ComprehensionsTernary Operator for Comprehensions Miscellaneous Zip, Enumerate "},{"title":"5. Files and Modules​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#5-files-and-modules","content":"Goals:​ What is a module and how to import itUnderstand standard modulesIntroduce the idea of files and how they relate to the model of a computerGet students to write and read text from filesWhat are csv files, and how to read and write them using the csv module Content:​ Importing a moduleUsing more complex modules (time, os, sys)What is a fileOpening and Closing a fileReading and Writing to a filecsv module Reading and Writing to a csv fileDictReader and DictWriter "},{"title":"6. Functions​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#6-functions","content":"Goals:​ Understand that a function is a self contained piece of logic (high level)Understand that a function is a block of code that can be called multiple times (low level) and that it can save time while programmingUnderstand that a function can take in parameters and return a valueUnderstand None and how it relates to functionsBasics of recursion (base case and recursive case)Understanding Control Flow Diagrams Go from problem to control flow diagramGo from control flow diagram to programGo from program to control flow diagramGo from control flow diagram to problem in words Introduce Making a Module and importing itIntroduce concept of main python file Content:​ High level analogy of a functionDefining a function that receives no parameters and only prints Calling a function Defining a function that returns a value difference between print and returnReturning tuples as a way to return multiple values Unpacking tuples None What is it - a special value that represents nothingHow it relates to functions - functions that do not return anything return NoneWhy it is important - it is important to understand that functions always return somethingHow to check if a function returns None or a value is None Defining a function that receives parameters Positional parametersKeyword parameters (Not sure if needed)Default parametersVariable number of parameters (Not sure if needed) Making a module What is a moduleHow to make a moduleMain python file concept Function documentation Documenting the type of parametersDocumenting the type of return valueDocStrings in generalHow to access the documentation of a function (in vscode for example)How to read function documentation Recursion (basics only) Base caseRecursive caseControl Flow "},{"title":"7. Miscellaneous​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#7-miscellaneous","content":"Notes:​ This unit will be a catch all for anything that is not covered in the previous classesLikely 1 class period each (except classes which will be 2-3), and an associated practice assignment Goals:​ Object Oriented Programming Introduce the concept of a classWhat is a class conceptually (high level)What is a methodWhat is an attribute Event Driven Programming Not sure what this is yet. Need to discuss with Tim. If event driven programming is async...await, see next note. Otherwise I will need to research this.Note: Some languages have a built in concept of events, like js's promises. Python does not have this. But, there are libraries like asyncio, must be pip installed, that can be used for async...await keywords. Introduce the concept of a library What is a libraryPip and how to install a libraryHow to import a libraryHow to use a library Exceptions What is an exceptionHow to handle an exception (try catch)Common exceptions Content:​ Object Oriented Programming High level analogy of a class (object)Defining a classInstantiating a class and __init__ methodDefining and accessing attributesDefining and calling methodsOverriding built in methods (str, mul, etc) Event Driven Programming See notes in goals section Libraries What is a libraryPip and installing a basic library (matplotlib maybe?)Importing a libraryUsing a libraryLooking up documentation for a library Exceptions What is an exceptionHow to handle an exception (try except)Common exceptions  "},{"title":"What I'm Currently not covering​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#what-im-currently-not-covering","content":"(Unfinished, need ZyBooks chapters 7-13)​ String Arithmetic Stuff like string concatenation, string multiplication, etc. I think this would be good for an introductory Lab or assignment to get them used to looking things up Type Casting I think I might want to include this, but I forgot about it initially. It might be good for a lab, but I might just shove it in in lecture 3 or 4 f-strings Another good thing for an introductory lab or assignment. Students didn't really use this (and usually forgot about it) so I think it would be good to have them use it in a lab or assignment to practice it/ hopefully remember it. Compound Operators (zybooks 2.6) I'll cover this in the while loop section, but not when it comes in the zybooks (unit 2)This is stuff like +=, -=, etc. It seems like another thing I could mention in class, but I'll already be overwhelming them with new stuff at that point. I think it would be good for a lab or assignment, or as a trick they learn after they write z = z + 2 a bunch of times. The number representation of a character (zybooks 2.10) This seems really cool, but it would just be another thing I'm throwing at them. The biggest complaint I got last semester was that there were too many things thrown at them, and they forgot a bunch because they never used them. I think this would be good for a lab or throughout a big assignment, but not in class. named tuples (zybooks 3.3) I've never used this. My friends who work with python every day have never used this. I don't think we should include this. Can we just skip it? Binary Numbers (zybooks 3.9) I think this is too much detail for an intro class. This would never be needed in python realistically. We could expose it for a lab assignment or exercise, but if I include it in class students will just forget about it. It also doesn't really fit in with the rest of the unit, and we didn't cover it last semester. Comparison Chaining (zybooks 4.4) Just found out about this while looking at the ZyBooks. It's pretty cool, apparently you can do 5 &lt; x &lt; 10 and it will check if 5 &lt; x and x &lt; 10. I think this would be good for a lab or assignment, but it's just another forgettable detail. For in strings (zybooks 5.5) I think this is a good thing to include in a lab or assignment, but I don't think it's necessary to include in class. It's just another thing to throw at them.  "},{"title":"What I'm covering but definitely needs to be practiced​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#what-im-covering-but-definitely-needs-to-be-practiced","content":"(Unfinished, need ZyBooks chapters 7-13)​ Everything! Well not really, but here are a few things that I think need to be practiced a lot more than I can in class Basic Datatype methods (Methods on Strings, ints, floats, Sets, Lists, Dictionaries, Tuples) I think we should have a lab or assignment where students have to look up and use a bunch of string, int, and float methods. I think this would be good practice for them to get used to looking things up. Also, introducing a grid of them in a class doesn't really help them remember them.There are some basic things that will be included (indexing for example) but there are a bunch of string methods that they will only see in a grid of string methods, and they will forget about them unless they need to use them in practice. Floats vs Ints They will need practice on this. Just teaching them the difference isn't enough. They need to practice it. Lists and Modulo Modulo is useful for indexing lists so you don't index out of bounds. This would be good for an exercise Using the math and random modules I expose them to this in the first week, but then don't touch it for a while. It would be good to use them occasionally in exercises so they don't forget about them. Boolean Arithmetic I cover and, or, not and stuff, but in practice (especially for the problems they see which are introductory) they don't usually need them. We should either have the exercises require complex boolean arithmetic, or have them straight up write code that matches a boolean arithmetic expression or something. While loops All sorts of while loops with different step conditions. For loops Looping through Lists I will expose in class, but dictionaries, sets, tuples, strings, and other things will need to be practiced. Lists should also be heavily, if not the most heavily, practiced. Reinforce How Range works This is important to reinforce Comprehensions This is a really useful feature, please give them a lot of practice with this. They shouldn't just practice list comprehensions, they should practice dictionary and set comprehensions as well. But, probably not generator comprehensions since that's a weird can of worms. Enumerate and Zip I'll cover, but they are pretty useful (especially enumerate) so they should be practiced a lot. Nested Loops Needs practice before they can understand. Designing function signatures Students struggled with identifying what parameters a function should take in. They need practice with this.They should also use docstrings to document their functions so they can list the return type and parameter types.Or at least whatever this is called: (I think this is called a function signature, but the docstring is the documentation) def is_num_and_str(num: int, string: str) -&gt; bool: Expose them to function stubs (the above syntax) so they can write the function signature before they write the function body too. This will help them design the function signature. Print Vs Return Need to practice. Or, more likely, realize when they are printing and need to return  "},{"title":"Class timeline + Overview:​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#class-timeline--overview","content":"Budgeting 21 classes (1 class = 75 minutes) underbudgeting so things can be moved around if needed. Note: Units 3 and 4 will need a LOT of practice work so the content can sink in. #\tUnit\tContent1\t1\tIntro + Model of Computer + Computational Thinking 2\t1\tLiterals + Hardcoded Expressions 3\t1\tVariables + Object functions + Literal Methods 4\t2\tLists/Tuples/Strings + Operations + Mutability 5\t2\tDicts/Sets + Operations + Practice 6\t3\tBooleans + if 7\t3\tif..elif..else + Control Flow 8\t3\tPractice Day: Control Flow + Debugger 9\t4\tWhile loops + Break/Continue + Control Flow 10\t4\tFor Loops + Control Flow + Practice 11\t4\tComprehensions + Enumerate/Zip + Practice 12\t5\tImporting modules + Standard Module Practice 13\t5\tWhat is a file + Opening/Closing + Writing/Reading Text 14\t5\tWhat is a csv file + csv module/DictReader + practice 15\t6\tWhat is a function + Why + Functions without parameters + None 16\t6\tFunctions with Parameters + Control Flow + Practice 17\t6\tCustom Modules + Documentation + Recursion 18\t7\tOOP philosophy + Class analogy + Class with constructor + attributes/accessing/dictionary comparison 19\t7\tMethods + Overloading + Practice 20\t7\tWhat is Pip + Installing a library + Using the library + looking up documentation 21\t7\tWhat is an Exception + Exception Vs Error + Types of Exceptions + Try/Except  "},{"title":"Labs and Assignments​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#labs-and-assignments","content":"Note: I do not know what Labs/Assignments should look like. These are just my preconceived notions of what I expect them to be (mainly so I remember to ask in a meeting if these are accurate/require any changes). "},{"title":"Assignments​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#assignments","content":"I imagine there will be weekly assignments. Each assignment will contain: 5 Exercises These will be pretty straightforward (5-15 lines of code each)They will have documentation for each exercise, and may introduce a simple concept or method on a data type. For example, there may be an exercise that introduces the string method: .toLower() which makes all letters lowercase. 2 Challenges These will be more complex (20+ lines of code, or using multiple concepts layered etc.)Will have documentation and likely will introduce a more complex methodRequire a complex control flow These should also feel (more so than the exercises) to be a meaningful task. I imagine some exercises will just be do X, without the context of why they are doing X. The challenges should have context, and should be a meaningful task. "},{"title":"Labs​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#labs","content":"Each week will have a lab unless there is an exam (do we have exams?) What I imagine a lab is: Introduces a new concept: Should be a new concept that is not directly covered in class. I want this because there are a bunch of concepts that I want to cover, but if I were to introduce them briefly in class only students will forget them. It will also make class periods more confusing to cover one-off methods or concepts, but they could totally be learned in the lab. Collaboration: Students should work in teams of 2 (3 if there is an odd number of people). According to people in 121, 4 is too many, so defiantly split to 2 groups of 2.There should be periodic times in the lab where students should check in with a TA or UCA in the lab. This is to: Make sure they are on the right trackMake sure all group members know whats going onEncourage discussion (hearing people talk also encourages discussion)  "},{"title":"Exam(s)​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#exams","content":"This is just my thoughts: We had exams in the fall. However, I'm not sure about the value of exams. The purpose of an exam, from my understanding, is to verify how much each student understands about the topic. Students will have weekly assignments, and will have a lab every week. I think that the assignments and labs will be a better indicator of how much each student understands. Students who don't understand a concept will struggle with that week's exercises, challenges, and Lab. This lack of understanding will therefore be present in the grade. Additionally, most of the exam questions we had in the fall were very pinpointed. There were many questions on specific edge cases. This is what most CS exams end up with since a question needs to be specific to have a multiple choice answer. However, this also means that grades on the exam are very dependent on the student's ability to memorize edge cases. I don't think this is not a good indicator of how much the student understands the topic. On the other hand, having a lab I think is a better environment to evaluate this. In a lab, students write a program. This program is a good indicator of how much the student understands the topic. This is because the program is a direct result of the student's understanding of the topic. If the student doesn't understand the topic, they will struggle to write the program. If they do understand the topic, they will be able to write the program. A worry that could exist with this is that we are testing the group of 2-3 student's knowledge instead of an individual student. However, I think this is a good thing. In the real world, students will be working in groups. This is a good way to prepare them for that. Additionally, if we feel that the groups are inhibiting our ability to determine how much students understand, we can just make the lab sections that would have been exams, into labs without groups.  "},{"title":"The Website​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#the-website","content":"Note: This is just my thoughts on the website (mainly so I don't forget). This just reflects my understanding of what we want on the website. So if something should be here, let me know because I probably forgot. Also, if something should not be here, let me know because there is probably a misunderstanding on my part. Schedule I wanted the office hours on the website so it was easy to view Potentially with a react calendar component I wanted the class schedule with topics for each class period So students could get an understanding of what we were going to cover Slides + In class content I wanted the slides on the website so students could view them at home Embedded PowerPoint slides or google slides Code used in class Doesn't need to be the result of live coding in class (but that would be cool)Could be prepared in advance (an answer key for in-class activities basically)Want to add functionality to run python code in the website. Doesn't look that bad and would be cool. For Me: Lookup live-brython again Assignments: Exercises + Challenges Should have the documentation on the websiteShould store the base code (if there is any) on the website Labs Should have the documentation on the websiteShould store the base code (if there is any) on the website Guides Wanted to address common issues (like how to install python) with guides on the websiteWanted to go over topics (like how to define a function) with guides on the website so it was easy for students to reference People Wanted to have a page with information on the instructors, TAs, and UCA's Picture, name, email, office hours, etc. Course Information Wanted to have a page with information on the course Course description, course goals, Unit overviews, etc. Syllabus Helpful Resources Wanted to have a page with helpful resources outside of the course Information on SI sessions, helpful youtube channels, tutoring from CICS 298A, etc. Announcements Wanted to have a page with announcements Important announcements, reminders, etc. Forms Wanted to have a page with forms Feedback form, Extension form, etc.  "},{"title":"Each Week: (Unfinished)​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#each-week-unfinished","content":" "},{"title":"Class 1:​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#class-1","content":"Prior: N/A​ Goal: Introduction, Introduce the Model of a Computer, First Program Demo​ Content: Introduction - Introduce InstructorSyllabusCourse GoalsModel of a Computer Goal: Build up to understanding each line of the first programHas 5 Parts: Instructions, Memory, Input, Output, and Processor Introduce Computational Thinking Goal: Build up to understanding how to read the first programIntroduce how to read a program (top to bottom)Analogy that a program is like a recipe First Program Demo Goals: Identify how each line of the program relates to the model of a computer. Understand how to read a program. Program: Takes in user's name, stores it, and then prints out hello, {name}Students should not understand the code entirely. Specifically, they won't understand the storage of the name in memory. Tell them that we will go over the details more later, and just brush over it saying that it is storing the name in memory, and it can be referenced with the variable (think math relation).  "},{"title":"Class 2:​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#class-2","content":"Prior: Students should have downloaded and installed Python​ Goal: Expressions with literals, a program to do hardcoded math​ Note: I want to do expressions before variables. I had many students that struggled to realize that variables stored the result of an evaluated expression. I want to introduce variables after expressions with the goal of having the students understand why they might want to store the outputs of lines of code. Content: Review the first program Goal: Reinforce the idea that a program is a recipe and that each line of code interacts with the model of a computerHave students identify the parts of the model of a computer that each line of code interacts with, and walk through the program line by line again Literals Goal: Introduce the idea of literals to build up to using them in hardcoded expressions Starting from a model of a computer: Introduce the idea of a literal as a value that is not stored in memoryGive examples of literals: 1,2,3 &quot;hello&quot; Don't introduce types yet (overcomplicates things and not needed for goal) Diagram of literals in memory Activity: Printing Literals Goal: Get students used to making a file and coding in it. Have them print out literals Have students make a file (have them each pick their own name)Have them print out a literal for their nameHave them print out a literal for their favorite foodHave them print out a literal for their favorite numberHave them print out a literal for their hobby (what they like to do in their free time)After they have done this, and have it working, have them show their neighbors to foster discussion and as an icebreaker Hardcoded Expressions Goal: Introduce Operators to form hardcoded math expressions Introduce operators: +, -, *, /, ** (don't do modulo or floor division yet so they can draw parallels to math)Introduce parenthesis, and how they can be used to change the order of operationsLive Code: Instructor writes out hardcoded expressions and evaluates them. Things like 1 + 2, 1 + 2 3, 1 + 2 3 / 4, etc. Closing Activity: Evaluating a complex math problem Goal: Teach students that python can be used to evaluate complex math problems Put 2-3 complex math problems on the board with 5 digit numbers and stuff like thatHave students evaluate the problems, tell them they can do it by hand, or with python (they will quickly realize it will be easier to do it with python)Have them compare their answers with a neighbor to make sure they are accurateGo over the problems and live code the solutions  "},{"title":"Class 3:​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#class-3","content":"Prior: Students should understand literals and expressions​ Goal: Introduce variables, assignment, input, then have them make write a program that stores and uses input​ Content: Review Hardcoded Math Expressions Goal: Reinforce the idea that python can be used to evaluate complex math problems Have students evaluate new problems, tell them they can do it by hand, or with python (they will quickly realize it will be easier to do it with python)Have them compare their answers with a neighbor to make sure they are accurateGo over the problems and live code the solutions Variables Goal: Introduce the idea of variables as a way to store the result of an expression. Introduce how variables are stored in memory (Model of a Computer)  "},{"title":"Concepts: (Unfinished)​","type":1,"pageTitle":"Kobi's Everything Doc for CICS 110","url":"/guides/design_doc#concepts-unfinished","content":"Model of a Computer​ Has 5 Parts: Instructions, Memory, Input, Output, and ProcessorStudents should be able to identify how each line of code interacts with the model of a computer Computational Thinking​ Students should be able to identify how to read a program (top to bottom) "},{"title":"Installing Python on Windows","type":0,"sectionRef":"#","url":"/guides/installing-python/windows","content":"","keywords":""},{"title":"Make sure you don't already have Python​","type":1,"pageTitle":"Installing Python on Windows","url":"/guides/installing-python/windows#make-sure-you-dont-already-have-python","content":"Open the start menu and search for &quot;cmd&quot; (or &quot;command prompt&quot;)Type python --version and press enter. If you get a message saying &quot;python is not recognized as an internal or external command&quot;, you do not have Python installed. If you get a message saying &quot;Python 3.6.1&quot; (or any other set of numbers), you already have Python installed. "},{"title":"Installing Python​","type":1,"pageTitle":"Installing Python on Windows","url":"/guides/installing-python/windows#installing-python","content":"Go to the Microsoft store websitehttps://apps.microsoft.com/store/detail/python-311/9NRWMJP3717K?hl=en-us&amp;gl=us Click the &quot;Get in Store App&quot; button (should open the microsoft store app) Click the &quot;Get&quot; button. This will download and install Python. When it is done installing, follow the steps above to verify that you have Python installed successfully. "},{"title":"For if things go wrong​","type":1,"pageTitle":"Installing Python on Windows","url":"/guides/installing-python/windows#for-if-things-go-wrong","content":"Other methods of installing Python on Windows are available, but are not recommended. Contact an instructor if you have trouble installing Python using the method above. Or, try one of the following methods. caution These methods are not ideal, they have more risk of not working. If you have trouble installing Python using the method above, try one of the following methods. Try these at your own risk (though they should still work fine) Download the latest version of Python from the Python website. Make sure to select the &quot;Add Python to PATH&quot; option when installing.Install Python using Chocolatey. This is a package manager for Windows. You can install Chocolatey by following the instructions on their website. Once you have Chocolatey installed, you can install Python by running choco install python in the command prompt.Install Python using Scoop. This is another package manager for Windows. You can install Scoop by following the instructions on their website. Once you have Scoop installed, you can install Python by running scoop install python in the command prompt. "},{"title":"Software Setup","type":0,"sectionRef":"#","url":"/guides/setup","content":"Software Setup These guides serve to get your laptop configured with the software you will need to succeed in CICS 110. This includes Setting up PythonSetting up VSCode","keywords":""},{"title":"Python Live Code Blocks","type":0,"sectionRef":"#","url":"/guides/live_python","content":"","keywords":""},{"title":"Hello World you can run​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/live_python#hello-world-you-can-run","content":"To make a runnable code block, add live_py to the code blockThe code block will have a play button in the top right corner, click it to run the codeThe code can be edited and run again on the website No need to change any source code I don't know why the subtitles are in german print('Hello World')  "},{"title":"Hello World Not Runnable​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/live_python#hello-world-not-runnable","content":"For Reference, here is a code block that is not runnable print('Hello World')  "},{"title":"Adding a title​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/live_python#adding-a-title","content":"To add a title to the code block, add title=My_Title to the code blockIf you want a space in the title, use _ or - instead of a spaceIf you want an '_' or '-' in the title, use __ or -- instead of a single one Hello-World,-with-a-title print('Hello World, with a title')  "},{"title":"Hello World \"slim\"​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/live_python#hello-world-slim","content":"The slim version is a little smallerDoesn't display the titlePlay button is inlineTo make a slim code block, add slim to the code block can't_see_me print('Hello World slim')  "},{"title":"You can use a turtle too:​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/live_python#you-can-use-a-turtle-too","content":"Can import turtle and use itCan save the drawings to a file the download button is in the top right of the turtle window turtle_example from turtle import * color('red', 'yellow') begin_fill() while True: forward(200) left(170) p = pos() if abs(p[0]) &lt; 1 and abs(p[1]) &lt; 1: break end_fill() done()  "},{"title":"Importing Default Libraries​","type":1,"pageTitle":"Python Live Code Blocks","url":"/guides/live_python#importing-default-libraries","content":"Can import and use various libraries that are included by default Link to standard library: https://docs.python.org/3/library/index.html Warning: This has a large output fetching_json from urllib.request import urlopen import json # A Url that returns JSON data (without requiring authentication) url = &quot;https://pokeapi.co/api/v2/pokemon/ditto&quot; with urlopen(url) as response: body = response.read() body_parsed = json.loads(body) print(json.dumps(body_parsed, indent=2))  "},{"title":"Setting up Python","type":0,"sectionRef":"#","url":"/guides/setup/python","content":"Setting up Python","keywords":""},{"title":"Setting up VSCode","type":0,"sectionRef":"#","url":"/guides/setup/vscode-setup","content":"Setting up VSCode","keywords":""},{"title":"Schedule","type":0,"sectionRef":"#","url":"/guides/syllabus/schedule","content":"Schedule","keywords":""},{"title":"CICS 110 Staff Guide","type":0,"sectionRef":"#","url":"/guides/staff","content":"","keywords":""},{"title":"Communication and Organization​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#communication-and-organization","content":"We use Discord for staff communication. If you need to be added to the discord, email bburns@umass.edu. Every week, Ben will send out a message detailing all assignments due that week and any unfinished grading. Meeting notes will be sent in the Discord as well. We use Trello for course organization. This is mostly used for making sure slides and assignments are ready before we need them, status on graded items (grading, needs uploading, uploaded). We also use Trello for processing extension requests. "},{"title":"Labs​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#labs","content":""},{"title":"Office Hours​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#office-hours","content":"Your office hours should either be in-person or over zoom. On the office hours page, please include your NameDay of week and timeRoom or zoom link "},{"title":"Logging​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#logging","content":"In the Discord you'll find a channel named #office-hours. At some point in hour or two after you office hour, post a log to this channel that estimates how many students attended your office hour and what people asked about. An example log: 12/4, 11am - 12pm. 4 students showed up to ask about Project 4. Student A and Student B did not know how to approach todos 3 and 6. Student C was having trouble getting the enumerate in the 5th todo to add items to the set correctly. An equally valid log is 12/4, 11am - 12pm. No students attended my office hour. This is 100% fine, and will probably be the case in the first couple weeks. It's better to log that no one showed up than it is to not log, don't feel pressured to say you had students when you didn't. This is for the instructors so they know if people are coming to office hours and what students are confused about. "},{"title":"Canceling Office Hours​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#canceling-office-hours","content":"If you have to cancel your office hour, you should immediately post a note to Piazza saying your office hour is canceled. Then post to the #office-hours channel. If you miss your office hour, you can post a note to Piazza if you like, but you should post about it in the Discord channel. It's fine if you miss an office hour, just make sure you're honest and up front about it, because otherwise it might look like you're skipping. "},{"title":"Piazza​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#piazza","content":"Each UCA and TA has a day on which you are expected to monitor Piazza. You aren't expected to be monitoring at all times, you're just supposed to be paying extra attention that one day. For me, this means turning on Push Notifications on the mobile app, which I can definitely recommend, but do what ever works best for you. "},{"title":"Responsibilities​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#responsibilities","content":"You should spend up to an hour answering questions that day. If there aren't any new questions posted on your day, go back through the Unresolved section.  This will show all posts that have no student or instructor responses yet, and any posts with unresolved follow ups. Try to sift through these. Most are usually already answered by another post, outdated (e.g. asking about an assignment whose deadline has now passed), are resolved but marked unresolved, or a logistical question UCAs and TAs don't have an answer to. "},{"title":"Ask for help!​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#ask-for-help","content":"If there is a question that you can't answer, but an Instructor can, @ all instructors or a specific instructor in Discord, and include a link to the post. The best example of posts in this category are things like &quot;what's on the next exam?&quot; or &quot;when's project/challenge X being posted?&quot; If questions are coming in faster than the assigned staff can handle, like before a major deadline or exam, don't be afraid to @ all UCAs asking if anyone is free to help out. "},{"title":"Grading​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#grading","content":"Grading is all done via Gradescope. For a guide on how to grade (both at the high level and how to use Gradescope itself), see this guide on the UCA website. "},{"title":"Uploading to Moonami​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#uploading-to-moonami","content":""},{"title":"zyBooks​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#zybooks","content":""},{"title":"Gradescope​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#gradescope","content":""},{"title":"Exams​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#exams","content":"A detailed break down of exam structure can be found in the Guide to Exams. "},{"title":"Before the Exam​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#before-the-exam","content":"A Google sheet needs to be created for check out. There should be subsheet for each section with all student names and emails imported. The sheet should look something like: First Name\tLast Name\tStudent Email\tStaff initialJohn\tDoe\tjdoe@umass.edu J. Random\tHacker\tjrhacker@umass.edu\tBB ...\t...\t...\t... The night before the exam, at least two UCAs should proof read the questions and report any typos or questions they find confusing. A guide of how to do this is here A staff member should get to the lab 15-20 minutes early to straighten out desks so that no two students are sitting too close. If possible, students should not sit in the back row. If it is necessary, pull the desks forward so that staff can freely walk behind the back row. "},{"title":"During the Exam​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#during-the-exam","content":"During the exam, there are three main jobs we have Answering student questionsChecking students out once they finishMonitoring for academic honesty violations At least one staff member should be at the back watching students' screens, monitoring for academic honesty violations. Another staff member should be at the front ready to check out students as they finish. Any other staff are free to walk around asking questions, or stand at the back of the room. "},{"title":"Student check out​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#student-check-out","content":"The staff member in charge of check out should have the check-out sheet open, as well as the exam responses page open. You can find the latter by going to Moodle, then the exam page, then clicking the cog on the right, and selecting Responses. The process for checking out a student is as follows Ask for the student's uCardLook the student up in Responses and verify the student has submittedFind the student in the check out sheet, and put your initials next to their email. Return their uCard and tell them they're free to leave Step 1 is so we know they're who they say they are. Step 2 is to make sure they submitted, otherwise they can leave the exam, reopen their laptop, and keep working. Step 3 is to make sure the student actually attended the lab to take the exam. "},{"title":"Proof Reading and Reporting Typos​","type":1,"pageTitle":"CICS 110 Staff Guide","url":"/guides/staff#proof-reading-and-reporting-typos","content":"To proof read the exam, go to the Exam on Moodle, click the cog on the right, and select Edit quiz. On each question you will a field that says (See questions), which you should open (it's way easier if you open it in a new tab). Then click the Edit dropdown, and select Preview (again, easier in a new tab). If you find a typo in a question, or find the wording confusing or ambiguous, @ the instructor who last edited the question in Discord, including the question number, the name of the version, and the typo you found/what you found confusing. Unless specified otherwise, only Instructors should be editing exam questions directly. "},{"title":"Committing Code","type":0,"sectionRef":"#","url":"/guides/website guides/adding_code_to_repo","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Committing Code","url":"/guides/website guides/adding_code_to_repo#prerequisites","content":"Have a GitHub accountHave Git installed (see here for instructions on how to install Git)Have a local version of the development environment (see here for instructions on how to set it up) Warning Never commit directly to the main or gh-pages branches! This will cause the website to break. "},{"title":"Committing Code​","type":1,"pageTitle":"Committing Code","url":"/guides/website guides/adding_code_to_repo#committing-code-1","content":"Make sure your changes are in a separate branch (not main) If you have already made changes, don't worry. You can still commit them to a new branch.To make a new branch (and use it), type git checkout -b &lt;branch_name&gt; in the terminal.To use an existing branch, type git checkout &lt;branch_name&gt; in the terminal. Add your changes to the staging area. To add all changes, type git add . in the terminal.To add specific changes, type git add &lt;file_path&gt; in the terminal. Commit your changes. To commit all changes, type git commit -m &quot;&lt;commit_message&gt;&quot; in the terminal.To commit specific changes, type git commit &lt;file_path&gt; -m &quot;&lt;commit_message&gt;&quot; in the terminal. Push your changes to GitHub. To push all changes, type git push in the terminal.To push specific changes, type git push &lt;file_path&gt; in the terminal. Create a pull request on GitHub. To create a pull request, go to the repository on GitHub and click the Compare &amp; pull request button.Add a title and description for the pull request.Click the Create pull request button. Merging First, a test build is created to make sure the code compiles.Second, someone must approve the pull request (this can be done by anyone).Third, the pull request is merged to main. This will automatically deploy the changes to the website. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/guides/website guides/getting_started","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Getting Started","url":"/guides/website guides/getting_started#prerequisites","content":"A computer that you can install software on "},{"title":"Steps to setup the local development environment​","type":1,"pageTitle":"Getting Started","url":"/guides/website guides/getting_started#steps-to-setup-the-local-development-environment","content":"Install Node.js: https://nodejs.org/en/download/Install Yarn: Open a terminalRun npm install --global yarn Install Git: https://git-scm.com/downloadsClone the repository: Open a terminal and navigate to the directory you want to clone the repository intoRun git clone https://github.com/CS-110/CS-110.github.io.git Install dependencies: In the same terminal, navigate to the directory you cloned the repository into: cd CS-110.github.ioRun yarn install in the terminal to install the dependencies "},{"title":"Steps to run the local development environment​","type":1,"pageTitle":"Getting Started","url":"/guides/website guides/getting_started#steps-to-run-the-local-development-environment","content":"Note: must have the local development environment setup first In the terminal, navigate to the directory you cloned the repository intoRun yarn start in the terminal to start the local development environment This should open a browser window with the website running locally Search Bar Will Not Work Locally In the local development environment, the search bar will not work. You can get it to work by first building it then serving the local production build: yarn build npx http-server ./build  "},{"title":"Making A Guide","type":0,"sectionRef":"#","url":"/guides/website guides/making_a_guide","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#prerequisites","content":"A code editor (VS Code, Atom, etc.)A local version of the development environment (see here for instructions on how to set it up)An understanding of Markdown (see here for a guide on Markdown) "},{"title":"Creating A Guide​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#creating-a-guide","content":"Create a new file in the guides folder. The file name should be the name of the guide, with the .md extension. For example, if you were making a guide on how to make a guide, you would name the file making_a_guide.md.Create a title for the guide. This is done by adding a # at the start of the file. For example, if you were making a guide on how to make a guide, you would add # Making A Guide at the start of the file.Continue to write markdown content for the guide. "},{"title":"Front Matter​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#front-matter","content":"Front matter is a set of metadata that is used to configure the guide. It is written in YAML and is placed at the top of the guide file. It allows you to configure things such as the guide's title, description, and sidebar position. "},{"title":"Example​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#example","content":"--- title: Making A Guide description: This is a guide on how to make a guide. sidebar_position: 1 ---  For the example above: The guide's title will be Making A Guide. This is used for the guide's page title and as the text in the sidebar for this guide. The guide's description will be This is a guide on how to make a guide. This is used for the guide's page description. I've only found it to be used in the search results. The guide's sidebar position will be 1. This is used to determine the order of the guides in the sidebar. The lower the number, the higher up the guide will be in the sidebar. "},{"title":"Guide Front Matter​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#guide-front-matter","content":"The following is a list of front matter that can be used for guides: title: The guide's title.description: The guide's description.sidebar_position: The guide's sidebar position. "},{"title":"Special Features​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#special-features","content":""},{"title":"Live Code Editor​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#live-code-editor","content":"If you want to add a live python code editor, see this guide: Live Code Editor "},{"title":"Linking To Other Guides​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#linking-to-other-guides","content":"You can use relative file paths to link to other guides. For example, if you had the following folder structure: guides website_guides making_a_guide.md other_guides markdown_tutorial.md  You could link to markdown_tutorial.md from making_a_guide.md by using the following syntax: [Markdown Tutorial](../other_guides/markdown_tutorial.md)  "},{"title":"JavaScript​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#javascript","content":"Expressions defined in curly braces will be evaluated as JavaScript. For example, if you had the following text {1 + 1}  It would be rendered as 1 + 1 =  2 NOTE: To trigger this functionality, somewhere in the file needs to be a JSX element. In this case, I added &lt;&gt;&lt;/&gt; to the line so that it would be rendered as a JSX element. The line looks like &lt;&gt;&lt;/&gt;1 + 1 = {1 + 1}  "},{"title":"JSX and HTML Elements​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#jsx-and-html-elements","content":"You can use JSX elements (React) in the guides too. For example, here is a button that says &quot;Click Me&quot;: Click Me! The code for the button is &lt;button onClick={() =&gt; alert('Hello!')}&gt;Click Me!&lt;/button&gt;  "},{"title":"Images​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#images","content":"You can add images to the guides. Put the image you want somewhere in the guides folder. Then, you can reference the image using the following syntax: ![Image Title](image_path)  For example, if you had the following folder structure: guides website_guides making_a_guide.md images image.png  You could add the image to the guide by using the following syntax: ![Image Title](../images/image.png)  "},{"title":"Extra Resources​","type":1,"pageTitle":"Making A Guide","url":"/guides/website guides/making_a_guide#extra-resources","content":"Docusaurus Guide Teach you how to use Docusaurus (the framework that this website is built on) to make docs and guides. "},{"title":"Making an Announcement","type":0,"sectionRef":"#","url":"/guides/website guides/making_an_announcement","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Making an Announcement","url":"/guides/website guides/making_an_announcement#prerequisites","content":"Have a local version of the development environment (see here for instructions on how to set it up)Have an understanding of Markdown (see here for a guide on Markdown) note Almost all of this comes from the Docusaurus documentation. If you want to learn more about how to make announcements, you should check out the documentation. "},{"title":"Creating An Announcement​","type":1,"pageTitle":"Making an Announcement","url":"/guides/website guides/making_an_announcement#creating-an-announcement","content":""},{"title":"Making the file​","type":1,"pageTitle":"Making an Announcement","url":"/guides/website guides/making_an_announcement#making-the-file","content":"Create a new file in the blog folder. The file should be named YYYY-MM-DD-announcement-title.md, where YYYY is the year, MM is the month, DD is the day, and announcement-title is the title of the announcement. For example, if you were making an announcement on January 1st, 2021, you would name the file 2021-01-01-announcement-title.md. Example Structure: blog 2021-01-01-announcement-title.md  If you think that you may want to include images in your announcement, you should create a folder with the same name as the file, but without the .md extension. For example, if you were making an announcement on January 1st, 2021, you would create a folder named 2021-01-01-announcement-title. Inside this folder, also create a file called index.md. This will be the file we will write our announcement in. Other resources, such as images, can be placed in this folder. This is only necessary if you want to include other files in the announcement. Example Structure (for an announcement with images): blog 2021-01-01-announcement-title index.md image1.png image2.png  "},{"title":"Creating the Front Matter​","type":1,"pageTitle":"Making an Announcement","url":"/guides/website guides/making_an_announcement#creating-the-front-matter","content":"Front matter is a set of metadata that is used to configure the announcement. It is written in YAML and is placed at the top of the announcement file. It allows you to configure things such as the announcement's title, description, and sidebar position. Example:​ --- slug: my-url title: Making an Announcement Guide is Out! authors: [Kobi, Tim] tags: [guides, hello, docusaurus] ---  For the example above: Slug​ The slug is the URL extension for the announcement. For example, if the slug is welcome2, the announcement will be located at /blog/welcome2. If the slug is not specified, it will follow the format /blog/yyyy/mm/dd/announcement-title. For example, if the announcement is named 2021-01-01-announcement-title.md, the slug will be /blog/2021/01/01/announcement-title. Title​ The title is the title of the announcement. This will be displayed at the top of the announcement. Authors​ The authors is a list of authors by their unique id (as defined in authors.yml) that wrote the announcement. This will be displayed at the top of the announcement. Authors can be added to authors.yml by following the instructions here. Tags​ The tags is a list of tags that are associated with the announcement. This will be displayed at the top of the announcement. They don't need to be defined in any other file. Clicking a tag will show all announcements with that tag. "},{"title":"Content of the Announcement​","type":1,"pageTitle":"Making an Announcement","url":"/guides/website guides/making_an_announcement#content-of-the-announcement","content":"The content of the announcement is written in Markdown. You can learn more about Markdown here. It also shares the same additional features as the docs pages. Finally, there is also support for truncated posts. To make a truncated post, add the following to the content of the announcement: &lt;!--truncate--&gt;  Anything below this will not be shown on the announcement page. Instead, a &quot;Read More&quot; button will be shown, which will take the user to the full announcement. "},{"title":"Adding an Author​","type":1,"pageTitle":"Making an Announcement","url":"/guides/website guides/making_an_announcement#adding-an-author","content":"In the blog folder is a file called authors.yml. This file contains a list of authors that have written announcements. To add an author, add a new entry to the list. The entry should be in the following format: author-id: name: Author Name title: Author Title url: https://author-url.com image_url: https://author-image-url.com  For example: kobi: name: Kobi title: Instructor url: https://kobif.github.io/block-game/ image_url: http://images4.fanpop.com/image/user_images/2069000/Unnoticed-2069013_266_394.jpg  Author ID​ The author-id is the unique id of the author. This is used to associate the author with the announcement. This must be unique. This is also what is used in a blog post's authors field. Name​ The name is the name of the author. This is what will be displayed on the announcement. This does not need to be unique. Title​ The title is the title of the author. In our case, this is the role of the author for the course. This will be displayed on the announcement. URL​ The url is a URL that will be linked to the author's name on the announcement. This is optional. Image URL​ The image_url is a URL to an image that will be displayed next to the author's name on the announcement. This is optional. "},{"title":"Markdown Tutorial","type":0,"sectionRef":"#","url":"/guides/website guides/markdown_tutorial","content":"","keywords":""},{"title":"Resources​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#resources","content":"Markdown Cheat Sheet: https://www.markdownguide.org/cheat-sheet/Basic Syntax Guide (Way better than this webpage): https://www.markdownguide.org/basic-syntax/ "},{"title":"Prerequisites​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#prerequisites","content":"An environment to write markdown documents. Some online editors to play around with: StackEdit.Dillinger  "},{"title":"Main Ideas of Markdown​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#main-ideas-of-markdown","content":"In markdown, you can write text and add formatting to it. You can also add links, images, and other elements to your text. This does not cover everything that markdown can do, but it should be enough to get you started. "},{"title":"Sections​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#sections","content":"You can create sections by using the # symbol. The more # symbols you use, the smaller the section will be. For example, # will create a large section, ## will create a medium section, and ### will create a small section. For example: # Hello World will create a large section with the text Hello World in it. ## Hello World will create a medium section with the text Hello World in it. ### Hello World will create a small section with the text Hello World in it. "},{"title":"Text Formatting​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#text-formatting","content":"You can add formatting to your text by using the following symbols: * or _ for italics** or __ for bold*** or ___ for bold and italics To use them, surround the text you want to format with the symbols. For example, *italics* will create italics, **bold** will create bold, and ***bold and italics*** will create bold and italics. "},{"title":"Links and Images​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#links-and-images","content":"You can add links and images to your text with the following syntax: [Link Text](Link URL) ![Image Text](Image URL)  To do a link, surround the text you want to be the link with [] and then put the link in (). For example, [Google](https://google.com) will create a link to google with the text Google in it. To do an image, do the same but put an ! in front. For example, ![Google Logo](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png) will create an image of the google logo with the text Google Logo in it. "},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#code-blocks","content":"There are two types of code blocks: inline and multiline. Inline code blocks are used to show code in the middle of a sentence. Multiline code blocks are used to show code on their own line. To do an inline code block, surround the code with `. For example, `print('Hello World')` will create an inline code block with the text print('Hello World') in it. To do a multiline code block, surround the code with ```. For example: ``` print('Hello World') ```  will create a multiline code block with the text print('Hello World') in it. On the line where you start the code block, you can add a language to the code block. For example, ```py will create a python code block. This will add syntax highlighting to the code block. Here is an example of a python code block: print('Hello World')  And the markdown for it: ```py print('Hello World') ```  "},{"title":"Lists​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#lists","content":"You can create lists by using the following symbols: - for unordered lists1. for ordered lists To create an unordered list, put - in front of each item in the list. For example: - Item 1 - Item 2 - Item 3  will create an unordered list with the items Item 1, Item 2, and Item 3. To create an ordered list, put {a number}. in front of each item in the list. For example: 1. Item 1 2. Item 2 3. Item 3  will create an ordered list with the items Item 1, Item 2, and Item 3. "},{"title":"Tables​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#tables","content":"You can create tables by using the following syntax: | Column 1 | Column 2 | Column 3 | | -------- | -------- | -------- | | Row 1 | Row 1 | Row 1 | | Row 2 | Row 2 | Row 2 | | Row 3 | Row 3 | Row 3 |  This will create a table with the columns Column 1, Column 2, and Column 3 and the rows Row 1, Row 2, and Row 3. "},{"title":"Horizontal Rule (Line)​","type":1,"pageTitle":"Markdown Tutorial","url":"/guides/website guides/markdown_tutorial#horizontal-rule-line","content":"You can create a horizontal rule by using the following syntax: ---  This will create a horizontal rule. "},{"title":"Timeline","type":0,"sectionRef":"#","url":"/guides/syllabus/timeline","content":"","keywords":""},{"title":"🧱 Lecture 1 Introduction (Tu 2/7)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-1-introduction-tu-27","content":"introduction to the course, administrative details, submission policy, collaboration, tokens, Gradescope, Moodle, website, an example of a Python program using a GUI. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading","content":"MoodleWebsiteSyllabus "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics","content":"Course administration Moodle (where deadlines and submission instructions are)Website (where information is - guides, assignments, etc.)Communication (Piazza, Trello - email)Grades (how we compute grades)Collaboration policy (collaborate, submit as groups, annotate with names)Gradescope (how to submit - link to guide)Tokens and how they workSubmission policy Submit to Gradescope or MoodleAccommodation students fit into submission (1 day, no penalty) Extensions (email to Trello - be explicit about what is acceptable) What is programming (computer/software organization overview)An example Python program "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread","content":"None at this time. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes","content":"None at this time. "},{"title":"🧱 Lecture 2 Programming and Python (Th 2/9)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-2-programming-and-python-th-29","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-1","content":"Chapter 1: Introduction to Programming "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-1","content":"Programming with PythonDevelopment environment and setup (this is a demonstration) VSCodeBasic I/OPython shellWriting a programRunning a programWhat is an error and what does it look like Demonstrate the use of the Python shellDemonstrate a basic console program with I/O (input, print)Demonstrate a program that uses a GUI using tkinter. The purpose of this is to excite students that they will be able to write a similar program. "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-1","content":"None at this time. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-1","content":"Only use print, nothing fancyOnly use input, nothing fancyDemonstrate a basic GUI using tkinter. Something students will be able to create by the end of this class. "},{"title":"🧪 Lab 1 (Fr 2/10)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-1-fr-210","content":"Python setup and writing a program from scratch to solve a problem.Explain what an editor like VSCode is and why it is useful for the programmer.Explain how to create a folder, create a Python file, start coding. "},{"title":"🧱 Lecture 3 Arithmetic Expressions and Evaluation (Tu 2/14)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-3-arithmetic-expressions-and-evaluation-tu-214","content":"arithmetic expressions and various operators. Spend some time on modulo - students often are confused about this. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-2","content":"Chapter 2: Variables and Expressions "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-2","content":"Variables and assignmentsIdentifiersObjectsNumeric typesArithmetic expressions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-2","content":"None at this time. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-2","content":"None at this time. "},{"title":"🧱 Lecture 4: Variables and Assignment (Th 2/16)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-4-variables-and-assignment-th-216","content":"cover variables, assignments, identifiers. Introduce control flow diagrams and memory traces. Introduce assert to prove a variable contains a value. This will require the == operator. This is ok. Explain what equivalence means here. Two values are equivalent, two variables referencing the same value are equivalent. Variables do not hold values, they refer to places in memory that hold values. Introduce a module (Math) explain how it is used. Introduce tkinter and show how we can get input using a GUI. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-3","content":"Chapter 2: Variables and Expressions "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-3","content":"Python expressionsDivision and moduloModule basicsMath module`Representing textGUI "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-3","content":"assert is introduced here, this will be a common thread. Use it to prove everything that is introduced. assert a == 4.Control flow diagrams are introduced, this will continue forwardMemory trace diagrams are introduced, this will continue forwardBasic GUI modals are introduced using tkinter.simpledialog. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-3","content":"Transition students form basic I/O to GUI. Explain the difference and remind them that both are very important to know about in future classes. They must be able to run a Python program from the command line as well as from within VSCode.Introduce the conditional main construct: if __name__ == '__main__:'. It will be important to know about this now so we can execute programs easily. The associated reading is in 2.8 Module basics. Show the very basic difference between running a Python file as a script or using import to treat it like a module.  "},{"title":"🧪 Lab 2 (Fr 2/17)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-2-fr-217","content":"How to use assert with basic variables and their valuesHow to use VSCode effectivelyHow to use the VSCode debugger with basic variables and their values Step, step over, step in, etc.Watching variables and their valuesDo not talk about the stack (to early for that, wait until functions) Broken programs and invalid variable names - exercise: fix theseLearn how to find and read Python documentationComplete an exercise using assert and the debugger "},{"title":"🧱 Lecture 5: Data Types (Tu 2/21)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-5-data-types-tu-221","content":"covers the string and list data types. Demonstration programs that use them, show control flow and memory diagrams, use GUI modals for I/O along with console examples. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-4","content":"Chapter 3: Types "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-4","content":"String basicsList basicsTuple basicsSet basics "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-4","content":"Use memory diagram to show the different representations of data types.Use control flow diagrams to explain any code that is writtenUse assert to prove the code that is written.Use GUI modals from tkinter for I/O.Use console I/O to show an alternative to GUI.Show how to use the VSCode debugger. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-4","content":"It is important to emphasize to students the control flow diagram and memory trace diagrams to gain understanding on how programs flow and what data structures look like in memory. This is an important developmental part of creating a mental model of computation. This should not be underestimated. You must demonstrate control flow and memory diagrams at this stage. It will provide the necessary scaffolding for the next topic.Use the debugger to trace through the code. Connect it with the control flow and memory diagram. Show them the basics of understanding the code through the debugger. Connect the changes in program state to what is displayed in the debugger. "},{"title":"🧱 Lecture 6: Representation (Th 2/23)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-6-representation-th-223","content":"Show the representation of types, how to convert from one to another (string to int/float), binary numbers, and the formatting of strings. Again, use control flow diagrams and memory diagrams to demonstrate how execution works and how the data is organized in memory. Use GUI modals for I/O along with console examples. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-5","content":"Chapter 3: Types "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-5","content":"Dictionary basicsType conversionsBinary numbersString formatting "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-5","content":"Use memory diagram to show the different representations of data types.Use control flow diagrams to explain any code that is writtenUse assert to prove the code that is written.Use GUI modals from tkinter for I/O.Use console I/O to show an alternative to GUI.Show how to use the VSCode debugger. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-5","content":"It is important to emphasize to students the control flow diagram and memory trace diagrams to gain understanding on how programs flow and what data structures look like in memory. This is an important developmental part of creating a mental model of computation. This should not be underestimated. You must demonstrate control flow and memory diagrams at this stage. It will provide the necessary scaffolding for the next topic.Use the debugger to trace through the code. Connect it with the control flow and memory diagram. Show them the basics of understanding the code through the debugger. Connect the changes in program state to what is displayed in the debugger. "},{"title":"🧪 Lab 3 (Fr 2/24)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-3-fr-224","content":"How to use assert effectivelyHow to use VSCode effectivelyHow to use the VSCode debuggerComplete an exercise using assert and the debugger "},{"title":"🧱 Lecture 7: Exam 1 (Tu 2/28)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-7-exam-1-tu-228","content":""},{"title":"📚 Topic Covered​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-topic-covered","content":"This is the first exam for the course. It will cover the following: Chapter 1: Introduction to ProgrammingChapter 2: Variables and ExpressionsChapter 3: TypesTopics presented in Lectures 1-6Material covered in Labs 1-3 "},{"title":"📝 Exam Structure​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-exam-structure","content":"You will have 75 minutes to complete Exam 1The exam will consist of the following question types: Multiple choiceMatchingTrue/FalseWriting code (precise Python syntax is not required, but you will need to be close enough for it to be considered a solution) The exam will have approximately 30-40 questions.The exam is closed book, closed notes, and closed computer.You must complete the exam individually "},{"title":"🧱 Lecture 8: Branching Basics with Equality (Th 3/2)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-8-branching-basics-with-equality-th-32","content":"Making decisions in an algorithm. Control flow diagrams demonstrating branching and what it looks like. Use simple I/O (input/print) to write a program along with a control flow diagram. Discuss equality and what it means. How are objects equal? How are they not equal? Demonstrate all of this with code, control flow diagrams, and memory traces. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-6","content":"Chapter 4: Branching "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-6","content":"Basics of if/else branchesWhat are &quot;equal&quot; valuesDetecting equal values with branchesDetecting ranges with branches "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-6","content":"Control flow diagrams! This topic should start with control flow diagrams! Before any code is written, a control flow diagram should be introduced and displayed for students. Students must understand the concept of decision and how it changes execution.Equality is an important concept. What does it mean for one thing to be equal to another? There must be a discussion of equality - is a string &quot;1&quot; equal to the integer 1? Why or why not? This must be hammered into their heads.The assert statement must be used as part of the presentation to demonstrate that we are proving that variables contain the values we expect. Examples should include branching that is predictable and values that should be held in variables at the end of program.pre/post conditions "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-6","content":"It is imperative that students become very familiar with control flow diagrams at this state. They will be required to use them to answer questions in tests.It is critical that students understand completely memory tracing and how it works so they can understand how a program changes state. They will need to know this to complete exams.Students must be using assert for everything they writeStudents must be comfortable with the debugger at this stage. Debugging conditional statements is a critical skill. "},{"title":"🧪 Lab 4 (Fr 3/1)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-4-fr-31","content":"What do you do when your code doesn't work?Demonstrate debugging a program with a broken conditional Use print statementsUse the VSCode debugger What do you do when you are stuck? Use the &quot;Getting Unstuck Guide&quot; guide to show students what to do when they are not sure what is wrong.Complete a debugging exercise. "},{"title":"🧱 Lecture 9: Conditional Branching with Inequality (Tu 3/7)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-9-conditional-branching-with-inequality-tu-37","content":"Making decisions in an algorithm. Control flow diagrams demonstrating branching with inequality. How does this relate to ranges and gaps in decisions. Demonstrate this with a program in Python, a control flow diagram, and a memory trace. Discuss various predicates such as equality, inequality, membership and identity with in. Demonstrate a program detecting multiple features along with a control flow diagram, memory trace, and the Python code that goes along with it. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-7","content":"Chapter 4: Branching "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-7","content":"Detecting ranges using logical operatorsDetecting ranges with gapsDetecting multiple features with branchesComparing data types with common errorsMembership and identity operatorsOrder of evaluationCode blocks and indentationConditional expressions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-7","content":"Control flow diagrams! This topic should start with control flow diagrams! Before any code is written, a control flow diagram should be introduced and displayed for students. Students must understand the concept of decision and how it changes execution.Equality is an important concept. What does it mean for one thing to be equal to another? There must be a discussion of equality - is a string &quot;1&quot; equal to the integer 1? Why or why not? This must be hammered into their heads.Logical operators must be demonstrated through the use of control flow diagrams. What does it mean for one object to be less than another? How does this impact the flow of control in a program? Diagrams are critical here!The assert statement must be used as part of the presentation to demonstrate that we are proving that variables contain the values we expect. Examples should include branching that is predictable and values that should be held in variables at the end of program.pre/post conditions "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-7","content":"It is imperative that students become very familiar with control flow diagrams at this state. They will be required to use them to answer questions in tests.It is critical that students understand completely memory tracing and how it works so they can understand how a program changes state. They will need to know this to complete exams.Students must be using assert for everything they writeStudents must be comfortable with the debugger at this stage. Debugging conditional statements is a critical skill. "},{"title":"🧱 Lecture 10: Looping Basics (Th 3/9)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-10-looping-basics-th-39","content":"Present this material using a control flow diagram for a loop (before any code is written). Explain how the basic looping mechanism works and how it is executed by a machine. Introduce a while loop using Python and show how it works using a control flow diagram and memory trace. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-8","content":"Chapter 5: Loops "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-8","content":"Loops (general)While loopsCountingFor loops "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-8","content":"Control flow diagrams! This topic should start with control flow diagrams! Before any code is written, a control flow diagram should be introduced and displayed for students. Students must understand the concept of looping and how it changes execution.The assert statement must be used as part of the presentation to demonstrate that we are proving that variables contain the values we expect. Examples should include looping that is predictable and values that should be held in variables at the end of program.Present pre/post conditions of the loop and the concept of a loop invariant. Show students how to use assert to prove properties of a loop before and after each iteration of a loop.Introduce the notion of architectural design of programs. Although these are simple programs at the moment, introducing an element of design and thinking about a program as a physical artifact is important so students become aware of decisions they make in their design. Think before you code! "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-8","content":"Again, control flow diagrams and memory tracing! Super important for students to understand completely. They need a mental model for program execution. Design, draw, and explain before coding. Students should not code until they understand the design. This should be emphasized.Continue to emphasize assert with everything that is presented. We must ensure that students know how to &quot;prove&quot; that their code works.Debugging is crucial - use the VSCode debugger liberally with examples and demonstrations. Make sure to use print to show students how to see how their program is changing state.Reiterate what to do when a student is stuck and point them to the &quot;Getting Unstuck Guide&quot;. "},{"title":"🧪 Lab 5 (Fr 3/10)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-5-fr-310","content":"What do you do when your loop is broken?How to debug a loop with prints.How to debug a loop with the VSCode debugger.When you are stuck, what do you do? Review the &quot;Getting Unstuck Guide&quot;Complete a debugging exercise "},{"title":"🏝️ Spring Recess (Tu 3/14)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#️-spring-recess-tu-314","content":"Spend time reading/reviewing Chapter 5 "},{"title":"🏝️ Spring Recess (Th 3/16)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#️-spring-recess-th-316","content":"Spend time reading/reviewing Chapter 5 "},{"title":"🧱 Lecture 11: Looping Details (Tu 3/21)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-11-looping-details-tu-321","content":"Introduce the for loop and the range() function as an alternative to the while loop. Explain how they are different and when each should be used. Discuss incremental development of a program and the importance of program design before implementation using control flow diagrams and architectural drawings. These diagrams will be simple at this stage, but it will start students off on the right foot by thinking before coding. This is something that should be emphasized through out the rest of the course. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-9","content":"Chapter 5: Loops "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-9","content":"Review while and for loops again (briefly)The range() functionWhile vs for loopsNested loopsDeveloping programs incrementallyBreak and continueLoop else (special to Python - perhaps cover this in lab?)The enumerate() function "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-9","content":"Control flow diagrams! This topic should start with control flow diagrams! Before any code is written, a control flow diagram should be introduced and displayed for students. Students must understand the concept of looping and how it changes execution.The assert statement must be used as part of the presentation to demonstrate that we are proving that variables contain the values we expect. Examples should include looping that is predictable and values that should be held in variables at the end of program.Present pre/post conditions of the loop and the concept of a loop invariant. Show students how to use assert to prove properties of a loop before and after each iteration of a loop.Introduce the notion of architectural design of programs. Although these are simple programs at the moment, introducing an element of design and thinking about a program as a physical artifact is important so students become aware of decisions they make in their design. Think before you code! "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-9","content":"Again, control flow diagrams and memory tracing! Super important for students to understand completely. They need a mental model for program execution. Design, draw, and explain before coding. Students should not code until they understand the design. This should be emphasized.Continue to emphasize assert with everything that is presented. We must ensure that students know how to &quot;prove&quot; that their code works.Debugging is crucial - use the VSCode debugger liberally with examples and demonstrations. Make sure to use print to show students how to see how their program is changing state.Reiterate what to do when a student is stuck and point them to the &quot;Getting Unstuck Guide&quot;. "},{"title":"🧱 Lecture 12: Nested Data Types (Th 3/23)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-12-nested-data-types-th-323","content":"This lecture focuses on nested data types. Lists of lists, dictionaries of dictionaries, dictionaries of lists, lists of dictionaries, etc. Memory diagrams are a must here. Students must have a visual of what this looks like in memory. Examples of why nested data types are important. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-10","content":"Chapter 8: More on Strings, Lists, and Dictionaries "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-10","content":"Advanced branching and loop examplesNested data types (arrays in arrays, dictionaries of dictionaries of arrays)Debugging branching and loopsCounting how many steps a loops takes (intuitive efficiency) with branchesWhen to use which kind of loop and/or branchWhen to use break and continue "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-10","content":"Control flow diagrams and state tracing is a must here. Students will need to fully understand how to look at Python code and translate it into a control diagram and trace it. Likewise, they will need to be able to translate a control flow diagram into Python code.Focusing on assert and loop invariants is a must. Every loop should have a comment indicating the invariant(s) and an assert testing the invariant. We want students to understand what an invariant is so they are prepared for future theoretical courses.Pre/post conditions for loops.Students must have an intuitive sense of how many steps a loop takes to complete. This week should focus on the steps of a nested loop and develop some simple formulas to quantify the number of steps taken to complete a loop given some input. Do not discuss Big-O here, but develop an intuitive notion. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-10","content":"We want students to be confident in their ability to use loops and conditionals. To do that we need to make sure that they have ownership of the material. This requires lots of exercises. They should complete many exercises involving loops and branching.There are many methods associated with built-in data types. They should be presented in the context of examples rather than just a list of what exists (boring). Solid examples that exemplify the associated data type methods is important to provide context and clarity for the why and not just the how. "},{"title":"🧪 Lab 6 (Fr 3/24)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-6-fr-324","content":"An in-depth look at the various methods available to the different data types.String methodsList methodsDictionary methodsExamples of how they are usedRead documentation on data typesUse VSCode debugger to debug broken codeComplete an exercise using a selection of data type methods "},{"title":"🧱 Lecture 13: Nested Iteration (Tu 3/28)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-13-nested-iteration-tu-328","content":"Advanced examples of iterating over nested data types. Use control flow diagrams and memory tracing to help students see the what is going on. Discuss the number of steps it takes to complete a loop intuitively. Demonstrate an application that uses nested iteration using a GUI. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-11","content":"Chapter 8: More on Strings, Lists, and Dictionaries "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-11","content":"Loops for processing input (loop until some condition user inputs) branches nested in loops (command line / input processing) Loops for processing data (loop until end of data) branches evaluating that data Nested loops for processing nested objects (an array of strings).Command line argumentsList comprehensions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-11","content":"Control flow diagrams and state tracing is a must here. Students will need to fully understand how to look at Python code and translate it into a control diagram and trace it. Likewise, they will need to be able to translate a control flow diagram into Python code.Focusing on assert and loop invariants is a must. Every loop should have a comment indicating the invariant(s) and an assert testing the invariant. We want students to understand what an invariant is so they are prepared for future theoretical courses.Pre/post conditions for loops.Students must have an intuitive sense of how many steps a loop takes to complete. This week should focus on the steps of a nested loop and develop some simple formulas to quantify the number of steps taken to complete a loop given some input. Do not discuss Big-O here, but develop an intuitive notion. "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-11","content":"We want students to be confident in their ability to use loops and conditionals. To do that we need to make sure that they have ownership of the material. This requires lots of exercises. They should complete many exercises involving loops and branching.There are many methods associated with built-in data types. They should be presented in the context of examples rather than just a list of what exists (boring). Solid examples that exemplify the associated data type methods is important to provide context and clarity for the why and not just the how. "},{"title":"🧱 Lecture 14: Exam 2 (Th 3/30)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-14-exam-2-th-330","content":""},{"title":"📚 Topic Covered​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-topic-covered-1","content":"This is the second exam for the course. It will cover the following: Chapter 4: BranchingChapter 5: LoopsChapter 8: More on Strings, Lists, and DictionariesTopics presented in Lectures 7-13Material covered in Labs 4-6 "},{"title":"📝 Exam Structure​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-exam-structure-1","content":"You will have 75 minutes to complete Exam 2The exam will consist of the following question types: Multiple choiceMatchingTrue/FalseWriting code (precise Python syntax is not required, but you will need to be close enough for it to be considered a solution) The exam will have approximately 30-40 questions.The exam is closed book, closed notes, and closed computer.You must complete the exam individually "},{"title":"🧪 Lab 7 (Fr 3/31)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-7-fr-331","content":"An in-depth look at the various methods available to the different data types.String methodsList methodsDictionary methodsExamples of how they are usedRead documentation on data typesUse VSCode debugger to debug broken codeComplete an exercise using a selection of data type methods "},{"title":"🧱 Lecture 15 Functions (Tu 4/4)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-15-functions-tu-44","content":"Introduce the basics of functions. Focus on top-down design and how to decompose a problem into smaller parts. Define functions for the smaller parts. How input/output to functions work. What does all of this look like in a control flow diagram? "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-12","content":"Chapter 6: Functionsdoctest (testing Python functions) "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-12","content":"User-defined functionsTop-down design / bottom-up designDynamic typingReasons for defining functionsMathematical functions and function stubsFunctions with branches and loopsFunction argumentsTesting functions using doctest "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-12","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a functionMemory tracing with functions (separate memory for now, a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracingTesting functions using assert and doctest "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-12","content":"At this point in the class we want students to have a firm grasp of programming using the basic primary constructs of the language: branching, loops, and functions. We also want them to know how to evaluate a problem and solve it using a programming language. We want them to be able to break that problem down into smaller parts and write functions. We also want them to be capable of using the built-in types and functions to solve those problems.Students should know how to proceed when they are stuck. They should have the tools from the previous 6 weeks that will help them debug a program and determine where the problem is. We should probably have a rule that they can't ask a question unless they can narrow the scope of the issue to 5 lines of code. "},{"title":"🧱 Lecture 16 Functions and Files (Th 4/6)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-16-functions-and-files-th-46","content":"Keyword arguments, multiple return values, documenting functions. Combine this with reading/writing files. Introduce CSV files and why they are important and how are they used. Relate this to data science and the built-in library for processing CSV files. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-13","content":"Chapter 10: Filesdoctest "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-13","content":"Keyword arguments and default parameter valuesCommon errorsArbitrary argument listsMultiple return valuesDocumenting functionsInteracting with file systemsReading filesWriting filesBinary dataCommand-line argumentsThe with statementComma separated value files (CSV) "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-13","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a functionMemory tracing with functions (separate memory for now, a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracingLookup documentation for Python's file functions and objectsUse doctest to test functions "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-13","content":"At this point in the class we want students to have a firm grasp of programming using the basic primary constructs of the language: branching, loops, and functions. We also want them to know how to evaluate a problem and solve it using a programming language. We want them to be able to break that problem down into smaller parts and write functions. We also want them to be capable of using the built-in types and functions to solve those problems.Students should know how to proceed when they are stuck. They should have the tools from the previous 6 weeks that will help them debug a program and determine where the problem is. We should probably have a rule that they can't ask a question unless they can narrow the scope of the issue to 5 lines of code. "},{"title":"🧪 Lab 8 (Fr 4/7)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-8-fr-47","content":"How do you debug a function? Demonstrate how to debug a function using print statements as well as the VSCode debugger. Show students how to see the values of parameters and local variables and how to set break points in a function and how to step through and into a program with functions.An in-depth look at the CSV module. Explore how CSV file are read and written to. Look at how to process them. Look at how to read a CSV file into a dictionary and process the information in that format.Complete an exercise using the CSV module where students need to write several functions extracting information from the CSV data after it has been read in. After manipulation, the data is written to a different CSV file. Students should draw control flow diagrams and state diagrams for their functions. "},{"title":"🧱 Lecture 17 Variable Scope and Function Objects (Tu 4/11)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-17-variable-scope-and-function-objects-tu-411","content":"Discuss variable scope and what that means. How does variable scope change in the context of functions? What is a namespace and why is that an important aspect of software engineering? "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-14","content":"Chapter 7: Function Scope, Function Objects, and Modules "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-14","content":"Scope of variables and functionsNamespaces and scope resolutionFunctions are objects "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-14","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a function and emphasize scopeMemory tracing with functions (separate memory for now, a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracing "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-14","content":"Present additional tkinter dialogsDiscuss parameter validation (does the function get what you expect)Discuss error checking in a function to build robust functionsPresent &quot;defensive programming&quot;Demonstrate how to use assert to test function return values "},{"title":"🧱 Lecture 18 Modules and Event Loops (Th 4/13)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-18-modules-and-event-loops-th-413","content":"What is a module and why are they important? How do you use a module? How do you write a module? What is an interface? How do you design an interface and implement it with a module? How does this differ from the standard library? What is an event loop and how does it relate to a GUI? Write a GUI that uses an event loop. "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-15","content":"Chapter 7: Function Scope, Function Objects, and Modulestkinter events and mainloop() "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-15","content":"Finding modulesImporting specific names form modulesExecuting modules as scriptsReloading modulesPackagesStandard libraryEvent loops "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-15","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a function and emphasize scopeMemory tracing with functions (separate memory for now, a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracing "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-15","content":"Present additional tkinter dialogsDemonstrate the creation of a module with module scoped variables and functions that can be importedDiscuss parameter validation (does the function get what you expect)Discuss error checking in a function to build robust functionsPresent &quot;defensive programming&quot;Demonstrate how to use assert to test function return valuesDemonstrate how to use assert to test a module "},{"title":"🧪 Lab 9 (Fr 4/14)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-9-fr-414","content":"Design an interface and implement that interface with a module.Write a module conforming to the interface that uses an event loop and GUI.How do you debug that module and GUI?Where can you use print statements? How do you use the debugger? "},{"title":"🏝️ Patriot's Day Holiday (Tu 4/18)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#️-patriots-day-holiday-tu-418","content":""},{"title":"🧱 Lecture 19: Recursion Basics (Th 4/20)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-19-recursion-basics-th-420","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-16","content":"Chapter 9: Recursion "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-16","content":"Recursive functionsCreating a recursive functionRecursive math functions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-16","content":"Using assert to test function parameter valuesDrawing control flow diagrams for a function and emphasize scopeMemory tracing with functions (a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracing "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-16","content":"Demonstrate a memory trace of a recursive function. Highlight each invocation of a recursive call creates a different call frame on the stack with its own local variables. "},{"title":"🧪 Lab 10 (Fr 2/21)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-10-fr-221","content":""},{"title":"🧱 Lecture 20: Recursion in Depth (Tu 4/25)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-20-recursion-in-depth-tu-425","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-17","content":"Chapter 9: RecursionThe json moduleThe http module "},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-17","content":"Recursive exploration of all possibilitiesRecursively processing a listRecursively processing a dictionary of dictionariesIterative map, filter, and reduceRecursive map, filter, and reduceComparison of map, filter, and reduce with list comprehensions "},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-17","content":"Using assert to test function parameter valuesUsing doctest to test functionsDrawing control flow diagrams for a function and emphasize scopeMemory tracing with functions (a stack for recursion)Use the debugger to trace through a programUse Python Tutor to demonstrate memory tracing "},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-17","content":"Read in a deeply structured JSON file and recurse over itRead in a deeply structured JSON document from web and recurse over it "},{"title":"🧱 Lecture 21: Exam 3 (Th 4/27)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-21-exam-3-th-427","content":"This is the third exam for the course. It will cover the following: Chapter 7: Function Scope, Function Objects, and ModulesChapter 6: FunctionsChapter 9: RecursionChapter 10: FilesTopics presented in Lectures 14-20Material covered in Labs 7-10 "},{"title":"📝 Exam Structure​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-exam-structure-2","content":"You will have 75 minutes to complete Exam 3The exam will consist of the following question types: Multiple choiceMatchingTrue/FalseWriting code (precise Python syntax is not required, but you will need to be close enough for it to be considered a solution) The exam will have approximately 30-40 questions.The exam is closed book, closed notes, and closed computer.You must complete the exam individually "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-18","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-18","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-18","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-18","content":""},{"title":"🧪 Lab 11 (Fr 4/16)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-11-fr-416","content":""},{"title":"🧱 Lecture 22 Classes (Tu 5/2)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-22-classes-tu-52","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-19","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-19","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-19","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-19","content":""},{"title":"🧱 Lecture 24 Classes (Th 5/4)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-24-classes-th-54","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-20","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-20","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-20","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-20","content":""},{"title":"🧪 Lab 12 (Fr 5/3)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-12-fr-53","content":""},{"title":"🧱 Lecture 24 Classes (Tu 5/9)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-24-classes-tu-59","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-21","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-21","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-21","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-21","content":""},{"title":"🧱 Lecture 25: Exam 4 (Cumulative) (Th 5/11)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-25-exam-4-cumulative-th-511","content":"This is the fourth exam for the course. It will cover the following: Chapter 1: Introduction to Programming Chapter 2: Variables and Expressions Chapter 3: Types Chapter 4: Branching Chapter 5: Loops Chapter 6: Functions Chapter 7: Function Scope, Function Objects, and Modules Chapter 8: More on Strings, Lists, and Dictionaries Chapter 9: Recursion Chapter 10: Files Topics presented in Lectures 1-24 Material covered in Labs 1-12 Chapter ?: ??? Chapter ?: ??? Topics presented in Lectures 14-20 Material covered in Labs 7-10 "},{"title":"📝 Exam Structure​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-exam-structure-3","content":"You will have 75 minutes to complete Exam 4The exam will consist of the following question types: Multiple choiceMatchingTrue/FalseWriting code (precise Python syntax is not required, but you will need to be close enough for it to be considered a solution) The exam will have approximately 30-40 questions.The exam is closed book, closed notes, and closed computer.You must complete the exam individually "},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-22","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-22","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-22","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-22","content":""},{"title":"🧪 Lab 13 (Fr 5/10)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lab-13-fr-510","content":""},{"title":"🧱 Lecture 26 Conclusion (Tu 5/16)​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-lecture-26-conclusion-tu-516","content":""},{"title":"📖 Reading​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-reading-23","content":""},{"title":"📚 Primary Topics​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-primary-topics-23","content":""},{"title":"🧶 Thread​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-thread-23","content":""},{"title":"📝 Notes​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#-notes-23","content":""},{"title":"Important Dates​","type":1,"pageTitle":"Timeline","url":"/guides/syllabus/timeline#important-dates","content":"First day of classes Monday February 6Last day to add or drop any class with no record – Matriculated Undergraduate and Non-degree students Monday February 13Holiday - Presidents’ Day Monday February 20Last day to add or drop any class with no record – Matriculated Graduate students Tuesday February 21Monday class schedule will be followed Wednesday February 22Spring recess begins Sunday March 12Classes resume Monday March 20Last day to Drop with &quot;DR&quot; - Graduate Monday April 10Last day to Drop with ‘W’ and select 'P/F' - Undergraduate, Stockbridge, UWW Monday April 10Patriot’s Day holiday begins Saturday April 15Classes Resume Wednesday April 19Registration begins for Fall 2023 Wednesday April 19Last day of classes Wednesday May 17Reading Day Thursday May 18Final examinations begin Friday May 19Second Reading Day Saturday May 20Last day of final examinations, semester ends Thursday May 25Commencement Weekend begins Friday May 26Commencement Weekend ends Sunday May 28Final grades due by Midnight Thursday June 1 "},{"title":"Test","type":0,"sectionRef":"#","url":"/labs","content":"Test aaaaaaa","keywords":""},{"title":"Test","type":0,"sectionRef":"#","url":"/lectures","content":"Test aaaaaaa","keywords":""}]